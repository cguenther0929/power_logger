
power_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef2c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012ec  0800f118  0800f118  0001f118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010404  08010404  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08010404  08010404  00020404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801040c  0801040c  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801040c  0801040c  0002040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010410  08010410  00020410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08010414  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004654  20000204  08010618  00030204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004858  08010618  00034858  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002792f  00000000  00000000  0003022d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004202  00000000  00000000  00057b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  0005bd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00024425  00000000  00000000  0005d4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001f050  00000000  00000000  000818f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c0d29  00000000  00000000  000a0945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0016166e  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000015e8  00000000  00000000  001616c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000075a0  00000000  00000000  00162cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000204 	.word	0x20000204
 8000204:	00000000 	.word	0x00000000
 8000208:	0800f0fc 	.word	0x0800f0fc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000208 	.word	0x20000208
 8000224:	0800f0fc 	.word	0x0800f0fc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_uldivmod>:
 80011e8:	b953      	cbnz	r3, 8001200 <__aeabi_uldivmod+0x18>
 80011ea:	b94a      	cbnz	r2, 8001200 <__aeabi_uldivmod+0x18>
 80011ec:	2900      	cmp	r1, #0
 80011ee:	bf08      	it	eq
 80011f0:	2800      	cmpeq	r0, #0
 80011f2:	bf1c      	itt	ne
 80011f4:	f04f 31ff 	movne.w	r1, #4294967295
 80011f8:	f04f 30ff 	movne.w	r0, #4294967295
 80011fc:	f000 b96e 	b.w	80014dc <__aeabi_idiv0>
 8001200:	f1ad 0c08 	sub.w	ip, sp, #8
 8001204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001208:	f000 f806 	bl	8001218 <__udivmoddi4>
 800120c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001214:	b004      	add	sp, #16
 8001216:	4770      	bx	lr

08001218 <__udivmoddi4>:
 8001218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800121c:	9e08      	ldr	r6, [sp, #32]
 800121e:	460d      	mov	r5, r1
 8001220:	4604      	mov	r4, r0
 8001222:	468e      	mov	lr, r1
 8001224:	2b00      	cmp	r3, #0
 8001226:	f040 8083 	bne.w	8001330 <__udivmoddi4+0x118>
 800122a:	428a      	cmp	r2, r1
 800122c:	4617      	mov	r7, r2
 800122e:	d947      	bls.n	80012c0 <__udivmoddi4+0xa8>
 8001230:	fab2 f382 	clz	r3, r2
 8001234:	b14b      	cbz	r3, 800124a <__udivmoddi4+0x32>
 8001236:	f1c3 0120 	rsb	r1, r3, #32
 800123a:	fa05 fe03 	lsl.w	lr, r5, r3
 800123e:	fa20 f101 	lsr.w	r1, r0, r1
 8001242:	409f      	lsls	r7, r3
 8001244:	ea41 0e0e 	orr.w	lr, r1, lr
 8001248:	409c      	lsls	r4, r3
 800124a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800124e:	fbbe fcf8 	udiv	ip, lr, r8
 8001252:	fa1f f987 	uxth.w	r9, r7
 8001256:	fb08 e21c 	mls	r2, r8, ip, lr
 800125a:	fb0c f009 	mul.w	r0, ip, r9
 800125e:	0c21      	lsrs	r1, r4, #16
 8001260:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001264:	4290      	cmp	r0, r2
 8001266:	d90a      	bls.n	800127e <__udivmoddi4+0x66>
 8001268:	18ba      	adds	r2, r7, r2
 800126a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800126e:	f080 8118 	bcs.w	80014a2 <__udivmoddi4+0x28a>
 8001272:	4290      	cmp	r0, r2
 8001274:	f240 8115 	bls.w	80014a2 <__udivmoddi4+0x28a>
 8001278:	f1ac 0c02 	sub.w	ip, ip, #2
 800127c:	443a      	add	r2, r7
 800127e:	1a12      	subs	r2, r2, r0
 8001280:	fbb2 f0f8 	udiv	r0, r2, r8
 8001284:	fb08 2210 	mls	r2, r8, r0, r2
 8001288:	fb00 f109 	mul.w	r1, r0, r9
 800128c:	b2a4      	uxth	r4, r4
 800128e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001292:	42a1      	cmp	r1, r4
 8001294:	d909      	bls.n	80012aa <__udivmoddi4+0x92>
 8001296:	193c      	adds	r4, r7, r4
 8001298:	f100 32ff 	add.w	r2, r0, #4294967295
 800129c:	f080 8103 	bcs.w	80014a6 <__udivmoddi4+0x28e>
 80012a0:	42a1      	cmp	r1, r4
 80012a2:	f240 8100 	bls.w	80014a6 <__udivmoddi4+0x28e>
 80012a6:	3802      	subs	r0, #2
 80012a8:	443c      	add	r4, r7
 80012aa:	1a64      	subs	r4, r4, r1
 80012ac:	2100      	movs	r1, #0
 80012ae:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012b2:	b11e      	cbz	r6, 80012bc <__udivmoddi4+0xa4>
 80012b4:	2200      	movs	r2, #0
 80012b6:	40dc      	lsrs	r4, r3
 80012b8:	e9c6 4200 	strd	r4, r2, [r6]
 80012bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012c0:	b902      	cbnz	r2, 80012c4 <__udivmoddi4+0xac>
 80012c2:	deff      	udf	#255	; 0xff
 80012c4:	fab2 f382 	clz	r3, r2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d14f      	bne.n	800136c <__udivmoddi4+0x154>
 80012cc:	1a8d      	subs	r5, r1, r2
 80012ce:	2101      	movs	r1, #1
 80012d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80012d4:	fa1f f882 	uxth.w	r8, r2
 80012d8:	fbb5 fcfe 	udiv	ip, r5, lr
 80012dc:	fb0e 551c 	mls	r5, lr, ip, r5
 80012e0:	fb08 f00c 	mul.w	r0, r8, ip
 80012e4:	0c22      	lsrs	r2, r4, #16
 80012e6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80012ea:	42a8      	cmp	r0, r5
 80012ec:	d907      	bls.n	80012fe <__udivmoddi4+0xe6>
 80012ee:	197d      	adds	r5, r7, r5
 80012f0:	f10c 32ff 	add.w	r2, ip, #4294967295
 80012f4:	d202      	bcs.n	80012fc <__udivmoddi4+0xe4>
 80012f6:	42a8      	cmp	r0, r5
 80012f8:	f200 80e9 	bhi.w	80014ce <__udivmoddi4+0x2b6>
 80012fc:	4694      	mov	ip, r2
 80012fe:	1a2d      	subs	r5, r5, r0
 8001300:	fbb5 f0fe 	udiv	r0, r5, lr
 8001304:	fb0e 5510 	mls	r5, lr, r0, r5
 8001308:	fb08 f800 	mul.w	r8, r8, r0
 800130c:	b2a4      	uxth	r4, r4
 800130e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001312:	45a0      	cmp	r8, r4
 8001314:	d907      	bls.n	8001326 <__udivmoddi4+0x10e>
 8001316:	193c      	adds	r4, r7, r4
 8001318:	f100 32ff 	add.w	r2, r0, #4294967295
 800131c:	d202      	bcs.n	8001324 <__udivmoddi4+0x10c>
 800131e:	45a0      	cmp	r8, r4
 8001320:	f200 80d9 	bhi.w	80014d6 <__udivmoddi4+0x2be>
 8001324:	4610      	mov	r0, r2
 8001326:	eba4 0408 	sub.w	r4, r4, r8
 800132a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800132e:	e7c0      	b.n	80012b2 <__udivmoddi4+0x9a>
 8001330:	428b      	cmp	r3, r1
 8001332:	d908      	bls.n	8001346 <__udivmoddi4+0x12e>
 8001334:	2e00      	cmp	r6, #0
 8001336:	f000 80b1 	beq.w	800149c <__udivmoddi4+0x284>
 800133a:	2100      	movs	r1, #0
 800133c:	e9c6 0500 	strd	r0, r5, [r6]
 8001340:	4608      	mov	r0, r1
 8001342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001346:	fab3 f183 	clz	r1, r3
 800134a:	2900      	cmp	r1, #0
 800134c:	d14b      	bne.n	80013e6 <__udivmoddi4+0x1ce>
 800134e:	42ab      	cmp	r3, r5
 8001350:	d302      	bcc.n	8001358 <__udivmoddi4+0x140>
 8001352:	4282      	cmp	r2, r0
 8001354:	f200 80b9 	bhi.w	80014ca <__udivmoddi4+0x2b2>
 8001358:	1a84      	subs	r4, r0, r2
 800135a:	eb65 0303 	sbc.w	r3, r5, r3
 800135e:	2001      	movs	r0, #1
 8001360:	469e      	mov	lr, r3
 8001362:	2e00      	cmp	r6, #0
 8001364:	d0aa      	beq.n	80012bc <__udivmoddi4+0xa4>
 8001366:	e9c6 4e00 	strd	r4, lr, [r6]
 800136a:	e7a7      	b.n	80012bc <__udivmoddi4+0xa4>
 800136c:	409f      	lsls	r7, r3
 800136e:	f1c3 0220 	rsb	r2, r3, #32
 8001372:	40d1      	lsrs	r1, r2
 8001374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001378:	fbb1 f0fe 	udiv	r0, r1, lr
 800137c:	fa1f f887 	uxth.w	r8, r7
 8001380:	fb0e 1110 	mls	r1, lr, r0, r1
 8001384:	fa24 f202 	lsr.w	r2, r4, r2
 8001388:	409d      	lsls	r5, r3
 800138a:	fb00 fc08 	mul.w	ip, r0, r8
 800138e:	432a      	orrs	r2, r5
 8001390:	0c15      	lsrs	r5, r2, #16
 8001392:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001396:	45ac      	cmp	ip, r5
 8001398:	fa04 f403 	lsl.w	r4, r4, r3
 800139c:	d909      	bls.n	80013b2 <__udivmoddi4+0x19a>
 800139e:	197d      	adds	r5, r7, r5
 80013a0:	f100 31ff 	add.w	r1, r0, #4294967295
 80013a4:	f080 808f 	bcs.w	80014c6 <__udivmoddi4+0x2ae>
 80013a8:	45ac      	cmp	ip, r5
 80013aa:	f240 808c 	bls.w	80014c6 <__udivmoddi4+0x2ae>
 80013ae:	3802      	subs	r0, #2
 80013b0:	443d      	add	r5, r7
 80013b2:	eba5 050c 	sub.w	r5, r5, ip
 80013b6:	fbb5 f1fe 	udiv	r1, r5, lr
 80013ba:	fb0e 5c11 	mls	ip, lr, r1, r5
 80013be:	fb01 f908 	mul.w	r9, r1, r8
 80013c2:	b295      	uxth	r5, r2
 80013c4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80013c8:	45a9      	cmp	r9, r5
 80013ca:	d907      	bls.n	80013dc <__udivmoddi4+0x1c4>
 80013cc:	197d      	adds	r5, r7, r5
 80013ce:	f101 32ff 	add.w	r2, r1, #4294967295
 80013d2:	d274      	bcs.n	80014be <__udivmoddi4+0x2a6>
 80013d4:	45a9      	cmp	r9, r5
 80013d6:	d972      	bls.n	80014be <__udivmoddi4+0x2a6>
 80013d8:	3902      	subs	r1, #2
 80013da:	443d      	add	r5, r7
 80013dc:	eba5 0509 	sub.w	r5, r5, r9
 80013e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013e4:	e778      	b.n	80012d8 <__udivmoddi4+0xc0>
 80013e6:	f1c1 0720 	rsb	r7, r1, #32
 80013ea:	408b      	lsls	r3, r1
 80013ec:	fa22 fc07 	lsr.w	ip, r2, r7
 80013f0:	ea4c 0c03 	orr.w	ip, ip, r3
 80013f4:	fa25 f407 	lsr.w	r4, r5, r7
 80013f8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80013fc:	fbb4 f9fe 	udiv	r9, r4, lr
 8001400:	fa1f f88c 	uxth.w	r8, ip
 8001404:	fb0e 4419 	mls	r4, lr, r9, r4
 8001408:	fa20 f307 	lsr.w	r3, r0, r7
 800140c:	fb09 fa08 	mul.w	sl, r9, r8
 8001410:	408d      	lsls	r5, r1
 8001412:	431d      	orrs	r5, r3
 8001414:	0c2b      	lsrs	r3, r5, #16
 8001416:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800141a:	45a2      	cmp	sl, r4
 800141c:	fa02 f201 	lsl.w	r2, r2, r1
 8001420:	fa00 f301 	lsl.w	r3, r0, r1
 8001424:	d909      	bls.n	800143a <__udivmoddi4+0x222>
 8001426:	eb1c 0404 	adds.w	r4, ip, r4
 800142a:	f109 30ff 	add.w	r0, r9, #4294967295
 800142e:	d248      	bcs.n	80014c2 <__udivmoddi4+0x2aa>
 8001430:	45a2      	cmp	sl, r4
 8001432:	d946      	bls.n	80014c2 <__udivmoddi4+0x2aa>
 8001434:	f1a9 0902 	sub.w	r9, r9, #2
 8001438:	4464      	add	r4, ip
 800143a:	eba4 040a 	sub.w	r4, r4, sl
 800143e:	fbb4 f0fe 	udiv	r0, r4, lr
 8001442:	fb0e 4410 	mls	r4, lr, r0, r4
 8001446:	fb00 fa08 	mul.w	sl, r0, r8
 800144a:	b2ad      	uxth	r5, r5
 800144c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001450:	45a2      	cmp	sl, r4
 8001452:	d908      	bls.n	8001466 <__udivmoddi4+0x24e>
 8001454:	eb1c 0404 	adds.w	r4, ip, r4
 8001458:	f100 35ff 	add.w	r5, r0, #4294967295
 800145c:	d22d      	bcs.n	80014ba <__udivmoddi4+0x2a2>
 800145e:	45a2      	cmp	sl, r4
 8001460:	d92b      	bls.n	80014ba <__udivmoddi4+0x2a2>
 8001462:	3802      	subs	r0, #2
 8001464:	4464      	add	r4, ip
 8001466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800146a:	fba0 8902 	umull	r8, r9, r0, r2
 800146e:	eba4 040a 	sub.w	r4, r4, sl
 8001472:	454c      	cmp	r4, r9
 8001474:	46c6      	mov	lr, r8
 8001476:	464d      	mov	r5, r9
 8001478:	d319      	bcc.n	80014ae <__udivmoddi4+0x296>
 800147a:	d016      	beq.n	80014aa <__udivmoddi4+0x292>
 800147c:	b15e      	cbz	r6, 8001496 <__udivmoddi4+0x27e>
 800147e:	ebb3 020e 	subs.w	r2, r3, lr
 8001482:	eb64 0405 	sbc.w	r4, r4, r5
 8001486:	fa04 f707 	lsl.w	r7, r4, r7
 800148a:	fa22 f301 	lsr.w	r3, r2, r1
 800148e:	431f      	orrs	r7, r3
 8001490:	40cc      	lsrs	r4, r1
 8001492:	e9c6 7400 	strd	r7, r4, [r6]
 8001496:	2100      	movs	r1, #0
 8001498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800149c:	4631      	mov	r1, r6
 800149e:	4630      	mov	r0, r6
 80014a0:	e70c      	b.n	80012bc <__udivmoddi4+0xa4>
 80014a2:	468c      	mov	ip, r1
 80014a4:	e6eb      	b.n	800127e <__udivmoddi4+0x66>
 80014a6:	4610      	mov	r0, r2
 80014a8:	e6ff      	b.n	80012aa <__udivmoddi4+0x92>
 80014aa:	4543      	cmp	r3, r8
 80014ac:	d2e6      	bcs.n	800147c <__udivmoddi4+0x264>
 80014ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80014b2:	eb69 050c 	sbc.w	r5, r9, ip
 80014b6:	3801      	subs	r0, #1
 80014b8:	e7e0      	b.n	800147c <__udivmoddi4+0x264>
 80014ba:	4628      	mov	r0, r5
 80014bc:	e7d3      	b.n	8001466 <__udivmoddi4+0x24e>
 80014be:	4611      	mov	r1, r2
 80014c0:	e78c      	b.n	80013dc <__udivmoddi4+0x1c4>
 80014c2:	4681      	mov	r9, r0
 80014c4:	e7b9      	b.n	800143a <__udivmoddi4+0x222>
 80014c6:	4608      	mov	r0, r1
 80014c8:	e773      	b.n	80013b2 <__udivmoddi4+0x19a>
 80014ca:	4608      	mov	r0, r1
 80014cc:	e749      	b.n	8001362 <__udivmoddi4+0x14a>
 80014ce:	f1ac 0c02 	sub.w	ip, ip, #2
 80014d2:	443d      	add	r5, r7
 80014d4:	e713      	b.n	80012fe <__udivmoddi4+0xe6>
 80014d6:	3802      	subs	r0, #2
 80014d8:	443c      	add	r4, r7
 80014da:	e724      	b.n	8001326 <__udivmoddi4+0x10e>

080014dc <__aeabi_idiv0>:
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop

080014e0 <init_ad4681>:

// struct accel_data accel;    //TODO may need to define this
// struct ad4681Data a2d;


void init_ad4681 (ad4681Data * a2d) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
     * 
     * Details of this register can be 
     * read on datasheet p27 of 29.  
     */
    
    *spi_data = (AD4681_WRITE_BIT << AD4681_WR_BIT_OFFSET) |
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
                (AD4681_CONFIG2_REG_ADDR << AD4681_ADDR_BIT_OFFSET) |
                (OUTPUT_ON_SDOA_ONLY << CONVERSION_MODE_BIT_OFFSET );

    HAL_SPI_Transmit(&hspi1, (uint8_t *)spi_data, (uint16_t) 2, (uint32_t) 10);     // Timeout in us
 80014ee:	230a      	movs	r3, #10
 80014f0:	2202      	movs	r2, #2
 80014f2:	68f9      	ldr	r1, [r7, #12]
 80014f4:	4816      	ldr	r0, [pc, #88]	; (8001550 <init_ad4681+0x70>)
 80014f6:	f005 fb39 	bl	8006b6c <HAL_SPI_Transmit>

    /**
     * Initializations related to
     * the A2D interface
   */
    a2d -> sense_resistors[0] = 0.022f;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a15      	ldr	r2, [pc, #84]	; (8001554 <init_ad4681+0x74>)
 80014fe:	625a      	str	r2, [r3, #36]	; 0x24
    a2d -> sense_resistors[1] = 0.091f;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a15      	ldr	r2, [pc, #84]	; (8001558 <init_ad4681+0x78>)
 8001504:	629a      	str	r2, [r3, #40]	; 0x28
    a2d -> sense_resistors[1] = 0.82f;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a14      	ldr	r2, [pc, #80]	; (800155c <init_ad4681+0x7c>)
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
    a2d -> cs_res_index = 0;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	771a      	strb	r2, [r3, #28]
    a2d -> cs_res_f = a2d -> sense_resistors[a2d -> cs_res_index];        // Set this to a default value
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7f1b      	ldrb	r3, [r3, #28]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	3308      	adds	r3, #8
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	621a      	str	r2, [r3, #32]
    a2d -> first_sample = false;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
    a2d -> logging_status = false;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	705a      	strb	r2, [r3, #1]

    a2d -> run_time_hr = 0.0f;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	631a      	str	r2, [r3, #48]	; 0x30
    a2d -> run_time_min = 0.0f;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	635a      	str	r2, [r3, #52]	; 0x34
    a2d -> time_us_elapsed = 0;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	809a      	strh	r2, [r3, #4]

}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200016a0 	.word	0x200016a0
 8001554:	3cb43958 	.word	0x3cb43958
 8001558:	3dba5e35 	.word	0x3dba5e35
 800155c:	3f51eb85 	.word	0x3f51eb85

08001560 <get_ad4681_samples>:

get_ad4681_samples( ad4681Data * a2d ) {
 8001560:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
    /**
     * Get time value to know time 
     * elapsed between samples
     * TODO need to define this
     */
    if(!a2d -> first_sample) {
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	f083 0301 	eor.w	r3, r3, #1
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <get_ad4681_samples+0x24>
        a2d -> time_us_elapsed = get_us_counter();
 8001578:	f003 fa0a 	bl	8004990 <get_us_counter>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	809a      	strh	r2, [r3, #4]
     *  Grab A and B samples.
     * In order for low latenency p22
     * in datasheet, need to pulse the 
     * CS line low before taking the sample.
     */
    HAL_GPIO_WritePin(ADC_SPI1_CSn_GPIO_Port, ADC_SPI1_CSn_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2110      	movs	r1, #16
 8001588:	4877      	ldr	r0, [pc, #476]	; (8001768 <get_ad4681_samples+0x208>)
 800158a:	f003 ff88 	bl	800549e <HAL_GPIO_WritePin>
    blocking_us_delay(CS_PULSE_DELAY_uS);      
 800158e:	200a      	movs	r0, #10
 8001590:	f003 f9d8 	bl	8004944 <blocking_us_delay>
    HAL_GPIO_WritePin(ADC_SPI1_CSn_GPIO_Port, ADC_SPI1_CSn_Pin, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	2110      	movs	r1, #16
 8001598:	4873      	ldr	r0, [pc, #460]	; (8001768 <get_ad4681_samples+0x208>)
 800159a:	f003 ff80 	bl	800549e <HAL_GPIO_WritePin>
    blocking_us_delay(CS_PULSE_DELAY_uS);      
 800159e:	200a      	movs	r0, #10
 80015a0:	f003 f9d0 	bl	8004944 <blocking_us_delay>
     * Drop the CS line 
     * to extract the data.
     * Extract data, then bring
     * CS line high again.
    */
    HAL_GPIO_WritePin(ADC_SPI1_CSn_GPIO_Port, ADC_SPI1_CSn_Pin, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2110      	movs	r1, #16
 80015a8:	486f      	ldr	r0, [pc, #444]	; (8001768 <get_ad4681_samples+0x208>)
 80015aa:	f003 ff78 	bl	800549e <HAL_GPIO_WritePin>
    
    HAL_SPI_Receive(&hspi1, (uint8_t *)a2d -> ad4681_buffer, 4, 1000);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	1d99      	adds	r1, r3, #6
 80015b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b6:	2204      	movs	r2, #4
 80015b8:	486c      	ldr	r0, [pc, #432]	; (800176c <get_ad4681_samples+0x20c>)
 80015ba:	f005 fc13 	bl	8006de4 <HAL_SPI_Receive>
    
    HAL_GPIO_WritePin(ADC_SPI1_CSn_GPIO_Port, ADC_SPI1_CSn_Pin, GPIO_PIN_SET);
 80015be:	2201      	movs	r2, #1
 80015c0:	2110      	movs	r1, #16
 80015c2:	4869      	ldr	r0, [pc, #420]	; (8001768 <get_ad4681_samples+0x208>)
 80015c4:	f003 ff6b 	bl	800549e <HAL_GPIO_WritePin>
    
    /* Parse into voltage vs. current */
    a2d -> voltage_sample = (uint16_t)((a2d -> ad4681_buffer[3] << 8) | (a2d -> ad4681_buffer[2]));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7a5b      	ldrb	r3, [r3, #9]
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	7a1b      	ldrb	r3, [r3, #8]
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b21b      	sxth	r3, r3
 80015da:	b29a      	uxth	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	815a      	strh	r2, [r3, #10]
    a2d -> current_sample = (uint16_t)((a2d -> ad4681_buffer[1] << 8) | (a2d -> ad4681_buffer[0]));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	79db      	ldrb	r3, [r3, #7]
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	b21a      	sxth	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	799b      	ldrb	r3, [r3, #6]
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	819a      	strh	r2, [r3, #12]
    /**
     *  Determine if sign bit
     * is set for twos complement
     * start with voltage sample
     */
    if((uint16_t)(a2d -> voltage_sample >> 15 & 0x01) == 1 ) {   
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	895b      	ldrh	r3, [r3, #10]
 80015fc:	0bdb      	lsrs	r3, r3, #15
 80015fe:	b29b      	uxth	r3, r3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d130      	bne.n	8001666 <get_ad4681_samples+0x106>
        a2d -> voltage_sample ^= 0xFFFF;      // Invert all bits
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	895b      	ldrh	r3, [r3, #10]
 8001608:	43db      	mvns	r3, r3
 800160a:	b29a      	uxth	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	815a      	strh	r2, [r3, #10]
        a2d -> voltage_sample += 0x01;        // Add one
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	895b      	ldrh	r3, [r3, #10]
 8001614:	3301      	adds	r3, #1
 8001616:	b29a      	uxth	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	815a      	strh	r2, [r3, #10]
        
        a2d -> voltage_f = (float)(A2D_VOLTAGE_PER_BIT * a2d -> voltage_sample);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	895b      	ldrh	r3, [r3, #10]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fbc7 	bl	8000db4 <__aeabi_i2f>
 8001626:	4603      	mov	r3, r0
 8001628:	4951      	ldr	r1, [pc, #324]	; (8001770 <get_ad4681_samples+0x210>)
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fc16 	bl	8000e5c <__aeabi_fmul>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	611a      	str	r2, [r3, #16]
        a2d -> voltage_f = (float)(a2d -> voltage_f * VOLTAGE_MEAS_GAIN * -1.0);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	494d      	ldr	r1, [pc, #308]	; (8001774 <get_ad4681_samples+0x214>)
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fc0c 	bl	8000e5c <__aeabi_fmul>
 8001644:	4603      	mov	r3, r0
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ff5a 	bl	8000500 <__aeabi_f2d>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4690      	mov	r8, r2
 8001652:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001656:	4640      	mov	r0, r8
 8001658:	4649      	mov	r1, r9
 800165a:	f7ff faa1 	bl	8000ba0 <__aeabi_d2f>
 800165e:	4602      	mov	r2, r0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	611a      	str	r2, [r3, #16]
 8001664:	e017      	b.n	8001696 <get_ad4681_samples+0x136>
    }
    else {
        a2d -> voltage_f = (float)(A2D_VOLTAGE_PER_BIT * a2d -> voltage_sample);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	895b      	ldrh	r3, [r3, #10]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fba2 	bl	8000db4 <__aeabi_i2f>
 8001670:	4603      	mov	r3, r0
 8001672:	493f      	ldr	r1, [pc, #252]	; (8001770 <get_ad4681_samples+0x210>)
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fbf1 	bl	8000e5c <__aeabi_fmul>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	611a      	str	r2, [r3, #16]
        a2d -> voltage_f = (float)(a2d -> voltage_f * VOLTAGE_MEAS_GAIN);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	493b      	ldr	r1, [pc, #236]	; (8001774 <get_ad4681_samples+0x214>)
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fbe7 	bl	8000e5c <__aeabi_fmul>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	611a      	str	r2, [r3, #16]

    /**
     * Determine current 
     * draw value
     */
    if((uint16_t)(a2d -> current_sample >> 15 & 0x01) == 1 ) {   
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	899b      	ldrh	r3, [r3, #12]
 800169a:	0bdb      	lsrs	r3, r3, #15
 800169c:	b29b      	uxth	r3, r3
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d132      	bne.n	8001708 <get_ad4681_samples+0x1a8>
        a2d -> current_sample ^= 0xFFFF;      // Invert all bits
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	899b      	ldrh	r3, [r3, #12]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	819a      	strh	r2, [r3, #12]
        a2d -> current_sample += 0x01;        // Add one
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	899b      	ldrh	r3, [r3, #12]
 80016b2:	3301      	adds	r3, #1
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	819a      	strh	r2, [r3, #12]

        a2d -> current_f = (float)(a2d -> current_sample * A2D_VOLTAGE_PER_BIT);        // Raw A2D voltage value
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	899b      	ldrh	r3, [r3, #12]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fb78 	bl	8000db4 <__aeabi_i2f>
 80016c4:	4603      	mov	r3, r0
 80016c6:	492a      	ldr	r1, [pc, #168]	; (8001770 <get_ad4681_samples+0x210>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fbc7 	bl	8000e5c <__aeabi_fmul>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	615a      	str	r2, [r3, #20]
        a2d -> current_f = (float)(a2d -> current_f / a2d -> cs_res_f * -1.0);                 // Current = Voltage / Resistance 
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695a      	ldr	r2, [r3, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	4619      	mov	r1, r3
 80016e0:	4610      	mov	r0, r2
 80016e2:	f7ff fc6f 	bl	8000fc4 <__aeabi_fdiv>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff09 	bl	8000500 <__aeabi_f2d>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4614      	mov	r4, r2
 80016f4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80016f8:	4620      	mov	r0, r4
 80016fa:	4629      	mov	r1, r5
 80016fc:	f7ff fa50 	bl	8000ba0 <__aeabi_d2f>
 8001700:	4602      	mov	r2, r0
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	615a      	str	r2, [r3, #20]
 8001706:	e019      	b.n	800173c <get_ad4681_samples+0x1dc>

    }
    else {
        a2d -> current_f = (float)(a2d -> current_sample * A2D_VOLTAGE_PER_BIT);        // Raw A2D voltage value
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	899b      	ldrh	r3, [r3, #12]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fb51 	bl	8000db4 <__aeabi_i2f>
 8001712:	4603      	mov	r3, r0
 8001714:	4916      	ldr	r1, [pc, #88]	; (8001770 <get_ad4681_samples+0x210>)
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fba0 	bl	8000e5c <__aeabi_fmul>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	615a      	str	r2, [r3, #20]
        a2d -> current_f = (float)(a2d -> current_f / a2d -> cs_res_f);                 // Current = Voltage / Resistance 
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4619      	mov	r1, r3
 800172e:	4610      	mov	r0, r2
 8001730:	f7ff fc48 	bl	8000fc4 <__aeabi_fdiv>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	615a      	str	r2, [r3, #20]

    /**
     * Calculate power 
     * value 
     */
    a2d -> power_f = (float)(a2d -> current_f * a2d -> voltage_f);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	695a      	ldr	r2, [r3, #20]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	4619      	mov	r1, r3
 8001746:	4610      	mov	r0, r2
 8001748:	f7ff fb88 	bl	8000e5c <__aeabi_fmul>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]

    a2d -> first_sample = false;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
     * Start us timer
     * so the elapsed time
     * can be calculated the next 
     * time this function is entered
    */
   start_us_counter();
 800175a:	f003 f90b 	bl	8004974 <start_us_counter>
    

}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001768:	40010800 	.word	0x40010800
 800176c:	200016a0 	.word	0x200016a0
 8001770:	38a00340 	.word	0x38a00340
 8001774:	4140c2f8 	.word	0x4140c2f8

08001778 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin       GPIO_PIN_12

/* SPI Chip Select */
static void SELECT(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800177c:	2200      	movs	r2, #0
 800177e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001782:	4802      	ldr	r0, [pc, #8]	; (800178c <SELECT+0x14>)
 8001784:	f003 fe8b 	bl	800549e <HAL_GPIO_WritePin>
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40010c00 	.word	0x40010c00

08001790 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001794:	2201      	movs	r2, #1
 8001796:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800179a:	4802      	ldr	r0, [pc, #8]	; (80017a4 <DESELECT+0x14>)
 800179c:	f003 fe7f 	bl	800549e <HAL_GPIO_WritePin>
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40010c00 	.word	0x40010c00

080017a8 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80017b2:	bf00      	nop
 80017b4:	4808      	ldr	r0, [pc, #32]	; (80017d8 <SPI_TxByte+0x30>)
 80017b6:	f005 fdc8 	bl	800734a <HAL_SPI_GetState>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d1f9      	bne.n	80017b4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 80017c0:	1df9      	adds	r1, r7, #7
 80017c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c6:	2201      	movs	r2, #1
 80017c8:	4803      	ldr	r0, [pc, #12]	; (80017d8 <SPI_TxByte+0x30>)
 80017ca:	f005 f9cf 	bl	8006b6c <HAL_SPI_Transmit>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000470 	.word	0x20000470

080017dc <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80017e2:	23ff      	movs	r3, #255	; 0xff
 80017e4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 80017ea:	bf00      	nop
 80017ec:	4809      	ldr	r0, [pc, #36]	; (8001814 <SPI_RxByte+0x38>)
 80017ee:	f005 fdac 	bl	800734a <HAL_SPI_GetState>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d1f9      	bne.n	80017ec <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 80017f8:	1dba      	adds	r2, r7, #6
 80017fa:	1df9      	adds	r1, r7, #7
 80017fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2301      	movs	r3, #1
 8001804:	4803      	ldr	r0, [pc, #12]	; (8001814 <SPI_RxByte+0x38>)
 8001806:	f005 fbfe 	bl	8007006 <HAL_SPI_TransmitReceive>
  
  return data;
 800180a:	79bb      	ldrb	r3, [r7, #6]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000470 	.word	0x20000470

08001818 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001820:	f7ff ffdc 	bl	80017dc <SPI_RxByte>
 8001824:	4603      	mov	r3, r0
 8001826:	461a      	mov	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	701a      	strb	r2, [r3, #0]
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void) 
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <SD_ReadyWait+0x34>)
 800183c:	2232      	movs	r2, #50	; 0x32
 800183e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001840:	f7ff ffcc 	bl	80017dc <SPI_RxByte>
  
  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001844:	f7ff ffca 	bl	80017dc <SPI_RxByte>
 8001848:	4603      	mov	r3, r0
 800184a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	2bff      	cmp	r3, #255	; 0xff
 8001850:	d004      	beq.n	800185c <SD_ReadyWait+0x28>
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <SD_ReadyWait+0x34>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f3      	bne.n	8001844 <SD_ReadyWait+0x10>
  
  return res;
 800185c:	79fb      	ldrb	r3, [r7, #7]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200027dd 	.word	0x200027dd

0800186c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001872:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001876:	617b      	str	r3, [r7, #20]
  
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001878:	f7ff ff8a 	bl	8001790 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	e005      	b.n	800188e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001882:	20ff      	movs	r0, #255	; 0xff
 8001884:	f7ff ff90 	bl	80017a8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	3301      	adds	r3, #1
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	2b09      	cmp	r3, #9
 8001892:	ddf6      	ble.n	8001882 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8001894:	f7ff ff70 	bl	8001778 <SELECT>
  
  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001898:	2340      	movs	r3, #64	; 0x40
 800189a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80018ac:	2395      	movs	r3, #149	; 0x95
 80018ae:	727b      	strb	r3, [r7, #9]
  
  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	e009      	b.n	80018ca <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80018b6:	1d3a      	adds	r2, r7, #4
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff ff72 	bl	80017a8 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3301      	adds	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	ddf2      	ble.n	80018b6 <SD_PowerOn+0x4a>
  }
  
  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80018d0:	e002      	b.n	80018d8 <SD_PowerOn+0x6c>
  {
    Count--;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80018d8:	f7ff ff80 	bl	80017dc <SPI_RxByte>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d002      	beq.n	80018e8 <SD_PowerOn+0x7c>
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f4      	bne.n	80018d2 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80018e8:	f7ff ff52 	bl	8001790 <DESELECT>
  SPI_TxByte(0XFF);
 80018ec:	20ff      	movs	r0, #255	; 0xff
 80018ee:	f7ff ff5b 	bl	80017a8 <SPI_TxByte>
  
  PowerFlag = 1;
 80018f2:	4b03      	ldr	r3, [pc, #12]	; (8001900 <SD_PowerOn+0x94>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
}
 80018f8:	bf00      	nop
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000221 	.word	0x20000221

08001904 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <SD_PowerOff+0x14>)
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000221 	.word	0x20000221

0800191c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001920:	4b02      	ldr	r3, [pc, #8]	; (800192c <SD_CheckPower+0x10>)
 8001922:	781b      	ldrb	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	20000221 	.word	0x20000221

08001930 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <SD_RxDataBlock+0x68>)
 800193c:	220a      	movs	r2, #10
 800193e:	701a      	strb	r2, [r3, #0]
  
  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001940:	f7ff ff4c 	bl	80017dc <SPI_RxByte>
 8001944:	4603      	mov	r3, r0
 8001946:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2bff      	cmp	r3, #255	; 0xff
 800194c:	d104      	bne.n	8001958 <SD_RxDataBlock+0x28>
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <SD_RxDataBlock+0x68>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f3      	bne.n	8001940 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	2bfe      	cmp	r3, #254	; 0xfe
 800195c:	d001      	beq.n	8001962 <SD_RxDataBlock+0x32>
    return FALSE;
 800195e:	2300      	movs	r3, #0
 8001960:	e016      	b.n	8001990 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff55 	bl	8001818 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff4f 	bl	8001818 <SPI_RxBytePtr>
  } while(btr -= 2);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	3b02      	subs	r3, #2
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1ed      	bne.n	8001962 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8001986:	f7ff ff29 	bl	80017dc <SPI_RxByte>
  SPI_RxByte();
 800198a:	f7ff ff27 	bl	80017dc <SPI_RxByte>
  
  return TRUE;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	200027de 	.word	0x200027de

0800199c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80019ac:	f7ff ff42 	bl	8001834 <SD_ReadyWait>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2bff      	cmp	r3, #255	; 0xff
 80019b4:	d001      	beq.n	80019ba <SD_TxDataBlock+0x1e>
    return FALSE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e040      	b.n	8001a3c <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fef3 	bl	80017a8 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	2bfd      	cmp	r3, #253	; 0xfd
 80019c6:	d031      	beq.n	8001a2c <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fee7 	bl	80017a8 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	1c5a      	adds	r2, r3, #1
 80019de:	607a      	str	r2, [r7, #4]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fee0 	bl	80017a8 <SPI_TxByte>
    } while (--wc);
 80019e8:	7bbb      	ldrb	r3, [r7, #14]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	73bb      	strb	r3, [r7, #14]
 80019ee:	7bbb      	ldrb	r3, [r7, #14]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1eb      	bne.n	80019cc <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80019f4:	f7ff fef2 	bl	80017dc <SPI_RxByte>
    SPI_RxByte();
 80019f8:	f7ff fef0 	bl	80017dc <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80019fc:	e00b      	b.n	8001a16 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80019fe:	f7ff feed 	bl	80017dc <SPI_RxByte>
 8001a02:	4603      	mov	r3, r0
 8001a04:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	f003 031f 	and.w	r3, r3, #31
 8001a0c:	2b05      	cmp	r3, #5
 8001a0e:	d006      	beq.n	8001a1e <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001a10:	7b7b      	ldrb	r3, [r7, #13]
 8001a12:	3301      	adds	r3, #1
 8001a14:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8001a16:	7b7b      	ldrb	r3, [r7, #13]
 8001a18:	2b40      	cmp	r3, #64	; 0x40
 8001a1a:	d9f0      	bls.n	80019fe <SD_TxDataBlock+0x62>
 8001a1c:	e000      	b.n	8001a20 <SD_TxDataBlock+0x84>
        break;
 8001a1e:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001a20:	bf00      	nop
 8001a22:	f7ff fedb 	bl	80017dc <SPI_RxByte>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0fa      	beq.n	8001a22 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	f003 031f 	and.w	r3, r3, #31
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d101      	bne.n	8001a3a <SD_TxDataBlock+0x9e>
    return TRUE;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001a50:	f7ff fef0 	bl	8001834 <SD_ReadyWait>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2bff      	cmp	r3, #255	; 0xff
 8001a58:	d001      	beq.n	8001a5e <SD_SendCmd+0x1a>
    return 0xFF;
 8001a5a:	23ff      	movs	r3, #255	; 0xff
 8001a5c:	e040      	b.n	8001ae0 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fea1 	bl	80017a8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	0e1b      	lsrs	r3, r3, #24
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fe9b 	bl	80017a8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	0c1b      	lsrs	r3, r3, #16
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fe95 	bl	80017a8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fe8f 	bl	80017a8 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fe8a 	bl	80017a8 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	2b40      	cmp	r3, #64	; 0x40
 8001a9c:	d101      	bne.n	8001aa2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001a9e:	2395      	movs	r3, #149	; 0x95
 8001aa0:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	2b48      	cmp	r3, #72	; 0x48
 8001aa6:	d101      	bne.n	8001aac <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001aa8:	2387      	movs	r3, #135	; 0x87
 8001aaa:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fe7a 	bl	80017a8 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	2b4c      	cmp	r3, #76	; 0x4c
 8001ab8:	d101      	bne.n	8001abe <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001aba:	f7ff fe8f 	bl	80017dc <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8001abe:	230a      	movs	r3, #10
 8001ac0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001ac2:	f7ff fe8b 	bl	80017dc <SPI_RxByte>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001aca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	da05      	bge.n	8001ade <SD_SendCmd+0x9a>
 8001ad2:	7bbb      	ldrb	r3, [r7, #14]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	73bb      	strb	r3, [r7, #14]
 8001ad8:	7bbb      	ldrb	r3, [r7, #14]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f1      	bne.n	8001ac2 <SD_SendCmd+0x7e>
  
  return res;
 8001ade:	7b7b      	ldrb	r3, [r7, #13]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0d5      	b.n	8001ca8 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001afc:	4b6c      	ldr	r3, [pc, #432]	; (8001cb0 <SD_disk_initialize+0x1c8>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <SD_disk_initialize+0x2a>
    return Stat;        
 8001b0a:	4b69      	ldr	r3, [pc, #420]	; (8001cb0 <SD_disk_initialize+0x1c8>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	e0ca      	b.n	8001ca8 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8001b12:	f7ff feab 	bl	800186c <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001b16:	f7ff fe2f 	bl	8001778 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2040      	movs	r0, #64	; 0x40
 8001b22:	f7ff ff8f 	bl	8001a44 <SD_SendCmd>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	f040 80a5 	bne.w	8001c78 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001b2e:	4b61      	ldr	r3, [pc, #388]	; (8001cb4 <SD_disk_initialize+0x1cc>)
 8001b30:	2264      	movs	r2, #100	; 0x64
 8001b32:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001b34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001b38:	2048      	movs	r0, #72	; 0x48
 8001b3a:	f7ff ff83 	bl	8001a44 <SD_SendCmd>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d158      	bne.n	8001bf6 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]
 8001b48:	e00c      	b.n	8001b64 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001b4a:	7bfc      	ldrb	r4, [r7, #15]
 8001b4c:	f7ff fe46 	bl	80017dc <SPI_RxByte>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	4423      	add	r3, r4
 8001b5a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	3301      	adds	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d9ef      	bls.n	8001b4a <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001b6a:	7abb      	ldrb	r3, [r7, #10]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	f040 8083 	bne.w	8001c78 <SD_disk_initialize+0x190>
 8001b72:	7afb      	ldrb	r3, [r7, #11]
 8001b74:	2baa      	cmp	r3, #170	; 0xaa
 8001b76:	d17f      	bne.n	8001c78 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2077      	movs	r0, #119	; 0x77
 8001b7c:	f7ff ff62 	bl	8001a44 <SD_SendCmd>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d807      	bhi.n	8001b96 <SD_disk_initialize+0xae>
 8001b86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b8a:	2069      	movs	r0, #105	; 0x69
 8001b8c:	f7ff ff5a 	bl	8001a44 <SD_SendCmd>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d005      	beq.n	8001ba2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001b96:	4b47      	ldr	r3, [pc, #284]	; (8001cb4 <SD_disk_initialize+0x1cc>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1eb      	bne.n	8001b78 <SD_disk_initialize+0x90>
 8001ba0:	e000      	b.n	8001ba4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001ba2:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001ba4:	4b43      	ldr	r3, [pc, #268]	; (8001cb4 <SD_disk_initialize+0x1cc>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d064      	beq.n	8001c78 <SD_disk_initialize+0x190>
 8001bae:	2100      	movs	r1, #0
 8001bb0:	207a      	movs	r0, #122	; 0x7a
 8001bb2:	f7ff ff47 	bl	8001a44 <SD_SendCmd>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d15d      	bne.n	8001c78 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	e00c      	b.n	8001bdc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001bc2:	7bfc      	ldrb	r4, [r7, #15]
 8001bc4:	f7ff fe0a 	bl	80017dc <SPI_RxByte>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f107 0310 	add.w	r3, r7, #16
 8001bd0:	4423      	add	r3, r4
 8001bd2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d9ef      	bls.n	8001bc2 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001be2:	7a3b      	ldrb	r3, [r7, #8]
 8001be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <SD_disk_initialize+0x108>
 8001bec:	2306      	movs	r3, #6
 8001bee:	e000      	b.n	8001bf2 <SD_disk_initialize+0x10a>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	73bb      	strb	r3, [r7, #14]
 8001bf4:	e040      	b.n	8001c78 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2077      	movs	r0, #119	; 0x77
 8001bfa:	f7ff ff23 	bl	8001a44 <SD_SendCmd>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d808      	bhi.n	8001c16 <SD_disk_initialize+0x12e>
 8001c04:	2100      	movs	r1, #0
 8001c06:	2069      	movs	r0, #105	; 0x69
 8001c08:	f7ff ff1c 	bl	8001a44 <SD_SendCmd>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d801      	bhi.n	8001c16 <SD_disk_initialize+0x12e>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e000      	b.n	8001c18 <SD_disk_initialize+0x130>
 8001c16:	2301      	movs	r3, #1
 8001c18:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001c1a:	7bbb      	ldrb	r3, [r7, #14]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d10e      	bne.n	8001c3e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001c20:	2100      	movs	r1, #0
 8001c22:	2077      	movs	r0, #119	; 0x77
 8001c24:	f7ff ff0e 	bl	8001a44 <SD_SendCmd>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d80e      	bhi.n	8001c4c <SD_disk_initialize+0x164>
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2069      	movs	r0, #105	; 0x69
 8001c32:	f7ff ff07 	bl	8001a44 <SD_SendCmd>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d107      	bne.n	8001c4c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001c3c:	e00d      	b.n	8001c5a <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001c3e:	2100      	movs	r1, #0
 8001c40:	2041      	movs	r0, #65	; 0x41
 8001c42:	f7ff feff 	bl	8001a44 <SD_SendCmd>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001c4c:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <SD_disk_initialize+0x1cc>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1e1      	bne.n	8001c1a <SD_disk_initialize+0x132>
 8001c56:	e000      	b.n	8001c5a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001c58:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001c5a:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <SD_disk_initialize+0x1cc>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d007      	beq.n	8001c74 <SD_disk_initialize+0x18c>
 8001c64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c68:	2050      	movs	r0, #80	; 0x50
 8001c6a:	f7ff feeb 	bl	8001a44 <SD_SendCmd>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8001c78:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <SD_disk_initialize+0x1d0>)
 8001c7a:	7bbb      	ldrb	r3, [r7, #14]
 8001c7c:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8001c7e:	f7ff fd87 	bl	8001790 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001c82:	f7ff fdab 	bl	80017dc <SPI_RxByte>
  
  if (type) 
 8001c86:	7bbb      	ldrb	r3, [r7, #14]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <SD_disk_initialize+0x1c8>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	f023 0301 	bic.w	r3, r3, #1
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <SD_disk_initialize+0x1c8>)
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	e001      	b.n	8001ca2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001c9e:	f7ff fe31 	bl	8001904 <SD_PowerOff>
  }
  
  return Stat;
 8001ca2:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <SD_disk_initialize+0x1c8>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	b2db      	uxtb	r3, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd90      	pop	{r4, r7, pc}
 8001cb0:	20000010 	.word	0x20000010
 8001cb4:	200027de 	.word	0x200027de
 8001cb8:	20000220 	.word	0x20000220

08001cbc <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e002      	b.n	8001cd6 <SD_disk_status+0x1a>
  
  return Stat;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <SD_disk_status+0x24>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b2db      	uxtb	r3, r3
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	20000010 	.word	0x20000010

08001ce4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d102      	bne.n	8001d00 <SD_disk_read+0x1c>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <SD_disk_read+0x20>
    return RES_PARERR;
 8001d00:	2304      	movs	r3, #4
 8001d02:	e051      	b.n	8001da8 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001d04:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <SD_disk_read+0xcc>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e048      	b.n	8001da8 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001d16:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <SD_disk_read+0xd0>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d102      	bne.n	8001d28 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	025b      	lsls	r3, r3, #9
 8001d26:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001d28:	f7ff fd26 	bl	8001778 <SELECT>
  
  if (count == 1) 
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d111      	bne.n	8001d56 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	2051      	movs	r0, #81	; 0x51
 8001d36:	f7ff fe85 	bl	8001a44 <SD_SendCmd>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d129      	bne.n	8001d94 <SD_disk_read+0xb0>
 8001d40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d44:	68b8      	ldr	r0, [r7, #8]
 8001d46:	f7ff fdf3 	bl	8001930 <SD_RxDataBlock>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d021      	beq.n	8001d94 <SD_disk_read+0xb0>
      count = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	e01e      	b.n	8001d94 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	2052      	movs	r0, #82	; 0x52
 8001d5a:	f7ff fe73 	bl	8001a44 <SD_SendCmd>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d117      	bne.n	8001d94 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001d64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d68:	68b8      	ldr	r0, [r7, #8]
 8001d6a:	f7ff fde1 	bl	8001930 <SD_RxDataBlock>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00a      	beq.n	8001d8a <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d7a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	603b      	str	r3, [r7, #0]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1ed      	bne.n	8001d64 <SD_disk_read+0x80>
 8001d88:	e000      	b.n	8001d8c <SD_disk_read+0xa8>
          break;
 8001d8a:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	204c      	movs	r0, #76	; 0x4c
 8001d90:	f7ff fe58 	bl	8001a44 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001d94:	f7ff fcfc 	bl	8001790 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001d98:	f7ff fd20 	bl	80017dc <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	bf14      	ite	ne
 8001da2:	2301      	movne	r3, #1
 8001da4:	2300      	moveq	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000010 	.word	0x20000010
 8001db4:	20000220 	.word	0x20000220

08001db8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d102      	bne.n	8001dd4 <SD_disk_write+0x1c>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <SD_disk_write+0x20>
    return RES_PARERR;
 8001dd4:	2304      	movs	r3, #4
 8001dd6:	e06b      	b.n	8001eb0 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001dd8:	4b37      	ldr	r3, [pc, #220]	; (8001eb8 <SD_disk_write+0x100>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e062      	b.n	8001eb0 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001dea:	4b33      	ldr	r3, [pc, #204]	; (8001eb8 <SD_disk_write+0x100>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <SD_disk_write+0x44>
    return RES_WRPRT;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e059      	b.n	8001eb0 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001dfc:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <SD_disk_write+0x104>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d102      	bne.n	8001e0e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	025b      	lsls	r3, r3, #9
 8001e0c:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001e0e:	f7ff fcb3 	bl	8001778 <SELECT>
  
  if (count == 1) 
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d110      	bne.n	8001e3a <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	2058      	movs	r0, #88	; 0x58
 8001e1c:	f7ff fe12 	bl	8001a44 <SD_SendCmd>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d13a      	bne.n	8001e9c <SD_disk_write+0xe4>
 8001e26:	21fe      	movs	r1, #254	; 0xfe
 8001e28:	68b8      	ldr	r0, [r7, #8]
 8001e2a:	f7ff fdb7 	bl	800199c <SD_TxDataBlock>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d033      	beq.n	8001e9c <SD_disk_write+0xe4>
      count = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	e030      	b.n	8001e9c <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <SD_disk_write+0x104>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001e46:	2100      	movs	r1, #0
 8001e48:	2077      	movs	r0, #119	; 0x77
 8001e4a:	f7ff fdfb 	bl	8001a44 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001e4e:	6839      	ldr	r1, [r7, #0]
 8001e50:	2057      	movs	r0, #87	; 0x57
 8001e52:	f7ff fdf7 	bl	8001a44 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	2059      	movs	r0, #89	; 0x59
 8001e5a:	f7ff fdf3 	bl	8001a44 <SD_SendCmd>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d11b      	bne.n	8001e9c <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001e64:	21fc      	movs	r1, #252	; 0xfc
 8001e66:	68b8      	ldr	r0, [r7, #8]
 8001e68:	f7ff fd98 	bl	800199c <SD_TxDataBlock>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e78:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1ee      	bne.n	8001e64 <SD_disk_write+0xac>
 8001e86:	e000      	b.n	8001e8a <SD_disk_write+0xd2>
          break;
 8001e88:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001e8a:	21fd      	movs	r1, #253	; 0xfd
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff fd85 	bl	800199c <SD_TxDataBlock>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <SD_disk_write+0xe4>
      {        
        count = 1;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001e9c:	f7ff fc78 	bl	8001790 <DESELECT>
  SPI_RxByte();
 8001ea0:	f7ff fc9c 	bl	80017dc <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	bf14      	ite	ne
 8001eaa:	2301      	movne	r3, #1
 8001eac:	2300      	moveq	r3, #0
 8001eae:	b2db      	uxtb	r3, r3
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000010 	.word	0x20000010
 8001ebc:	20000220 	.word	0x20000220

08001ec0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b08b      	sub	sp, #44	; 0x2c
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	603a      	str	r2, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001eda:	2304      	movs	r3, #4
 8001edc:	e11b      	b.n	8002116 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001ee4:	79bb      	ldrb	r3, [r7, #6]
 8001ee6:	2b05      	cmp	r3, #5
 8001ee8:	d129      	bne.n	8001f3e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d017      	beq.n	8001f22 <SD_disk_ioctl+0x62>
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	dc1f      	bgt.n	8001f36 <SD_disk_ioctl+0x76>
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <SD_disk_ioctl+0x40>
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d00b      	beq.n	8001f16 <SD_disk_ioctl+0x56>
 8001efe:	e01a      	b.n	8001f36 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001f00:	f7ff fd0c 	bl	800191c <SD_CheckPower>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001f0a:	f7ff fcfb 	bl	8001904 <SD_PowerOff>
      res = RES_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f14:	e0fd      	b.n	8002112 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001f16:	f7ff fca9 	bl	800186c <SD_PowerOn>
      res = RES_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f20:	e0f7      	b.n	8002112 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	1c5c      	adds	r4, r3, #1
 8001f26:	f7ff fcf9 	bl	800191c <SD_CheckPower>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f34:	e0ed      	b.n	8002112 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001f36:	2304      	movs	r3, #4
 8001f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f3c:	e0e9      	b.n	8002112 <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001f3e:	4b78      	ldr	r3, [pc, #480]	; (8002120 <SD_disk_ioctl+0x260>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e0e2      	b.n	8002116 <SD_disk_ioctl+0x256>
    
    SELECT();
 8001f50:	f7ff fc12 	bl	8001778 <SELECT>
    
    switch (ctrl) 
 8001f54:	79bb      	ldrb	r3, [r7, #6]
 8001f56:	2b0d      	cmp	r3, #13
 8001f58:	f200 80cc 	bhi.w	80020f4 <SD_disk_ioctl+0x234>
 8001f5c:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <SD_disk_ioctl+0xa4>)
 8001f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f62:	bf00      	nop
 8001f64:	0800205f 	.word	0x0800205f
 8001f68:	08001f9d 	.word	0x08001f9d
 8001f6c:	0800204f 	.word	0x0800204f
 8001f70:	080020f5 	.word	0x080020f5
 8001f74:	080020f5 	.word	0x080020f5
 8001f78:	080020f5 	.word	0x080020f5
 8001f7c:	080020f5 	.word	0x080020f5
 8001f80:	080020f5 	.word	0x080020f5
 8001f84:	080020f5 	.word	0x080020f5
 8001f88:	080020f5 	.word	0x080020f5
 8001f8c:	080020f5 	.word	0x080020f5
 8001f90:	08002071 	.word	0x08002071
 8001f94:	08002095 	.word	0x08002095
 8001f98:	080020b9 	.word	0x080020b9
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2049      	movs	r0, #73	; 0x49
 8001fa0:	f7ff fd50 	bl	8001a44 <SD_SendCmd>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f040 80a8 	bne.w	80020fc <SD_disk_ioctl+0x23c>
 8001fac:	f107 030c 	add.w	r3, r7, #12
 8001fb0:	2110      	movs	r1, #16
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fcbc 	bl	8001930 <SD_RxDataBlock>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 809e 	beq.w	80020fc <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8001fc0:	7b3b      	ldrb	r3, [r7, #12]
 8001fc2:	099b      	lsrs	r3, r3, #6
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d10e      	bne.n	8001fe8 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001fca:	7d7b      	ldrb	r3, [r7, #21]
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	7d3b      	ldrb	r3, [r7, #20]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001fde:	8bfb      	ldrh	r3, [r7, #30]
 8001fe0:	029a      	lsls	r2, r3, #10
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	e02e      	b.n	8002046 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001fe8:	7c7b      	ldrb	r3, [r7, #17]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	7dbb      	ldrb	r3, [r7, #22]
 8001ff2:	09db      	lsrs	r3, r3, #7
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	7d7b      	ldrb	r3, [r7, #21]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f003 0306 	and.w	r3, r3, #6
 8002004:	b2db      	uxtb	r3, r3
 8002006:	4413      	add	r3, r2
 8002008:	b2db      	uxtb	r3, r3
 800200a:	3302      	adds	r3, #2
 800200c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002010:	7d3b      	ldrb	r3, [r7, #20]
 8002012:	099b      	lsrs	r3, r3, #6
 8002014:	b2db      	uxtb	r3, r3
 8002016:	b29a      	uxth	r2, r3
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	b29b      	uxth	r3, r3
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	b29b      	uxth	r3, r3
 8002020:	4413      	add	r3, r2
 8002022:	b29a      	uxth	r2, r3
 8002024:	7cbb      	ldrb	r3, [r7, #18]
 8002026:	029b      	lsls	r3, r3, #10
 8002028:	b29b      	uxth	r3, r3
 800202a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800202e:	b29b      	uxth	r3, r3
 8002030:	4413      	add	r3, r2
 8002032:	b29b      	uxth	r3, r3
 8002034:	3301      	adds	r3, #1
 8002036:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002038:	8bfa      	ldrh	r2, [r7, #30]
 800203a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800203e:	3b09      	subs	r3, #9
 8002040:	409a      	lsls	r2, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800204c:	e056      	b.n	80020fc <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002054:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800205c:	e055      	b.n	800210a <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800205e:	f7ff fbe9 	bl	8001834 <SD_ReadyWait>
 8002062:	4603      	mov	r3, r0
 8002064:	2bff      	cmp	r3, #255	; 0xff
 8002066:	d14b      	bne.n	8002100 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800206e:	e047      	b.n	8002100 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002070:	2100      	movs	r1, #0
 8002072:	2049      	movs	r0, #73	; 0x49
 8002074:	f7ff fce6 	bl	8001a44 <SD_SendCmd>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d142      	bne.n	8002104 <SD_disk_ioctl+0x244>
 800207e:	2110      	movs	r1, #16
 8002080:	6a38      	ldr	r0, [r7, #32]
 8002082:	f7ff fc55 	bl	8001930 <SD_RxDataBlock>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d03b      	beq.n	8002104 <SD_disk_ioctl+0x244>
        res = RES_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002092:	e037      	b.n	8002104 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002094:	2100      	movs	r1, #0
 8002096:	204a      	movs	r0, #74	; 0x4a
 8002098:	f7ff fcd4 	bl	8001a44 <SD_SendCmd>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d132      	bne.n	8002108 <SD_disk_ioctl+0x248>
 80020a2:	2110      	movs	r1, #16
 80020a4:	6a38      	ldr	r0, [r7, #32]
 80020a6:	f7ff fc43 	bl	8001930 <SD_RxDataBlock>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d02b      	beq.n	8002108 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80020b6:	e027      	b.n	8002108 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80020b8:	2100      	movs	r1, #0
 80020ba:	207a      	movs	r0, #122	; 0x7a
 80020bc:	f7ff fcc2 	bl	8001a44 <SD_SendCmd>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d116      	bne.n	80020f4 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80020cc:	e00b      	b.n	80020e6 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80020ce:	6a3c      	ldr	r4, [r7, #32]
 80020d0:	1c63      	adds	r3, r4, #1
 80020d2:	623b      	str	r3, [r7, #32]
 80020d4:	f7ff fb82 	bl	80017dc <SPI_RxByte>
 80020d8:	4603      	mov	r3, r0
 80020da:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80020dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020e0:	3301      	adds	r3, #1
 80020e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80020e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d9ef      	bls.n	80020ce <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 80020f4:	2304      	movs	r3, #4
 80020f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020fa:	e006      	b.n	800210a <SD_disk_ioctl+0x24a>
      break;
 80020fc:	bf00      	nop
 80020fe:	e004      	b.n	800210a <SD_disk_ioctl+0x24a>
      break;
 8002100:	bf00      	nop
 8002102:	e002      	b.n	800210a <SD_disk_ioctl+0x24a>
      break;
 8002104:	bf00      	nop
 8002106:	e000      	b.n	800210a <SD_disk_ioctl+0x24a>
      break;
 8002108:	bf00      	nop
    }
    
    DESELECT();
 800210a:	f7ff fb41 	bl	8001790 <DESELECT>
    SPI_RxByte();
 800210e:	f7ff fb65 	bl	80017dc <SPI_RxByte>
  }
  
  return res;
 8002112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002116:	4618      	mov	r0, r3
 8002118:	372c      	adds	r7, #44	; 0x2c
 800211a:	46bd      	mov	sp, r7
 800211c:	bd90      	pop	{r4, r7, pc}
 800211e:	bf00      	nop
 8002120:	20000010 	.word	0x20000010

08002124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800212a:	f002 fc9b 	bl	8004a64 <HAL_Init>

  /* USER CODE BEGIN Init */

  setFont(&FreeSans9pt7b);
 800212e:	4885      	ldr	r0, [pc, #532]	; (8002344 <main+0x220>)
 8002130:	f001 ff74 	bl	800401c <setFont>
  setTextSize(1,1);             // 21 characters per line
 8002134:	2101      	movs	r1, #1
 8002136:	2001      	movs	r0, #1
 8002138:	f001 fc3e 	bl	80039b8 <setTextSize>
  display_oled_init(SSD1306_SWITCHCAPVCC, SCREEN_WIDTH, SCREEN_HEIGHT);
 800213c:	2240      	movs	r2, #64	; 0x40
 800213e:	2180      	movs	r1, #128	; 0x80
 8002140:	2002      	movs	r0, #2
 8002142:	f001 fba9 	bl	8003898 <display_oled_init>

  oled.current_screen = SCREEN_MAIN;
 8002146:	4b80      	ldr	r3, [pc, #512]	; (8002348 <main+0x224>)
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
  err_p -> error_code = NO_ERROR;
 800214c:	4b7f      	ldr	r3, [pc, #508]	; (800234c <main+0x228>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]

  /* Configure time keeping flags */
  time.led_fast_blink = false;
 8002154:	4b7e      	ldr	r3, [pc, #504]	; (8002350 <main+0x22c>)
 8002156:	2200      	movs	r2, #0
 8002158:	719a      	strb	r2, [r3, #6]
  time.flag_10ms_tick = false;
 800215a:	4b7d      	ldr	r3, [pc, #500]	; (8002350 <main+0x22c>)
 800215c:	2200      	movs	r2, #0
 800215e:	70da      	strb	r2, [r3, #3]
  time.flag_100ms_tick = false;
 8002160:	4b7b      	ldr	r3, [pc, #492]	; (8002350 <main+0x22c>)
 8002162:	2200      	movs	r2, #0
 8002164:	711a      	strb	r2, [r3, #4]
  time.flag_500ms_tick = false;
 8002166:	4b7a      	ldr	r3, [pc, #488]	; (8002350 <main+0x22c>)
 8002168:	2200      	movs	r2, #0
 800216a:	715a      	strb	r2, [r3, #5]
  
  /* Configure button-related flags */
  btn.up_btn_press_ctr = 0;   
 800216c:	4b79      	ldr	r3, [pc, #484]	; (8002354 <main+0x230>)
 800216e:	2200      	movs	r2, #0
 8002170:	705a      	strb	r2, [r3, #1]
  btn.rt_btn_press_ctr = 0;   
 8002172:	4b78      	ldr	r3, [pc, #480]	; (8002354 <main+0x230>)
 8002174:	2200      	movs	r2, #0
 8002176:	709a      	strb	r2, [r3, #2]
  btn.dn_btn_press_ctr = 0;   
 8002178:	4b76      	ldr	r3, [pc, #472]	; (8002354 <main+0x230>)
 800217a:	2200      	movs	r2, #0
 800217c:	70da      	strb	r2, [r3, #3]
  btn.lt_btn_press_ctr = 0;
 800217e:	4b75      	ldr	r3, [pc, #468]	; (8002354 <main+0x230>)
 8002180:	2200      	movs	r2, #0
 8002182:	711a      	strb	r2, [r3, #4]

  btn.button_press_status = NO_BTN_PUSHED;   
 8002184:	4b73      	ldr	r3, [pc, #460]	; (8002354 <main+0x230>)
 8002186:	2204      	movs	r2, #4
 8002188:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start(&htim2);			// Start timer #2 for us delay timer
 800218a:	4873      	ldr	r0, [pc, #460]	; (8002358 <main+0x234>)
 800218c:	f005 fa32 	bl	80075f4 <HAL_TIM_Base_Start>
  init_ad4681 ( &a2d );                 // Initialize the A2D
 8002190:	4872      	ldr	r0, [pc, #456]	; (800235c <main+0x238>)
 8002192:	f7ff f9a5 	bl	80014e0 <init_ad4681>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002196:	f000 f8ff 	bl	8002398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800219a:	f000 fbc9 	bl	8002930 <MX_GPIO_Init>
  MX_ADC1_Init();
 800219e:	f000 f95f 	bl	8002460 <MX_ADC1_Init>
  MX_I2C2_Init();
 80021a2:	f000 f99b 	bl	80024dc <MX_I2C2_Init>
  MX_FATFS_Init();
 80021a6:	f006 fa23 	bl	80085f0 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 80021aa:	f000 fb97 	bl	80028dc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80021ae:	f000 fa2f 	bl	8002610 <MX_TIM1_Init>
  MX_SPI1_Init();
 80021b2:	f000 f9c1 	bl	8002538 <MX_SPI1_Init>
  MX_TIM2_Init();
 80021b6:	f000 fac9 	bl	800274c <MX_TIM2_Init>
  MX_SPI2_Init();
 80021ba:	f000 f9f3 	bl	80025a4 <MX_SPI2_Init>
  MX_TIM3_Init();
 80021be:	f000 fb37 	bl	8002830 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  print_string("Chip Reset.",LF);
 80021c2:	2101      	movs	r1, #1
 80021c4:	4866      	ldr	r0, [pc, #408]	; (8002360 <main+0x23c>)
 80021c6:	f002 fbef 	bl	80049a8 <print_string>
   * In the following block of code we are testing
   * the ability to write to the SD card
  */

  /* Mount SD Card */ 
  if ( f_mount ( & fs ,  "" ,  0 )  !=  FR_OK ){
 80021ca:	2200      	movs	r2, #0
 80021cc:	4965      	ldr	r1, [pc, #404]	; (8002364 <main+0x240>)
 80021ce:	4866      	ldr	r0, [pc, #408]	; (8002368 <main+0x244>)
 80021d0:	f008 ffa2 	bl	800b118 <f_mount>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d005      	beq.n	80021e6 <main+0xc2>
    err_p -> error_code = SD_FAILED_MOUNT;
 80021da:	4b5c      	ldr	r3, [pc, #368]	; (800234c <main+0x228>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
    Error_Handler (); 
 80021e2:	f001 faed 	bl	80037c0 <Error_Handler>
  }
  
  /* Open file to write */ 
  if ( f_open ( & fil ,  "first.txt" ,  FA_OPEN_ALWAYS  |  FA_READ  |  FA_WRITE )  != FR_OK ){
 80021e6:	2213      	movs	r2, #19
 80021e8:	4960      	ldr	r1, [pc, #384]	; (800236c <main+0x248>)
 80021ea:	4861      	ldr	r0, [pc, #388]	; (8002370 <main+0x24c>)
 80021ec:	f008 ffde 	bl	800b1ac <f_open>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <main+0xde>
    err_p -> error_code = SD_OPEN_FILE;
 80021f6:	4b55      	ldr	r3, [pc, #340]	; (800234c <main+0x228>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2202      	movs	r2, #2
 80021fc:	701a      	strb	r2, [r3, #0]
    Error_Handler(); 
 80021fe:	f001 fadf 	bl	80037c0 <Error_Handler>
  }
  
  /* Check free space */ 
  if ( f_getfree ( "" ,  & fre_clust ,  & pfs )  !=  FR_OK ){
 8002202:	4a5c      	ldr	r2, [pc, #368]	; (8002374 <main+0x250>)
 8002204:	495c      	ldr	r1, [pc, #368]	; (8002378 <main+0x254>)
 8002206:	4857      	ldr	r0, [pc, #348]	; (8002364 <main+0x240>)
 8002208:	f009 fe86 	bl	800bf18 <f_getfree>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <main+0xfa>
    err_p -> error_code = SD_CHECK_MEMORY;
 8002212:	4b4e      	ldr	r3, [pc, #312]	; (800234c <main+0x228>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2203      	movs	r2, #3
 8002218:	701a      	strb	r2, [r3, #0]
    Error_Handler(); 
 800221a:	f001 fad1 	bl	80037c0 <Error_Handler>
  }
  
  total =  ( uint32_t ) ( ( pfs -> n_fatent -  2 )  * pfs -> csize*  0.5 ) ; 
 800221e:	4b55      	ldr	r3, [pc, #340]	; (8002374 <main+0x250>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002226:	3314      	adds	r3, #20
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	1e9a      	subs	r2, r3, #2
 800222c:	4b51      	ldr	r3, [pc, #324]	; (8002374 <main+0x250>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002234:	3302      	adds	r3, #2
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	fb03 f302 	mul.w	r3, r3, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe f93d 	bl	80004bc <__aeabi_ui2d>
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	4b4d      	ldr	r3, [pc, #308]	; (800237c <main+0x258>)
 8002248:	f7fe f9b2 	bl	80005b0 <__aeabi_dmul>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4610      	mov	r0, r2
 8002252:	4619      	mov	r1, r3
 8002254:	f7fe fc84 	bl	8000b60 <__aeabi_d2uiz>
 8002258:	4603      	mov	r3, r0
 800225a:	4a49      	ldr	r2, [pc, #292]	; (8002380 <main+0x25c>)
 800225c:	6013      	str	r3, [r2, #0]
  free_space =  ( uint32_t ) ( fre_clust * pfs -> csize *  0.5 ) ;    
 800225e:	4b45      	ldr	r3, [pc, #276]	; (8002374 <main+0x250>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002266:	3302      	adds	r3, #2
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	4b42      	ldr	r3, [pc, #264]	; (8002378 <main+0x254>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	fb03 f302 	mul.w	r3, r3, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe f921 	bl	80004bc <__aeabi_ui2d>
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	4b3f      	ldr	r3, [pc, #252]	; (800237c <main+0x258>)
 8002280:	f7fe f996 	bl	80005b0 <__aeabi_dmul>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	f7fe fc68 	bl	8000b60 <__aeabi_d2uiz>
 8002290:	4603      	mov	r3, r0
 8002292:	4a3c      	ldr	r2, [pc, #240]	; (8002384 <main+0x260>)
 8002294:	6013      	str	r3, [r2, #0]
    
  /* Free space is less than 1kb */ 
  if ( free_space <  1 ){
 8002296:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <main+0x260>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d105      	bne.n	80022aa <main+0x186>
    err_p -> error_code = SD_LOW_ON_MEMORY;
 800229e:	4b2b      	ldr	r3, [pc, #172]	; (800234c <main+0x228>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2204      	movs	r2, #4
 80022a4:	701a      	strb	r2, [r3, #0]
    Error_Handler(); 
 80022a6:	f001 fa8b 	bl	80037c0 <Error_Handler>
  }
  
  /* Write data to SD card */ 
  f_puts ( "STM32 SD Card I/O Example via SPI\n" ,  & fil ) ;   
 80022aa:	4931      	ldr	r1, [pc, #196]	; (8002370 <main+0x24c>)
 80022ac:	4836      	ldr	r0, [pc, #216]	; (8002388 <main+0x264>)
 80022ae:	f009 ff52 	bl	800c156 <f_puts>
  f_puts ( "Save the world!!!" ,  &fil ) ; 
 80022b2:	492f      	ldr	r1, [pc, #188]	; (8002370 <main+0x24c>)
 80022b4:	4835      	ldr	r0, [pc, #212]	; (800238c <main+0x268>)
 80022b6:	f009 ff4e 	bl	800c156 <f_puts>

  /* Close file */ 
  if ( f_close ( & fil )  !=  FR_OK ){
 80022ba:	482d      	ldr	r0, [pc, #180]	; (8002370 <main+0x24c>)
 80022bc:	f009 fe01 	bl	800bec2 <f_close>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <main+0x1ae>
    err_p -> error_code = SD_CLOSING_FILE;
 80022c6:	4b21      	ldr	r3, [pc, #132]	; (800234c <main+0x228>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2205      	movs	r2, #5
 80022cc:	701a      	strb	r2, [r3, #0]
    Error_Handler(); 
 80022ce:	f001 fa77 	bl	80037c0 <Error_Handler>
  // display_oled_drawBitmap((oled.screen_width - BITMAP_WIDTH) / 2, (oled.screen_height - BITMAP_HEIGHT) / 2,
  //             oled.splash_screen_data, oled.splash_screen_width, oled.splash_screen_height, 1);


  display_oled_drawBitmap(
    (oled.screen_width  - LOGO_WIDTH ) / 2,
 80022d2:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <main+0x224>)
 80022d4:	785b      	ldrb	r3, [r3, #1]
 80022d6:	3b10      	subs	r3, #16
 80022d8:	0fda      	lsrs	r2, r3, #31
 80022da:	4413      	add	r3, r2
 80022dc:	105b      	asrs	r3, r3, #1
  display_oled_drawBitmap(
 80022de:	b218      	sxth	r0, r3
    (oled.screen_height - LOGO_HEIGHT) / 2,
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <main+0x224>)
 80022e2:	789b      	ldrb	r3, [r3, #2]
 80022e4:	3b10      	subs	r3, #16
 80022e6:	0fda      	lsrs	r2, r3, #31
 80022e8:	4413      	add	r3, r2
 80022ea:	105b      	asrs	r3, r3, #1
  display_oled_drawBitmap(
 80022ec:	b219      	sxth	r1, r3
 80022ee:	2301      	movs	r3, #1
 80022f0:	9301      	str	r3, [sp, #4]
 80022f2:	2310      	movs	r3, #16
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	2310      	movs	r3, #16
 80022f8:	4a25      	ldr	r2, [pc, #148]	; (8002390 <main+0x26c>)
 80022fa:	f001 fb95 	bl	8003a28 <display_oled_drawBitmap>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    
    if(time.flag_10ms_tick) {
 80022fe:	4b14      	ldr	r3, [pc, #80]	; (8002350 <main+0x22c>)
 8002300:	78db      	ldrb	r3, [r3, #3]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <main+0x1f6>
      time.flag_10ms_tick = false;
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <main+0x22c>)
 8002308:	2200      	movs	r2, #0
 800230a:	70da      	strb	r2, [r3, #3]
      
      /* Grab Sensor Data */
      get_ad4681_samples( &a2d );    
 800230c:	4813      	ldr	r0, [pc, #76]	; (800235c <main+0x238>)
 800230e:	f7ff f927 	bl	8001560 <get_ad4681_samples>
      
      /* Log Sensor Data */
      log_samples();
 8002312:	f000 ffa9 	bl	8003268 <log_samples>
      
      /* Evaluate Button Inputs */
      evaluate_button_inputs();
 8002316:	f001 f85b 	bl	80033d0 <evaluate_button_inputs>


    }

    if(time.flag_100ms_tick) {
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <main+0x22c>)
 800231c:	791b      	ldrb	r3, [r3, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d004      	beq.n	800232c <main+0x208>
      time.flag_100ms_tick = false;
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <main+0x22c>)
 8002324:	2200      	movs	r2, #0
 8002326:	711a      	strb	r2, [r3, #4]
      
      /* Update Display */
      update_screen();
 8002328:	f000 fbc8 	bl	8002abc <update_screen>
    }

    if(time.flag_500ms_tick) {
 800232c:	4b08      	ldr	r3, [pc, #32]	; (8002350 <main+0x22c>)
 800232e:	795b      	ldrb	r3, [r3, #5]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0e4      	beq.n	80022fe <main+0x1da>
      time.flag_500ms_tick = false;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <main+0x22c>)
 8002336:	2200      	movs	r2, #0
 8002338:	715a      	strb	r2, [r3, #5]
      HAL_GPIO_TogglePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin);
 800233a:	2102      	movs	r1, #2
 800233c:	4815      	ldr	r0, [pc, #84]	; (8002394 <main+0x270>)
 800233e:	f003 f8c6 	bl	80054ce <HAL_GPIO_TogglePin>
    if(time.flag_10ms_tick) {
 8002342:	e7dc      	b.n	80022fe <main+0x1da>
 8002344:	20000000 	.word	0x20000000
 8002348:	20000460 	.word	0x20000460
 800234c:	2000154c 	.word	0x2000154c
 8002350:	20001658 	.word	0x20001658
 8002354:	200027d8 	.word	0x200027d8
 8002358:	200016f8 	.word	0x200016f8
 800235c:	20001660 	.word	0x20001660
 8002360:	0800f118 	.word	0x0800f118
 8002364:	0800f124 	.word	0x0800f124
 8002368:	200004c8 	.word	0x200004c8
 800236c:	0800f128 	.word	0x0800f128
 8002370:	200017ac 	.word	0x200017ac
 8002374:	2000169c 	.word	0x2000169c
 8002378:	2000045c 	.word	0x2000045c
 800237c:	3fe00000 	.word	0x3fe00000
 8002380:	20001740 	.word	0x20001740
 8002384:	200015c8 	.word	0x200015c8
 8002388:	0800f134 	.word	0x0800f134
 800238c:	0800f158 	.word	0x0800f158
 8002390:	0800fa80 	.word	0x0800fa80
 8002394:	40011800 	.word	0x40011800

08002398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b09c      	sub	sp, #112	; 0x70
 800239c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800239e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023a2:	2238      	movs	r2, #56	; 0x38
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f009 fffa 	bl	800c3a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	2220      	movs	r2, #32
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f009 ffec 	bl	800c3a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023c8:	2301      	movs	r3, #1
 80023ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80023d2:	2301      	movs	r3, #1
 80023d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023d6:	2301      	movs	r3, #1
 80023d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 80023da:	2300      	movs	r3, #0
 80023dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023de:	2302      	movs	r3, #2
 80023e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80023e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80023ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 fccc 	bl	8005d94 <HAL_RCC_OscConfig>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002402:	f001 f9dd 	bl	80037c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002406:	230f      	movs	r3, #15
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800240a:	2302      	movs	r3, #2
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800240e:	2300      	movs	r3, #0
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002416:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002418:	2300      	movs	r3, #0
 800241a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800241c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002420:	2102      	movs	r1, #2
 8002422:	4618      	mov	r0, r3
 8002424:	f003 ffcc 	bl	80063c0 <HAL_RCC_ClockConfig>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800242e:	f001 f9c7 	bl	80037c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002432:	2302      	movs	r3, #2
 8002434:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800243a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	4618      	mov	r0, r3
 8002440:	f004 f9de 	bl	8006800 <HAL_RCCEx_PeriphCLKConfig>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800244a:	f001 f9b9 	bl	80037c0 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800244e:	4b03      	ldr	r3, [pc, #12]	; (800245c <SystemClock_Config+0xc4>)
 8002450:	2201      	movs	r2, #1
 8002452:	601a      	str	r2, [r3, #0]
}
 8002454:	bf00      	nop
 8002456:	3770      	adds	r7, #112	; 0x70
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	42420070 	.word	0x42420070

08002460 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002466:	1d3b      	adds	r3, r7, #4
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <MX_ADC1_Init+0x74>)
 8002472:	4a19      	ldr	r2, [pc, #100]	; (80024d8 <MX_ADC1_Init+0x78>)
 8002474:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002476:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <MX_ADC1_Init+0x74>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800247c:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <MX_ADC1_Init+0x74>)
 800247e:	2200      	movs	r2, #0
 8002480:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <MX_ADC1_Init+0x74>)
 8002484:	2200      	movs	r2, #0
 8002486:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <MX_ADC1_Init+0x74>)
 800248a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800248e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002490:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <MX_ADC1_Init+0x74>)
 8002492:	2200      	movs	r2, #0
 8002494:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <MX_ADC1_Init+0x74>)
 8002498:	2201      	movs	r2, #1
 800249a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800249c:	480d      	ldr	r0, [pc, #52]	; (80024d4 <MX_ADC1_Init+0x74>)
 800249e:	f002 fb43 	bl	8004b28 <HAL_ADC_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80024a8:	f001 f98a 	bl	80037c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80024ac:	230a      	movs	r3, #10
 80024ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024b0:	2301      	movs	r3, #1
 80024b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	4619      	mov	r1, r3
 80024bc:	4805      	ldr	r0, [pc, #20]	; (80024d4 <MX_ADC1_Init+0x74>)
 80024be:	f002 fc0b 	bl	8004cd8 <HAL_ADC_ConfigChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80024c8:	f001 f97a 	bl	80037c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20001598 	.word	0x20001598
 80024d8:	40012400 	.word	0x40012400

080024dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <MX_I2C2_Init+0x50>)
 80024e2:	4a13      	ldr	r2, [pc, #76]	; (8002530 <MX_I2C2_Init+0x54>)
 80024e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80024e6:	4b11      	ldr	r3, [pc, #68]	; (800252c <MX_I2C2_Init+0x50>)
 80024e8:	4a12      	ldr	r2, [pc, #72]	; (8002534 <MX_I2C2_Init+0x58>)
 80024ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <MX_I2C2_Init+0x50>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80024f2:	4b0e      	ldr	r3, [pc, #56]	; (800252c <MX_I2C2_Init+0x50>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <MX_I2C2_Init+0x50>)
 80024fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <MX_I2C2_Init+0x50>)
 8002502:	2200      	movs	r2, #0
 8002504:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <MX_I2C2_Init+0x50>)
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800250c:	4b07      	ldr	r3, [pc, #28]	; (800252c <MX_I2C2_Init+0x50>)
 800250e:	2200      	movs	r2, #0
 8002510:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <MX_I2C2_Init+0x50>)
 8002514:	2200      	movs	r2, #0
 8002516:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002518:	4804      	ldr	r0, [pc, #16]	; (800252c <MX_I2C2_Init+0x50>)
 800251a:	f002 fff1 	bl	8005500 <HAL_I2C_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002524:	f001 f94c 	bl	80037c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}
 800252c:	200014f8 	.word	0x200014f8
 8002530:	40005800 	.word	0x40005800
 8002534:	000186a0 	.word	0x000186a0

08002538 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800253c:	4b17      	ldr	r3, [pc, #92]	; (800259c <MX_SPI1_Init+0x64>)
 800253e:	4a18      	ldr	r2, [pc, #96]	; (80025a0 <MX_SPI1_Init+0x68>)
 8002540:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002542:	4b16      	ldr	r3, [pc, #88]	; (800259c <MX_SPI1_Init+0x64>)
 8002544:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002548:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800254a:	4b14      	ldr	r3, [pc, #80]	; (800259c <MX_SPI1_Init+0x64>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <MX_SPI1_Init+0x64>)
 8002552:	2200      	movs	r2, #0
 8002554:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <MX_SPI1_Init+0x64>)
 8002558:	2200      	movs	r2, #0
 800255a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <MX_SPI1_Init+0x64>)
 800255e:	2200      	movs	r2, #0
 8002560:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002562:	4b0e      	ldr	r3, [pc, #56]	; (800259c <MX_SPI1_Init+0x64>)
 8002564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002568:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <MX_SPI1_Init+0x64>)
 800256c:	2230      	movs	r2, #48	; 0x30
 800256e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <MX_SPI1_Init+0x64>)
 8002572:	2200      	movs	r2, #0
 8002574:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <MX_SPI1_Init+0x64>)
 8002578:	2200      	movs	r2, #0
 800257a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800257c:	4b07      	ldr	r3, [pc, #28]	; (800259c <MX_SPI1_Init+0x64>)
 800257e:	2200      	movs	r2, #0
 8002580:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <MX_SPI1_Init+0x64>)
 8002584:	220a      	movs	r2, #10
 8002586:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002588:	4804      	ldr	r0, [pc, #16]	; (800259c <MX_SPI1_Init+0x64>)
 800258a:	f004 fa6b 	bl	8006a64 <HAL_SPI_Init>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002594:	f001 f914 	bl	80037c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	200016a0 	.word	0x200016a0
 80025a0:	40013000 	.word	0x40013000

080025a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80025a8:	4b17      	ldr	r3, [pc, #92]	; (8002608 <MX_SPI2_Init+0x64>)
 80025aa:	4a18      	ldr	r2, [pc, #96]	; (800260c <MX_SPI2_Init+0x68>)
 80025ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <MX_SPI2_Init+0x64>)
 80025b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025b6:	4b14      	ldr	r3, [pc, #80]	; (8002608 <MX_SPI2_Init+0x64>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <MX_SPI2_Init+0x64>)
 80025be:	2200      	movs	r2, #0
 80025c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <MX_SPI2_Init+0x64>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <MX_SPI2_Init+0x64>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <MX_SPI2_Init+0x64>)
 80025d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80025d6:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <MX_SPI2_Init+0x64>)
 80025d8:	2208      	movs	r2, #8
 80025da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <MX_SPI2_Init+0x64>)
 80025de:	2200      	movs	r2, #0
 80025e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <MX_SPI2_Init+0x64>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025e8:	4b07      	ldr	r3, [pc, #28]	; (8002608 <MX_SPI2_Init+0x64>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <MX_SPI2_Init+0x64>)
 80025f0:	220a      	movs	r2, #10
 80025f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025f4:	4804      	ldr	r0, [pc, #16]	; (8002608 <MX_SPI2_Init+0x64>)
 80025f6:	f004 fa35 	bl	8006a64 <HAL_SPI_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002600:	f001 f8de 	bl	80037c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000470 	.word	0x20000470
 800260c:	40003800 	.word	0x40003800

08002610 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b096      	sub	sp, #88	; 0x58
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002616:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002624:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800262e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
 800263c:	611a      	str	r2, [r3, #16]
 800263e:	615a      	str	r2, [r3, #20]
 8002640:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	2220      	movs	r2, #32
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f009 fea9 	bl	800c3a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800264e:	4b3d      	ldr	r3, [pc, #244]	; (8002744 <MX_TIM1_Init+0x134>)
 8002650:	4a3d      	ldr	r2, [pc, #244]	; (8002748 <MX_TIM1_Init+0x138>)
 8002652:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8002654:	4b3b      	ldr	r3, [pc, #236]	; (8002744 <MX_TIM1_Init+0x134>)
 8002656:	f240 32e7 	movw	r2, #999	; 0x3e7
 800265a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800265c:	4b39      	ldr	r3, [pc, #228]	; (8002744 <MX_TIM1_Init+0x134>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 720;
 8002662:	4b38      	ldr	r3, [pc, #224]	; (8002744 <MX_TIM1_Init+0x134>)
 8002664:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002668:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800266a:	4b36      	ldr	r3, [pc, #216]	; (8002744 <MX_TIM1_Init+0x134>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002670:	4b34      	ldr	r3, [pc, #208]	; (8002744 <MX_TIM1_Init+0x134>)
 8002672:	2200      	movs	r2, #0
 8002674:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002676:	4b33      	ldr	r3, [pc, #204]	; (8002744 <MX_TIM1_Init+0x134>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800267c:	4831      	ldr	r0, [pc, #196]	; (8002744 <MX_TIM1_Init+0x134>)
 800267e:	f004 ff69 	bl	8007554 <HAL_TIM_Base_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002688:	f001 f89a 	bl	80037c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800268c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002690:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002692:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002696:	4619      	mov	r1, r3
 8002698:	482a      	ldr	r0, [pc, #168]	; (8002744 <MX_TIM1_Init+0x134>)
 800269a:	f005 f9ad 	bl	80079f8 <HAL_TIM_ConfigClockSource>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80026a4:	f001 f88c 	bl	80037c0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80026a8:	4826      	ldr	r0, [pc, #152]	; (8002744 <MX_TIM1_Init+0x134>)
 80026aa:	f004 fff5 	bl	8007698 <HAL_TIM_OC_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80026b4:	f001 f884 	bl	80037c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b8:	2300      	movs	r3, #0
 80026ba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026bc:	2300      	movs	r3, #0
 80026be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026c4:	4619      	mov	r1, r3
 80026c6:	481f      	ldr	r0, [pc, #124]	; (8002744 <MX_TIM1_Init+0x134>)
 80026c8:	f005 fd12 	bl	80080f0 <HAL_TIMEx_MasterConfigSynchronization>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80026d2:	f001 f875 	bl	80037c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80026d6:	2300      	movs	r3, #0
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026de:	2300      	movs	r3, #0
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026e2:	2300      	movs	r3, #0
 80026e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f6:	2200      	movs	r2, #0
 80026f8:	4619      	mov	r1, r3
 80026fa:	4812      	ldr	r0, [pc, #72]	; (8002744 <MX_TIM1_Init+0x134>)
 80026fc:	f005 f924 	bl	8007948 <HAL_TIM_OC_ConfigChannel>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002706:	f001 f85b 	bl	80037c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800271e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002722:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002724:	2300      	movs	r3, #0
 8002726:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	4619      	mov	r1, r3
 800272c:	4805      	ldr	r0, [pc, #20]	; (8002744 <MX_TIM1_Init+0x134>)
 800272e:	f005 fd45 	bl	80081bc <HAL_TIMEx_ConfigBreakDeadTime>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002738:	f001 f842 	bl	80037c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800273c:	bf00      	nop
 800273e:	3758      	adds	r7, #88	; 0x58
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20001610 	.word	0x20001610
 8002748:	40012c00 	.word	0x40012c00

0800274c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08e      	sub	sp, #56	; 0x38
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002760:	f107 0320 	add.w	r3, r7, #32
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800276a:	1d3b      	adds	r3, r7, #4
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
 8002778:	615a      	str	r2, [r3, #20]
 800277a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800277c:	4b2b      	ldr	r3, [pc, #172]	; (800282c <MX_TIM2_Init+0xe0>)
 800277e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002782:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002784:	4b29      	ldr	r3, [pc, #164]	; (800282c <MX_TIM2_Init+0xe0>)
 8002786:	2247      	movs	r2, #71	; 0x47
 8002788:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278a:	4b28      	ldr	r3, [pc, #160]	; (800282c <MX_TIM2_Init+0xe0>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002790:	4b26      	ldr	r3, [pc, #152]	; (800282c <MX_TIM2_Init+0xe0>)
 8002792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002796:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002798:	4b24      	ldr	r3, [pc, #144]	; (800282c <MX_TIM2_Init+0xe0>)
 800279a:	2200      	movs	r2, #0
 800279c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800279e:	4b23      	ldr	r3, [pc, #140]	; (800282c <MX_TIM2_Init+0xe0>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027a4:	4821      	ldr	r0, [pc, #132]	; (800282c <MX_TIM2_Init+0xe0>)
 80027a6:	f004 fed5 	bl	8007554 <HAL_TIM_Base_Init>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80027b0:	f001 f806 	bl	80037c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027be:	4619      	mov	r1, r3
 80027c0:	481a      	ldr	r0, [pc, #104]	; (800282c <MX_TIM2_Init+0xe0>)
 80027c2:	f005 f919 	bl	80079f8 <HAL_TIM_ConfigClockSource>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80027cc:	f000 fff8 	bl	80037c0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80027d0:	4816      	ldr	r0, [pc, #88]	; (800282c <MX_TIM2_Init+0xe0>)
 80027d2:	f004 ff61 	bl	8007698 <HAL_TIM_OC_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80027dc:	f000 fff0 	bl	80037c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e0:	2300      	movs	r3, #0
 80027e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027e8:	f107 0320 	add.w	r3, r7, #32
 80027ec:	4619      	mov	r1, r3
 80027ee:	480f      	ldr	r0, [pc, #60]	; (800282c <MX_TIM2_Init+0xe0>)
 80027f0:	f005 fc7e 	bl	80080f0 <HAL_TIMEx_MasterConfigSynchronization>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80027fa:	f000 ffe1 	bl	80037c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	2200      	movs	r2, #0
 8002812:	4619      	mov	r1, r3
 8002814:	4805      	ldr	r0, [pc, #20]	; (800282c <MX_TIM2_Init+0xe0>)
 8002816:	f005 f897 	bl	8007948 <HAL_TIM_OC_ConfigChannel>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002820:	f000 ffce 	bl	80037c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002824:	bf00      	nop
 8002826:	3738      	adds	r7, #56	; 0x38
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	200016f8 	.word	0x200016f8

08002830 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002836:	f107 0320 	add.w	r3, r7, #32
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	60da      	str	r2, [r3, #12]
 800284c:	611a      	str	r2, [r3, #16]
 800284e:	615a      	str	r2, [r3, #20]
 8002850:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002852:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <MX_TIM3_Init+0xa4>)
 8002854:	4a20      	ldr	r2, [pc, #128]	; (80028d8 <MX_TIM3_Init+0xa8>)
 8002856:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002858:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <MX_TIM3_Init+0xa4>)
 800285a:	2247      	movs	r2, #71	; 0x47
 800285c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285e:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <MX_TIM3_Init+0xa4>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002864:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <MX_TIM3_Init+0xa4>)
 8002866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800286a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <MX_TIM3_Init+0xa4>)
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002872:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <MX_TIM3_Init+0xa4>)
 8002874:	2200      	movs	r2, #0
 8002876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002878:	4816      	ldr	r0, [pc, #88]	; (80028d4 <MX_TIM3_Init+0xa4>)
 800287a:	f004 ff0d 	bl	8007698 <HAL_TIM_OC_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002884:	f000 ff9c 	bl	80037c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002888:	2300      	movs	r3, #0
 800288a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002890:	f107 0320 	add.w	r3, r7, #32
 8002894:	4619      	mov	r1, r3
 8002896:	480f      	ldr	r0, [pc, #60]	; (80028d4 <MX_TIM3_Init+0xa4>)
 8002898:	f005 fc2a 	bl	80080f0 <HAL_TIMEx_MasterConfigSynchronization>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80028a2:	f000 ff8d 	bl	80037c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80028a6:	2300      	movs	r3, #0
 80028a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	2200      	movs	r2, #0
 80028ba:	4619      	mov	r1, r3
 80028bc:	4805      	ldr	r0, [pc, #20]	; (80028d4 <MX_TIM3_Init+0xa4>)
 80028be:	f005 f843 	bl	8007948 <HAL_TIM_OC_ConfigChannel>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80028c8:	f000 ff7a 	bl	80037c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028cc:	bf00      	nop
 80028ce:	3728      	adds	r7, #40	; 0x28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20001550 	.word	0x20001550
 80028d8:	40000400 	.word	0x40000400

080028dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <MX_USART1_UART_Init+0x4c>)
 80028e2:	4a12      	ldr	r2, [pc, #72]	; (800292c <MX_USART1_UART_Init+0x50>)
 80028e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028e6:	4b10      	ldr	r3, [pc, #64]	; (8002928 <MX_USART1_UART_Init+0x4c>)
 80028e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028ee:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <MX_USART1_UART_Init+0x4c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <MX_USART1_UART_Init+0x4c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <MX_USART1_UART_Init+0x4c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002900:	4b09      	ldr	r3, [pc, #36]	; (8002928 <MX_USART1_UART_Init+0x4c>)
 8002902:	220c      	movs	r2, #12
 8002904:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <MX_USART1_UART_Init+0x4c>)
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <MX_USART1_UART_Init+0x4c>)
 800290e:	2200      	movs	r2, #0
 8002910:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002912:	4805      	ldr	r0, [pc, #20]	; (8002928 <MX_USART1_UART_Init+0x4c>)
 8002914:	f005 fcb5 	bl	8008282 <HAL_UART_Init>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800291e:	f000 ff4f 	bl	80037c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200015cc 	.word	0x200015cc
 800292c:	40013800 	.word	0x40013800

08002930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08a      	sub	sp, #40	; 0x28
 8002934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002936:	f107 0318 	add.w	r3, r7, #24
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002944:	4b57      	ldr	r3, [pc, #348]	; (8002aa4 <MX_GPIO_Init+0x174>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	4a56      	ldr	r2, [pc, #344]	; (8002aa4 <MX_GPIO_Init+0x174>)
 800294a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800294e:	6193      	str	r3, [r2, #24]
 8002950:	4b54      	ldr	r3, [pc, #336]	; (8002aa4 <MX_GPIO_Init+0x174>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800295c:	4b51      	ldr	r3, [pc, #324]	; (8002aa4 <MX_GPIO_Init+0x174>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	4a50      	ldr	r2, [pc, #320]	; (8002aa4 <MX_GPIO_Init+0x174>)
 8002962:	f043 0308 	orr.w	r3, r3, #8
 8002966:	6193      	str	r3, [r2, #24]
 8002968:	4b4e      	ldr	r3, [pc, #312]	; (8002aa4 <MX_GPIO_Init+0x174>)
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002974:	4b4b      	ldr	r3, [pc, #300]	; (8002aa4 <MX_GPIO_Init+0x174>)
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	4a4a      	ldr	r2, [pc, #296]	; (8002aa4 <MX_GPIO_Init+0x174>)
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	6193      	str	r3, [r2, #24]
 8002980:	4b48      	ldr	r3, [pc, #288]	; (8002aa4 <MX_GPIO_Init+0x174>)
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800298c:	4b45      	ldr	r3, [pc, #276]	; (8002aa4 <MX_GPIO_Init+0x174>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	4a44      	ldr	r2, [pc, #272]	; (8002aa4 <MX_GPIO_Init+0x174>)
 8002992:	f043 0310 	orr.w	r3, r3, #16
 8002996:	6193      	str	r3, [r2, #24]
 8002998:	4b42      	ldr	r3, [pc, #264]	; (8002aa4 <MX_GPIO_Init+0x174>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a4:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <MX_GPIO_Init+0x174>)
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	4a3e      	ldr	r2, [pc, #248]	; (8002aa4 <MX_GPIO_Init+0x174>)
 80029aa:	f043 0320 	orr.w	r3, r3, #32
 80029ae:	6193      	str	r3, [r2, #24]
 80029b0:	4b3c      	ldr	r3, [pc, #240]	; (8002aa4 <MX_GPIO_Init+0x174>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f003 0320 	and.w	r3, r3, #32
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_DUT_PWR_Pin|HLTH_LED_Pin|LED4_Pin|LED1_Pin
 80029bc:	2200      	movs	r2, #0
 80029be:	f240 7186 	movw	r1, #1926	; 0x786
 80029c2:	4839      	ldr	r0, [pc, #228]	; (8002aa8 <MX_GPIO_Init+0x178>)
 80029c4:	f002 fd6b 	bl	800549e <HAL_GPIO_WritePin>
                          |LED2_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SWO_Pin|SD_SPI2_CSn_Pin, GPIO_PIN_RESET);
 80029c8:	2200      	movs	r2, #0
 80029ca:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80029ce:	4837      	ldr	r0, [pc, #220]	; (8002aac <MX_GPIO_Init+0x17c>)
 80029d0:	f002 fd65 	bl	800549e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_SPI1_CSn_GPIO_Port, ADC_SPI1_CSn_Pin, GPIO_PIN_RESET);
 80029d4:	2200      	movs	r2, #0
 80029d6:	2110      	movs	r1, #16
 80029d8:	4835      	ldr	r0, [pc, #212]	; (8002ab0 <MX_GPIO_Init+0x180>)
 80029da:	f002 fd60 	bl	800549e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_DUT_PWR_Pin LED4_Pin LED1_Pin LED2_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = EN_DUT_PWR_Pin|LED4_Pin|LED1_Pin|LED2_Pin
 80029de:	f240 7384 	movw	r3, #1924	; 0x784
 80029e2:	61bb      	str	r3, [r7, #24]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e4:	2301      	movs	r3, #1
 80029e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2302      	movs	r3, #2
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029f0:	f107 0318 	add.w	r3, r7, #24
 80029f4:	4619      	mov	r1, r3
 80029f6:	482c      	ldr	r0, [pc, #176]	; (8002aa8 <MX_GPIO_Init+0x178>)
 80029f8:	f002 fbb6 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWO_Pin SD_SPI2_CSn_Pin */
  GPIO_InitStruct.Pin = SWO_Pin|SD_SPI2_CSn_Pin;
 80029fc:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8002a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a02:	2301      	movs	r3, #1
 8002a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0e:	f107 0318 	add.w	r3, r7, #24
 8002a12:	4619      	mov	r1, r3
 8002a14:	4825      	ldr	r0, [pc, #148]	; (8002aac <MX_GPIO_Init+0x17c>)
 8002a16:	f002 fba7 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1_n_Pin PB2_n_Pin PB3_n_Pin PB4_n_Pin */
  GPIO_InitStruct.Pin = PB1_n_Pin|PB2_n_Pin|PB3_n_Pin|PB4_n_Pin;
 8002a1a:	2378      	movs	r3, #120	; 0x78
 8002a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a26:	f107 0318 	add.w	r3, r7, #24
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	481e      	ldr	r0, [pc, #120]	; (8002aa8 <MX_GPIO_Init+0x178>)
 8002a2e:	f002 fb9b 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pin : HLTH_LED_Pin */
  GPIO_InitStruct.Pin = HLTH_LED_Pin;
 8002a32:	2302      	movs	r3, #2
 8002a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002a36:	2311      	movs	r3, #17
 8002a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HLTH_LED_GPIO_Port, &GPIO_InitStruct);
 8002a42:	f107 0318 	add.w	r3, r7, #24
 8002a46:	4619      	mov	r1, r3
 8002a48:	4817      	ldr	r0, [pc, #92]	; (8002aa8 <MX_GPIO_Init+0x178>)
 8002a4a:	f002 fb8d 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_SPI1_CSn_Pin */
  GPIO_InitStruct.Pin = ADC_SPI1_CSn_Pin;
 8002a4e:	2310      	movs	r3, #16
 8002a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a52:	2301      	movs	r3, #1
 8002a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ADC_SPI1_CSn_GPIO_Port, &GPIO_InitStruct);
 8002a5e:	f107 0318 	add.w	r3, r7, #24
 8002a62:	4619      	mov	r1, r3
 8002a64:	4812      	ldr	r0, [pc, #72]	; (8002ab0 <MX_GPIO_Init+0x180>)
 8002a66:	f002 fb7f 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pins : REV_2_Pin REV_1_Pin REV_0_Pin */
  GPIO_InitStruct.Pin = REV_2_Pin|REV_1_Pin|REV_0_Pin;
 8002a6a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a78:	f107 0318 	add.w	r3, r7, #24
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	480d      	ldr	r0, [pc, #52]	; (8002ab4 <MX_GPIO_Init+0x184>)
 8002a80:	f002 fb72 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_ALRTn_Pin */
  GPIO_InitStruct.Pin = ADC_ALRTn_Pin;
 8002a84:	2308      	movs	r3, #8
 8002a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <MX_GPIO_Init+0x188>)
 8002a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADC_ALRTn_GPIO_Port, &GPIO_InitStruct);
 8002a90:	f107 0318 	add.w	r3, r7, #24
 8002a94:	4619      	mov	r1, r3
 8002a96:	4806      	ldr	r0, [pc, #24]	; (8002ab0 <MX_GPIO_Init+0x180>)
 8002a98:	f002 fb66 	bl	8005168 <HAL_GPIO_Init>

}
 8002a9c:	bf00      	nop
 8002a9e:	3728      	adds	r7, #40	; 0x28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40011800 	.word	0x40011800
 8002aac:	40010c00 	.word	0x40010c00
 8002ab0:	40010800 	.word	0x40010800
 8002ab4:	40011400 	.word	0x40011400
 8002ab8:	10210000 	.word	0x10210000

08002abc <update_screen>:
      tick = time.ticks500ms;
      while (tick == time.ticks500ms); 
    }
}

void update_screen( void ) {
 8002abc:	b5b0      	push	{r4, r5, r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0
    char temp_number[8];        //Define the array that will hold the ASCII values

    /* USE SPRINT F TO BUILD THE ARRAY OF ASCII CHARACTERS */


  switch (oled.current_screen) {
 8002ac2:	4bb7      	ldr	r3, [pc, #732]	; (8002da0 <update_screen+0x2e4>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	f200 82b8 	bhi.w	800303c <update_screen+0x580>
 8002acc:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <update_screen+0x18>)
 8002ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad2:	bf00      	nop
 8002ad4:	08002ae9 	.word	0x08002ae9
 8002ad8:	08002ce3 	.word	0x08002ce3
 8002adc:	08002dd5 	.word	0x08002dd5
 8002ae0:	08002e91 	.word	0x08002e91
 8002ae4:	08002f4b 	.word	0x08002f4b
    case SCREEN_MAIN:
      /* Clear Display */
      oled_clear();
 8002ae8:	f000 ff86 	bl	80039f8 <oled_clear>

      /* Set Larger Text Size for title */
      setTextSize(2,2);
 8002aec:	2102      	movs	r1, #2
 8002aee:	2002      	movs	r0, #2
 8002af0:	f000 ff62 	bl	80039b8 <setTextSize>

      /* Write Title Line and Underscore */
      writeOledString("   MAIN  \n", SSD1306_WHITE);
 8002af4:	2101      	movs	r1, #1
 8002af6:	48ab      	ldr	r0, [pc, #684]	; (8002da4 <update_screen+0x2e8>)
 8002af8:	f001 f91e 	bl	8003d38 <writeOledString>

      /* Smaller text size for underline */
      setTextSize(1,1);
 8002afc:	2101      	movs	r1, #1
 8002afe:	2001      	movs	r0, #1
 8002b00:	f000 ff5a 	bl	80039b8 <setTextSize>
      writeOledString("--------------------\n", SSD1306_WHITE);
 8002b04:	2101      	movs	r1, #1
 8002b06:	48a8      	ldr	r0, [pc, #672]	; (8002da8 <update_screen+0x2ec>)
 8002b08:	f001 f916 	bl	8003d38 <writeOledString>

      /* Print Current Voltage Value */
      memset(temp_string, '\0', 32);                  // Destination, Source, Size
 8002b0c:	f107 0308 	add.w	r3, r7, #8
 8002b10:	2220      	movs	r2, #32
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f009 fc43 	bl	800c3a0 <memset>
      memset(temp_number, '\0', 8);                   
 8002b1a:	463b      	mov	r3, r7
 8002b1c:	2208      	movs	r2, #8
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f009 fc3d 	bl	800c3a0 <memset>
      strcat(temp_string,"Voltage: ");
 8002b26:	f107 0308 	add.w	r3, r7, #8
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fb7c 	bl	8000228 <strlen>
 8002b30:	4603      	mov	r3, r0
 8002b32:	461a      	mov	r2, r3
 8002b34:	f107 0308 	add.w	r3, r7, #8
 8002b38:	4413      	add	r3, r2
 8002b3a:	499c      	ldr	r1, [pc, #624]	; (8002dac <update_screen+0x2f0>)
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	460b      	mov	r3, r1
 8002b40:	cb03      	ldmia	r3!, {r0, r1}
 8002b42:	6010      	str	r0, [r2, #0]
 8002b44:	6051      	str	r1, [r2, #4]
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	8113      	strh	r3, [r2, #8]

      sprintf((char *)temp_number, "%.4f", a2d_p -> voltage_f );   //f tells the function we want to print a float value
 8002b4a:	4b99      	ldr	r3, [pc, #612]	; (8002db0 <update_screen+0x2f4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fd fcd5 	bl	8000500 <__aeabi_f2d>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4638      	mov	r0, r7
 8002b5c:	4995      	ldr	r1, [pc, #596]	; (8002db4 <update_screen+0x2f8>)
 8002b5e:	f00a f887 	bl	800cc70 <siprintf>

      strcat(temp_string, temp_number);         
 8002b62:	463a      	mov	r2, r7
 8002b64:	f107 0308 	add.w	r3, r7, #8
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f00a f8a0 	bl	800ccb0 <strcat>
      strcat(temp_string, "\n");         
 8002b70:	f107 0308 	add.w	r3, r7, #8
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fd fb57 	bl	8000228 <strlen>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f107 0308 	add.w	r3, r7, #8
 8002b82:	4413      	add	r3, r2
 8002b84:	498c      	ldr	r1, [pc, #560]	; (8002db8 <update_screen+0x2fc>)
 8002b86:	461a      	mov	r2, r3
 8002b88:	460b      	mov	r3, r1
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	8013      	strh	r3, [r2, #0]
      writeOledString(temp_string, SSD1306_WHITE);
 8002b8e:	f107 0308 	add.w	r3, r7, #8
 8002b92:	2101      	movs	r1, #1
 8002b94:	4618      	mov	r0, r3
 8002b96:	f001 f8cf 	bl	8003d38 <writeOledString>

       /* Print Current Current Value */
      memset(temp_string, '\0', 32);                 
 8002b9a:	f107 0308 	add.w	r3, r7, #8
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f009 fbfc 	bl	800c3a0 <memset>
      memset(temp_number, '\0', 8);                   
 8002ba8:	463b      	mov	r3, r7
 8002baa:	2208      	movs	r2, #8
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f009 fbf6 	bl	800c3a0 <memset>
      strcat(temp_string, "Current: ");              
 8002bb4:	f107 0308 	add.w	r3, r7, #8
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fd fb35 	bl	8000228 <strlen>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	f107 0308 	add.w	r3, r7, #8
 8002bc6:	4413      	add	r3, r2
 8002bc8:	497c      	ldr	r1, [pc, #496]	; (8002dbc <update_screen+0x300>)
 8002bca:	461a      	mov	r2, r3
 8002bcc:	460b      	mov	r3, r1
 8002bce:	cb03      	ldmia	r3!, {r0, r1}
 8002bd0:	6010      	str	r0, [r2, #0]
 8002bd2:	6051      	str	r1, [r2, #4]
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	8113      	strh	r3, [r2, #8]

      sprintf((char *)temp_number, "%.4f", a2d_p -> current_f );   //f tells the function we want to print a float value
 8002bd8:	4b75      	ldr	r3, [pc, #468]	; (8002db0 <update_screen+0x2f4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd fc8e 	bl	8000500 <__aeabi_f2d>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4638      	mov	r0, r7
 8002bea:	4972      	ldr	r1, [pc, #456]	; (8002db4 <update_screen+0x2f8>)
 8002bec:	f00a f840 	bl	800cc70 <siprintf>

      strcat(temp_string, temp_number);         
 8002bf0:	463a      	mov	r2, r7
 8002bf2:	f107 0308 	add.w	r3, r7, #8
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f00a f859 	bl	800ccb0 <strcat>
      strcat(temp_string, "\n");         
 8002bfe:	f107 0308 	add.w	r3, r7, #8
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fb10 	bl	8000228 <strlen>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	4413      	add	r3, r2
 8002c12:	4969      	ldr	r1, [pc, #420]	; (8002db8 <update_screen+0x2fc>)
 8002c14:	461a      	mov	r2, r3
 8002c16:	460b      	mov	r3, r1
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	8013      	strh	r3, [r2, #0]
      writeOledString(temp_string, SSD1306_WHITE);
 8002c1c:	f107 0308 	add.w	r3, r7, #8
 8002c20:	2101      	movs	r1, #1
 8002c22:	4618      	mov	r0, r3
 8002c24:	f001 f888 	bl	8003d38 <writeOledString>

      
       /* Print Current Power Value */
      memset(temp_string, '\0', 32);                  
 8002c28:	f107 0308 	add.w	r3, r7, #8
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f009 fbb5 	bl	800c3a0 <memset>
      memset(temp_number, '\0', 8);                   
 8002c36:	463b      	mov	r3, r7
 8002c38:	2208      	movs	r2, #8
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f009 fbaf 	bl	800c3a0 <memset>
      strcat(temp_string, "Power: ");              
 8002c42:	f107 0308 	add.w	r3, r7, #8
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd faee 	bl	8000228 <strlen>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f107 0308 	add.w	r3, r7, #8
 8002c54:	4413      	add	r3, r2
 8002c56:	495a      	ldr	r1, [pc, #360]	; (8002dc0 <update_screen+0x304>)
 8002c58:	461a      	mov	r2, r3
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	cb03      	ldmia	r3!, {r0, r1}
 8002c5e:	6010      	str	r0, [r2, #0]
 8002c60:	6051      	str	r1, [r2, #4]

      sprintf((char *)temp_number, "%.4f", a2d_p -> power_f );   //f tells the function we want to print a float value
 8002c62:	4b53      	ldr	r3, [pc, #332]	; (8002db0 <update_screen+0x2f4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd fc49 	bl	8000500 <__aeabi_f2d>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4638      	mov	r0, r7
 8002c74:	494f      	ldr	r1, [pc, #316]	; (8002db4 <update_screen+0x2f8>)
 8002c76:	f009 fffb 	bl	800cc70 <siprintf>

      strcat(temp_string, temp_number);         
 8002c7a:	463a      	mov	r2, r7
 8002c7c:	f107 0308 	add.w	r3, r7, #8
 8002c80:	4611      	mov	r1, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f00a f814 	bl	800ccb0 <strcat>
      strcat(temp_string, "\n");         
 8002c88:	f107 0308 	add.w	r3, r7, #8
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fd facb 	bl	8000228 <strlen>
 8002c92:	4603      	mov	r3, r0
 8002c94:	461a      	mov	r2, r3
 8002c96:	f107 0308 	add.w	r3, r7, #8
 8002c9a:	4413      	add	r3, r2
 8002c9c:	4946      	ldr	r1, [pc, #280]	; (8002db8 <update_screen+0x2fc>)
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	8013      	strh	r3, [r2, #0]
      writeOledString(temp_string, SSD1306_WHITE);
 8002ca6:	f107 0308 	add.w	r3, r7, #8
 8002caa:	2101      	movs	r1, #1
 8002cac:	4618      	mov	r0, r3
 8002cae:	f001 f843 	bl	8003d38 <writeOledString>

       /* Indicate run status */
      memset(temp_string, '\0', 32);
 8002cb2:	f107 0308 	add.w	r3, r7, #8
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f009 fb70 	bl	800c3a0 <memset>
      if(a2d_p -> logging_status) {
 8002cc0:	4b3b      	ldr	r3, [pc, #236]	; (8002db0 <update_screen+0x2f4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	785b      	ldrb	r3, [r3, #1]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <update_screen+0x218>
        writeOledString("Running: True\n", SSD1306_WHITE);
 8002cca:	2101      	movs	r1, #1
 8002ccc:	483d      	ldr	r0, [pc, #244]	; (8002dc4 <update_screen+0x308>)
 8002cce:	f001 f833 	bl	8003d38 <writeOledString>
 8002cd2:	e003      	b.n	8002cdc <update_screen+0x220>
      }
      else {
        writeOledString("Running: False\n", SSD1306_WHITE);
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	483c      	ldr	r0, [pc, #240]	; (8002dc8 <update_screen+0x30c>)
 8002cd8:	f001 f82e 	bl	8003d38 <writeOledString>
      /**
       * Call function that pushes
       * local data buffer into RAM
       * of display
       */
      updateDisplay();
 8002cdc:	f001 faa4 	bl	8004228 <updateDisplay>
      
    break;
 8002ce0:	e2a9      	b.n	8003236 <update_screen+0x77a>

    case SCREEN_RUN_TIME_HR:
      /* Clear Display */
      oled_clear();
 8002ce2:	f000 fe89 	bl	80039f8 <oled_clear>

      /* Set Larger Text Size for title */
      setTextSize(2,2);
 8002ce6:	2102      	movs	r1, #2
 8002ce8:	2002      	movs	r0, #2
 8002cea:	f000 fe65 	bl	80039b8 <setTextSize>

      /* Write Title Line and Underscore */
      writeOledString("  HOURS  \n", SSD1306_WHITE);
 8002cee:	2101      	movs	r1, #1
 8002cf0:	4836      	ldr	r0, [pc, #216]	; (8002dcc <update_screen+0x310>)
 8002cf2:	f001 f821 	bl	8003d38 <writeOledString>

      /* Smaller text size for underline */
      setTextSize(1,1);
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	f000 fe5d 	bl	80039b8 <setTextSize>
      writeOledString("--------------------\n", SSD1306_WHITE);
 8002cfe:	2101      	movs	r1, #1
 8002d00:	4829      	ldr	r0, [pc, #164]	; (8002da8 <update_screen+0x2ec>)
 8002d02:	f001 f819 	bl	8003d38 <writeOledString>

      /* Indicate run-time in hours*/
      memset(temp_string, '\0', 32);  
 8002d06:	f107 0308 	add.w	r3, r7, #8
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f009 fb46 	bl	800c3a0 <memset>
      memset(temp_number, '\0', 8);                   
 8002d14:	463b      	mov	r3, r7
 8002d16:	2208      	movs	r2, #8
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f009 fb40 	bl	800c3a0 <memset>
      strcat(temp_string, ">Run Time (hr): ");
 8002d20:	f107 0308 	add.w	r3, r7, #8
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fd fa7f 	bl	8000228 <strlen>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f107 0308 	add.w	r3, r7, #8
 8002d32:	4413      	add	r3, r2
 8002d34:	4a26      	ldr	r2, [pc, #152]	; (8002dd0 <update_screen+0x314>)
 8002d36:	461d      	mov	r5, r3
 8002d38:	4614      	mov	r4, r2
 8002d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3c:	6028      	str	r0, [r5, #0]
 8002d3e:	6069      	str	r1, [r5, #4]
 8002d40:	60aa      	str	r2, [r5, #8]
 8002d42:	60eb      	str	r3, [r5, #12]
 8002d44:	7823      	ldrb	r3, [r4, #0]
 8002d46:	742b      	strb	r3, [r5, #16]

      sprintf((char *)temp_number, "%.4f", a2d_p -> run_time_hr );   //f tells the function we want to print a float value
 8002d48:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <update_screen+0x2f4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fbd6 	bl	8000500 <__aeabi_f2d>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4638      	mov	r0, r7
 8002d5a:	4916      	ldr	r1, [pc, #88]	; (8002db4 <update_screen+0x2f8>)
 8002d5c:	f009 ff88 	bl	800cc70 <siprintf>

      strcat(temp_string, temp_number);
 8002d60:	463a      	mov	r2, r7
 8002d62:	f107 0308 	add.w	r3, r7, #8
 8002d66:	4611      	mov	r1, r2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f009 ffa1 	bl	800ccb0 <strcat>
      strcat(temp_string, "\n");
 8002d6e:	f107 0308 	add.w	r3, r7, #8
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fd fa58 	bl	8000228 <strlen>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f107 0308 	add.w	r3, r7, #8
 8002d80:	4413      	add	r3, r2
 8002d82:	490d      	ldr	r1, [pc, #52]	; (8002db8 <update_screen+0x2fc>)
 8002d84:	461a      	mov	r2, r3
 8002d86:	460b      	mov	r3, r1
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	8013      	strh	r3, [r2, #0]

      writeOledString(temp_string, SSD1306_WHITE);
 8002d8c:	f107 0308 	add.w	r3, r7, #8
 8002d90:	2101      	movs	r1, #1
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 ffd0 	bl	8003d38 <writeOledString>
      /**
       * Call function that pushes
       * local data buffer into RAM
       * of display
       */
      updateDisplay();
 8002d98:	f001 fa46 	bl	8004228 <updateDisplay>
      
    break;
 8002d9c:	e24b      	b.n	8003236 <update_screen+0x77a>
 8002d9e:	bf00      	nop
 8002da0:	20000460 	.word	0x20000460
 8002da4:	0800f16c 	.word	0x0800f16c
 8002da8:	0800f178 	.word	0x0800f178
 8002dac:	0800f190 	.word	0x0800f190
 8002db0:	20001698 	.word	0x20001698
 8002db4:	0800f19c 	.word	0x0800f19c
 8002db8:	0800f1a4 	.word	0x0800f1a4
 8002dbc:	0800f1a8 	.word	0x0800f1a8
 8002dc0:	0800f1b4 	.word	0x0800f1b4
 8002dc4:	0800f1bc 	.word	0x0800f1bc
 8002dc8:	0800f1cc 	.word	0x0800f1cc
 8002dcc:	0800f1dc 	.word	0x0800f1dc
 8002dd0:	0800f1e8 	.word	0x0800f1e8

    case SCREEN_RUN_TIME_MIN:
      /* Clear Display */
      oled_clear();
 8002dd4:	f000 fe10 	bl	80039f8 <oled_clear>

      /* Set Larger Text Size for title */
      setTextSize(2,2);
 8002dd8:	2102      	movs	r1, #2
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f000 fdec 	bl	80039b8 <setTextSize>

      /* Write Title Line and Underscore */
      writeOledString("   MINS  \n", SSD1306_WHITE);
 8002de0:	2101      	movs	r1, #1
 8002de2:	4889      	ldr	r0, [pc, #548]	; (8003008 <update_screen+0x54c>)
 8002de4:	f000 ffa8 	bl	8003d38 <writeOledString>

      /* Smaller text size for underline */
      setTextSize(1,1);
 8002de8:	2101      	movs	r1, #1
 8002dea:	2001      	movs	r0, #1
 8002dec:	f000 fde4 	bl	80039b8 <setTextSize>
      writeOledString("--------------------\n", SSD1306_WHITE);
 8002df0:	2101      	movs	r1, #1
 8002df2:	4886      	ldr	r0, [pc, #536]	; (800300c <update_screen+0x550>)
 8002df4:	f000 ffa0 	bl	8003d38 <writeOledString>

      /* Indicate run-time in hours*/
      memset(temp_string, '\0', 32);  
 8002df8:	f107 0308 	add.w	r3, r7, #8
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4618      	mov	r0, r3
 8002e02:	f009 facd 	bl	800c3a0 <memset>
      memset(temp_number, '\0', 8);                   
 8002e06:	463b      	mov	r3, r7
 8002e08:	2208      	movs	r2, #8
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f009 fac7 	bl	800c3a0 <memset>
      strcat((char*)temp_string, ">Run Time (min): ");
 8002e12:	f107 0308 	add.w	r3, r7, #8
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fd fa06 	bl	8000228 <strlen>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f107 0308 	add.w	r3, r7, #8
 8002e24:	4413      	add	r3, r2
 8002e26:	4a7a      	ldr	r2, [pc, #488]	; (8003010 <update_screen+0x554>)
 8002e28:	461d      	mov	r5, r3
 8002e2a:	4614      	mov	r4, r2
 8002e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e2e:	6028      	str	r0, [r5, #0]
 8002e30:	6069      	str	r1, [r5, #4]
 8002e32:	60aa      	str	r2, [r5, #8]
 8002e34:	60eb      	str	r3, [r5, #12]
 8002e36:	8823      	ldrh	r3, [r4, #0]
 8002e38:	822b      	strh	r3, [r5, #16]

      sprintf((char *)temp_number, "%.4f", a2d_p -> run_time_min );   //f tells the function we want to print a float value
 8002e3a:	4b76      	ldr	r3, [pc, #472]	; (8003014 <update_screen+0x558>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fd fb5d 	bl	8000500 <__aeabi_f2d>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4638      	mov	r0, r7
 8002e4c:	4972      	ldr	r1, [pc, #456]	; (8003018 <update_screen+0x55c>)
 8002e4e:	f009 ff0f 	bl	800cc70 <siprintf>

      strcat(temp_string, temp_number);         
 8002e52:	463a      	mov	r2, r7
 8002e54:	f107 0308 	add.w	r3, r7, #8
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f009 ff28 	bl	800ccb0 <strcat>
      strcat(temp_string, "\n");         
 8002e60:	f107 0308 	add.w	r3, r7, #8
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd f9df 	bl	8000228 <strlen>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f107 0308 	add.w	r3, r7, #8
 8002e72:	4413      	add	r3, r2
 8002e74:	4969      	ldr	r1, [pc, #420]	; (800301c <update_screen+0x560>)
 8002e76:	461a      	mov	r2, r3
 8002e78:	460b      	mov	r3, r1
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	8013      	strh	r3, [r2, #0]

      writeOledString(temp_string, SSD1306_WHITE);
 8002e7e:	f107 0308 	add.w	r3, r7, #8
 8002e82:	2101      	movs	r1, #1
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 ff57 	bl	8003d38 <writeOledString>
      /**
       * Call function that pushes
       * local data buffer into RAM
       * of display
       */
      updateDisplay();
 8002e8a:	f001 f9cd 	bl	8004228 <updateDisplay>
    break;
 8002e8e:	e1d2      	b.n	8003236 <update_screen+0x77a>

    case SCREEN_SENSE_RESISTOR:
      /* Clear Display */
      oled_clear();
 8002e90:	f000 fdb2 	bl	80039f8 <oled_clear>

      /* Set Larger Text Size for title */
      setTextSize(2,2);
 8002e94:	2102      	movs	r1, #2
 8002e96:	2002      	movs	r0, #2
 8002e98:	f000 fd8e 	bl	80039b8 <setTextSize>

      /* Write Title Line and Underscore */
      writeOledString(" RESISTOR\n", SSD1306_WHITE);
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	4860      	ldr	r0, [pc, #384]	; (8003020 <update_screen+0x564>)
 8002ea0:	f000 ff4a 	bl	8003d38 <writeOledString>

      /* Smaller text size for underline */
      setTextSize(1,1);
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	2001      	movs	r0, #1
 8002ea8:	f000 fd86 	bl	80039b8 <setTextSize>
      writeOledString("--------------------\n", SSD1306_WHITE);
 8002eac:	2101      	movs	r1, #1
 8002eae:	4857      	ldr	r0, [pc, #348]	; (800300c <update_screen+0x550>)
 8002eb0:	f000 ff42 	bl	8003d38 <writeOledString>

      /* Indicate run-time in hours*/
      memset(temp_string, '\0', 32);  
 8002eb4:	f107 0308 	add.w	r3, r7, #8
 8002eb8:	2220      	movs	r2, #32
 8002eba:	2100      	movs	r1, #0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f009 fa6f 	bl	800c3a0 <memset>
      memset(temp_number, '\0', 8);                   
 8002ec2:	463b      	mov	r3, r7
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f009 fa69 	bl	800c3a0 <memset>
      strcat(temp_string, ">Sense Res: ");
 8002ece:	f107 0308 	add.w	r3, r7, #8
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fd f9a8 	bl	8000228 <strlen>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	461a      	mov	r2, r3
 8002edc:	f107 0308 	add.w	r3, r7, #8
 8002ee0:	4413      	add	r3, r2
 8002ee2:	4a50      	ldr	r2, [pc, #320]	; (8003024 <update_screen+0x568>)
 8002ee4:	461c      	mov	r4, r3
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002eea:	6020      	str	r0, [r4, #0]
 8002eec:	6061      	str	r1, [r4, #4]
 8002eee:	60a2      	str	r2, [r4, #8]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	7323      	strb	r3, [r4, #12]

      sprintf((char *)temp_number, "%.4f", a2d_p -> cs_res_f );   //f tells the function we want to print a float value
 8002ef4:	4b47      	ldr	r3, [pc, #284]	; (8003014 <update_screen+0x558>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd fb00 	bl	8000500 <__aeabi_f2d>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4638      	mov	r0, r7
 8002f06:	4944      	ldr	r1, [pc, #272]	; (8003018 <update_screen+0x55c>)
 8002f08:	f009 feb2 	bl	800cc70 <siprintf>

      strcat(temp_string, temp_number);         
 8002f0c:	463a      	mov	r2, r7
 8002f0e:	f107 0308 	add.w	r3, r7, #8
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f009 fecb 	bl	800ccb0 <strcat>
      strcat(temp_string, "\n");         
 8002f1a:	f107 0308 	add.w	r3, r7, #8
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd f982 	bl	8000228 <strlen>
 8002f24:	4603      	mov	r3, r0
 8002f26:	461a      	mov	r2, r3
 8002f28:	f107 0308 	add.w	r3, r7, #8
 8002f2c:	4413      	add	r3, r2
 8002f2e:	493b      	ldr	r1, [pc, #236]	; (800301c <update_screen+0x560>)
 8002f30:	461a      	mov	r2, r3
 8002f32:	460b      	mov	r3, r1
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	8013      	strh	r3, [r2, #0]

      writeOledString(temp_string, SSD1306_WHITE);
 8002f38:	f107 0308 	add.w	r3, r7, #8
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fefa 	bl	8003d38 <writeOledString>
      /**
       * Call function that pushes
       * local data buffer into RAM
       * of display
       */
      updateDisplay();
 8002f44:	f001 f970 	bl	8004228 <updateDisplay>
    break;
 8002f48:	e175      	b.n	8003236 <update_screen+0x77a>

    case SCREEN_LOGGING:
     /* Clear Display */
      oled_clear();
 8002f4a:	f000 fd55 	bl	80039f8 <oled_clear>

      /* Set Larger Text Size for title */
      setTextSize(2,2);
 8002f4e:	2102      	movs	r1, #2
 8002f50:	2002      	movs	r0, #2
 8002f52:	f000 fd31 	bl	80039b8 <setTextSize>

      /* Write Title Line and Underscore */
      writeOledString(" LOGGING\n", SSD1306_WHITE);
 8002f56:	2101      	movs	r1, #1
 8002f58:	4833      	ldr	r0, [pc, #204]	; (8003028 <update_screen+0x56c>)
 8002f5a:	f000 feed 	bl	8003d38 <writeOledString>

      /* Smaller text size for underline */
      setTextSize(1,1);
 8002f5e:	2101      	movs	r1, #1
 8002f60:	2001      	movs	r0, #1
 8002f62:	f000 fd29 	bl	80039b8 <setTextSize>
      writeOledString("--------------------\n", SSD1306_WHITE);
 8002f66:	2101      	movs	r1, #1
 8002f68:	4828      	ldr	r0, [pc, #160]	; (800300c <update_screen+0x550>)
 8002f6a:	f000 fee5 	bl	8003d38 <writeOledString>

      
      /* Indicate whether or not we are logging */
      memset(temp_string, '\0', 32);  
 8002f6e:	f107 0308 	add.w	r3, r7, #8
 8002f72:	2220      	movs	r2, #32
 8002f74:	2100      	movs	r1, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f009 fa12 	bl	800c3a0 <memset>
      strcat(temp_string, ">Logging: ");
 8002f7c:	f107 0308 	add.w	r3, r7, #8
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fd f951 	bl	8000228 <strlen>
 8002f86:	4603      	mov	r3, r0
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f107 0308 	add.w	r3, r7, #8
 8002f8e:	4413      	add	r3, r2
 8002f90:	4926      	ldr	r1, [pc, #152]	; (800302c <update_screen+0x570>)
 8002f92:	461a      	mov	r2, r3
 8002f94:	460b      	mov	r3, r1
 8002f96:	cb03      	ldmia	r3!, {r0, r1}
 8002f98:	6010      	str	r0, [r2, #0]
 8002f9a:	6051      	str	r1, [r2, #4]
 8002f9c:	8819      	ldrh	r1, [r3, #0]
 8002f9e:	789b      	ldrb	r3, [r3, #2]
 8002fa0:	8111      	strh	r1, [r2, #8]
 8002fa2:	7293      	strb	r3, [r2, #10]

      if (a2d_p -> logging_status == true){
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <update_screen+0x558>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	785b      	ldrb	r3, [r3, #1]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00f      	beq.n	8002fce <update_screen+0x512>
        strcat(temp_string, " YES\n");         
 8002fae:	f107 0308 	add.w	r3, r7, #8
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd f938 	bl	8000228 <strlen>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f107 0308 	add.w	r3, r7, #8
 8002fc0:	4413      	add	r3, r2
 8002fc2:	4a1b      	ldr	r2, [pc, #108]	; (8003030 <update_screen+0x574>)
 8002fc4:	6810      	ldr	r0, [r2, #0]
 8002fc6:	6018      	str	r0, [r3, #0]
 8002fc8:	8892      	ldrh	r2, [r2, #4]
 8002fca:	809a      	strh	r2, [r3, #4]
 8002fcc:	e00e      	b.n	8002fec <update_screen+0x530>
      }
      
      else {
        strcat(temp_string, " NO\n");         
 8002fce:	f107 0308 	add.w	r3, r7, #8
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd f928 	bl	8000228 <strlen>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f107 0308 	add.w	r3, r7, #8
 8002fe0:	4413      	add	r3, r2
 8002fe2:	4a14      	ldr	r2, [pc, #80]	; (8003034 <update_screen+0x578>)
 8002fe4:	6810      	ldr	r0, [r2, #0]
 8002fe6:	6018      	str	r0, [r3, #0]
 8002fe8:	7912      	ldrb	r2, [r2, #4]
 8002fea:	711a      	strb	r2, [r3, #4]
      }

      writeOledString(temp_string, SSD1306_WHITE);
 8002fec:	f107 0308 	add.w	r3, r7, #8
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fea0 	bl	8003d38 <writeOledString>

      /* Indicate user instruction */
      writeOledString("Press right to enable...", SSD1306_WHITE);
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	480f      	ldr	r0, [pc, #60]	; (8003038 <update_screen+0x57c>)
 8002ffc:	f000 fe9c 	bl	8003d38 <writeOledString>
      /**
       * Call function that pushes
       * local data buffer into RAM
       * of display
       */
      updateDisplay();
 8003000:	f001 f912 	bl	8004228 <updateDisplay>

    break;
 8003004:	e117      	b.n	8003236 <update_screen+0x77a>
 8003006:	bf00      	nop
 8003008:	0800f1fc 	.word	0x0800f1fc
 800300c:	0800f178 	.word	0x0800f178
 8003010:	0800f208 	.word	0x0800f208
 8003014:	20001698 	.word	0x20001698
 8003018:	0800f19c 	.word	0x0800f19c
 800301c:	0800f1a4 	.word	0x0800f1a4
 8003020:	0800f21c 	.word	0x0800f21c
 8003024:	0800f228 	.word	0x0800f228
 8003028:	0800f238 	.word	0x0800f238
 800302c:	0800f244 	.word	0x0800f244
 8003030:	0800f250 	.word	0x0800f250
 8003034:	0800f258 	.word	0x0800f258
 8003038:	0800f260 	.word	0x0800f260

    default:
      /* Error, so print main screen */
      /* Clear Display */
      oled_clear();
 800303c:	f000 fcdc 	bl	80039f8 <oled_clear>

      /* Set Larger Text Size for title */
      setTextSize(2,2);
 8003040:	2102      	movs	r1, #2
 8003042:	2002      	movs	r0, #2
 8003044:	f000 fcb8 	bl	80039b8 <setTextSize>

      /* Write Title Line and Underscore */
      writeOledString("   MAIN  \n", SSD1306_WHITE);
 8003048:	2101      	movs	r1, #1
 800304a:	487d      	ldr	r0, [pc, #500]	; (8003240 <update_screen+0x784>)
 800304c:	f000 fe74 	bl	8003d38 <writeOledString>

      /* Smaller text size for underline */
      setTextSize(1,1);
 8003050:	2101      	movs	r1, #1
 8003052:	2001      	movs	r0, #1
 8003054:	f000 fcb0 	bl	80039b8 <setTextSize>
      writeOledString("--------------------\n", SSD1306_WHITE);
 8003058:	2101      	movs	r1, #1
 800305a:	487a      	ldr	r0, [pc, #488]	; (8003244 <update_screen+0x788>)
 800305c:	f000 fe6c 	bl	8003d38 <writeOledString>

      /* Print Current Voltage Value */
      memset(temp_string, '\0', 32);                  // Destination, Source, Size
 8003060:	f107 0308 	add.w	r3, r7, #8
 8003064:	2220      	movs	r2, #32
 8003066:	2100      	movs	r1, #0
 8003068:	4618      	mov	r0, r3
 800306a:	f009 f999 	bl	800c3a0 <memset>
      memset(temp_number, '\0', 8);                   
 800306e:	463b      	mov	r3, r7
 8003070:	2208      	movs	r2, #8
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f009 f993 	bl	800c3a0 <memset>
      strcat(temp_string, "Voltage: ");              
 800307a:	f107 0308 	add.w	r3, r7, #8
 800307e:	4618      	mov	r0, r3
 8003080:	f7fd f8d2 	bl	8000228 <strlen>
 8003084:	4603      	mov	r3, r0
 8003086:	461a      	mov	r2, r3
 8003088:	f107 0308 	add.w	r3, r7, #8
 800308c:	4413      	add	r3, r2
 800308e:	496e      	ldr	r1, [pc, #440]	; (8003248 <update_screen+0x78c>)
 8003090:	461a      	mov	r2, r3
 8003092:	460b      	mov	r3, r1
 8003094:	cb03      	ldmia	r3!, {r0, r1}
 8003096:	6010      	str	r0, [r2, #0]
 8003098:	6051      	str	r1, [r2, #4]
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	8113      	strh	r3, [r2, #8]

      sprintf((char *)temp_number, "%.4f", a2d_p -> voltage_f );   //f tells the function we want to print a float value
 800309e:	4b6b      	ldr	r3, [pc, #428]	; (800324c <update_screen+0x790>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fd fa2b 	bl	8000500 <__aeabi_f2d>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4638      	mov	r0, r7
 80030b0:	4967      	ldr	r1, [pc, #412]	; (8003250 <update_screen+0x794>)
 80030b2:	f009 fddd 	bl	800cc70 <siprintf>

      strcat(temp_string, temp_number);         
 80030b6:	463a      	mov	r2, r7
 80030b8:	f107 0308 	add.w	r3, r7, #8
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f009 fdf6 	bl	800ccb0 <strcat>
      strcat(temp_string, "\n");         
 80030c4:	f107 0308 	add.w	r3, r7, #8
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd f8ad 	bl	8000228 <strlen>
 80030ce:	4603      	mov	r3, r0
 80030d0:	461a      	mov	r2, r3
 80030d2:	f107 0308 	add.w	r3, r7, #8
 80030d6:	4413      	add	r3, r2
 80030d8:	495e      	ldr	r1, [pc, #376]	; (8003254 <update_screen+0x798>)
 80030da:	461a      	mov	r2, r3
 80030dc:	460b      	mov	r3, r1
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	8013      	strh	r3, [r2, #0]
      writeOledString(temp_string, SSD1306_WHITE);
 80030e2:	f107 0308 	add.w	r3, r7, #8
 80030e6:	2101      	movs	r1, #1
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fe25 	bl	8003d38 <writeOledString>

        /* Print Current Current Value */
      memset(temp_string, '\0', 32);                 
 80030ee:	f107 0308 	add.w	r3, r7, #8
 80030f2:	2220      	movs	r2, #32
 80030f4:	2100      	movs	r1, #0
 80030f6:	4618      	mov	r0, r3
 80030f8:	f009 f952 	bl	800c3a0 <memset>
      memset(temp_number, '\0', 8);                   
 80030fc:	463b      	mov	r3, r7
 80030fe:	2208      	movs	r2, #8
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f009 f94c 	bl	800c3a0 <memset>
      strcat(temp_string, "Current: ");              
 8003108:	f107 0308 	add.w	r3, r7, #8
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd f88b 	bl	8000228 <strlen>
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	f107 0308 	add.w	r3, r7, #8
 800311a:	4413      	add	r3, r2
 800311c:	494e      	ldr	r1, [pc, #312]	; (8003258 <update_screen+0x79c>)
 800311e:	461a      	mov	r2, r3
 8003120:	460b      	mov	r3, r1
 8003122:	cb03      	ldmia	r3!, {r0, r1}
 8003124:	6010      	str	r0, [r2, #0]
 8003126:	6051      	str	r1, [r2, #4]
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	8113      	strh	r3, [r2, #8]

      sprintf((char *)temp_number, "%.4f", a2d_p -> current_f );   //f tells the function we want to print a float value
 800312c:	4b47      	ldr	r3, [pc, #284]	; (800324c <update_screen+0x790>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fd f9e4 	bl	8000500 <__aeabi_f2d>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4638      	mov	r0, r7
 800313e:	4944      	ldr	r1, [pc, #272]	; (8003250 <update_screen+0x794>)
 8003140:	f009 fd96 	bl	800cc70 <siprintf>

      strcat(temp_string, temp_number);         
 8003144:	463a      	mov	r2, r7
 8003146:	f107 0308 	add.w	r3, r7, #8
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f009 fdaf 	bl	800ccb0 <strcat>
      strcat(temp_string, "\n");         
 8003152:	f107 0308 	add.w	r3, r7, #8
 8003156:	4618      	mov	r0, r3
 8003158:	f7fd f866 	bl	8000228 <strlen>
 800315c:	4603      	mov	r3, r0
 800315e:	461a      	mov	r2, r3
 8003160:	f107 0308 	add.w	r3, r7, #8
 8003164:	4413      	add	r3, r2
 8003166:	493b      	ldr	r1, [pc, #236]	; (8003254 <update_screen+0x798>)
 8003168:	461a      	mov	r2, r3
 800316a:	460b      	mov	r3, r1
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	8013      	strh	r3, [r2, #0]
      writeOledString(temp_string, SSD1306_WHITE);
 8003170:	f107 0308 	add.w	r3, r7, #8
 8003174:	2101      	movs	r1, #1
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fdde 	bl	8003d38 <writeOledString>

      
        /* Print Current Power Value */
      memset(temp_string, '\0', 32);                  
 800317c:	f107 0308 	add.w	r3, r7, #8
 8003180:	2220      	movs	r2, #32
 8003182:	2100      	movs	r1, #0
 8003184:	4618      	mov	r0, r3
 8003186:	f009 f90b 	bl	800c3a0 <memset>
      memset(temp_number, '\0', 8);                   
 800318a:	463b      	mov	r3, r7
 800318c:	2208      	movs	r2, #8
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f009 f905 	bl	800c3a0 <memset>
      strcat(temp_string, "Power: ");              
 8003196:	f107 0308 	add.w	r3, r7, #8
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd f844 	bl	8000228 <strlen>
 80031a0:	4603      	mov	r3, r0
 80031a2:	461a      	mov	r2, r3
 80031a4:	f107 0308 	add.w	r3, r7, #8
 80031a8:	4413      	add	r3, r2
 80031aa:	492c      	ldr	r1, [pc, #176]	; (800325c <update_screen+0x7a0>)
 80031ac:	461a      	mov	r2, r3
 80031ae:	460b      	mov	r3, r1
 80031b0:	cb03      	ldmia	r3!, {r0, r1}
 80031b2:	6010      	str	r0, [r2, #0]
 80031b4:	6051      	str	r1, [r2, #4]

      sprintf((char *)temp_number, "%.4f", a2d_p -> power_f );   //f tells the function we want to print a float value
 80031b6:	4b25      	ldr	r3, [pc, #148]	; (800324c <update_screen+0x790>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd f99f 	bl	8000500 <__aeabi_f2d>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4638      	mov	r0, r7
 80031c8:	4921      	ldr	r1, [pc, #132]	; (8003250 <update_screen+0x794>)
 80031ca:	f009 fd51 	bl	800cc70 <siprintf>

      strcat(temp_string, temp_number);         
 80031ce:	463a      	mov	r2, r7
 80031d0:	f107 0308 	add.w	r3, r7, #8
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f009 fd6a 	bl	800ccb0 <strcat>
      strcat(temp_string, "\n");         
 80031dc:	f107 0308 	add.w	r3, r7, #8
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd f821 	bl	8000228 <strlen>
 80031e6:	4603      	mov	r3, r0
 80031e8:	461a      	mov	r2, r3
 80031ea:	f107 0308 	add.w	r3, r7, #8
 80031ee:	4413      	add	r3, r2
 80031f0:	4918      	ldr	r1, [pc, #96]	; (8003254 <update_screen+0x798>)
 80031f2:	461a      	mov	r2, r3
 80031f4:	460b      	mov	r3, r1
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	8013      	strh	r3, [r2, #0]
      writeOledString(temp_string, SSD1306_WHITE);
 80031fa:	f107 0308 	add.w	r3, r7, #8
 80031fe:	2101      	movs	r1, #1
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fd99 	bl	8003d38 <writeOledString>

        /* Indicate run status */
      memset(temp_string, '\0', 32);
 8003206:	f107 0308 	add.w	r3, r7, #8
 800320a:	2220      	movs	r2, #32
 800320c:	2100      	movs	r1, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f009 f8c6 	bl	800c3a0 <memset>
      if(a2d_p -> logging_status) {
 8003214:	4b0d      	ldr	r3, [pc, #52]	; (800324c <update_screen+0x790>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	785b      	ldrb	r3, [r3, #1]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d004      	beq.n	8003228 <update_screen+0x76c>
        writeOledString("Running: True\n", SSD1306_WHITE);
 800321e:	2101      	movs	r1, #1
 8003220:	480f      	ldr	r0, [pc, #60]	; (8003260 <update_screen+0x7a4>)
 8003222:	f000 fd89 	bl	8003d38 <writeOledString>
 8003226:	e003      	b.n	8003230 <update_screen+0x774>
      }
      else {
        writeOledString("Running: False\n", SSD1306_WHITE);
 8003228:	2101      	movs	r1, #1
 800322a:	480e      	ldr	r0, [pc, #56]	; (8003264 <update_screen+0x7a8>)
 800322c:	f000 fd84 	bl	8003d38 <writeOledString>
      /**
       * Call function that pushes
       * local data buffer into RAM
       * of display
       */
      updateDisplay();
 8003230:	f000 fffa 	bl	8004228 <updateDisplay>
    
  }

}
 8003234:	bf00      	nop
 8003236:	bf00      	nop
 8003238:	3728      	adds	r7, #40	; 0x28
 800323a:	46bd      	mov	sp, r7
 800323c:	bdb0      	pop	{r4, r5, r7, pc}
 800323e:	bf00      	nop
 8003240:	0800f16c 	.word	0x0800f16c
 8003244:	0800f178 	.word	0x0800f178
 8003248:	0800f190 	.word	0x0800f190
 800324c:	20001698 	.word	0x20001698
 8003250:	0800f19c 	.word	0x0800f19c
 8003254:	0800f1a4 	.word	0x0800f1a4
 8003258:	0800f1a8 	.word	0x0800f1a8
 800325c:	0800f1b4 	.word	0x0800f1b4
 8003260:	0800f1bc 	.word	0x0800f1bc
 8003264:	0800f1cc 	.word	0x0800f1cc

08003268 <log_samples>:
  blocking_delay_10ms_ticks(1);
}


  // TODO need to implement 
void log_samples( void ) {
 8003268:	b580      	push	{r7, lr}
 800326a:	b08a      	sub	sp, #40	; 0x28
 800326c:	af00      	add	r7, sp, #0
   * @brief Describes how 
   * CSV header shall look
   * VOLTAGE | CURRENT | POWER | uS BETWEEN SAMPLES
   */

  memset(temp_string, '\0', 32);                  // Destination, Source, Size
 800326e:	463b      	mov	r3, r7
 8003270:	2220      	movs	r2, #32
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f009 f893 	bl	800c3a0 <memset>
  memset(temp_number, '\0', 8);                   
 800327a:	f107 0320 	add.w	r3, r7, #32
 800327e:	2208      	movs	r2, #8
 8003280:	2100      	movs	r1, #0
 8003282:	4618      	mov	r0, r3
 8003284:	f009 f88c 	bl	800c3a0 <memset>

  /* Add voltage to the string */
  sprintf((char *)temp_number, "%.4f", a2d_p -> voltage_f);   //f tells the function we want to print a float value
 8003288:	4b4c      	ldr	r3, [pc, #304]	; (80033bc <log_samples+0x154>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd f936 	bl	8000500 <__aeabi_f2d>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	f107 0020 	add.w	r0, r7, #32
 800329c:	4948      	ldr	r1, [pc, #288]	; (80033c0 <log_samples+0x158>)
 800329e:	f009 fce7 	bl	800cc70 <siprintf>
  strcat(temp_string, temp_number);   
 80032a2:	f107 0220 	add.w	r2, r7, #32
 80032a6:	463b      	mov	r3, r7
 80032a8:	4611      	mov	r1, r2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f009 fd00 	bl	800ccb0 <strcat>
  strcat(temp_string, ",");
 80032b0:	463b      	mov	r3, r7
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fc ffb8 	bl	8000228 <strlen>
 80032b8:	4603      	mov	r3, r0
 80032ba:	461a      	mov	r2, r3
 80032bc:	463b      	mov	r3, r7
 80032be:	4413      	add	r3, r2
 80032c0:	4940      	ldr	r1, [pc, #256]	; (80033c4 <log_samples+0x15c>)
 80032c2:	461a      	mov	r2, r3
 80032c4:	460b      	mov	r3, r1
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	8013      	strh	r3, [r2, #0]

  /* Add current to the string */
  memset(temp_number, '\0', 8);                   
 80032ca:	f107 0320 	add.w	r3, r7, #32
 80032ce:	2208      	movs	r2, #8
 80032d0:	2100      	movs	r1, #0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f009 f864 	bl	800c3a0 <memset>
  sprintf((char *)temp_number, "%.4f", a2d_p -> current_f);   //f tells the function we want to print a float value
 80032d8:	4b38      	ldr	r3, [pc, #224]	; (80033bc <log_samples+0x154>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd f90e 	bl	8000500 <__aeabi_f2d>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	f107 0020 	add.w	r0, r7, #32
 80032ec:	4934      	ldr	r1, [pc, #208]	; (80033c0 <log_samples+0x158>)
 80032ee:	f009 fcbf 	bl	800cc70 <siprintf>
  strcat(temp_string, temp_number);   
 80032f2:	f107 0220 	add.w	r2, r7, #32
 80032f6:	463b      	mov	r3, r7
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f009 fcd8 	bl	800ccb0 <strcat>
  strcat(temp_string, ",");
 8003300:	463b      	mov	r3, r7
 8003302:	4618      	mov	r0, r3
 8003304:	f7fc ff90 	bl	8000228 <strlen>
 8003308:	4603      	mov	r3, r0
 800330a:	461a      	mov	r2, r3
 800330c:	463b      	mov	r3, r7
 800330e:	4413      	add	r3, r2
 8003310:	492c      	ldr	r1, [pc, #176]	; (80033c4 <log_samples+0x15c>)
 8003312:	461a      	mov	r2, r3
 8003314:	460b      	mov	r3, r1
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	8013      	strh	r3, [r2, #0]

  /* Add power to the string */
  memset(temp_number, '\0', 8);                   
 800331a:	f107 0320 	add.w	r3, r7, #32
 800331e:	2208      	movs	r2, #8
 8003320:	2100      	movs	r1, #0
 8003322:	4618      	mov	r0, r3
 8003324:	f009 f83c 	bl	800c3a0 <memset>
  sprintf((char *)temp_number, "%.4f", a2d_p -> power_f);   //f tells the function we want to print a float value
 8003328:	4b24      	ldr	r3, [pc, #144]	; (80033bc <log_samples+0x154>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd f8e6 	bl	8000500 <__aeabi_f2d>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	f107 0020 	add.w	r0, r7, #32
 800333c:	4920      	ldr	r1, [pc, #128]	; (80033c0 <log_samples+0x158>)
 800333e:	f009 fc97 	bl	800cc70 <siprintf>
  strcat(temp_string, temp_number);   
 8003342:	f107 0220 	add.w	r2, r7, #32
 8003346:	463b      	mov	r3, r7
 8003348:	4611      	mov	r1, r2
 800334a:	4618      	mov	r0, r3
 800334c:	f009 fcb0 	bl	800ccb0 <strcat>
  strcat(temp_string, ",");
 8003350:	463b      	mov	r3, r7
 8003352:	4618      	mov	r0, r3
 8003354:	f7fc ff68 	bl	8000228 <strlen>
 8003358:	4603      	mov	r3, r0
 800335a:	461a      	mov	r2, r3
 800335c:	463b      	mov	r3, r7
 800335e:	4413      	add	r3, r2
 8003360:	4918      	ldr	r1, [pc, #96]	; (80033c4 <log_samples+0x15c>)
 8003362:	461a      	mov	r2, r3
 8003364:	460b      	mov	r3, r1
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	8013      	strh	r3, [r2, #0]

  /* Add power to the string */
  memset(temp_number, '\0', 8);                   
 800336a:	f107 0320 	add.w	r3, r7, #32
 800336e:	2208      	movs	r2, #8
 8003370:	2100      	movs	r1, #0
 8003372:	4618      	mov	r0, r3
 8003374:	f009 f814 	bl	800c3a0 <memset>
  sprintf((char *)temp_number, "%u", a2d_p -> time_us_elapsed);   //f tells the function we want to print a float value
 8003378:	4b10      	ldr	r3, [pc, #64]	; (80033bc <log_samples+0x154>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	889b      	ldrh	r3, [r3, #4]
 800337e:	461a      	mov	r2, r3
 8003380:	f107 0320 	add.w	r3, r7, #32
 8003384:	4910      	ldr	r1, [pc, #64]	; (80033c8 <log_samples+0x160>)
 8003386:	4618      	mov	r0, r3
 8003388:	f009 fc72 	bl	800cc70 <siprintf>
  strcat(temp_string, temp_number);   
 800338c:	f107 0220 	add.w	r2, r7, #32
 8003390:	463b      	mov	r3, r7
 8003392:	4611      	mov	r1, r2
 8003394:	4618      	mov	r0, r3
 8003396:	f009 fc8b 	bl	800ccb0 <strcat>
  strcat(temp_string, "\n");
 800339a:	463b      	mov	r3, r7
 800339c:	4618      	mov	r0, r3
 800339e:	f7fc ff43 	bl	8000228 <strlen>
 80033a2:	4603      	mov	r3, r0
 80033a4:	461a      	mov	r2, r3
 80033a6:	463b      	mov	r3, r7
 80033a8:	4413      	add	r3, r2
 80033aa:	4908      	ldr	r1, [pc, #32]	; (80033cc <log_samples+0x164>)
 80033ac:	461a      	mov	r2, r3
 80033ae:	460b      	mov	r3, r1
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	8013      	strh	r3, [r2, #0]
   * information to the SD
   * card
   */


}
 80033b4:	bf00      	nop
 80033b6:	3728      	adds	r7, #40	; 0x28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20001698 	.word	0x20001698
 80033c0:	0800f19c 	.word	0x0800f19c
 80033c4:	0800f27c 	.word	0x0800f27c
 80033c8:	0800f280 	.word	0x0800f280
 80033cc:	0800f1a4 	.word	0x0800f1a4

080033d0 <evaluate_button_inputs>:
  

void evaluate_button_inputs ( void ) {
 80033d0:	b598      	push	{r3, r4, r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  
  /* Verify if up button has been pressed */
  if(HAL_GPIO_ReadPin(GPIOE, UP_BUTTON) && btn.button_press_status == NO_BTN_PUSHED) {
 80033d4:	2108      	movs	r1, #8
 80033d6:	4896      	ldr	r0, [pc, #600]	; (8003630 <evaluate_button_inputs+0x260>)
 80033d8:	f002 f84a 	bl	8005470 <HAL_GPIO_ReadPin>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d015      	beq.n	800340e <evaluate_button_inputs+0x3e>
 80033e2:	4b94      	ldr	r3, [pc, #592]	; (8003634 <evaluate_button_inputs+0x264>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d111      	bne.n	800340e <evaluate_button_inputs+0x3e>
      if(btn.up_btn_press_ctr < BTN_DEBOUNCE_THRESHOLD) {
 80033ea:	4b92      	ldr	r3, [pc, #584]	; (8003634 <evaluate_button_inputs+0x264>)
 80033ec:	785b      	ldrb	r3, [r3, #1]
 80033ee:	2b0e      	cmp	r3, #14
 80033f0:	d805      	bhi.n	80033fe <evaluate_button_inputs+0x2e>
        btn.up_btn_press_ctr++;
 80033f2:	4b90      	ldr	r3, [pc, #576]	; (8003634 <evaluate_button_inputs+0x264>)
 80033f4:	785b      	ldrb	r3, [r3, #1]
 80033f6:	3301      	adds	r3, #1
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	4b8e      	ldr	r3, [pc, #568]	; (8003634 <evaluate_button_inputs+0x264>)
 80033fc:	705a      	strb	r2, [r3, #1]
      }
      if(btn.up_btn_press_ctr >= BTN_DEBOUNCE_THRESHOLD) {
 80033fe:	4b8d      	ldr	r3, [pc, #564]	; (8003634 <evaluate_button_inputs+0x264>)
 8003400:	785b      	ldrb	r3, [r3, #1]
 8003402:	2b0e      	cmp	r3, #14
 8003404:	d915      	bls.n	8003432 <evaluate_button_inputs+0x62>
        btn.button_press_status = UP_BUTTON;
 8003406:	4b8b      	ldr	r3, [pc, #556]	; (8003634 <evaluate_button_inputs+0x264>)
 8003408:	2208      	movs	r2, #8
 800340a:	701a      	strb	r2, [r3, #0]
      if(btn.up_btn_press_ctr >= BTN_DEBOUNCE_THRESHOLD) {
 800340c:	e011      	b.n	8003432 <evaluate_button_inputs+0x62>
      }

  }
  else {
    if(btn.up_btn_press_ctr > 0){
 800340e:	4b89      	ldr	r3, [pc, #548]	; (8003634 <evaluate_button_inputs+0x264>)
 8003410:	785b      	ldrb	r3, [r3, #1]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00d      	beq.n	8003432 <evaluate_button_inputs+0x62>
      if(btn.up_btn_press_ctr > 2){
 8003416:	4b87      	ldr	r3, [pc, #540]	; (8003634 <evaluate_button_inputs+0x264>)
 8003418:	785b      	ldrb	r3, [r3, #1]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d906      	bls.n	800342c <evaluate_button_inputs+0x5c>
        btn.up_btn_press_ctr -= 2;
 800341e:	4b85      	ldr	r3, [pc, #532]	; (8003634 <evaluate_button_inputs+0x264>)
 8003420:	785b      	ldrb	r3, [r3, #1]
 8003422:	3b02      	subs	r3, #2
 8003424:	b2da      	uxtb	r2, r3
 8003426:	4b83      	ldr	r3, [pc, #524]	; (8003634 <evaluate_button_inputs+0x264>)
 8003428:	705a      	strb	r2, [r3, #1]
 800342a:	e002      	b.n	8003432 <evaluate_button_inputs+0x62>
      }
      else {
        btn.up_btn_press_ctr = 0;
 800342c:	4b81      	ldr	r3, [pc, #516]	; (8003634 <evaluate_button_inputs+0x264>)
 800342e:	2200      	movs	r2, #0
 8003430:	705a      	strb	r2, [r3, #1]
    }

  }

  /* Verify if rt button has been pressed */
  if(HAL_GPIO_ReadPin(GPIOE, RT_BUTTON) && btn.button_press_status == NO_BTN_PUSHED) {
 8003432:	2110      	movs	r1, #16
 8003434:	487e      	ldr	r0, [pc, #504]	; (8003630 <evaluate_button_inputs+0x260>)
 8003436:	f002 f81b 	bl	8005470 <HAL_GPIO_ReadPin>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d015      	beq.n	800346c <evaluate_button_inputs+0x9c>
 8003440:	4b7c      	ldr	r3, [pc, #496]	; (8003634 <evaluate_button_inputs+0x264>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b04      	cmp	r3, #4
 8003446:	d111      	bne.n	800346c <evaluate_button_inputs+0x9c>
      if(btn.rt_btn_press_ctr < BTN_DEBOUNCE_THRESHOLD) {
 8003448:	4b7a      	ldr	r3, [pc, #488]	; (8003634 <evaluate_button_inputs+0x264>)
 800344a:	789b      	ldrb	r3, [r3, #2]
 800344c:	2b0e      	cmp	r3, #14
 800344e:	d805      	bhi.n	800345c <evaluate_button_inputs+0x8c>
        btn.rt_btn_press_ctr++;
 8003450:	4b78      	ldr	r3, [pc, #480]	; (8003634 <evaluate_button_inputs+0x264>)
 8003452:	789b      	ldrb	r3, [r3, #2]
 8003454:	3301      	adds	r3, #1
 8003456:	b2da      	uxtb	r2, r3
 8003458:	4b76      	ldr	r3, [pc, #472]	; (8003634 <evaluate_button_inputs+0x264>)
 800345a:	709a      	strb	r2, [r3, #2]
      }
      if(btn.rt_btn_press_ctr >= BTN_DEBOUNCE_THRESHOLD) {
 800345c:	4b75      	ldr	r3, [pc, #468]	; (8003634 <evaluate_button_inputs+0x264>)
 800345e:	789b      	ldrb	r3, [r3, #2]
 8003460:	2b0e      	cmp	r3, #14
 8003462:	d915      	bls.n	8003490 <evaluate_button_inputs+0xc0>
        btn.button_press_status = RT_BTN_PUSHED;
 8003464:	4b73      	ldr	r3, [pc, #460]	; (8003634 <evaluate_button_inputs+0x264>)
 8003466:	2201      	movs	r2, #1
 8003468:	701a      	strb	r2, [r3, #0]
      if(btn.rt_btn_press_ctr >= BTN_DEBOUNCE_THRESHOLD) {
 800346a:	e011      	b.n	8003490 <evaluate_button_inputs+0xc0>
      }

  }
  else {
    if(btn.rt_btn_press_ctr > 0){
 800346c:	4b71      	ldr	r3, [pc, #452]	; (8003634 <evaluate_button_inputs+0x264>)
 800346e:	789b      	ldrb	r3, [r3, #2]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00d      	beq.n	8003490 <evaluate_button_inputs+0xc0>
      if(btn.rt_btn_press_ctr > 2){
 8003474:	4b6f      	ldr	r3, [pc, #444]	; (8003634 <evaluate_button_inputs+0x264>)
 8003476:	789b      	ldrb	r3, [r3, #2]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d906      	bls.n	800348a <evaluate_button_inputs+0xba>
        btn.rt_btn_press_ctr -= 2;
 800347c:	4b6d      	ldr	r3, [pc, #436]	; (8003634 <evaluate_button_inputs+0x264>)
 800347e:	789b      	ldrb	r3, [r3, #2]
 8003480:	3b02      	subs	r3, #2
 8003482:	b2da      	uxtb	r2, r3
 8003484:	4b6b      	ldr	r3, [pc, #428]	; (8003634 <evaluate_button_inputs+0x264>)
 8003486:	709a      	strb	r2, [r3, #2]
 8003488:	e002      	b.n	8003490 <evaluate_button_inputs+0xc0>
      }
      else {
        btn.rt_btn_press_ctr = 0;
 800348a:	4b6a      	ldr	r3, [pc, #424]	; (8003634 <evaluate_button_inputs+0x264>)
 800348c:	2200      	movs	r2, #0
 800348e:	709a      	strb	r2, [r3, #2]
    }

  }
  
  /* Verify if dn button has been pressed */
  if(HAL_GPIO_ReadPin(GPIOE, DN_BUTTON) && btn.button_press_status == NO_BTN_PUSHED) {
 8003490:	2120      	movs	r1, #32
 8003492:	4867      	ldr	r0, [pc, #412]	; (8003630 <evaluate_button_inputs+0x260>)
 8003494:	f001 ffec 	bl	8005470 <HAL_GPIO_ReadPin>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d015      	beq.n	80034ca <evaluate_button_inputs+0xfa>
 800349e:	4b65      	ldr	r3, [pc, #404]	; (8003634 <evaluate_button_inputs+0x264>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d111      	bne.n	80034ca <evaluate_button_inputs+0xfa>
      if(btn.dn_btn_press_ctr < BTN_DEBOUNCE_THRESHOLD) {
 80034a6:	4b63      	ldr	r3, [pc, #396]	; (8003634 <evaluate_button_inputs+0x264>)
 80034a8:	78db      	ldrb	r3, [r3, #3]
 80034aa:	2b0e      	cmp	r3, #14
 80034ac:	d805      	bhi.n	80034ba <evaluate_button_inputs+0xea>
        btn.dn_btn_press_ctr++;
 80034ae:	4b61      	ldr	r3, [pc, #388]	; (8003634 <evaluate_button_inputs+0x264>)
 80034b0:	78db      	ldrb	r3, [r3, #3]
 80034b2:	3301      	adds	r3, #1
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	4b5f      	ldr	r3, [pc, #380]	; (8003634 <evaluate_button_inputs+0x264>)
 80034b8:	70da      	strb	r2, [r3, #3]
      }
      if(btn.dn_btn_press_ctr >= BTN_DEBOUNCE_THRESHOLD) {
 80034ba:	4b5e      	ldr	r3, [pc, #376]	; (8003634 <evaluate_button_inputs+0x264>)
 80034bc:	78db      	ldrb	r3, [r3, #3]
 80034be:	2b0e      	cmp	r3, #14
 80034c0:	d915      	bls.n	80034ee <evaluate_button_inputs+0x11e>
        btn.button_press_status = DN_BTN_PUSHED;
 80034c2:	4b5c      	ldr	r3, [pc, #368]	; (8003634 <evaluate_button_inputs+0x264>)
 80034c4:	2202      	movs	r2, #2
 80034c6:	701a      	strb	r2, [r3, #0]
      if(btn.dn_btn_press_ctr >= BTN_DEBOUNCE_THRESHOLD) {
 80034c8:	e011      	b.n	80034ee <evaluate_button_inputs+0x11e>
      }

  }
  else {
    if(btn.dn_btn_press_ctr > 0){
 80034ca:	4b5a      	ldr	r3, [pc, #360]	; (8003634 <evaluate_button_inputs+0x264>)
 80034cc:	78db      	ldrb	r3, [r3, #3]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00d      	beq.n	80034ee <evaluate_button_inputs+0x11e>
      if(btn.dn_btn_press_ctr > 2){
 80034d2:	4b58      	ldr	r3, [pc, #352]	; (8003634 <evaluate_button_inputs+0x264>)
 80034d4:	78db      	ldrb	r3, [r3, #3]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d906      	bls.n	80034e8 <evaluate_button_inputs+0x118>
        btn.dn_btn_press_ctr -= 2;
 80034da:	4b56      	ldr	r3, [pc, #344]	; (8003634 <evaluate_button_inputs+0x264>)
 80034dc:	78db      	ldrb	r3, [r3, #3]
 80034de:	3b02      	subs	r3, #2
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	4b54      	ldr	r3, [pc, #336]	; (8003634 <evaluate_button_inputs+0x264>)
 80034e4:	70da      	strb	r2, [r3, #3]
 80034e6:	e002      	b.n	80034ee <evaluate_button_inputs+0x11e>
      }
      else {
        btn.dn_btn_press_ctr = 0;
 80034e8:	4b52      	ldr	r3, [pc, #328]	; (8003634 <evaluate_button_inputs+0x264>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	70da      	strb	r2, [r3, #3]
    }

  }
  
  /* Verify if lt button has been pressed */
  if(HAL_GPIO_ReadPin(GPIOE, LT_BUTTON) && btn.button_press_status == NO_BTN_PUSHED) {
 80034ee:	2140      	movs	r1, #64	; 0x40
 80034f0:	484f      	ldr	r0, [pc, #316]	; (8003630 <evaluate_button_inputs+0x260>)
 80034f2:	f001 ffbd 	bl	8005470 <HAL_GPIO_ReadPin>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d015      	beq.n	8003528 <evaluate_button_inputs+0x158>
 80034fc:	4b4d      	ldr	r3, [pc, #308]	; (8003634 <evaluate_button_inputs+0x264>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b04      	cmp	r3, #4
 8003502:	d111      	bne.n	8003528 <evaluate_button_inputs+0x158>
      if(btn.lt_btn_press_ctr < BTN_DEBOUNCE_THRESHOLD) {
 8003504:	4b4b      	ldr	r3, [pc, #300]	; (8003634 <evaluate_button_inputs+0x264>)
 8003506:	791b      	ldrb	r3, [r3, #4]
 8003508:	2b0e      	cmp	r3, #14
 800350a:	d805      	bhi.n	8003518 <evaluate_button_inputs+0x148>
        btn.lt_btn_press_ctr++;
 800350c:	4b49      	ldr	r3, [pc, #292]	; (8003634 <evaluate_button_inputs+0x264>)
 800350e:	791b      	ldrb	r3, [r3, #4]
 8003510:	3301      	adds	r3, #1
 8003512:	b2da      	uxtb	r2, r3
 8003514:	4b47      	ldr	r3, [pc, #284]	; (8003634 <evaluate_button_inputs+0x264>)
 8003516:	711a      	strb	r2, [r3, #4]
      }
      if(btn.lt_btn_press_ctr >= BTN_DEBOUNCE_THRESHOLD) {
 8003518:	4b46      	ldr	r3, [pc, #280]	; (8003634 <evaluate_button_inputs+0x264>)
 800351a:	791b      	ldrb	r3, [r3, #4]
 800351c:	2b0e      	cmp	r3, #14
 800351e:	d915      	bls.n	800354c <evaluate_button_inputs+0x17c>
        btn.button_press_status = LT_BTN_PUSHED;
 8003520:	4b44      	ldr	r3, [pc, #272]	; (8003634 <evaluate_button_inputs+0x264>)
 8003522:	2203      	movs	r2, #3
 8003524:	701a      	strb	r2, [r3, #0]
      if(btn.lt_btn_press_ctr >= BTN_DEBOUNCE_THRESHOLD) {
 8003526:	e011      	b.n	800354c <evaluate_button_inputs+0x17c>
      }

  }
  else {
    if(btn.lt_btn_press_ctr > 0){
 8003528:	4b42      	ldr	r3, [pc, #264]	; (8003634 <evaluate_button_inputs+0x264>)
 800352a:	791b      	ldrb	r3, [r3, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00d      	beq.n	800354c <evaluate_button_inputs+0x17c>
      if(btn.lt_btn_press_ctr > 2){
 8003530:	4b40      	ldr	r3, [pc, #256]	; (8003634 <evaluate_button_inputs+0x264>)
 8003532:	791b      	ldrb	r3, [r3, #4]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d906      	bls.n	8003546 <evaluate_button_inputs+0x176>
        btn.lt_btn_press_ctr -= 2;
 8003538:	4b3e      	ldr	r3, [pc, #248]	; (8003634 <evaluate_button_inputs+0x264>)
 800353a:	791b      	ldrb	r3, [r3, #4]
 800353c:	3b02      	subs	r3, #2
 800353e:	b2da      	uxtb	r2, r3
 8003540:	4b3c      	ldr	r3, [pc, #240]	; (8003634 <evaluate_button_inputs+0x264>)
 8003542:	711a      	strb	r2, [r3, #4]
 8003544:	e002      	b.n	800354c <evaluate_button_inputs+0x17c>
      }
      else {
        btn.lt_btn_press_ctr = 0;
 8003546:	4b3b      	ldr	r3, [pc, #236]	; (8003634 <evaluate_button_inputs+0x264>)
 8003548:	2200      	movs	r2, #0
 800354a:	711a      	strb	r2, [r3, #4]
  /**
   * Process what button
   * was pressed 
   */
  // TODO need to finish defining these!
  switch (btn.button_press_status) {
 800354c:	4b39      	ldr	r3, [pc, #228]	; (8003634 <evaluate_button_inputs+0x264>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b03      	cmp	r3, #3
 8003552:	f200 811f 	bhi.w	8003794 <evaluate_button_inputs+0x3c4>
 8003556:	a201      	add	r2, pc, #4	; (adr r2, 800355c <evaluate_button_inputs+0x18c>)
 8003558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355c:	0800356d 	.word	0x0800356d
 8003560:	08003759 	.word	0x08003759
 8003564:	08003671 	.word	0x08003671
 8003568:	08003777 	.word	0x08003777
    case UP_BTN_PUSHED:
      if(oled.current_screen == SCREEN_RUN_TIME_HR){
 800356c:	4b32      	ldr	r3, [pc, #200]	; (8003638 <evaluate_button_inputs+0x268>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d11a      	bne.n	80035aa <evaluate_button_inputs+0x1da>
        (a2d_p -> run_time_hr < 12) ? (a2d_p -> run_time_hr++) : (a2d_p -> run_time_hr = 0);
 8003574:	4b31      	ldr	r3, [pc, #196]	; (800363c <evaluate_button_inputs+0x26c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	4931      	ldr	r1, [pc, #196]	; (8003640 <evaluate_button_inputs+0x270>)
 800357c:	4618      	mov	r0, r3
 800357e:	f7fd fe0b 	bl	8001198 <__aeabi_fcmplt>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <evaluate_button_inputs+0x1ce>
 8003588:	4b2c      	ldr	r3, [pc, #176]	; (800363c <evaluate_button_inputs+0x26c>)
 800358a:	681c      	ldr	r4, [r3, #0]
 800358c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800358e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd fb5a 	bl	8000c4c <__addsf3>
 8003598:	4603      	mov	r3, r0
 800359a:	6323      	str	r3, [r4, #48]	; 0x30

      else if (oled.current_screen == SCREEN_LOGGING) {
        (a2d_p -> logging_status == true) ? (a2d_p -> logging_status = false) : (a2d_p -> logging_status = true);
      }

    break;
 800359c:	e0fe      	b.n	800379c <evaluate_button_inputs+0x3cc>
        (a2d_p -> run_time_hr < 12) ? (a2d_p -> run_time_hr++) : (a2d_p -> run_time_hr = 0);
 800359e:	4b27      	ldr	r3, [pc, #156]	; (800363c <evaluate_button_inputs+0x26c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
    break;
 80035a8:	e0f8      	b.n	800379c <evaluate_button_inputs+0x3cc>
      else if(oled.current_screen == SCREEN_RUN_TIME_MIN){
 80035aa:	4b23      	ldr	r3, [pc, #140]	; (8003638 <evaluate_button_inputs+0x268>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d11a      	bne.n	80035e8 <evaluate_button_inputs+0x218>
        (a2d_p -> run_time_min < 60) ? (a2d_p -> run_time_min++) : (a2d_p -> run_time_min = 0);
 80035b2:	4b22      	ldr	r3, [pc, #136]	; (800363c <evaluate_button_inputs+0x26c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b8:	4922      	ldr	r1, [pc, #136]	; (8003644 <evaluate_button_inputs+0x274>)
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fd fdec 	bl	8001198 <__aeabi_fcmplt>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <evaluate_button_inputs+0x20c>
 80035c6:	4b1d      	ldr	r3, [pc, #116]	; (800363c <evaluate_button_inputs+0x26c>)
 80035c8:	681c      	ldr	r4, [r3, #0]
 80035ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fd fb3b 	bl	8000c4c <__addsf3>
 80035d6:	4603      	mov	r3, r0
 80035d8:	6363      	str	r3, [r4, #52]	; 0x34
    break;
 80035da:	e0df      	b.n	800379c <evaluate_button_inputs+0x3cc>
        (a2d_p -> run_time_min < 60) ? (a2d_p -> run_time_min++) : (a2d_p -> run_time_min = 0);
 80035dc:	4b17      	ldr	r3, [pc, #92]	; (800363c <evaluate_button_inputs+0x26c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 80035e6:	e0d9      	b.n	800379c <evaluate_button_inputs+0x3cc>
      else if(oled.current_screen == SCREEN_SENSE_RESISTOR) {
 80035e8:	4b13      	ldr	r3, [pc, #76]	; (8003638 <evaluate_button_inputs+0x268>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d12b      	bne.n	8003648 <evaluate_button_inputs+0x278>
        (a2d_p -> cs_res_index < 2) ? (a2d_p -> cs_res_index++) : (a2d_p -> cs_res_index = 0);
 80035f0:	4b12      	ldr	r3, [pc, #72]	; (800363c <evaluate_button_inputs+0x26c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	7f1b      	ldrb	r3, [r3, #28]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d806      	bhi.n	8003608 <evaluate_button_inputs+0x238>
 80035fa:	4b10      	ldr	r3, [pc, #64]	; (800363c <evaluate_button_inputs+0x26c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	7f1a      	ldrb	r2, [r3, #28]
 8003600:	3201      	adds	r2, #1
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	771a      	strb	r2, [r3, #28]
 8003606:	e003      	b.n	8003610 <evaluate_button_inputs+0x240>
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <evaluate_button_inputs+0x26c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2200      	movs	r2, #0
 800360e:	771a      	strb	r2, [r3, #28]
        a2d_p -> cs_res_f = a2d_p -> sense_resistors[a2d_p -> cs_res_index];
 8003610:	4b0a      	ldr	r3, [pc, #40]	; (800363c <evaluate_button_inputs+0x26c>)
 8003612:	6819      	ldr	r1, [r3, #0]
 8003614:	4b09      	ldr	r3, [pc, #36]	; (800363c <evaluate_button_inputs+0x26c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	7f1b      	ldrb	r3, [r3, #28]
 800361a:	4618      	mov	r0, r3
 800361c:	4b07      	ldr	r3, [pc, #28]	; (800363c <evaluate_button_inputs+0x26c>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	f100 0308 	add.w	r3, r0, #8
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	6213      	str	r3, [r2, #32]
    break;
 800362c:	e0b6      	b.n	800379c <evaluate_button_inputs+0x3cc>
 800362e:	bf00      	nop
 8003630:	40011800 	.word	0x40011800
 8003634:	200027d8 	.word	0x200027d8
 8003638:	20000460 	.word	0x20000460
 800363c:	20001698 	.word	0x20001698
 8003640:	41400000 	.word	0x41400000
 8003644:	42700000 	.word	0x42700000
      else if (oled.current_screen == SCREEN_LOGGING) {
 8003648:	4b58      	ldr	r3, [pc, #352]	; (80037ac <evaluate_button_inputs+0x3dc>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b04      	cmp	r3, #4
 800364e:	f040 80a5 	bne.w	800379c <evaluate_button_inputs+0x3cc>
        (a2d_p -> logging_status == true) ? (a2d_p -> logging_status = false) : (a2d_p -> logging_status = true);
 8003652:	4b57      	ldr	r3, [pc, #348]	; (80037b0 <evaluate_button_inputs+0x3e0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	785b      	ldrb	r3, [r3, #1]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d004      	beq.n	8003666 <evaluate_button_inputs+0x296>
 800365c:	4b54      	ldr	r3, [pc, #336]	; (80037b0 <evaluate_button_inputs+0x3e0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2200      	movs	r2, #0
 8003662:	705a      	strb	r2, [r3, #1]
    break;
 8003664:	e09a      	b.n	800379c <evaluate_button_inputs+0x3cc>
        (a2d_p -> logging_status == true) ? (a2d_p -> logging_status = false) : (a2d_p -> logging_status = true);
 8003666:	4b52      	ldr	r3, [pc, #328]	; (80037b0 <evaluate_button_inputs+0x3e0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2201      	movs	r2, #1
 800366c:	705a      	strb	r2, [r3, #1]
    break;
 800366e:	e095      	b.n	800379c <evaluate_button_inputs+0x3cc>


    case DN_BTN_PUSHED:
      if(oled.current_screen == SCREEN_RUN_TIME_HR){
 8003670:	4b4e      	ldr	r3, [pc, #312]	; (80037ac <evaluate_button_inputs+0x3dc>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d11a      	bne.n	80036ae <evaluate_button_inputs+0x2de>
        (a2d_p -> run_time_hr > 0) ? (a2d_p -> run_time_hr--) : (a2d_p -> run_time_hr = 12);
 8003678:	4b4d      	ldr	r3, [pc, #308]	; (80037b0 <evaluate_button_inputs+0x3e0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f04f 0100 	mov.w	r1, #0
 8003682:	4618      	mov	r0, r3
 8003684:	f7fd fda6 	bl	80011d4 <__aeabi_fcmpgt>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <evaluate_button_inputs+0x2d4>
 800368e:	4b48      	ldr	r3, [pc, #288]	; (80037b0 <evaluate_button_inputs+0x3e0>)
 8003690:	681c      	ldr	r4, [r3, #0]
 8003692:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003694:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003698:	4618      	mov	r0, r3
 800369a:	f7fd fad5 	bl	8000c48 <__aeabi_fsub>
 800369e:	4603      	mov	r3, r0
 80036a0:	6323      	str	r3, [r4, #48]	; 0x30
      
      else if (oled.current_screen == SCREEN_LOGGING) {
        (a2d_p -> logging_status == true) ? (a2d_p -> logging_status = false) : (a2d_p -> logging_status = true);
      }

    break;
 80036a2:	e07d      	b.n	80037a0 <evaluate_button_inputs+0x3d0>
        (a2d_p -> run_time_hr > 0) ? (a2d_p -> run_time_hr--) : (a2d_p -> run_time_hr = 12);
 80036a4:	4b42      	ldr	r3, [pc, #264]	; (80037b0 <evaluate_button_inputs+0x3e0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a42      	ldr	r2, [pc, #264]	; (80037b4 <evaluate_button_inputs+0x3e4>)
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
    break;
 80036ac:	e078      	b.n	80037a0 <evaluate_button_inputs+0x3d0>
      else if(oled.current_screen == SCREEN_RUN_TIME_MIN){
 80036ae:	4b3f      	ldr	r3, [pc, #252]	; (80037ac <evaluate_button_inputs+0x3dc>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d11a      	bne.n	80036ec <evaluate_button_inputs+0x31c>
        (a2d_p -> run_time_min > 0 ) ? (a2d_p -> run_time_min--) : (a2d_p -> run_time_min = 60);
 80036b6:	4b3e      	ldr	r3, [pc, #248]	; (80037b0 <evaluate_button_inputs+0x3e0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036bc:	f04f 0100 	mov.w	r1, #0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fd fd87 	bl	80011d4 <__aeabi_fcmpgt>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <evaluate_button_inputs+0x312>
 80036cc:	4b38      	ldr	r3, [pc, #224]	; (80037b0 <evaluate_button_inputs+0x3e0>)
 80036ce:	681c      	ldr	r4, [r3, #0]
 80036d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036d2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fd fab6 	bl	8000c48 <__aeabi_fsub>
 80036dc:	4603      	mov	r3, r0
 80036de:	6363      	str	r3, [r4, #52]	; 0x34
    break;
 80036e0:	e05e      	b.n	80037a0 <evaluate_button_inputs+0x3d0>
        (a2d_p -> run_time_min > 0 ) ? (a2d_p -> run_time_min--) : (a2d_p -> run_time_min = 60);
 80036e2:	4b33      	ldr	r3, [pc, #204]	; (80037b0 <evaluate_button_inputs+0x3e0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a34      	ldr	r2, [pc, #208]	; (80037b8 <evaluate_button_inputs+0x3e8>)
 80036e8:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 80036ea:	e059      	b.n	80037a0 <evaluate_button_inputs+0x3d0>
      else if(oled.current_screen == SCREEN_SENSE_RESISTOR) {
 80036ec:	4b2f      	ldr	r3, [pc, #188]	; (80037ac <evaluate_button_inputs+0x3dc>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d11e      	bne.n	8003732 <evaluate_button_inputs+0x362>
        (a2d_p -> cs_res_index > 0) ? (a2d_p -> cs_res_index--) : (a2d_p -> cs_res_index = 2);
 80036f4:	4b2e      	ldr	r3, [pc, #184]	; (80037b0 <evaluate_button_inputs+0x3e0>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	7f1b      	ldrb	r3, [r3, #28]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d006      	beq.n	800370c <evaluate_button_inputs+0x33c>
 80036fe:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <evaluate_button_inputs+0x3e0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	7f1a      	ldrb	r2, [r3, #28]
 8003704:	3a01      	subs	r2, #1
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	771a      	strb	r2, [r3, #28]
 800370a:	e003      	b.n	8003714 <evaluate_button_inputs+0x344>
 800370c:	4b28      	ldr	r3, [pc, #160]	; (80037b0 <evaluate_button_inputs+0x3e0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2202      	movs	r2, #2
 8003712:	771a      	strb	r2, [r3, #28]
        a2d_p -> cs_res_f = a2d_p -> sense_resistors[a2d_p -> cs_res_index];
 8003714:	4b26      	ldr	r3, [pc, #152]	; (80037b0 <evaluate_button_inputs+0x3e0>)
 8003716:	6819      	ldr	r1, [r3, #0]
 8003718:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <evaluate_button_inputs+0x3e0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	7f1b      	ldrb	r3, [r3, #28]
 800371e:	4618      	mov	r0, r3
 8003720:	4b23      	ldr	r3, [pc, #140]	; (80037b0 <evaluate_button_inputs+0x3e0>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	f100 0308 	add.w	r3, r0, #8
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	6213      	str	r3, [r2, #32]
    break;
 8003730:	e036      	b.n	80037a0 <evaluate_button_inputs+0x3d0>
      else if (oled.current_screen == SCREEN_LOGGING) {
 8003732:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <evaluate_button_inputs+0x3dc>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b04      	cmp	r3, #4
 8003738:	d132      	bne.n	80037a0 <evaluate_button_inputs+0x3d0>
        (a2d_p -> logging_status == true) ? (a2d_p -> logging_status = false) : (a2d_p -> logging_status = true);
 800373a:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <evaluate_button_inputs+0x3e0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	785b      	ldrb	r3, [r3, #1]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d004      	beq.n	800374e <evaluate_button_inputs+0x37e>
 8003744:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <evaluate_button_inputs+0x3e0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2200      	movs	r2, #0
 800374a:	705a      	strb	r2, [r3, #1]
    break;
 800374c:	e028      	b.n	80037a0 <evaluate_button_inputs+0x3d0>
        (a2d_p -> logging_status == true) ? (a2d_p -> logging_status = false) : (a2d_p -> logging_status = true);
 800374e:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <evaluate_button_inputs+0x3e0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2201      	movs	r2, #1
 8003754:	705a      	strb	r2, [r3, #1]
    break;
 8003756:	e023      	b.n	80037a0 <evaluate_button_inputs+0x3d0>
    
    case RT_BTN_PUSHED:
      (oled.current_screen < MAX_SCREEN_INDEX) ? (oled.current_screen++) : (oled.current_screen = 0);
 8003758:	4b14      	ldr	r3, [pc, #80]	; (80037ac <evaluate_button_inputs+0x3dc>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b03      	cmp	r3, #3
 800375e:	d806      	bhi.n	800376e <evaluate_button_inputs+0x39e>
 8003760:	4b12      	ldr	r3, [pc, #72]	; (80037ac <evaluate_button_inputs+0x3dc>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	3301      	adds	r3, #1
 8003766:	b2da      	uxtb	r2, r3
 8003768:	4b10      	ldr	r3, [pc, #64]	; (80037ac <evaluate_button_inputs+0x3dc>)
 800376a:	701a      	strb	r2, [r3, #0]
    break;
 800376c:	e019      	b.n	80037a2 <evaluate_button_inputs+0x3d2>
      (oled.current_screen < MAX_SCREEN_INDEX) ? (oled.current_screen++) : (oled.current_screen = 0);
 800376e:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <evaluate_button_inputs+0x3dc>)
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
    break;
 8003774:	e015      	b.n	80037a2 <evaluate_button_inputs+0x3d2>

    case LT_BTN_PUSHED:
      (oled.current_screen > 0) ? (oled.current_screen--) : (oled.current_screen =  MAX_SCREEN_INDEX);
 8003776:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <evaluate_button_inputs+0x3dc>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d006      	beq.n	800378c <evaluate_button_inputs+0x3bc>
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <evaluate_button_inputs+0x3dc>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	3b01      	subs	r3, #1
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <evaluate_button_inputs+0x3dc>)
 8003788:	701a      	strb	r2, [r3, #0]
    break;
 800378a:	e00a      	b.n	80037a2 <evaluate_button_inputs+0x3d2>
      (oled.current_screen > 0) ? (oled.current_screen--) : (oled.current_screen =  MAX_SCREEN_INDEX);
 800378c:	4b07      	ldr	r3, [pc, #28]	; (80037ac <evaluate_button_inputs+0x3dc>)
 800378e:	2204      	movs	r2, #4
 8003790:	701a      	strb	r2, [r3, #0]
    break;
 8003792:	e006      	b.n	80037a2 <evaluate_button_inputs+0x3d2>

    default:
      oled.current_screen = SCREEN_MAIN;
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <evaluate_button_inputs+0x3dc>)
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
    break;
 800379a:	e002      	b.n	80037a2 <evaluate_button_inputs+0x3d2>
    break;
 800379c:	bf00      	nop
 800379e:	e000      	b.n	80037a2 <evaluate_button_inputs+0x3d2>
    break;
 80037a0:	bf00      	nop
  }

  /* Button processing is complete, so reset button status*/
  btn.button_press_status = NO_BTN_PUSHED;
 80037a2:	4b06      	ldr	r3, [pc, #24]	; (80037bc <evaluate_button_inputs+0x3ec>)
 80037a4:	2204      	movs	r2, #4
 80037a6:	701a      	strb	r2, [r3, #0]

}
 80037a8:	bf00      	nop
 80037aa:	bd98      	pop	{r3, r4, r7, pc}
 80037ac:	20000460 	.word	0x20000460
 80037b0:	20001698 	.word	0x20001698
 80037b4:	41400000 	.word	0x41400000
 80037b8:	42700000 	.word	0x42700000
 80037bc:	200027d8 	.word	0x200027d8

080037c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037c0:	b590      	push	{r4, r7, lr}
 80037c2:	b08b      	sub	sp, #44	; 0x2c
 80037c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037c6:	b672      	cpsid	i
}
 80037c8:	bf00      	nop

  char temp_string[32];        //Define the array that will hold the ASCII values
  char temp_number[8];        //Define the array that will hold the ASCII values

  /* Clear memory arrays */
  memset(temp_string, '\0', 32);                  // Destination, Source, Size
 80037ca:	f107 0308 	add.w	r3, r7, #8
 80037ce:	2220      	movs	r2, #32
 80037d0:	2100      	movs	r1, #0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f008 fde4 	bl	800c3a0 <memset>
  memset(temp_number, '\0', 8);                   
 80037d8:	463b      	mov	r3, r7
 80037da:	2208      	movs	r2, #8
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f008 fdde 	bl	800c3a0 <memset>
  
  /* Clear Display */
  oled_clear();
 80037e4:	f000 f908 	bl	80039f8 <oled_clear>

  /* Set Larger Text Size for title */
  setTextSize(2,2);
 80037e8:	2102      	movs	r1, #2
 80037ea:	2002      	movs	r0, #2
 80037ec:	f000 f8e4 	bl	80039b8 <setTextSize>

  /* Write Title Line and Underscore */
  writeOledString("  ERROR \n", SSD1306_WHITE);
 80037f0:	2101      	movs	r1, #1
 80037f2:	4823      	ldr	r0, [pc, #140]	; (8003880 <Error_Handler+0xc0>)
 80037f4:	f000 faa0 	bl	8003d38 <writeOledString>

  /* Smaller text size for underline */
  setTextSize(1,1);
 80037f8:	2101      	movs	r1, #1
 80037fa:	2001      	movs	r0, #1
 80037fc:	f000 f8dc 	bl	80039b8 <setTextSize>
  writeOledString("--------------------\n", SSD1306_WHITE);
 8003800:	2101      	movs	r1, #1
 8003802:	4820      	ldr	r0, [pc, #128]	; (8003884 <Error_Handler+0xc4>)
 8003804:	f000 fa98 	bl	8003d38 <writeOledString>

  /* Print the error code */
  strcat(temp_string, "ERROR CODE: ");              
 8003808:	f107 0308 	add.w	r3, r7, #8
 800380c:	4618      	mov	r0, r3
 800380e:	f7fc fd0b 	bl	8000228 <strlen>
 8003812:	4603      	mov	r3, r0
 8003814:	461a      	mov	r2, r3
 8003816:	f107 0308 	add.w	r3, r7, #8
 800381a:	4413      	add	r3, r2
 800381c:	4a1a      	ldr	r2, [pc, #104]	; (8003888 <Error_Handler+0xc8>)
 800381e:	461c      	mov	r4, r3
 8003820:	4613      	mov	r3, r2
 8003822:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003824:	6020      	str	r0, [r4, #0]
 8003826:	6061      	str	r1, [r4, #4]
 8003828:	60a2      	str	r2, [r4, #8]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	7323      	strb	r3, [r4, #12]

  sprintf((char *)temp_number, "%u", err_p -> error_code);   // %u indicates unsigned decimal
 800382e:	4b17      	ldr	r3, [pc, #92]	; (800388c <Error_Handler+0xcc>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	463b      	mov	r3, r7
 8003838:	4915      	ldr	r1, [pc, #84]	; (8003890 <Error_Handler+0xd0>)
 800383a:	4618      	mov	r0, r3
 800383c:	f009 fa18 	bl	800cc70 <siprintf>

  strcat(temp_string, temp_number);
 8003840:	463a      	mov	r2, r7
 8003842:	f107 0308 	add.w	r3, r7, #8
 8003846:	4611      	mov	r1, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f009 fa31 	bl	800ccb0 <strcat>
  strcat(temp_string, "\n");
 800384e:	f107 0308 	add.w	r3, r7, #8
 8003852:	4618      	mov	r0, r3
 8003854:	f7fc fce8 	bl	8000228 <strlen>
 8003858:	4603      	mov	r3, r0
 800385a:	461a      	mov	r2, r3
 800385c:	f107 0308 	add.w	r3, r7, #8
 8003860:	4413      	add	r3, r2
 8003862:	490c      	ldr	r1, [pc, #48]	; (8003894 <Error_Handler+0xd4>)
 8003864:	461a      	mov	r2, r3
 8003866:	460b      	mov	r3, r1
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	8013      	strh	r3, [r2, #0]
  writeOledString(temp_string, SSD1306_WHITE);
 800386c:	f107 0308 	add.w	r3, r7, #8
 8003870:	2101      	movs	r1, #1
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fa60 	bl	8003d38 <writeOledString>
  /**
   * Call function that pushes
   * local data buffer into RAM
   * of display
   */
  updateDisplay();
 8003878:	f000 fcd6 	bl	8004228 <updateDisplay>

  while (1)
 800387c:	e7fe      	b.n	800387c <Error_Handler+0xbc>
 800387e:	bf00      	nop
 8003880:	0800f284 	.word	0x0800f284
 8003884:	0800f178 	.word	0x0800f178
 8003888:	0800f290 	.word	0x0800f290
 800388c:	2000154c 	.word	0x2000154c
 8003890:	0800f280 	.word	0x0800f280
 8003894:	0800f1a4 	.word	0x0800f1a4

08003898 <display_oled_init>:
        a = b;                                                                     \
        b = t;                                                                     \
    }
#endif

void display_oled_init ( uint8_t voltage_state, uint8_t w, uint8_t h ) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	71fb      	strb	r3, [r7, #7]
 80038a2:	460b      	mov	r3, r1
 80038a4:	71bb      	strb	r3, [r7, #6]
 80038a6:	4613      	mov	r3, r2
 80038a8:	717b      	strb	r3, [r7, #5]

    oled.screen_width = w;
 80038aa:	4a3e      	ldr	r2, [pc, #248]	; (80039a4 <display_oled_init+0x10c>)
 80038ac:	79bb      	ldrb	r3, [r7, #6]
 80038ae:	7053      	strb	r3, [r2, #1]
    oled.screen_height = h;
 80038b0:	4a3c      	ldr	r2, [pc, #240]	; (80039a4 <display_oled_init+0x10c>)
 80038b2:	797b      	ldrb	r3, [r7, #5]
 80038b4:	7093      	strb	r3, [r2, #2]

    oled.wrap_text = true;
 80038b6:	4b3b      	ldr	r3, [pc, #236]	; (80039a4 <display_oled_init+0x10c>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	715a      	strb	r2, [r3, #5]

    /**
     * Call function to clear the display
     */
    oled_clear();       
 80038bc:	f000 f89c 	bl	80039f8 <oled_clear>
     */
    static const uint8_t init1[] = {SSD1306_DISPLAYOFF,         // 0xAE
                                            SSD1306_SETDISPLAYCLOCKDIV, // 0xD5
                                            0x80, // the suggested ratio 0x80
                                            SSD1306_SETMULTIPLEX}; // 0xA8
    ssd1306_commandList(init1, sizeof(init1));
 80038c0:	2104      	movs	r1, #4
 80038c2:	4839      	ldr	r0, [pc, #228]	; (80039a8 <display_oled_init+0x110>)
 80038c4:	f000 f9e2 	bl	8003c8c <ssd1306_commandList>
    ssd1306_command1(oled.screen_height - 1);
 80038c8:	4b36      	ldr	r3, [pc, #216]	; (80039a4 <display_oled_init+0x10c>)
 80038ca:	789b      	ldrb	r3, [r3, #2]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 fa0b 	bl	8003cec <ssd1306_command1>

    static const uint8_t init2[] = {SSD1306_SETDISPLAYOFFSET, // 0xD3
                                            0x0,                      // no offset
                                            SSD1306_SETSTARTLINE | 0x0, // line #0
                                            SSD1306_CHARGEPUMP};        // 0x8D
    ssd1306_commandList(init2, sizeof(init2));
 80038d6:	2104      	movs	r1, #4
 80038d8:	4834      	ldr	r0, [pc, #208]	; (80039ac <display_oled_init+0x114>)
 80038da:	f000 f9d7 	bl	8003c8c <ssd1306_commandList>

    ssd1306_command1((voltage_state == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <display_oled_init+0x50>
 80038e4:	2310      	movs	r3, #16
 80038e6:	e000      	b.n	80038ea <display_oled_init+0x52>
 80038e8:	2314      	movs	r3, #20
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f9fe 	bl	8003cec <ssd1306_command1>

    static const uint8_t init3[] = {SSD1306_MEMORYMODE, // 0x20
                                            0x00, // 0x0 act like ks0108
                                            SSD1306_SEGREMAP | 0x1,
                                            SSD1306_COMSCANDEC};
    ssd1306_commandList(init3, sizeof(init3));
 80038f0:	2104      	movs	r1, #4
 80038f2:	482f      	ldr	r0, [pc, #188]	; (80039b0 <display_oled_init+0x118>)
 80038f4:	f000 f9ca 	bl	8003c8c <ssd1306_commandList>

    uint8_t comPins = 0x02;
 80038f8:	2302      	movs	r3, #2
 80038fa:	73fb      	strb	r3, [r7, #15]
    uint8_t contrast = 0x8F;
 80038fc:	238f      	movs	r3, #143	; 0x8f
 80038fe:	73bb      	strb	r3, [r7, #14]

    if ((oled.screen_width == 128) && (oled.screen_height == 32)) {
 8003900:	4b28      	ldr	r3, [pc, #160]	; (80039a4 <display_oled_init+0x10c>)
 8003902:	785b      	ldrb	r3, [r3, #1]
 8003904:	2b80      	cmp	r3, #128	; 0x80
 8003906:	d108      	bne.n	800391a <display_oled_init+0x82>
 8003908:	4b26      	ldr	r3, [pc, #152]	; (80039a4 <display_oled_init+0x10c>)
 800390a:	789b      	ldrb	r3, [r3, #2]
 800390c:	2b20      	cmp	r3, #32
 800390e:	d104      	bne.n	800391a <display_oled_init+0x82>
        comPins = 0x02;
 8003910:	2302      	movs	r3, #2
 8003912:	73fb      	strb	r3, [r7, #15]
        contrast = 0x8F;
 8003914:	238f      	movs	r3, #143	; 0x8f
 8003916:	73bb      	strb	r3, [r7, #14]
 8003918:	e022      	b.n	8003960 <display_oled_init+0xc8>
    } else if ((oled.screen_width == 128) && (oled.screen_height == 64)) {
 800391a:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <display_oled_init+0x10c>)
 800391c:	785b      	ldrb	r3, [r3, #1]
 800391e:	2b80      	cmp	r3, #128	; 0x80
 8003920:	d10d      	bne.n	800393e <display_oled_init+0xa6>
 8003922:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <display_oled_init+0x10c>)
 8003924:	789b      	ldrb	r3, [r3, #2]
 8003926:	2b40      	cmp	r3, #64	; 0x40
 8003928:	d109      	bne.n	800393e <display_oled_init+0xa6>
        comPins = 0x12;
 800392a:	2312      	movs	r3, #18
 800392c:	73fb      	strb	r3, [r7, #15]
        contrast = (voltage_state == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <display_oled_init+0xa0>
 8003934:	239f      	movs	r3, #159	; 0x9f
 8003936:	e000      	b.n	800393a <display_oled_init+0xa2>
 8003938:	23cf      	movs	r3, #207	; 0xcf
 800393a:	73bb      	strb	r3, [r7, #14]
 800393c:	e010      	b.n	8003960 <display_oled_init+0xc8>
    } else if ((oled.screen_width == 96) && (oled.screen_height == 16)) {
 800393e:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <display_oled_init+0x10c>)
 8003940:	785b      	ldrb	r3, [r3, #1]
 8003942:	2b60      	cmp	r3, #96	; 0x60
 8003944:	d10c      	bne.n	8003960 <display_oled_init+0xc8>
 8003946:	4b17      	ldr	r3, [pc, #92]	; (80039a4 <display_oled_init+0x10c>)
 8003948:	789b      	ldrb	r3, [r3, #2]
 800394a:	2b10      	cmp	r3, #16
 800394c:	d108      	bne.n	8003960 <display_oled_init+0xc8>
        comPins = 0x2; // ada x12
 800394e:	2302      	movs	r3, #2
 8003950:	73fb      	strb	r3, [r7, #15]
        contrast = (voltage_state == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <display_oled_init+0xc4>
 8003958:	2310      	movs	r3, #16
 800395a:	e000      	b.n	800395e <display_oled_init+0xc6>
 800395c:	23af      	movs	r3, #175	; 0xaf
 800395e:	73bb      	strb	r3, [r7, #14]
    } else {
        // Other screen varieties -- TBD
    }

    ssd1306_command1(SSD1306_SETCOMPINS);
 8003960:	20da      	movs	r0, #218	; 0xda
 8003962:	f000 f9c3 	bl	8003cec <ssd1306_command1>
    ssd1306_command1(comPins);
 8003966:	7bfb      	ldrb	r3, [r7, #15]
 8003968:	4618      	mov	r0, r3
 800396a:	f000 f9bf 	bl	8003cec <ssd1306_command1>
    ssd1306_command1(SSD1306_SETCONTRAST);
 800396e:	2081      	movs	r0, #129	; 0x81
 8003970:	f000 f9bc 	bl	8003cec <ssd1306_command1>
    ssd1306_command1(contrast);
 8003974:	7bbb      	ldrb	r3, [r7, #14]
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f9b8 	bl	8003cec <ssd1306_command1>

    ssd1306_command1(SSD1306_SETPRECHARGE); // 0xD9
 800397c:	20d9      	movs	r0, #217	; 0xd9
 800397e:	f000 f9b5 	bl	8003cec <ssd1306_command1>
    ssd1306_command1((voltage_state == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <display_oled_init+0xf4>
 8003988:	2322      	movs	r3, #34	; 0x22
 800398a:	e000      	b.n	800398e <display_oled_init+0xf6>
 800398c:	23f1      	movs	r3, #241	; 0xf1
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f9ac 	bl	8003cec <ssd1306_command1>
        0x40,
        SSD1306_DISPLAYALLON_RESUME, // 0xA4
        SSD1306_NORMALDISPLAY,       // 0xA6
        SSD1306_DEACTIVATE_SCROLL,
        SSD1306_DISPLAYON}; // Main screen turn on
    ssd1306_commandList(init5, sizeof(init5));
 8003994:	2106      	movs	r1, #6
 8003996:	4807      	ldr	r0, [pc, #28]	; (80039b4 <display_oled_init+0x11c>)
 8003998:	f000 f978 	bl	8003c8c <ssd1306_commandList>
    
}
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	20000460 	.word	0x20000460
 80039a8:	0800faa0 	.word	0x0800faa0
 80039ac:	0800faa4 	.word	0x0800faa4
 80039b0:	0800faa8 	.word	0x0800faa8
 80039b4:	0800faac 	.word	0x0800faac

080039b8 <setTextSize>:

//TODO::: The following line is for reference only
//TODO::: see Adafruit_GFX.cpp line 1305
void setTextSize (uint8_t s_x, uint8_t s_y) {
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	460a      	mov	r2, r1
 80039c2:	71fb      	strb	r3, [r7, #7]
 80039c4:	4613      	mov	r3, r2
 80039c6:	71bb      	strb	r3, [r7, #6]
    oled.textsize_x = (s_x > 0) ? s_x : 1;
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <setTextSize+0x1a>
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	e000      	b.n	80039d4 <setTextSize+0x1c>
 80039d2:	2301      	movs	r3, #1
 80039d4:	4a07      	ldr	r2, [pc, #28]	; (80039f4 <setTextSize+0x3c>)
 80039d6:	70d3      	strb	r3, [r2, #3]
    oled.textsize_y = (s_y > 0) ? s_y : 1;
 80039d8:	79bb      	ldrb	r3, [r7, #6]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <setTextSize+0x2a>
 80039de:	79bb      	ldrb	r3, [r7, #6]
 80039e0:	e000      	b.n	80039e4 <setTextSize+0x2c>
 80039e2:	2301      	movs	r3, #1
 80039e4:	4a03      	ldr	r2, [pc, #12]	; (80039f4 <setTextSize+0x3c>)
 80039e6:	7113      	strb	r3, [r2, #4]
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20000460 	.word	0x20000460

080039f8 <oled_clear>:


void oled_clear(void) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
    memset(oled.screen_buffer, 0, oled.screen_width * ((oled.screen_height + 7) / 8));
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <oled_clear+0x2c>)
 80039fe:	6898      	ldr	r0, [r3, #8]
 8003a00:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <oled_clear+0x2c>)
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <oled_clear+0x2c>)
 8003a08:	789b      	ldrb	r3, [r3, #2]
 8003a0a:	3307      	adds	r3, #7
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	da00      	bge.n	8003a12 <oled_clear+0x1a>
 8003a10:	3307      	adds	r3, #7
 8003a12:	10db      	asrs	r3, r3, #3
 8003a14:	fb03 f302 	mul.w	r3, r3, r2
 8003a18:	461a      	mov	r2, r3
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	f008 fcc0 	bl	800c3a0 <memset>
}
 8003a20:	bf00      	nop
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20000460 	.word	0x20000460

08003a28 <display_oled_drawBitmap>:

void display_oled_drawBitmap(int16_t x, int16_t y, const uint8_t bitmap[],
                              int16_t w, int16_t h, uint16_t color) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60ba      	str	r2, [r7, #8]
 8003a30:	461a      	mov	r2, r3
 8003a32:	4603      	mov	r3, r0
 8003a34:	81fb      	strh	r3, [r7, #14]
 8003a36:	460b      	mov	r3, r1
 8003a38:	81bb      	strh	r3, [r7, #12]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8003a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a42:	3307      	adds	r3, #7
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	da00      	bge.n	8003a4a <display_oled_drawBitmap+0x22>
 8003a48:	3307      	adds	r3, #7
 8003a4a:	10db      	asrs	r3, r3, #3
 8003a4c:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	75fb      	strb	r3, [r7, #23]

    for (int16_t j = 0; j < h; j++, y++) {
 8003a52:	2300      	movs	r3, #0
 8003a54:	82bb      	strh	r3, [r7, #20]
 8003a56:	e046      	b.n	8003ae6 <display_oled_drawBitmap+0xbe>
        for (int16_t i = 0; i < w; i++) {
 8003a58:	2300      	movs	r3, #0
 8003a5a:	827b      	strh	r3, [r7, #18]
 8003a5c:	e031      	b.n	8003ac2 <display_oled_drawBitmap+0x9a>
            if (i & 7)
 8003a5e:	8a7b      	ldrh	r3, [r7, #18]
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <display_oled_drawBitmap+0x48>
                byte <<= 1;
 8003a68:	7dfb      	ldrb	r3, [r7, #23]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	75fb      	strb	r3, [r7, #23]
 8003a6e:	e012      	b.n	8003a96 <display_oled_drawBitmap+0x6e>
            else
                byte = bitmap[j * byteWidth + i / 8];
 8003a70:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a74:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003a78:	fb02 f203 	mul.w	r2, r2, r3
 8003a7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	da00      	bge.n	8003a86 <display_oled_drawBitmap+0x5e>
 8003a84:	3307      	adds	r3, #7
 8003a86:	10db      	asrs	r3, r3, #3
 8003a88:	b21b      	sxth	r3, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	4413      	add	r3, r2
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	75fb      	strb	r3, [r7, #23]
            if (byte & 0x80)
 8003a96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	da0b      	bge.n	8003ab6 <display_oled_drawBitmap+0x8e>
                drawPixel(x + i, y, color);
 8003a9e:	89fa      	ldrh	r2, [r7, #14]
 8003aa0:	8a7b      	ldrh	r3, [r7, #18]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	b21b      	sxth	r3, r3
 8003aa8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f823 	bl	8003afc <drawPixel>
        for (int16_t i = 0; i < w; i++) {
 8003ab6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3301      	adds	r3, #1
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	827b      	strh	r3, [r7, #18]
 8003ac2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	dbc7      	blt.n	8003a5e <display_oled_drawBitmap+0x36>
    for (int16_t j = 0; j < h; j++, y++) {
 8003ace:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	82bb      	strh	r3, [r7, #20]
 8003ada:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	81bb      	strh	r3, [r7, #12]
 8003ae6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003aea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	dbb2      	blt.n	8003a58 <display_oled_drawBitmap+0x30>
        }
    }
}
 8003af2:	bf00      	nop
 8003af4:	bf00      	nop
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <drawPixel>:


bool drawPixel(int16_t x, int16_t y, uint8_t color) {
 8003afc:	b490      	push	{r4, r7}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	80fb      	strh	r3, [r7, #6]
 8003b06:	460b      	mov	r3, r1
 8003b08:	80bb      	strh	r3, [r7, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	70fb      	strb	r3, [r7, #3]
    
    if ((x >= 0) && (x < oled.screen_width) && (y >= 0) && (y < oled.screen_height)) {
 8003b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f2c0 80b1 	blt.w	8003c7a <drawPixel+0x17e>
 8003b18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b1c:	4a5a      	ldr	r2, [pc, #360]	; (8003c88 <drawPixel+0x18c>)
 8003b1e:	7852      	ldrb	r2, [r2, #1]
 8003b20:	4293      	cmp	r3, r2
 8003b22:	f280 80aa 	bge.w	8003c7a <drawPixel+0x17e>
 8003b26:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f2c0 80a5 	blt.w	8003c7a <drawPixel+0x17e>
 8003b30:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003b34:	4a54      	ldr	r2, [pc, #336]	; (8003c88 <drawPixel+0x18c>)
 8003b36:	7892      	ldrb	r2, [r2, #2]
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	f280 809e 	bge.w	8003c7a <drawPixel+0x17e>
            // case 1:
            // ssd1306_swap(x, y);
            // x = oled.screen_width - x - 1;
            // break;
            // case 2:
        x = oled.screen_width - x - 1;
 8003b3e:	4b52      	ldr	r3, [pc, #328]	; (8003c88 <drawPixel+0x18c>)
 8003b40:	785b      	ldrb	r3, [r3, #1]
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	88fb      	ldrh	r3, [r7, #6]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	80fb      	strh	r3, [r7, #6]
        y = oled.screen_height - y - 1;
 8003b50:	4b4d      	ldr	r3, [pc, #308]	; (8003c88 <drawPixel+0x18c>)
 8003b52:	789b      	ldrb	r3, [r3, #2]
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	88bb      	ldrh	r3, [r7, #4]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	80bb      	strh	r3, [r7, #4]
            // case 3:
            // ssd1306_swap(x, y);
            // y = oled.screen_height - y - 1;
            // break;
        
        switch (color) {
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d05c      	beq.n	8003c22 <drawPixel+0x126>
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	f300 8084 	bgt.w	8003c76 <drawPixel+0x17a>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d02b      	beq.n	8003bca <drawPixel+0xce>
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d17f      	bne.n	8003c76 <drawPixel+0x17a>
            case SSD1306_WHITE:
                oled.screen_buffer[x + (y / 8) * oled.screen_width] |= (1 << (y & 7));
 8003b76:	4b44      	ldr	r3, [pc, #272]	; (8003c88 <drawPixel+0x18c>)
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003b7e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	da00      	bge.n	8003b88 <drawPixel+0x8c>
 8003b86:	3307      	adds	r3, #7
 8003b88:	10db      	asrs	r3, r3, #3
 8003b8a:	b218      	sxth	r0, r3
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	4b3e      	ldr	r3, [pc, #248]	; (8003c88 <drawPixel+0x18c>)
 8003b90:	785b      	ldrb	r3, [r3, #1]
 8003b92:	fb03 f304 	mul.w	r3, r3, r4
 8003b96:	440b      	add	r3, r1
 8003b98:	4413      	add	r3, r2
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	b25a      	sxtb	r2, r3
 8003b9e:	88bb      	ldrh	r3, [r7, #4]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8003baa:	b25b      	sxtb	r3, r3
 8003bac:	4313      	orrs	r3, r2
 8003bae:	b25c      	sxtb	r4, r3
 8003bb0:	4b35      	ldr	r3, [pc, #212]	; (8003c88 <drawPixel+0x18c>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003bb8:	4a33      	ldr	r2, [pc, #204]	; (8003c88 <drawPixel+0x18c>)
 8003bba:	7852      	ldrb	r2, [r2, #1]
 8003bbc:	fb02 f200 	mul.w	r2, r2, r0
 8003bc0:	440a      	add	r2, r1
 8003bc2:	4413      	add	r3, r2
 8003bc4:	b2e2      	uxtb	r2, r4
 8003bc6:	701a      	strb	r2, [r3, #0]
            break;
 8003bc8:	e055      	b.n	8003c76 <drawPixel+0x17a>
            
            case SSD1306_BLACK:
                oled.screen_buffer[x + (y / 8) * oled.screen_width] &= ~(1 << (y & 7));
 8003bca:	4b2f      	ldr	r3, [pc, #188]	; (8003c88 <drawPixel+0x18c>)
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003bd2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	da00      	bge.n	8003bdc <drawPixel+0xe0>
 8003bda:	3307      	adds	r3, #7
 8003bdc:	10db      	asrs	r3, r3, #3
 8003bde:	b218      	sxth	r0, r3
 8003be0:	4604      	mov	r4, r0
 8003be2:	4b29      	ldr	r3, [pc, #164]	; (8003c88 <drawPixel+0x18c>)
 8003be4:	785b      	ldrb	r3, [r3, #1]
 8003be6:	fb03 f304 	mul.w	r3, r3, r4
 8003bea:	440b      	add	r3, r1
 8003bec:	4413      	add	r3, r2
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	b25a      	sxtb	r2, r3
 8003bf2:	88bb      	ldrh	r3, [r7, #4]
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfe:	b25b      	sxtb	r3, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	b25b      	sxtb	r3, r3
 8003c04:	4013      	ands	r3, r2
 8003c06:	b25c      	sxtb	r4, r3
 8003c08:	4b1f      	ldr	r3, [pc, #124]	; (8003c88 <drawPixel+0x18c>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003c10:	4a1d      	ldr	r2, [pc, #116]	; (8003c88 <drawPixel+0x18c>)
 8003c12:	7852      	ldrb	r2, [r2, #1]
 8003c14:	fb02 f200 	mul.w	r2, r2, r0
 8003c18:	440a      	add	r2, r1
 8003c1a:	4413      	add	r3, r2
 8003c1c:	b2e2      	uxtb	r2, r4
 8003c1e:	701a      	strb	r2, [r3, #0]
            break;
 8003c20:	e029      	b.n	8003c76 <drawPixel+0x17a>
            
            case SSD1306_INVERSE:
                oled.screen_buffer[x + (y / 8) * oled.screen_width] ^= (1 << (y & 7));
 8003c22:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <drawPixel+0x18c>)
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003c2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	da00      	bge.n	8003c34 <drawPixel+0x138>
 8003c32:	3307      	adds	r3, #7
 8003c34:	10db      	asrs	r3, r3, #3
 8003c36:	b218      	sxth	r0, r3
 8003c38:	4604      	mov	r4, r0
 8003c3a:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <drawPixel+0x18c>)
 8003c3c:	785b      	ldrb	r3, [r3, #1]
 8003c3e:	fb03 f304 	mul.w	r3, r3, r4
 8003c42:	440b      	add	r3, r1
 8003c44:	4413      	add	r3, r2
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	b25a      	sxtb	r2, r3
 8003c4a:	88bb      	ldrh	r3, [r7, #4]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	2101      	movs	r1, #1
 8003c52:	fa01 f303 	lsl.w	r3, r1, r3
 8003c56:	b25b      	sxtb	r3, r3
 8003c58:	4053      	eors	r3, r2
 8003c5a:	b25c      	sxtb	r4, r3
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <drawPixel+0x18c>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003c64:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <drawPixel+0x18c>)
 8003c66:	7852      	ldrb	r2, [r2, #1]
 8003c68:	fb02 f200 	mul.w	r2, r2, r0
 8003c6c:	440a      	add	r2, r1
 8003c6e:	4413      	add	r3, r2
 8003c70:	b2e2      	uxtb	r2, r4
 8003c72:	701a      	strb	r2, [r3, #0]
            break;
 8003c74:	bf00      	nop
        }
        return true;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <drawPixel+0x180>
    }
    else {
        return false;
 8003c7a:	2300      	movs	r3, #0
    }
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc90      	pop	{r4, r7}
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20000460 	.word	0x20000460

08003c8c <ssd1306_commandList>:

void ssd1306_commandList(const uint8_t * command_pointer, uint8_t bytes_to_transmit) {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	70fb      	strb	r3, [r7, #3]

    /**
     * Set Co and D/C bit to zero
     */
    if (HAL_I2C_Master_Transmit(&hi2c2, OLED_SCREEN_ADDRESS, (uint8_t *)0x00, 1, 10000) != HAL_OK){
 8003c98:	f242 7310 	movw	r3, #10000	; 0x2710
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	213c      	movs	r1, #60	; 0x3c
 8003ca4:	4810      	ldr	r0, [pc, #64]	; (8003ce8 <ssd1306_commandList+0x5c>)
 8003ca6:	f001 fd6f 	bl	8005788 <HAL_I2C_Master_Transmit>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d011      	beq.n	8003cd4 <ssd1306_commandList+0x48>
        asm("bkpt 255");
 8003cb0:	beff      	bkpt	0x00ff
    }

    /**
     * Transmit the array of data
     */
    while(bytes_to_transmit--) {
 8003cb2:	e00f      	b.n	8003cd4 <ssd1306_commandList+0x48>
        if (HAL_I2C_Master_Transmit(&hi2c2, OLED_SCREEN_ADDRESS, (uint8_t *) command_pointer, 1, 10000) != HAL_OK){
 8003cb4:	f242 7310 	movw	r3, #10000	; 0x2710
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	2301      	movs	r3, #1
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	213c      	movs	r1, #60	; 0x3c
 8003cc0:	4809      	ldr	r0, [pc, #36]	; (8003ce8 <ssd1306_commandList+0x5c>)
 8003cc2:	f001 fd61 	bl	8005788 <HAL_I2C_Master_Transmit>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d000      	beq.n	8003cce <ssd1306_commandList+0x42>
            asm("bkpt 255");
 8003ccc:	beff      	bkpt	0x00ff
        }
        command_pointer++;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	607b      	str	r3, [r7, #4]
    while(bytes_to_transmit--) {
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	1e5a      	subs	r2, r3, #1
 8003cd8:	70fa      	strb	r2, [r7, #3]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1ea      	bne.n	8003cb4 <ssd1306_commandList+0x28>
    }
}
 8003cde:	bf00      	nop
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	200014f8 	.word	0x200014f8

08003cec <ssd1306_command1>:


void ssd1306_command1(uint8_t command) {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	71fb      	strb	r3, [r7, #7]
  
    /**
     * Set Co and D/C bit to zero
     */
    if (HAL_I2C_Master_Transmit(&hi2c2, OLED_SCREEN_ADDRESS, (uint8_t *) 0x00, 1, 10000) != HAL_OK){
 8003cf6:	f242 7310 	movw	r3, #10000	; 0x2710
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	2200      	movs	r2, #0
 8003d00:	213c      	movs	r1, #60	; 0x3c
 8003d02:	480c      	ldr	r0, [pc, #48]	; (8003d34 <ssd1306_command1+0x48>)
 8003d04:	f001 fd40 	bl	8005788 <HAL_I2C_Master_Transmit>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d000      	beq.n	8003d10 <ssd1306_command1+0x24>
        asm("bkpt 255");        //TODO need to figure out what this does
 8003d0e:	beff      	bkpt	0x00ff
    }

    /**
     * Transmit the array of data
     */
    if (HAL_I2C_Master_Transmit(&hi2c2, OLED_SCREEN_ADDRESS, (uint8_t *) command, 1, 10000) != HAL_OK){
 8003d10:	79fb      	ldrb	r3, [r7, #7]
 8003d12:	461a      	mov	r2, r3
 8003d14:	f242 7310 	movw	r3, #10000	; 0x2710
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	213c      	movs	r1, #60	; 0x3c
 8003d1e:	4805      	ldr	r0, [pc, #20]	; (8003d34 <ssd1306_command1+0x48>)
 8003d20:	f001 fd32 	bl	8005788 <HAL_I2C_Master_Transmit>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d000      	beq.n	8003d2c <ssd1306_command1+0x40>
        asm("bkpt 255");        //TODO need to figure out what this does
 8003d2a:	beff      	bkpt	0x00ff
    }

}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	200014f8 	.word	0x200014f8

08003d38 <writeOledString>:
// }

//TODO::: There needs to be a function for setting the 
//TODO::: cursor position 

void writeOledString(const char * c, uint8_t color) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	70fb      	strb	r3, [r7, #3]
    while(*c != '\0'){
 8003d44:	e009      	b.n	8003d5a <writeOledString+0x22>
        writeStringHelper((uint8_t) *c,color);                    //Load the U1 TX buffer with the current character
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	78fa      	ldrb	r2, [r7, #3]
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 f80c 	bl	8003d6c <writeStringHelper>
        c++;                           //Increment the pointer memory address
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3301      	adds	r3, #1
 8003d58:	607b      	str	r3, [r7, #4]
    while(*c != '\0'){
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f1      	bne.n	8003d46 <writeOledString+0xe>
    }
}
 8003d62:	bf00      	nop
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <writeStringHelper>:

//TODO::: The following is for reference only and can be deleted
//TODO::: For this function, reference Adafruit_GFX.cpp  line 1243
//TODO::: See line 143 in this file, but color options are 
//TODO:::  SSD1306_WHITE, SSD1306_BLACK, SSD1306_INVERSE
void writeStringHelper(uint8_t c, uint8_t color) {
 8003d6c:	b5b0      	push	{r4, r5, r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af02      	add	r7, sp, #8
 8003d72:	4603      	mov	r3, r0
 8003d74:	460a      	mov	r2, r1
 8003d76:	71fb      	strb	r3, [r7, #7]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	71bb      	strb	r3, [r7, #6]

//   } 
  
//   else { // Custom font

    if (c == '\n') {
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	2b0a      	cmp	r3, #10
 8003d80:	d111      	bne.n	8003da6 <writeStringHelper+0x3a>
        oled.cursor_x = 0;
 8003d82:	4b44      	ldr	r3, [pc, #272]	; (8003e94 <writeStringHelper+0x128>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	71da      	strb	r2, [r3, #7]
        oled.cursor_y += (int16_t)oled.textsize_y * (uint8_t)(oled.oled_font -> yAdvance);
 8003d88:	4b42      	ldr	r3, [pc, #264]	; (8003e94 <writeStringHelper+0x128>)
 8003d8a:	799a      	ldrb	r2, [r3, #6]
 8003d8c:	4b41      	ldr	r3, [pc, #260]	; (8003e94 <writeStringHelper+0x128>)
 8003d8e:	791b      	ldrb	r3, [r3, #4]
 8003d90:	4940      	ldr	r1, [pc, #256]	; (8003e94 <writeStringHelper+0x128>)
 8003d92:	68c9      	ldr	r1, [r1, #12]
 8003d94:	7b09      	ldrb	r1, [r1, #12]
 8003d96:	fb01 f303 	mul.w	r3, r1, r3
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	4b3c      	ldr	r3, [pc, #240]	; (8003e94 <writeStringHelper+0x128>)
 8003da2:	719a      	strb	r2, [r3, #6]
                        oled.textsize_x, oled.textsize_y);
            }
            oled.cursor_x += (uint8_t)(&glyph -> xAdvance) * (int16_t)oled.textsize_x;
        }
    }
}
 8003da4:	e071      	b.n	8003e8a <writeStringHelper+0x11e>
    else if (c != '\r') {
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	2b0d      	cmp	r3, #13
 8003daa:	d06e      	beq.n	8003e8a <writeStringHelper+0x11e>
        uint8_t first = oled.oled_font -> first;
 8003dac:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <writeStringHelper+0x128>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	891b      	ldrh	r3, [r3, #8]
 8003db2:	75fb      	strb	r3, [r7, #23]
        if ((c >= first) && (c <= (uint8_t)(oled.oled_font->last))) {
 8003db4:	79fa      	ldrb	r2, [r7, #7]
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d366      	bcc.n	8003e8a <writeStringHelper+0x11e>
 8003dbc:	4b35      	ldr	r3, [pc, #212]	; (8003e94 <writeStringHelper+0x128>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	895b      	ldrh	r3, [r3, #10]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	79fa      	ldrb	r2, [r7, #7]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d85f      	bhi.n	8003e8a <writeStringHelper+0x11e>
            GFXglyph *glyph = oled.oled_font -> glyph + (c - first);
 8003dca:	4b32      	ldr	r3, [pc, #200]	; (8003e94 <writeStringHelper+0x128>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	79f9      	ldrb	r1, [r7, #7]
 8003dd2:	7dfb      	ldrb	r3, [r7, #23]
 8003dd4:	1acb      	subs	r3, r1, r3
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	4413      	add	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
            uint8_t w = &glyph -> width;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	3302      	adds	r3, #2
 8003de0:	73fb      	strb	r3, [r7, #15]
            uint8_t h = &glyph -> height;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	3303      	adds	r3, #3
 8003de6:	73bb      	strb	r3, [r7, #14]
            if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d03f      	beq.n	8003e6e <writeStringHelper+0x102>
 8003dee:	7bbb      	ldrb	r3, [r7, #14]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d03c      	beq.n	8003e6e <writeStringHelper+0x102>
                int16_t xo = (int8_t)(&glyph->xOffset); 
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	3305      	adds	r3, #5
 8003df8:	b25b      	sxtb	r3, r3
 8003dfa:	81bb      	strh	r3, [r7, #12]
                if (oled.wrap_text && ((oled.cursor_x + oled.textsize_x * (xo + w)) > oled.screen_width)) {
 8003dfc:	4b25      	ldr	r3, [pc, #148]	; (8003e94 <writeStringHelper+0x128>)
 8003dfe:	795b      	ldrb	r3, [r3, #5]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d021      	beq.n	8003e48 <writeStringHelper+0xdc>
 8003e04:	4b23      	ldr	r3, [pc, #140]	; (8003e94 <writeStringHelper+0x128>)
 8003e06:	79db      	ldrb	r3, [r3, #7]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4b22      	ldr	r3, [pc, #136]	; (8003e94 <writeStringHelper+0x128>)
 8003e0c:	78db      	ldrb	r3, [r3, #3]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	4413      	add	r3, r2
 8003e18:	fb03 f300 	mul.w	r3, r3, r0
 8003e1c:	440b      	add	r3, r1
 8003e1e:	4a1d      	ldr	r2, [pc, #116]	; (8003e94 <writeStringHelper+0x128>)
 8003e20:	7852      	ldrb	r2, [r2, #1]
 8003e22:	4293      	cmp	r3, r2
 8003e24:	dd10      	ble.n	8003e48 <writeStringHelper+0xdc>
                    oled.cursor_x = 0;
 8003e26:	4b1b      	ldr	r3, [pc, #108]	; (8003e94 <writeStringHelper+0x128>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	71da      	strb	r2, [r3, #7]
                    oled.cursor_y += (int16_t)oled.textsize_y * (uint8_t)(oled.oled_font -> yAdvance);
 8003e2c:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <writeStringHelper+0x128>)
 8003e2e:	799a      	ldrb	r2, [r3, #6]
 8003e30:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <writeStringHelper+0x128>)
 8003e32:	791b      	ldrb	r3, [r3, #4]
 8003e34:	4917      	ldr	r1, [pc, #92]	; (8003e94 <writeStringHelper+0x128>)
 8003e36:	68c9      	ldr	r1, [r1, #12]
 8003e38:	7b09      	ldrb	r1, [r1, #12]
 8003e3a:	fb01 f303 	mul.w	r3, r1, r3
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	4413      	add	r3, r2
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	4b13      	ldr	r3, [pc, #76]	; (8003e94 <writeStringHelper+0x128>)
 8003e46:	719a      	strb	r2, [r3, #6]
                drawChar(oled.cursor_x, oled.cursor_y, c, color, 
 8003e48:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <writeStringHelper+0x128>)
 8003e4a:	79db      	ldrb	r3, [r3, #7]
 8003e4c:	b218      	sxth	r0, r3
 8003e4e:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <writeStringHelper+0x128>)
 8003e50:	799b      	ldrb	r3, [r3, #6]
 8003e52:	b219      	sxth	r1, r3
 8003e54:	79bb      	ldrb	r3, [r7, #6]
 8003e56:	b29d      	uxth	r5, r3
 8003e58:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <writeStringHelper+0x128>)
 8003e5a:	78db      	ldrb	r3, [r3, #3]
 8003e5c:	4a0d      	ldr	r2, [pc, #52]	; (8003e94 <writeStringHelper+0x128>)
 8003e5e:	7912      	ldrb	r2, [r2, #4]
 8003e60:	79fc      	ldrb	r4, [r7, #7]
 8003e62:	9201      	str	r2, [sp, #4]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	462b      	mov	r3, r5
 8003e68:	4622      	mov	r2, r4
 8003e6a:	f000 f815 	bl	8003e98 <drawChar>
            oled.cursor_x += (uint8_t)(&glyph -> xAdvance) * (int16_t)oled.textsize_x;
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <writeStringHelper+0x128>)
 8003e70:	79da      	ldrb	r2, [r3, #7]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	3304      	adds	r3, #4
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	4906      	ldr	r1, [pc, #24]	; (8003e94 <writeStringHelper+0x128>)
 8003e7a:	78c9      	ldrb	r1, [r1, #3]
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	4413      	add	r3, r2
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <writeStringHelper+0x128>)
 8003e88:	71da      	strb	r2, [r3, #7]
}
 8003e8a:	bf00      	nop
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bdb0      	pop	{r4, r5, r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000460 	.word	0x20000460

08003e98 <drawChar>:

//TODO::: The following line is for reference only
//TODO::: see Adafruit_GFX.cpp line 1134
void drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint8_t size_x,
                            uint8_t size_y) {
 8003e98:	b590      	push	{r4, r7, lr}
 8003e9a:	b08b      	sub	sp, #44	; 0x2c
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	4608      	mov	r0, r1
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4623      	mov	r3, r4
 8003ea8:	80fb      	strh	r3, [r7, #6]
 8003eaa:	4603      	mov	r3, r0
 8003eac:	80bb      	strh	r3, [r7, #4]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	70fb      	strb	r3, [r7, #3]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	803b      	strh	r3, [r7, #0]
     * newlines, returns, non-printable characters, etc.  Calling
     * drawChar() directly with 'bad' characters of font may cause mayhem!
     * 
    */

    c -= (uint8_t)(oled.oled_font -> first);
 8003eb6:	4b58      	ldr	r3, [pc, #352]	; (8004018 <drawChar+0x180>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	891b      	ldrh	r3, [r3, #8]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	78fa      	ldrb	r2, [r7, #3]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	70fb      	strb	r3, [r7, #3]
    
    GFXglyph *glyph = oled.oled_font -> glyph + c;
 8003ec4:	4b54      	ldr	r3, [pc, #336]	; (8004018 <drawChar+0x180>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	4413      	add	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]

    // uint8_t *bitmap = pgm_read_bitmap_ptr(oled.oled_font);  //TODO can remove this line
    uint8_t *bitmap = oled.oled_font -> bitmap;
 8003ed2:	4b51      	ldr	r3, [pc, #324]	; (8004018 <drawChar+0x180>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	60fb      	str	r3, [r7, #12]

    uint16_t bo = (uint16_t)(&glyph->bitmapOffset);
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	83fb      	strh	r3, [r7, #30]

    uint8_t w = (uint8_t)(&glyph -> width),
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	3302      	adds	r3, #2
 8003ee2:	72fb      	strb	r3, [r7, #11]
            h = (uint8_t)(&glyph -> height);
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	3303      	adds	r3, #3
 8003ee8:	72bb      	strb	r3, [r7, #10]

    int8_t xo = (int8_t)(&glyph -> xOffset),
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	3305      	adds	r3, #5
 8003eee:	727b      	strb	r3, [r7, #9]
           yo = (int8_t)(&glyph -> yOffset);
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	3306      	adds	r3, #6
 8003ef4:	723b      	strb	r3, [r7, #8]
    
    uint8_t xx, yy, bits = 0, bit = 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	76fb      	strb	r3, [r7, #27]
 8003efa:	2300      	movs	r3, #0
 8003efc:	76bb      	strb	r3, [r7, #26]
    
    int16_t xo16 = 0, yo16 = 0;
 8003efe:	2300      	movs	r3, #0
 8003f00:	833b      	strh	r3, [r7, #24]
 8003f02:	2300      	movs	r3, #0
 8003f04:	82fb      	strh	r3, [r7, #22]

    if (size_x > 1 || size_y > 1) {
 8003f06:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d803      	bhi.n	8003f16 <drawChar+0x7e>
 8003f0e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d905      	bls.n	8003f22 <drawChar+0x8a>
      xo16 = xo;
 8003f16:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003f1a:	833b      	strh	r3, [r7, #24]
      yo16 = yo;
 8003f1c:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8003f20:	82fb      	strh	r3, [r7, #22]
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    // startWrite();
    for (yy = 0; yy < h; yy++) {
 8003f22:	2300      	movs	r3, #0
 8003f24:	773b      	strb	r3, [r7, #28]
 8003f26:	e06e      	b.n	8004006 <drawChar+0x16e>
      for (xx = 0; xx < w; xx++) {
 8003f28:	2300      	movs	r3, #0
 8003f2a:	777b      	strb	r3, [r7, #29]
 8003f2c:	e064      	b.n	8003ff8 <drawChar+0x160>
        if (!(bit++ & 7)) {
 8003f2e:	7ebb      	ldrb	r3, [r7, #26]
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	76ba      	strb	r2, [r7, #26]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d106      	bne.n	8003f4a <drawChar+0xb2>
          bits = (uint8_t)(&bitmap[bo++]);
 8003f3c:	8bfb      	ldrh	r3, [r7, #30]
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	83fa      	strh	r2, [r7, #30]
 8003f42:	461a      	mov	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4413      	add	r3, r2
 8003f48:	76fb      	strb	r3, [r7, #27]
        }
        if (bits & 0x80) {
 8003f4a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	da4c      	bge.n	8003fec <drawChar+0x154>
          if (size_x == 1 && size_y == 1) {
 8003f52:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d11f      	bne.n	8003f9a <drawChar+0x102>
 8003f5a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d11b      	bne.n	8003f9a <drawChar+0x102>
            drawPixel(x + xo + xx, y + yo + yy, color);
 8003f62:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	7f7b      	ldrb	r3, [r7, #29]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	4413      	add	r3, r2
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	b218      	sxth	r0, r3
 8003f78:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	88bb      	ldrh	r3, [r7, #4]
 8003f80:	4413      	add	r3, r2
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	7f3b      	ldrb	r3, [r7, #28]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	b21b      	sxth	r3, r3
 8003f8e:	883a      	ldrh	r2, [r7, #0]
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	4619      	mov	r1, r3
 8003f94:	f7ff fdb2 	bl	8003afc <drawPixel>
 8003f98:	e028      	b.n	8003fec <drawChar+0x154>
          } else {
            fillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8003f9a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003f9e:	7f7b      	ldrb	r3, [r7, #29]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003fa8:	b292      	uxth	r2, r2
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	b218      	sxth	r0, r3
 8003fb8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003fbc:	7f3b      	ldrb	r3, [r7, #28]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003fc6:	b292      	uxth	r2, r2
 8003fc8:	fb02 f303 	mul.w	r3, r2, r3
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	88bb      	ldrh	r3, [r7, #4]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	b219      	sxth	r1, r3
 8003fd6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003fda:	b21a      	sxth	r2, r3
 8003fdc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003fe0:	b21c      	sxth	r4, r3
 8003fe2:	883b      	ldrh	r3, [r7, #0]
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	4623      	mov	r3, r4
 8003fe8:	f000 f826 	bl	8004038 <fillRect>
                          size_x, size_y, color);
          }
        }
        bits <<= 1;
 8003fec:	7efb      	ldrb	r3, [r7, #27]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	76fb      	strb	r3, [r7, #27]
      for (xx = 0; xx < w; xx++) {
 8003ff2:	7f7b      	ldrb	r3, [r7, #29]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	777b      	strb	r3, [r7, #29]
 8003ff8:	7f7a      	ldrb	r2, [r7, #29]
 8003ffa:	7afb      	ldrb	r3, [r7, #11]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d396      	bcc.n	8003f2e <drawChar+0x96>
    for (yy = 0; yy < h; yy++) {
 8004000:	7f3b      	ldrb	r3, [r7, #28]
 8004002:	3301      	adds	r3, #1
 8004004:	773b      	strb	r3, [r7, #28]
 8004006:	7f3a      	ldrb	r2, [r7, #28]
 8004008:	7abb      	ldrb	r3, [r7, #10]
 800400a:	429a      	cmp	r2, r3
 800400c:	d38c      	bcc.n	8003f28 <drawChar+0x90>
      }
    }
    // endWrite();


}
 800400e:	bf00      	nop
 8004010:	bf00      	nop
 8004012:	3724      	adds	r7, #36	; 0x24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd90      	pop	{r4, r7, pc}
 8004018:	20000460 	.word	0x20000460

0800401c <setFont>:

//TODO::: clean up stale code in the following
//TODO::: reference Adafruti_GFX.cpp line 1338
void setFont(GFXfont *f) {
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
    // Switching from new to classic (5x7) font behavior.
    // Move cursor pos up 6 pixels so it's at top-left of char.
    // TODO The following was removed, as it shouldn't be needed
    // oled.cursor_y -= 6;
//   }
    oled.oled_font = f;
 8004024:	4a03      	ldr	r2, [pc, #12]	; (8004034 <setFont+0x18>)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	60d3      	str	r3, [r2, #12]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr
 8004034:	20000460 	.word	0x20000460

08004038 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 8004038:	b590      	push	{r4, r7, lr}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	4604      	mov	r4, r0
 8004040:	4608      	mov	r0, r1
 8004042:	4611      	mov	r1, r2
 8004044:	461a      	mov	r2, r3
 8004046:	4623      	mov	r3, r4
 8004048:	80fb      	strh	r3, [r7, #6]
 800404a:	4603      	mov	r3, r0
 800404c:	80bb      	strh	r3, [r7, #4]
 800404e:	460b      	mov	r3, r1
 8004050:	807b      	strh	r3, [r7, #2]
 8004052:	4613      	mov	r3, r2
 8004054:	803b      	strh	r3, [r7, #0]
  for (int16_t i = x; i < x + w; i++) {
 8004056:	88fb      	ldrh	r3, [r7, #6]
 8004058:	81fb      	strh	r3, [r7, #14]
 800405a:	e00e      	b.n	800407a <fillRect+0x42>
    drawFastVLine(i, y, h, color);
 800405c:	8c3b      	ldrh	r3, [r7, #32]
 800405e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004062:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004066:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800406a:	f000 f814 	bl	8004096 <drawFastVLine>
  for (int16_t i = x; i < x + w; i++) {
 800406e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004072:	b29b      	uxth	r3, r3
 8004074:	3301      	adds	r3, #1
 8004076:	b29b      	uxth	r3, r3
 8004078:	81fb      	strh	r3, [r7, #14]
 800407a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800407e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8004082:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004086:	440b      	add	r3, r1
 8004088:	429a      	cmp	r2, r3
 800408a:	dbe7      	blt.n	800405c <fillRect+0x24>
  }
}
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	bd90      	pop	{r4, r7, pc}

08004096 <drawFastVLine>:

//TODO::: The following line is for reference only
//TODO::: see Adafruit_GFX.cpp line 132

void drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
 8004096:	b590      	push	{r4, r7, lr}
 8004098:	b085      	sub	sp, #20
 800409a:	af02      	add	r7, sp, #8
 800409c:	4604      	mov	r4, r0
 800409e:	4608      	mov	r0, r1
 80040a0:	4611      	mov	r1, r2
 80040a2:	461a      	mov	r2, r3
 80040a4:	4623      	mov	r3, r4
 80040a6:	80fb      	strh	r3, [r7, #6]
 80040a8:	4603      	mov	r3, r0
 80040aa:	80bb      	strh	r3, [r7, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	807b      	strh	r3, [r7, #2]
 80040b0:	4613      	mov	r3, r2
 80040b2:	803b      	strh	r3, [r7, #0]
    drawLine(x, y, x, y + h - 1, color);
 80040b4:	88ba      	ldrh	r2, [r7, #4]
 80040b6:	887b      	ldrh	r3, [r7, #2]
 80040b8:	4413      	add	r3, r2
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29b      	uxth	r3, r3
 80040c0:	b21c      	sxth	r4, r3
 80040c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80040c6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80040ca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80040ce:	883b      	ldrh	r3, [r7, #0]
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	4623      	mov	r3, r4
 80040d4:	f000 f804 	bl	80040e0 <drawLine>
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd90      	pop	{r4, r7, pc}

080040e0 <drawLine>:
void fillScreen(uint16_t color) {
  fillRect(0, 0, oled.screen_width, oled.screen_height, color);
}

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
 80040e0:	b590      	push	{r4, r7, lr}
 80040e2:	b089      	sub	sp, #36	; 0x24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4604      	mov	r4, r0
 80040e8:	4608      	mov	r0, r1
 80040ea:	4611      	mov	r1, r2
 80040ec:	461a      	mov	r2, r3
 80040ee:	4623      	mov	r3, r4
 80040f0:	80fb      	strh	r3, [r7, #6]
 80040f2:	4603      	mov	r3, r0
 80040f4:	80bb      	strh	r3, [r7, #4]
 80040f6:	460b      	mov	r3, r1
 80040f8:	807b      	strh	r3, [r7, #2]
 80040fa:	4613      	mov	r3, r2
 80040fc:	803b      	strh	r3, [r7, #0]
  
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80040fe:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004102:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800410c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004110:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004118:	1acb      	subs	r3, r1, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	bfb8      	it	lt
 800411e:	425b      	neglt	r3, r3
 8004120:	429a      	cmp	r2, r3
 8004122:	bfcc      	ite	gt
 8004124:	2301      	movgt	r3, #1
 8004126:	2300      	movle	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	837b      	strh	r3, [r7, #26]
    if (steep) {
 800412c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00b      	beq.n	800414c <drawLine+0x6c>
        _swap_int16_t(x0, y0);
 8004134:	88fb      	ldrh	r3, [r7, #6]
 8004136:	833b      	strh	r3, [r7, #24]
 8004138:	88bb      	ldrh	r3, [r7, #4]
 800413a:	80fb      	strh	r3, [r7, #6]
 800413c:	8b3b      	ldrh	r3, [r7, #24]
 800413e:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8004140:	887b      	ldrh	r3, [r7, #2]
 8004142:	82fb      	strh	r3, [r7, #22]
 8004144:	883b      	ldrh	r3, [r7, #0]
 8004146:	807b      	strh	r3, [r7, #2]
 8004148:	8afb      	ldrh	r3, [r7, #22]
 800414a:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800414c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004150:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004154:	429a      	cmp	r2, r3
 8004156:	dd0b      	ble.n	8004170 <drawLine+0x90>
        _swap_int16_t(x0, x1);
 8004158:	88fb      	ldrh	r3, [r7, #6]
 800415a:	82bb      	strh	r3, [r7, #20]
 800415c:	887b      	ldrh	r3, [r7, #2]
 800415e:	80fb      	strh	r3, [r7, #6]
 8004160:	8abb      	ldrh	r3, [r7, #20]
 8004162:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8004164:	88bb      	ldrh	r3, [r7, #4]
 8004166:	827b      	strh	r3, [r7, #18]
 8004168:	883b      	ldrh	r3, [r7, #0]
 800416a:	80bb      	strh	r3, [r7, #4]
 800416c:	8a7b      	ldrh	r3, [r7, #18]
 800416e:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8004170:	887a      	ldrh	r2, [r7, #2]
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	b29b      	uxth	r3, r3
 8004178:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 800417a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800417e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	bfb8      	it	lt
 8004188:	425b      	neglt	r3, r3
 800418a:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 800418c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004190:	0fda      	lsrs	r2, r3, #31
 8004192:	4413      	add	r3, r2
 8004194:	105b      	asrs	r3, r3, #1
 8004196:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 8004198:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800419c:	f9b7 3000 	ldrsh.w	r3, [r7]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	da02      	bge.n	80041aa <drawLine+0xca>
        ystep = 1;
 80041a4:	2301      	movs	r3, #1
 80041a6:	83bb      	strh	r3, [r7, #28]
 80041a8:	e033      	b.n	8004212 <drawLine+0x132>
    } 
    else {
        ystep = -1;
 80041aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041ae:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0 <= x1; x0++) {
 80041b0:	e02f      	b.n	8004212 <drawLine+0x132>
        if (steep) {
 80041b2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d009      	beq.n	80041ce <drawLine+0xee>
            drawPixel(y0, x0, color);
 80041ba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80041c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff fc98 	bl	8003afc <drawPixel>
 80041cc:	e008      	b.n	80041e0 <drawLine+0x100>
        } 
        else {
            drawPixel(x0, y0, color);
 80041ce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80041d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff fc8e 	bl	8003afc <drawPixel>
        }
        err -= dy;
 80041e0:	8bfa      	ldrh	r2, [r7, #30]
 80041e2:	89fb      	ldrh	r3, [r7, #14]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 80041ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	da09      	bge.n	8004206 <drawLine+0x126>
            y0 += ystep;
 80041f2:	88ba      	ldrh	r2, [r7, #4]
 80041f4:	8bbb      	ldrh	r3, [r7, #28]
 80041f6:	4413      	add	r3, r2
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80041fc:	8bfa      	ldrh	r2, [r7, #30]
 80041fe:	8a3b      	ldrh	r3, [r7, #16]
 8004200:	4413      	add	r3, r2
 8004202:	b29b      	uxth	r3, r3
 8004204:	83fb      	strh	r3, [r7, #30]
    for (; x0 <= x1; x0++) {
 8004206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800420a:	b29b      	uxth	r3, r3
 800420c:	3301      	adds	r3, #1
 800420e:	b29b      	uxth	r3, r3
 8004210:	80fb      	strh	r3, [r7, #6]
 8004212:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004216:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800421a:	429a      	cmp	r2, r3
 800421c:	ddc9      	ble.n	80041b2 <drawLine+0xd2>
        }
    }
}
 800421e:	bf00      	nop
 8004220:	bf00      	nop
 8004222:	3724      	adds	r7, #36	; 0x24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd90      	pop	{r4, r7, pc}

08004228 <updateDisplay>:


void updateDisplay(void) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af02      	add	r7, sp, #8
    static const uint8_t dlist1[] = {
        SSD1306_PAGEADDR,
        0,                      // Page start address
        0xFF,                   // Page end (not really, but works here)
        SSD1306_COLUMNADDR, 0}; // Column start address
    ssd1306_commandList(dlist1, sizeof(dlist1));
 800422e:	2105      	movs	r1, #5
 8004230:	481a      	ldr	r0, [pc, #104]	; (800429c <updateDisplay+0x74>)
 8004232:	f7ff fd2b 	bl	8003c8c <ssd1306_commandList>
    ssd1306_command1(oled.screen_width - 1); // Column end address
 8004236:	4b1a      	ldr	r3, [pc, #104]	; (80042a0 <updateDisplay+0x78>)
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	3b01      	subs	r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fd54 	bl	8003cec <ssd1306_command1>

    uint16_t count = oled.screen_width * ((oled.screen_height + 7) / 8);
 8004244:	4b16      	ldr	r3, [pc, #88]	; (80042a0 <updateDisplay+0x78>)
 8004246:	785b      	ldrb	r3, [r3, #1]
 8004248:	b29a      	uxth	r2, r3
 800424a:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <updateDisplay+0x78>)
 800424c:	789b      	ldrb	r3, [r3, #2]
 800424e:	3307      	adds	r3, #7
 8004250:	2b00      	cmp	r3, #0
 8004252:	da00      	bge.n	8004256 <updateDisplay+0x2e>
 8004254:	3307      	adds	r3, #7
 8004256:	10db      	asrs	r3, r3, #3
 8004258:	b29b      	uxth	r3, r3
 800425a:	fb03 f302 	mul.w	r3, r3, r2
 800425e:	80fb      	strh	r3, [r7, #6]
    uint8_t *data_pointer = oled.screen_buffer;
 8004260:	4b0f      	ldr	r3, [pc, #60]	; (80042a0 <updateDisplay+0x78>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	603b      	str	r3, [r7, #0]
    // if (wire) { // I2C
        // wire->beginTransmission(i2caddr);
        // WIRE_WRITE((uint8_t)0x40);
        // uint16_t bytesOut = 1;
    while (count--) {
 8004266:	e00f      	b.n	8004288 <updateDisplay+0x60>
         * Transmit data from the 
         * internal buffer to the screen's 
         * memory
         */
        // while(bytes_to_transmit--) {
        if (HAL_I2C_Master_Transmit(&hi2c2, OLED_SCREEN_ADDRESS, (uint8_t *) data_pointer, 1, 10000) != HAL_OK){
 8004268:	f242 7310 	movw	r3, #10000	; 0x2710
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	2301      	movs	r3, #1
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	213c      	movs	r1, #60	; 0x3c
 8004274:	480b      	ldr	r0, [pc, #44]	; (80042a4 <updateDisplay+0x7c>)
 8004276:	f001 fa87 	bl	8005788 <HAL_I2C_Master_Transmit>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d000      	beq.n	8004282 <updateDisplay+0x5a>
            asm("bkpt 255");
 8004280:	beff      	bkpt	0x00ff
        }
        data_pointer++;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	3301      	adds	r3, #1
 8004286:	603b      	str	r3, [r7, #0]
    while (count--) {
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	1e5a      	subs	r2, r3, #1
 800428c:	80fa      	strh	r2, [r7, #6]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1ea      	bne.n	8004268 <updateDisplay+0x40>
    //     SSD1306_MODE_DATA
    //     while (count--)
    //     SPIwrite(*ptr++);
    // }
    // TRANSACTION_END
}
 8004292:	bf00      	nop
 8004294:	bf00      	nop
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	0800fab4 	.word	0x0800fab4
 80042a0:	20000460 	.word	0x20000460
 80042a4:	200014f8 	.word	0x200014f8

080042a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80042ae:	4b15      	ldr	r3, [pc, #84]	; (8004304 <HAL_MspInit+0x5c>)
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	4a14      	ldr	r2, [pc, #80]	; (8004304 <HAL_MspInit+0x5c>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	6193      	str	r3, [r2, #24]
 80042ba:	4b12      	ldr	r3, [pc, #72]	; (8004304 <HAL_MspInit+0x5c>)
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	60bb      	str	r3, [r7, #8]
 80042c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042c6:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <HAL_MspInit+0x5c>)
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	4a0e      	ldr	r2, [pc, #56]	; (8004304 <HAL_MspInit+0x5c>)
 80042cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d0:	61d3      	str	r3, [r2, #28]
 80042d2:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <HAL_MspInit+0x5c>)
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042da:	607b      	str	r3, [r7, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80042de:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <HAL_MspInit+0x60>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	4a04      	ldr	r2, [pc, #16]	; (8004308 <HAL_MspInit+0x60>)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042fa:	bf00      	nop
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr
 8004304:	40021000 	.word	0x40021000
 8004308:	40010000 	.word	0x40010000

0800430c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004314:	f107 0310 	add.w	r3, r7, #16
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	609a      	str	r2, [r3, #8]
 8004320:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a14      	ldr	r2, [pc, #80]	; (8004378 <HAL_ADC_MspInit+0x6c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d121      	bne.n	8004370 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800432c:	4b13      	ldr	r3, [pc, #76]	; (800437c <HAL_ADC_MspInit+0x70>)
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	4a12      	ldr	r2, [pc, #72]	; (800437c <HAL_ADC_MspInit+0x70>)
 8004332:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004336:	6193      	str	r3, [r2, #24]
 8004338:	4b10      	ldr	r3, [pc, #64]	; (800437c <HAL_ADC_MspInit+0x70>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004344:	4b0d      	ldr	r3, [pc, #52]	; (800437c <HAL_ADC_MspInit+0x70>)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	4a0c      	ldr	r2, [pc, #48]	; (800437c <HAL_ADC_MspInit+0x70>)
 800434a:	f043 0310 	orr.w	r3, r3, #16
 800434e:	6193      	str	r3, [r2, #24]
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <HAL_ADC_MspInit+0x70>)
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	60bb      	str	r3, [r7, #8]
 800435a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IN_FD_V_Pin;
 800435c:	2301      	movs	r3, #1
 800435e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004360:	2303      	movs	r3, #3
 8004362:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(IN_FD_V_GPIO_Port, &GPIO_InitStruct);
 8004364:	f107 0310 	add.w	r3, r7, #16
 8004368:	4619      	mov	r1, r3
 800436a:	4805      	ldr	r0, [pc, #20]	; (8004380 <HAL_ADC_MspInit+0x74>)
 800436c:	f000 fefc 	bl	8005168 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004370:	bf00      	nop
 8004372:	3720      	adds	r7, #32
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40012400 	.word	0x40012400
 800437c:	40021000 	.word	0x40021000
 8004380:	40011000 	.word	0x40011000

08004384 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800438c:	f107 0310 	add.w	r3, r7, #16
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	605a      	str	r2, [r3, #4]
 8004396:	609a      	str	r2, [r3, #8]
 8004398:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a16      	ldr	r2, [pc, #88]	; (80043f8 <HAL_I2C_MspInit+0x74>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d124      	bne.n	80043ee <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043a4:	4b15      	ldr	r3, [pc, #84]	; (80043fc <HAL_I2C_MspInit+0x78>)
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	4a14      	ldr	r2, [pc, #80]	; (80043fc <HAL_I2C_MspInit+0x78>)
 80043aa:	f043 0308 	orr.w	r3, r3, #8
 80043ae:	6193      	str	r3, [r2, #24]
 80043b0:	4b12      	ldr	r3, [pc, #72]	; (80043fc <HAL_I2C_MspInit+0x78>)
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = DISP_I2C2_SCL_Pin|DISP_I2C2_SDA_Pin;
 80043bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80043c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043c2:	2312      	movs	r3, #18
 80043c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043c6:	2303      	movs	r3, #3
 80043c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ca:	f107 0310 	add.w	r3, r7, #16
 80043ce:	4619      	mov	r1, r3
 80043d0:	480b      	ldr	r0, [pc, #44]	; (8004400 <HAL_I2C_MspInit+0x7c>)
 80043d2:	f000 fec9 	bl	8005168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80043d6:	4b09      	ldr	r3, [pc, #36]	; (80043fc <HAL_I2C_MspInit+0x78>)
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	4a08      	ldr	r2, [pc, #32]	; (80043fc <HAL_I2C_MspInit+0x78>)
 80043dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043e0:	61d3      	str	r3, [r2, #28]
 80043e2:	4b06      	ldr	r3, [pc, #24]	; (80043fc <HAL_I2C_MspInit+0x78>)
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80043ee:	bf00      	nop
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40005800 	.word	0x40005800
 80043fc:	40021000 	.word	0x40021000
 8004400:	40010c00 	.word	0x40010c00

08004404 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08a      	sub	sp, #40	; 0x28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800440c:	f107 0318 	add.w	r3, r7, #24
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	605a      	str	r2, [r3, #4]
 8004416:	609a      	str	r2, [r3, #8]
 8004418:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a37      	ldr	r2, [pc, #220]	; (80044fc <HAL_SPI_MspInit+0xf8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d130      	bne.n	8004486 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004424:	4b36      	ldr	r3, [pc, #216]	; (8004500 <HAL_SPI_MspInit+0xfc>)
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	4a35      	ldr	r2, [pc, #212]	; (8004500 <HAL_SPI_MspInit+0xfc>)
 800442a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800442e:	6193      	str	r3, [r2, #24]
 8004430:	4b33      	ldr	r3, [pc, #204]	; (8004500 <HAL_SPI_MspInit+0xfc>)
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800443c:	4b30      	ldr	r3, [pc, #192]	; (8004500 <HAL_SPI_MspInit+0xfc>)
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	4a2f      	ldr	r2, [pc, #188]	; (8004500 <HAL_SPI_MspInit+0xfc>)
 8004442:	f043 0304 	orr.w	r3, r3, #4
 8004446:	6193      	str	r3, [r2, #24]
 8004448:	4b2d      	ldr	r3, [pc, #180]	; (8004500 <HAL_SPI_MspInit+0xfc>)
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ADC_SPI1_CLK_Pin|ADC_SPI1_MOSI_Pin;
 8004454:	23a0      	movs	r3, #160	; 0xa0
 8004456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004458:	2302      	movs	r3, #2
 800445a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800445c:	2303      	movs	r3, #3
 800445e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004460:	f107 0318 	add.w	r3, r7, #24
 8004464:	4619      	mov	r1, r3
 8004466:	4827      	ldr	r0, [pc, #156]	; (8004504 <HAL_SPI_MspInit+0x100>)
 8004468:	f000 fe7e 	bl	8005168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_SPI1_MISO_Pin;
 800446c:	2340      	movs	r3, #64	; 0x40
 800446e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004470:	2300      	movs	r3, #0
 8004472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004474:	2300      	movs	r3, #0
 8004476:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ADC_SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8004478:	f107 0318 	add.w	r3, r7, #24
 800447c:	4619      	mov	r1, r3
 800447e:	4821      	ldr	r0, [pc, #132]	; (8004504 <HAL_SPI_MspInit+0x100>)
 8004480:	f000 fe72 	bl	8005168 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004484:	e036      	b.n	80044f4 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1f      	ldr	r2, [pc, #124]	; (8004508 <HAL_SPI_MspInit+0x104>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d131      	bne.n	80044f4 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004490:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <HAL_SPI_MspInit+0xfc>)
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	4a1a      	ldr	r2, [pc, #104]	; (8004500 <HAL_SPI_MspInit+0xfc>)
 8004496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800449a:	61d3      	str	r3, [r2, #28]
 800449c:	4b18      	ldr	r3, [pc, #96]	; (8004500 <HAL_SPI_MspInit+0xfc>)
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044a8:	4b15      	ldr	r3, [pc, #84]	; (8004500 <HAL_SPI_MspInit+0xfc>)
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	4a14      	ldr	r2, [pc, #80]	; (8004500 <HAL_SPI_MspInit+0xfc>)
 80044ae:	f043 0308 	orr.w	r3, r3, #8
 80044b2:	6193      	str	r3, [r2, #24]
 80044b4:	4b12      	ldr	r3, [pc, #72]	; (8004500 <HAL_SPI_MspInit+0xfc>)
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SD_SPI2_MOSI_Pin|SD_SPI2_CLK_Pin;
 80044c0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80044c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c6:	2302      	movs	r3, #2
 80044c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044ca:	2303      	movs	r3, #3
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ce:	f107 0318 	add.w	r3, r7, #24
 80044d2:	4619      	mov	r1, r3
 80044d4:	480d      	ldr	r0, [pc, #52]	; (800450c <HAL_SPI_MspInit+0x108>)
 80044d6:	f000 fe47 	bl	8005168 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_SPI2_MISO_Pin;
 80044da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e4:	2300      	movs	r3, #0
 80044e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SD_SPI2_MISO_GPIO_Port, &GPIO_InitStruct);
 80044e8:	f107 0318 	add.w	r3, r7, #24
 80044ec:	4619      	mov	r1, r3
 80044ee:	4807      	ldr	r0, [pc, #28]	; (800450c <HAL_SPI_MspInit+0x108>)
 80044f0:	f000 fe3a 	bl	8005168 <HAL_GPIO_Init>
}
 80044f4:	bf00      	nop
 80044f6:	3728      	adds	r7, #40	; 0x28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40013000 	.word	0x40013000
 8004500:	40021000 	.word	0x40021000
 8004504:	40010800 	.word	0x40010800
 8004508:	40003800 	.word	0x40003800
 800450c:	40010c00 	.word	0x40010c00

08004510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a16      	ldr	r2, [pc, #88]	; (8004578 <HAL_TIM_Base_MspInit+0x68>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d114      	bne.n	800454c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004522:	4b16      	ldr	r3, [pc, #88]	; (800457c <HAL_TIM_Base_MspInit+0x6c>)
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	4a15      	ldr	r2, [pc, #84]	; (800457c <HAL_TIM_Base_MspInit+0x6c>)
 8004528:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800452c:	6193      	str	r3, [r2, #24]
 800452e:	4b13      	ldr	r3, [pc, #76]	; (800457c <HAL_TIM_Base_MspInit+0x6c>)
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800453a:	2200      	movs	r2, #0
 800453c:	2100      	movs	r1, #0
 800453e:	201b      	movs	r0, #27
 8004540:	f000 fddb 	bl	80050fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004544:	201b      	movs	r0, #27
 8004546:	f000 fdf4 	bl	8005132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800454a:	e010      	b.n	800456e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004554:	d10b      	bne.n	800456e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004556:	4b09      	ldr	r3, [pc, #36]	; (800457c <HAL_TIM_Base_MspInit+0x6c>)
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	4a08      	ldr	r2, [pc, #32]	; (800457c <HAL_TIM_Base_MspInit+0x6c>)
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	61d3      	str	r3, [r2, #28]
 8004562:	4b06      	ldr	r3, [pc, #24]	; (800457c <HAL_TIM_Base_MspInit+0x6c>)
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	60bb      	str	r3, [r7, #8]
 800456c:	68bb      	ldr	r3, [r7, #8]
}
 800456e:	bf00      	nop
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40021000 	.word	0x40021000

08004580 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a09      	ldr	r2, [pc, #36]	; (80045b4 <HAL_TIM_OC_MspInit+0x34>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d10b      	bne.n	80045aa <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004592:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <HAL_TIM_OC_MspInit+0x38>)
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	4a08      	ldr	r2, [pc, #32]	; (80045b8 <HAL_TIM_OC_MspInit+0x38>)
 8004598:	f043 0302 	orr.w	r3, r3, #2
 800459c:	61d3      	str	r3, [r2, #28]
 800459e:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <HAL_TIM_OC_MspInit+0x38>)
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80045aa:	bf00      	nop
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr
 80045b4:	40000400 	.word	0x40000400
 80045b8:	40021000 	.word	0x40021000

080045bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c4:	f107 0310 	add.w	r3, r7, #16
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	605a      	str	r2, [r3, #4]
 80045ce:	609a      	str	r2, [r3, #8]
 80045d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1c      	ldr	r2, [pc, #112]	; (8004648 <HAL_UART_MspInit+0x8c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d131      	bne.n	8004640 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80045dc:	4b1b      	ldr	r3, [pc, #108]	; (800464c <HAL_UART_MspInit+0x90>)
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	4a1a      	ldr	r2, [pc, #104]	; (800464c <HAL_UART_MspInit+0x90>)
 80045e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045e6:	6193      	str	r3, [r2, #24]
 80045e8:	4b18      	ldr	r3, [pc, #96]	; (800464c <HAL_UART_MspInit+0x90>)
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045f4:	4b15      	ldr	r3, [pc, #84]	; (800464c <HAL_UART_MspInit+0x90>)
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	4a14      	ldr	r2, [pc, #80]	; (800464c <HAL_UART_MspInit+0x90>)
 80045fa:	f043 0304 	orr.w	r3, r3, #4
 80045fe:	6193      	str	r3, [r2, #24]
 8004600:	4b12      	ldr	r3, [pc, #72]	; (800464c <HAL_UART_MspInit+0x90>)
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CONSOLE_TX_Pin;
 800460c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004610:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004612:	2302      	movs	r3, #2
 8004614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004616:	2303      	movs	r3, #3
 8004618:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CONSOLE_TX_GPIO_Port, &GPIO_InitStruct);
 800461a:	f107 0310 	add.w	r3, r7, #16
 800461e:	4619      	mov	r1, r3
 8004620:	480b      	ldr	r0, [pc, #44]	; (8004650 <HAL_UART_MspInit+0x94>)
 8004622:	f000 fda1 	bl	8005168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CONSOLE_RXD_Pin;
 8004626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800462a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004630:	2300      	movs	r3, #0
 8004632:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(CONSOLE_RXD_GPIO_Port, &GPIO_InitStruct);
 8004634:	f107 0310 	add.w	r3, r7, #16
 8004638:	4619      	mov	r1, r3
 800463a:	4805      	ldr	r0, [pc, #20]	; (8004650 <HAL_UART_MspInit+0x94>)
 800463c:	f000 fd94 	bl	8005168 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004640:	bf00      	nop
 8004642:	3720      	adds	r7, #32
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40013800 	.word	0x40013800
 800464c:	40021000 	.word	0x40021000
 8004650:	40010800 	.word	0x40010800

08004654 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler( void ) {
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
	if(Timer1 > 0){
 8004658:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <SDTimer_Handler+0x3c>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d006      	beq.n	8004670 <SDTimer_Handler+0x1c>
		Timer1--;
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <SDTimer_Handler+0x3c>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b2da      	uxtb	r2, r3
 800466c:	4b08      	ldr	r3, [pc, #32]	; (8004690 <SDTimer_Handler+0x3c>)
 800466e:	701a      	strb	r2, [r3, #0]
	}
	if (Timer2 > 0){
 8004670:	4b08      	ldr	r3, [pc, #32]	; (8004694 <SDTimer_Handler+0x40>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d006      	beq.n	8004688 <SDTimer_Handler+0x34>
		Timer2--;
 800467a:	4b06      	ldr	r3, [pc, #24]	; (8004694 <SDTimer_Handler+0x40>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b2da      	uxtb	r2, r3
 8004684:	4b03      	ldr	r3, [pc, #12]	; (8004694 <SDTimer_Handler+0x40>)
 8004686:	701a      	strb	r2, [r3, #0]
	}
}
 8004688:	bf00      	nop
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr
 8004690:	200027de 	.word	0x200027de
 8004694:	200027dd 	.word	0x200027dd

08004698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800469c:	e7fe      	b.n	800469c <NMI_Handler+0x4>

0800469e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800469e:	b480      	push	{r7}
 80046a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046a2:	e7fe      	b.n	80046a2 <HardFault_Handler+0x4>

080046a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046a8:	e7fe      	b.n	80046a8 <MemManage_Handler+0x4>

080046aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046aa:	b480      	push	{r7}
 80046ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046ae:	e7fe      	b.n	80046ae <BusFault_Handler+0x4>

080046b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046b4:	e7fe      	b.n	80046b4 <UsageFault_Handler+0x4>

080046b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046b6:	b480      	push	{r7}
 80046b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046ba:	bf00      	nop
 80046bc:	46bd      	mov	sp, r7
 80046be:	bc80      	pop	{r7}
 80046c0:	4770      	bx	lr

080046c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046c2:	b480      	push	{r7}
 80046c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046c6:	bf00      	nop
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr

080046ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046ce:	b480      	push	{r7}
 80046d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046d2:	bf00      	nop
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr
	...

080046dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt ++;
 80046e0:	4b0a      	ldr	r3, [pc, #40]	; (800470c <SysTick_Handler+0x30>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	3301      	adds	r3, #1
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	4b08      	ldr	r3, [pc, #32]	; (800470c <SysTick_Handler+0x30>)
 80046ec:	701a      	strb	r2, [r3, #0]
	if ( FatFsCnt >=  10 )
 80046ee:	4b07      	ldr	r3, [pc, #28]	; (800470c <SysTick_Handler+0x30>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b09      	cmp	r3, #9
 80046f6:	d904      	bls.n	8004702 <SysTick_Handler+0x26>
	{
		FatFsCnt =  0 ;
 80046f8:	4b04      	ldr	r3, [pc, #16]	; (800470c <SysTick_Handler+0x30>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler ( ) ;
 80046fe:	f7ff ffa9 	bl	8004654 <SDTimer_Handler>
	}



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004702:	f000 f9f5 	bl	8004af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004706:	bf00      	nop
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20000222 	.word	0x20000222

08004710 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	time.flag_10ms_tick = true;
 8004714:	4b25      	ldr	r3, [pc, #148]	; (80047ac <TIM1_CC_IRQHandler+0x9c>)
 8004716:	2201      	movs	r2, #1
 8004718:	70da      	strb	r2, [r3, #3]

		if(time.ticks10ms == 9) {
 800471a:	4b24      	ldr	r3, [pc, #144]	; (80047ac <TIM1_CC_IRQHandler+0x9c>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b09      	cmp	r3, #9
 8004720:	d138      	bne.n	8004794 <TIM1_CC_IRQHandler+0x84>
		  time.ticks10ms = 0;
 8004722:	4b22      	ldr	r3, [pc, #136]	; (80047ac <TIM1_CC_IRQHandler+0x9c>)
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]
		  time.flag_100ms_tick = true;
 8004728:	4b20      	ldr	r3, [pc, #128]	; (80047ac <TIM1_CC_IRQHandler+0x9c>)
 800472a:	2201      	movs	r2, #1
 800472c:	711a      	strb	r2, [r3, #4]
			if(time.led_fast_blink)
 800472e:	4b1f      	ldr	r3, [pc, #124]	; (80047ac <TIM1_CC_IRQHandler+0x9c>)
 8004730:	799b      	ldrb	r3, [r3, #6]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <TIM1_CC_IRQHandler+0x2e>
				HAL_GPIO_TogglePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin);                     // Toggle the LED if not locked and fast blink is enabled
 8004736:	2102      	movs	r1, #2
 8004738:	481d      	ldr	r0, [pc, #116]	; (80047b0 <TIM1_CC_IRQHandler+0xa0>)
 800473a:	f000 fec8 	bl	80054ce <HAL_GPIO_TogglePin>
			if(time.ticks100ms == 4) {
 800473e:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <TIM1_CC_IRQHandler+0x9c>)
 8004740:	785b      	ldrb	r3, [r3, #1]
 8004742:	2b04      	cmp	r3, #4
 8004744:	d11f      	bne.n	8004786 <TIM1_CC_IRQHandler+0x76>
				time.ticks100ms = 0;
 8004746:	4b19      	ldr	r3, [pc, #100]	; (80047ac <TIM1_CC_IRQHandler+0x9c>)
 8004748:	2200      	movs	r2, #0
 800474a:	705a      	strb	r2, [r3, #1]
				time.flag_500ms_tick = true;
 800474c:	4b17      	ldr	r3, [pc, #92]	; (80047ac <TIM1_CC_IRQHandler+0x9c>)
 800474e:	2201      	movs	r2, #1
 8004750:	715a      	strb	r2, [r3, #5]
				if(!time.led_fast_blink)
 8004752:	4b16      	ldr	r3, [pc, #88]	; (80047ac <TIM1_CC_IRQHandler+0x9c>)
 8004754:	799b      	ldrb	r3, [r3, #6]
 8004756:	f083 0301 	eor.w	r3, r3, #1
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <TIM1_CC_IRQHandler+0x58>
					HAL_GPIO_TogglePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin);
 8004760:	2102      	movs	r1, #2
 8004762:	4813      	ldr	r0, [pc, #76]	; (80047b0 <TIM1_CC_IRQHandler+0xa0>)
 8004764:	f000 feb3 	bl	80054ce <HAL_GPIO_TogglePin>
				if(time.ticks500ms == 119)										// One minute worth of half seconds
 8004768:	4b10      	ldr	r3, [pc, #64]	; (80047ac <TIM1_CC_IRQHandler+0x9c>)
 800476a:	789b      	ldrb	r3, [r3, #2]
 800476c:	2b77      	cmp	r3, #119	; 0x77
 800476e:	d103      	bne.n	8004778 <TIM1_CC_IRQHandler+0x68>
					time.ticks500ms = 0;
 8004770:	4b0e      	ldr	r3, [pc, #56]	; (80047ac <TIM1_CC_IRQHandler+0x9c>)
 8004772:	2200      	movs	r2, #0
 8004774:	709a      	strb	r2, [r3, #2]
 8004776:	e013      	b.n	80047a0 <TIM1_CC_IRQHandler+0x90>
				else
					time.ticks500ms += 1;
 8004778:	4b0c      	ldr	r3, [pc, #48]	; (80047ac <TIM1_CC_IRQHandler+0x9c>)
 800477a:	789b      	ldrb	r3, [r3, #2]
 800477c:	3301      	adds	r3, #1
 800477e:	b2da      	uxtb	r2, r3
 8004780:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <TIM1_CC_IRQHandler+0x9c>)
 8004782:	709a      	strb	r2, [r3, #2]
 8004784:	e00c      	b.n	80047a0 <TIM1_CC_IRQHandler+0x90>
			}
			else {
				 time.ticks100ms += 1;
 8004786:	4b09      	ldr	r3, [pc, #36]	; (80047ac <TIM1_CC_IRQHandler+0x9c>)
 8004788:	785b      	ldrb	r3, [r3, #1]
 800478a:	3301      	adds	r3, #1
 800478c:	b2da      	uxtb	r2, r3
 800478e:	4b07      	ldr	r3, [pc, #28]	; (80047ac <TIM1_CC_IRQHandler+0x9c>)
 8004790:	705a      	strb	r2, [r3, #1]
 8004792:	e005      	b.n	80047a0 <TIM1_CC_IRQHandler+0x90>
			}
		}
		else {
			time.ticks10ms += 1;
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <TIM1_CC_IRQHandler+0x9c>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	3301      	adds	r3, #1
 800479a:	b2da      	uxtb	r2, r3
 800479c:	4b03      	ldr	r3, [pc, #12]	; (80047ac <TIM1_CC_IRQHandler+0x9c>)
 800479e:	701a      	strb	r2, [r3, #0]
		}

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80047a0:	4804      	ldr	r0, [pc, #16]	; (80047b4 <TIM1_CC_IRQHandler+0xa4>)
 80047a2:	f002 ffc8 	bl	8007736 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80047a6:	bf00      	nop
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20001658 	.word	0x20001658
 80047b0:	40011800 	.word	0x40011800
 80047b4:	20001610 	.word	0x20001610

080047b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
	return 1;
 80047bc:	2301      	movs	r3, #1
}
 80047be:	4618      	mov	r0, r3
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr

080047c6 <_kill>:

int _kill(int pid, int sig)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80047d0:	f007 fdbc 	bl	800c34c <__errno>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2216      	movs	r2, #22
 80047d8:	601a      	str	r2, [r3, #0]
	return -1;
 80047da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <_exit>:

void _exit (int status)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80047ee:	f04f 31ff 	mov.w	r1, #4294967295
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7ff ffe7 	bl	80047c6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80047f8:	e7fe      	b.n	80047f8 <_exit+0x12>

080047fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b086      	sub	sp, #24
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	e00a      	b.n	8004822 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800480c:	f3af 8000 	nop.w
 8004810:	4601      	mov	r1, r0
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	60ba      	str	r2, [r7, #8]
 8004818:	b2ca      	uxtb	r2, r1
 800481a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	3301      	adds	r3, #1
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	429a      	cmp	r2, r3
 8004828:	dbf0      	blt.n	800480c <_read+0x12>
	}

return len;
 800482a:	687b      	ldr	r3, [r7, #4]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	e009      	b.n	800485a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	60ba      	str	r2, [r7, #8]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	3301      	adds	r3, #1
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	429a      	cmp	r2, r3
 8004860:	dbf1      	blt.n	8004846 <_write+0x12>
	}
	return len;
 8004862:	687b      	ldr	r3, [r7, #4]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <_close>:

int _close(int file)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	return -1;
 8004874:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	bc80      	pop	{r7}
 8004880:	4770      	bx	lr

08004882 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004892:	605a      	str	r2, [r3, #4]
	return 0;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr

080048a0 <_isatty>:

int _isatty(int file)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
	return 1;
 80048a8:	2301      	movs	r3, #1
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr

080048b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
	return 0;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048d4:	4a14      	ldr	r2, [pc, #80]	; (8004928 <_sbrk+0x5c>)
 80048d6:	4b15      	ldr	r3, [pc, #84]	; (800492c <_sbrk+0x60>)
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048e0:	4b13      	ldr	r3, [pc, #76]	; (8004930 <_sbrk+0x64>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d102      	bne.n	80048ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048e8:	4b11      	ldr	r3, [pc, #68]	; (8004930 <_sbrk+0x64>)
 80048ea:	4a12      	ldr	r2, [pc, #72]	; (8004934 <_sbrk+0x68>)
 80048ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048ee:	4b10      	ldr	r3, [pc, #64]	; (8004930 <_sbrk+0x64>)
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4413      	add	r3, r2
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d207      	bcs.n	800490c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048fc:	f007 fd26 	bl	800c34c <__errno>
 8004900:	4603      	mov	r3, r0
 8004902:	220c      	movs	r2, #12
 8004904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004906:	f04f 33ff 	mov.w	r3, #4294967295
 800490a:	e009      	b.n	8004920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800490c:	4b08      	ldr	r3, [pc, #32]	; (8004930 <_sbrk+0x64>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004912:	4b07      	ldr	r3, [pc, #28]	; (8004930 <_sbrk+0x64>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4413      	add	r3, r2
 800491a:	4a05      	ldr	r2, [pc, #20]	; (8004930 <_sbrk+0x64>)
 800491c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800491e:	68fb      	ldr	r3, [r7, #12]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20010000 	.word	0x20010000
 800492c:	00000400 	.word	0x00000400
 8004930:	20000224 	.word	0x20000224
 8004934:	20004858 	.word	0x20004858

08004938 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800493c:	bf00      	nop
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr

08004944 <blocking_us_delay>:
 *  Created on: Nov 12, 2021
 *      Author: C. Guenther
 */
#include "timer.h"

void blocking_us_delay (uint16_t us) {
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);    // set the counter value a 0
 800494e:	4b08      	ldr	r3, [pc, #32]	; (8004970 <blocking_us_delay+0x2c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2200      	movs	r2, #0
 8004954:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8004956:	bf00      	nop
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <blocking_us_delay+0x2c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800495e:	88fb      	ldrh	r3, [r7, #6]
 8004960:	429a      	cmp	r2, r3
 8004962:	d3f9      	bcc.n	8004958 <blocking_us_delay+0x14>
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr
 8004970:	200016f8 	.word	0x200016f8

08004974 <start_us_counter>:


void start_us_counter ( void ) {
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim3,0);    // set the counter value a 0
 8004978:	4b04      	ldr	r3, [pc, #16]	; (800498c <start_us_counter+0x18>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2200      	movs	r2, #0
 800497e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim3);
 8004980:	4802      	ldr	r0, [pc, #8]	; (800498c <start_us_counter+0x18>)
 8004982:	f002 fe37 	bl	80075f4 <HAL_TIM_Base_Start>
}
 8004986:	bf00      	nop
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20001550 	.word	0x20001550

08004990 <get_us_counter>:

void stop_us_counter ( void ) {
	HAL_TIM_Base_Stop(&htim3);
}

uint16_t get_us_counter ( void ) {
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
    return (__HAL_TIM_GET_COUNTER(&htim3));
 8004994:	4b03      	ldr	r3, [pc, #12]	; (80049a4 <get_us_counter+0x14>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	b29b      	uxth	r3, r3
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr
 80049a4:	20001550 	.word	0x20001550

080049a8 <print_string>:
    else if(action == CR) {
        HAL_UART_Transmit(&huart1, (uint8_t *) '\r', (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}

void print_string(const char * s, uint8_t action) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	70fb      	strb	r3, [r7, #3]

    while(*s != '\0') {
 80049b4:	e009      	b.n	80049ca <print_string+0x22>
        HAL_UART_Transmit(&huart1, (uint8_t *) s, (uint16_t) 0x01, HAL_MAX_DELAY);
 80049b6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ba:	2201      	movs	r2, #1
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4815      	ldr	r0, [pc, #84]	; (8004a14 <print_string+0x6c>)
 80049c0:	f003 fcac 	bl	800831c <HAL_UART_Transmit>
        s++;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3301      	adds	r3, #1
 80049c8:	607b      	str	r3, [r7, #4]
    while(*s != '\0') {
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f1      	bne.n	80049b6 <print_string+0xe>
    }

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 80049d2:	78fb      	ldrb	r3, [r7, #3]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d10e      	bne.n	80049f6 <print_string+0x4e>
        HAL_UART_Transmit(&huart1,(uint8_t *) '\r', (uint16_t) 0x01, HAL_MAX_DELAY);
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295
 80049dc:	2201      	movs	r2, #1
 80049de:	210d      	movs	r1, #13
 80049e0:	480c      	ldr	r0, [pc, #48]	; (8004a14 <print_string+0x6c>)
 80049e2:	f003 fc9b 	bl	800831c <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t *) '\n', (uint16_t) 0x01, HAL_MAX_DELAY);
 80049e6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ea:	2201      	movs	r2, #1
 80049ec:	210a      	movs	r1, #10
 80049ee:	4809      	ldr	r0, [pc, #36]	; (8004a14 <print_string+0x6c>)
 80049f0:	f003 fc94 	bl	800831c <HAL_UART_Transmit>
    }
    else if(action == CR) {
        HAL_UART_Transmit(&huart1, (uint8_t *) '\r', (uint16_t) 0x01, HAL_MAX_DELAY);
    }

}
 80049f4:	e009      	b.n	8004a0a <print_string+0x62>
    else if(action == CR) {
 80049f6:	78fb      	ldrb	r3, [r7, #3]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d106      	bne.n	8004a0a <print_string+0x62>
        HAL_UART_Transmit(&huart1, (uint8_t *) '\r', (uint16_t) 0x01, HAL_MAX_DELAY);
 80049fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004a00:	2201      	movs	r2, #1
 8004a02:	210d      	movs	r1, #13
 8004a04:	4803      	ldr	r0, [pc, #12]	; (8004a14 <print_string+0x6c>)
 8004a06:	f003 fc89 	bl	800831c <HAL_UART_Transmit>
}
 8004a0a:	bf00      	nop
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	200015cc 	.word	0x200015cc

08004a18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a18:	480c      	ldr	r0, [pc, #48]	; (8004a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a1a:	490d      	ldr	r1, [pc, #52]	; (8004a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a1c:	4a0d      	ldr	r2, [pc, #52]	; (8004a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a20:	e002      	b.n	8004a28 <LoopCopyDataInit>

08004a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a26:	3304      	adds	r3, #4

08004a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a2c:	d3f9      	bcc.n	8004a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a2e:	4a0a      	ldr	r2, [pc, #40]	; (8004a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a30:	4c0a      	ldr	r4, [pc, #40]	; (8004a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a34:	e001      	b.n	8004a3a <LoopFillZerobss>

08004a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a38:	3204      	adds	r2, #4

08004a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a3c:	d3fb      	bcc.n	8004a36 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004a3e:	f7ff ff7b 	bl	8004938 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004a42:	f007 fc89 	bl	800c358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004a46:	f7fd fb6d 	bl	8002124 <main>
  bx lr
 8004a4a:	4770      	bx	lr
  ldr r0, =_sdata
 8004a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a50:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8004a54:	08010414 	.word	0x08010414
  ldr r2, =_sbss
 8004a58:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8004a5c:	20004858 	.word	0x20004858

08004a60 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a60:	e7fe      	b.n	8004a60 <ADC1_2_IRQHandler>
	...

08004a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a68:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <HAL_Init+0x28>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a07      	ldr	r2, [pc, #28]	; (8004a8c <HAL_Init+0x28>)
 8004a6e:	f043 0310 	orr.w	r3, r3, #16
 8004a72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a74:	2003      	movs	r0, #3
 8004a76:	f000 fb35 	bl	80050e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	f000 f808 	bl	8004a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a80:	f7ff fc12 	bl	80042a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40022000 	.word	0x40022000

08004a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a98:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <HAL_InitTick+0x54>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <HAL_InitTick+0x58>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fb4d 	bl	800514e <HAL_SYSTICK_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e00e      	b.n	8004adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b0f      	cmp	r3, #15
 8004ac2:	d80a      	bhi.n	8004ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8004acc:	f000 fb15 	bl	80050fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ad0:	4a06      	ldr	r2, [pc, #24]	; (8004aec <HAL_InitTick+0x5c>)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	e000      	b.n	8004adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	20000014 	.word	0x20000014
 8004ae8:	2000001c 	.word	0x2000001c
 8004aec:	20000018 	.word	0x20000018

08004af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <HAL_IncTick+0x1c>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <HAL_IncTick+0x20>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4413      	add	r3, r2
 8004b00:	4a03      	ldr	r2, [pc, #12]	; (8004b10 <HAL_IncTick+0x20>)
 8004b02:	6013      	str	r3, [r2, #0]
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr
 8004b0c:	2000001c 	.word	0x2000001c
 8004b10:	200027e0 	.word	0x200027e0

08004b14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  return uwTick;
 8004b18:	4b02      	ldr	r3, [pc, #8]	; (8004b24 <HAL_GetTick+0x10>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr
 8004b24:	200027e0 	.word	0x200027e0

08004b28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e0be      	b.n	8004cc8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d109      	bne.n	8004b6c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff fbd0 	bl	800430c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f9ab 	bl	8004ec8 <ADC_ConversionStop_Disable>
 8004b72:	4603      	mov	r3, r0
 8004b74:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7a:	f003 0310 	and.w	r3, r3, #16
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f040 8099 	bne.w	8004cb6 <HAL_ADC_Init+0x18e>
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f040 8095 	bne.w	8004cb6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b94:	f023 0302 	bic.w	r3, r3, #2
 8004b98:	f043 0202 	orr.w	r2, r3, #2
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004ba8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	7b1b      	ldrb	r3, [r3, #12]
 8004bae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004bb0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc0:	d003      	beq.n	8004bca <HAL_ADC_Init+0xa2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d102      	bne.n	8004bd0 <HAL_ADC_Init+0xa8>
 8004bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bce:	e000      	b.n	8004bd2 <HAL_ADC_Init+0xaa>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	7d1b      	ldrb	r3, [r3, #20]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d119      	bne.n	8004c14 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	7b1b      	ldrb	r3, [r3, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d109      	bne.n	8004bfc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	035a      	lsls	r2, r3, #13
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	e00b      	b.n	8004c14 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	f043 0220 	orr.w	r2, r3, #32
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	f043 0201 	orr.w	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	4b28      	ldr	r3, [pc, #160]	; (8004cd0 <HAL_ADC_Init+0x1a8>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6812      	ldr	r2, [r2, #0]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c44:	d003      	beq.n	8004c4e <HAL_ADC_Init+0x126>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d104      	bne.n	8004c58 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	051b      	lsls	r3, r3, #20
 8004c56:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	4b18      	ldr	r3, [pc, #96]	; (8004cd4 <HAL_ADC_Init+0x1ac>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d10b      	bne.n	8004c94 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	f023 0303 	bic.w	r3, r3, #3
 8004c8a:	f043 0201 	orr.w	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004c92:	e018      	b.n	8004cc6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	f023 0312 	bic.w	r3, r3, #18
 8004c9c:	f043 0210 	orr.w	r2, r3, #16
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	f043 0201 	orr.w	r2, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004cb4:	e007      	b.n	8004cc6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	f043 0210 	orr.w	r2, r3, #16
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	ffe1f7fd 	.word	0xffe1f7fd
 8004cd4:	ff1f0efe 	.word	0xff1f0efe

08004cd8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_ADC_ConfigChannel+0x20>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e0dc      	b.n	8004eb2 <HAL_ADC_ConfigChannel+0x1da>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b06      	cmp	r3, #6
 8004d06:	d81c      	bhi.n	8004d42 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	3b05      	subs	r3, #5
 8004d1a:	221f      	movs	r2, #31
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	43db      	mvns	r3, r3
 8004d22:	4019      	ands	r1, r3
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	3b05      	subs	r3, #5
 8004d34:	fa00 f203 	lsl.w	r2, r0, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	635a      	str	r2, [r3, #52]	; 0x34
 8004d40:	e03c      	b.n	8004dbc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2b0c      	cmp	r3, #12
 8004d48:	d81c      	bhi.n	8004d84 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	4613      	mov	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	3b23      	subs	r3, #35	; 0x23
 8004d5c:	221f      	movs	r2, #31
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43db      	mvns	r3, r3
 8004d64:	4019      	ands	r1, r3
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	3b23      	subs	r3, #35	; 0x23
 8004d76:	fa00 f203 	lsl.w	r2, r0, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	631a      	str	r2, [r3, #48]	; 0x30
 8004d82:	e01b      	b.n	8004dbc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	3b41      	subs	r3, #65	; 0x41
 8004d96:	221f      	movs	r2, #31
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	4019      	ands	r1, r3
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	6818      	ldr	r0, [r3, #0]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	4613      	mov	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	3b41      	subs	r3, #65	; 0x41
 8004db0:	fa00 f203 	lsl.w	r2, r0, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b09      	cmp	r3, #9
 8004dc2:	d91c      	bls.n	8004dfe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68d9      	ldr	r1, [r3, #12]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3b1e      	subs	r3, #30
 8004dd6:	2207      	movs	r2, #7
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	4019      	ands	r1, r3
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	6898      	ldr	r0, [r3, #8]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	4613      	mov	r3, r2
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	4413      	add	r3, r2
 8004dee:	3b1e      	subs	r3, #30
 8004df0:	fa00 f203 	lsl.w	r2, r0, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	60da      	str	r2, [r3, #12]
 8004dfc:	e019      	b.n	8004e32 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6919      	ldr	r1, [r3, #16]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	4413      	add	r3, r2
 8004e0e:	2207      	movs	r2, #7
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	43db      	mvns	r3, r3
 8004e16:	4019      	ands	r1, r3
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	6898      	ldr	r0, [r3, #8]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	4613      	mov	r3, r2
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	4413      	add	r3, r2
 8004e26:	fa00 f203 	lsl.w	r2, r0, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b10      	cmp	r3, #16
 8004e38:	d003      	beq.n	8004e42 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004e3e:	2b11      	cmp	r3, #17
 8004e40:	d132      	bne.n	8004ea8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1d      	ldr	r2, [pc, #116]	; (8004ebc <HAL_ADC_ConfigChannel+0x1e4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d125      	bne.n	8004e98 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d126      	bne.n	8004ea8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004e68:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b10      	cmp	r3, #16
 8004e70:	d11a      	bne.n	8004ea8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e72:	4b13      	ldr	r3, [pc, #76]	; (8004ec0 <HAL_ADC_ConfigChannel+0x1e8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a13      	ldr	r2, [pc, #76]	; (8004ec4 <HAL_ADC_ConfigChannel+0x1ec>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	0c9a      	lsrs	r2, r3, #18
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004e88:	e002      	b.n	8004e90 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f9      	bne.n	8004e8a <HAL_ADC_ConfigChannel+0x1b2>
 8004e96:	e007      	b.n	8004ea8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	f043 0220 	orr.w	r2, r3, #32
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	40012400 	.word	0x40012400
 8004ec0:	20000014 	.word	0x20000014
 8004ec4:	431bde83 	.word	0x431bde83

08004ec8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d12e      	bne.n	8004f40 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0201 	bic.w	r2, r2, #1
 8004ef0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ef2:	f7ff fe0f 	bl	8004b14 <HAL_GetTick>
 8004ef6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004ef8:	e01b      	b.n	8004f32 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004efa:	f7ff fe0b 	bl	8004b14 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d914      	bls.n	8004f32 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d10d      	bne.n	8004f32 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1a:	f043 0210 	orr.w	r2, r3, #16
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	f043 0201 	orr.w	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e007      	b.n	8004f42 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d0dc      	beq.n	8004efa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
	...

08004f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f5c:	4b0c      	ldr	r3, [pc, #48]	; (8004f90 <__NVIC_SetPriorityGrouping+0x44>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f68:	4013      	ands	r3, r2
 8004f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f7e:	4a04      	ldr	r2, [pc, #16]	; (8004f90 <__NVIC_SetPriorityGrouping+0x44>)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	60d3      	str	r3, [r2, #12]
}
 8004f84:	bf00      	nop
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bc80      	pop	{r7}
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	e000ed00 	.word	0xe000ed00

08004f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f98:	4b04      	ldr	r3, [pc, #16]	; (8004fac <__NVIC_GetPriorityGrouping+0x18>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	0a1b      	lsrs	r3, r3, #8
 8004f9e:	f003 0307 	and.w	r3, r3, #7
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	e000ed00 	.word	0xe000ed00

08004fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	db0b      	blt.n	8004fda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fc2:	79fb      	ldrb	r3, [r7, #7]
 8004fc4:	f003 021f 	and.w	r2, r3, #31
 8004fc8:	4906      	ldr	r1, [pc, #24]	; (8004fe4 <__NVIC_EnableIRQ+0x34>)
 8004fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fce:	095b      	lsrs	r3, r3, #5
 8004fd0:	2001      	movs	r0, #1
 8004fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8004fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr
 8004fe4:	e000e100 	.word	0xe000e100

08004fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	6039      	str	r1, [r7, #0]
 8004ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	db0a      	blt.n	8005012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	490c      	ldr	r1, [pc, #48]	; (8005034 <__NVIC_SetPriority+0x4c>)
 8005002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005006:	0112      	lsls	r2, r2, #4
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	440b      	add	r3, r1
 800500c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005010:	e00a      	b.n	8005028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	b2da      	uxtb	r2, r3
 8005016:	4908      	ldr	r1, [pc, #32]	; (8005038 <__NVIC_SetPriority+0x50>)
 8005018:	79fb      	ldrb	r3, [r7, #7]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	3b04      	subs	r3, #4
 8005020:	0112      	lsls	r2, r2, #4
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	440b      	add	r3, r1
 8005026:	761a      	strb	r2, [r3, #24]
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	e000e100 	.word	0xe000e100
 8005038:	e000ed00 	.word	0xe000ed00

0800503c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800503c:	b480      	push	{r7}
 800503e:	b089      	sub	sp, #36	; 0x24
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	f1c3 0307 	rsb	r3, r3, #7
 8005056:	2b04      	cmp	r3, #4
 8005058:	bf28      	it	cs
 800505a:	2304      	movcs	r3, #4
 800505c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	3304      	adds	r3, #4
 8005062:	2b06      	cmp	r3, #6
 8005064:	d902      	bls.n	800506c <NVIC_EncodePriority+0x30>
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	3b03      	subs	r3, #3
 800506a:	e000      	b.n	800506e <NVIC_EncodePriority+0x32>
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005070:	f04f 32ff 	mov.w	r2, #4294967295
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	43da      	mvns	r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	401a      	ands	r2, r3
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005084:	f04f 31ff 	mov.w	r1, #4294967295
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	fa01 f303 	lsl.w	r3, r1, r3
 800508e:	43d9      	mvns	r1, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005094:	4313      	orrs	r3, r2
         );
}
 8005096:	4618      	mov	r0, r3
 8005098:	3724      	adds	r7, #36	; 0x24
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr

080050a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050b0:	d301      	bcc.n	80050b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050b2:	2301      	movs	r3, #1
 80050b4:	e00f      	b.n	80050d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050b6:	4a0a      	ldr	r2, [pc, #40]	; (80050e0 <SysTick_Config+0x40>)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050be:	210f      	movs	r1, #15
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295
 80050c4:	f7ff ff90 	bl	8004fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050c8:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <SysTick_Config+0x40>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <SysTick_Config+0x40>)
 80050d0:	2207      	movs	r2, #7
 80050d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	e000e010 	.word	0xe000e010

080050e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff ff2d 	bl	8004f4c <__NVIC_SetPriorityGrouping>
}
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b086      	sub	sp, #24
 80050fe:	af00      	add	r7, sp, #0
 8005100:	4603      	mov	r3, r0
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800510c:	f7ff ff42 	bl	8004f94 <__NVIC_GetPriorityGrouping>
 8005110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	68b9      	ldr	r1, [r7, #8]
 8005116:	6978      	ldr	r0, [r7, #20]
 8005118:	f7ff ff90 	bl	800503c <NVIC_EncodePriority>
 800511c:	4602      	mov	r2, r0
 800511e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff ff5f 	bl	8004fe8 <__NVIC_SetPriority>
}
 800512a:	bf00      	nop
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b082      	sub	sp, #8
 8005136:	af00      	add	r7, sp, #0
 8005138:	4603      	mov	r3, r0
 800513a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800513c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff ff35 	bl	8004fb0 <__NVIC_EnableIRQ>
}
 8005146:	bf00      	nop
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff ffa2 	bl	80050a0 <SysTick_Config>
 800515c:	4603      	mov	r3, r0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005168:	b480      	push	{r7}
 800516a:	b08b      	sub	sp, #44	; 0x2c
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005172:	2300      	movs	r3, #0
 8005174:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005176:	2300      	movs	r3, #0
 8005178:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800517a:	e169      	b.n	8005450 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800517c:	2201      	movs	r2, #1
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	4013      	ands	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	429a      	cmp	r2, r3
 8005196:	f040 8158 	bne.w	800544a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	4a9a      	ldr	r2, [pc, #616]	; (8005408 <HAL_GPIO_Init+0x2a0>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d05e      	beq.n	8005262 <HAL_GPIO_Init+0xfa>
 80051a4:	4a98      	ldr	r2, [pc, #608]	; (8005408 <HAL_GPIO_Init+0x2a0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d875      	bhi.n	8005296 <HAL_GPIO_Init+0x12e>
 80051aa:	4a98      	ldr	r2, [pc, #608]	; (800540c <HAL_GPIO_Init+0x2a4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d058      	beq.n	8005262 <HAL_GPIO_Init+0xfa>
 80051b0:	4a96      	ldr	r2, [pc, #600]	; (800540c <HAL_GPIO_Init+0x2a4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d86f      	bhi.n	8005296 <HAL_GPIO_Init+0x12e>
 80051b6:	4a96      	ldr	r2, [pc, #600]	; (8005410 <HAL_GPIO_Init+0x2a8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d052      	beq.n	8005262 <HAL_GPIO_Init+0xfa>
 80051bc:	4a94      	ldr	r2, [pc, #592]	; (8005410 <HAL_GPIO_Init+0x2a8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d869      	bhi.n	8005296 <HAL_GPIO_Init+0x12e>
 80051c2:	4a94      	ldr	r2, [pc, #592]	; (8005414 <HAL_GPIO_Init+0x2ac>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d04c      	beq.n	8005262 <HAL_GPIO_Init+0xfa>
 80051c8:	4a92      	ldr	r2, [pc, #584]	; (8005414 <HAL_GPIO_Init+0x2ac>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d863      	bhi.n	8005296 <HAL_GPIO_Init+0x12e>
 80051ce:	4a92      	ldr	r2, [pc, #584]	; (8005418 <HAL_GPIO_Init+0x2b0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d046      	beq.n	8005262 <HAL_GPIO_Init+0xfa>
 80051d4:	4a90      	ldr	r2, [pc, #576]	; (8005418 <HAL_GPIO_Init+0x2b0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d85d      	bhi.n	8005296 <HAL_GPIO_Init+0x12e>
 80051da:	2b12      	cmp	r3, #18
 80051dc:	d82a      	bhi.n	8005234 <HAL_GPIO_Init+0xcc>
 80051de:	2b12      	cmp	r3, #18
 80051e0:	d859      	bhi.n	8005296 <HAL_GPIO_Init+0x12e>
 80051e2:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <HAL_GPIO_Init+0x80>)
 80051e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e8:	08005263 	.word	0x08005263
 80051ec:	0800523d 	.word	0x0800523d
 80051f0:	0800524f 	.word	0x0800524f
 80051f4:	08005291 	.word	0x08005291
 80051f8:	08005297 	.word	0x08005297
 80051fc:	08005297 	.word	0x08005297
 8005200:	08005297 	.word	0x08005297
 8005204:	08005297 	.word	0x08005297
 8005208:	08005297 	.word	0x08005297
 800520c:	08005297 	.word	0x08005297
 8005210:	08005297 	.word	0x08005297
 8005214:	08005297 	.word	0x08005297
 8005218:	08005297 	.word	0x08005297
 800521c:	08005297 	.word	0x08005297
 8005220:	08005297 	.word	0x08005297
 8005224:	08005297 	.word	0x08005297
 8005228:	08005297 	.word	0x08005297
 800522c:	08005245 	.word	0x08005245
 8005230:	08005259 	.word	0x08005259
 8005234:	4a79      	ldr	r2, [pc, #484]	; (800541c <HAL_GPIO_Init+0x2b4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d013      	beq.n	8005262 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800523a:	e02c      	b.n	8005296 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	623b      	str	r3, [r7, #32]
          break;
 8005242:	e029      	b.n	8005298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	3304      	adds	r3, #4
 800524a:	623b      	str	r3, [r7, #32]
          break;
 800524c:	e024      	b.n	8005298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	3308      	adds	r3, #8
 8005254:	623b      	str	r3, [r7, #32]
          break;
 8005256:	e01f      	b.n	8005298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	330c      	adds	r3, #12
 800525e:	623b      	str	r3, [r7, #32]
          break;
 8005260:	e01a      	b.n	8005298 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d102      	bne.n	8005270 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800526a:	2304      	movs	r3, #4
 800526c:	623b      	str	r3, [r7, #32]
          break;
 800526e:	e013      	b.n	8005298 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d105      	bne.n	8005284 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005278:	2308      	movs	r3, #8
 800527a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69fa      	ldr	r2, [r7, #28]
 8005280:	611a      	str	r2, [r3, #16]
          break;
 8005282:	e009      	b.n	8005298 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005284:	2308      	movs	r3, #8
 8005286:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	615a      	str	r2, [r3, #20]
          break;
 800528e:	e003      	b.n	8005298 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005290:	2300      	movs	r3, #0
 8005292:	623b      	str	r3, [r7, #32]
          break;
 8005294:	e000      	b.n	8005298 <HAL_GPIO_Init+0x130>
          break;
 8005296:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	2bff      	cmp	r3, #255	; 0xff
 800529c:	d801      	bhi.n	80052a2 <HAL_GPIO_Init+0x13a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	e001      	b.n	80052a6 <HAL_GPIO_Init+0x13e>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3304      	adds	r3, #4
 80052a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	2bff      	cmp	r3, #255	; 0xff
 80052ac:	d802      	bhi.n	80052b4 <HAL_GPIO_Init+0x14c>
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	e002      	b.n	80052ba <HAL_GPIO_Init+0x152>
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	3b08      	subs	r3, #8
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	210f      	movs	r1, #15
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	fa01 f303 	lsl.w	r3, r1, r3
 80052c8:	43db      	mvns	r3, r3
 80052ca:	401a      	ands	r2, r3
 80052cc:	6a39      	ldr	r1, [r7, #32]
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	fa01 f303 	lsl.w	r3, r1, r3
 80052d4:	431a      	orrs	r2, r3
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 80b1 	beq.w	800544a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80052e8:	4b4d      	ldr	r3, [pc, #308]	; (8005420 <HAL_GPIO_Init+0x2b8>)
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	4a4c      	ldr	r2, [pc, #304]	; (8005420 <HAL_GPIO_Init+0x2b8>)
 80052ee:	f043 0301 	orr.w	r3, r3, #1
 80052f2:	6193      	str	r3, [r2, #24]
 80052f4:	4b4a      	ldr	r3, [pc, #296]	; (8005420 <HAL_GPIO_Init+0x2b8>)
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	60bb      	str	r3, [r7, #8]
 80052fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005300:	4a48      	ldr	r2, [pc, #288]	; (8005424 <HAL_GPIO_Init+0x2bc>)
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	089b      	lsrs	r3, r3, #2
 8005306:	3302      	adds	r3, #2
 8005308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800530c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	f003 0303 	and.w	r3, r3, #3
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	220f      	movs	r2, #15
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	43db      	mvns	r3, r3
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4013      	ands	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a40      	ldr	r2, [pc, #256]	; (8005428 <HAL_GPIO_Init+0x2c0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d013      	beq.n	8005354 <HAL_GPIO_Init+0x1ec>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a3f      	ldr	r2, [pc, #252]	; (800542c <HAL_GPIO_Init+0x2c4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00d      	beq.n	8005350 <HAL_GPIO_Init+0x1e8>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a3e      	ldr	r2, [pc, #248]	; (8005430 <HAL_GPIO_Init+0x2c8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d007      	beq.n	800534c <HAL_GPIO_Init+0x1e4>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a3d      	ldr	r2, [pc, #244]	; (8005434 <HAL_GPIO_Init+0x2cc>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d101      	bne.n	8005348 <HAL_GPIO_Init+0x1e0>
 8005344:	2303      	movs	r3, #3
 8005346:	e006      	b.n	8005356 <HAL_GPIO_Init+0x1ee>
 8005348:	2304      	movs	r3, #4
 800534a:	e004      	b.n	8005356 <HAL_GPIO_Init+0x1ee>
 800534c:	2302      	movs	r3, #2
 800534e:	e002      	b.n	8005356 <HAL_GPIO_Init+0x1ee>
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <HAL_GPIO_Init+0x1ee>
 8005354:	2300      	movs	r3, #0
 8005356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005358:	f002 0203 	and.w	r2, r2, #3
 800535c:	0092      	lsls	r2, r2, #2
 800535e:	4093      	lsls	r3, r2
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005366:	492f      	ldr	r1, [pc, #188]	; (8005424 <HAL_GPIO_Init+0x2bc>)
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	089b      	lsrs	r3, r3, #2
 800536c:	3302      	adds	r3, #2
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d006      	beq.n	800538e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005380:	4b2d      	ldr	r3, [pc, #180]	; (8005438 <HAL_GPIO_Init+0x2d0>)
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	492c      	ldr	r1, [pc, #176]	; (8005438 <HAL_GPIO_Init+0x2d0>)
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	4313      	orrs	r3, r2
 800538a:	600b      	str	r3, [r1, #0]
 800538c:	e006      	b.n	800539c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800538e:	4b2a      	ldr	r3, [pc, #168]	; (8005438 <HAL_GPIO_Init+0x2d0>)
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	43db      	mvns	r3, r3
 8005396:	4928      	ldr	r1, [pc, #160]	; (8005438 <HAL_GPIO_Init+0x2d0>)
 8005398:	4013      	ands	r3, r2
 800539a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d006      	beq.n	80053b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80053a8:	4b23      	ldr	r3, [pc, #140]	; (8005438 <HAL_GPIO_Init+0x2d0>)
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	4922      	ldr	r1, [pc, #136]	; (8005438 <HAL_GPIO_Init+0x2d0>)
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	604b      	str	r3, [r1, #4]
 80053b4:	e006      	b.n	80053c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80053b6:	4b20      	ldr	r3, [pc, #128]	; (8005438 <HAL_GPIO_Init+0x2d0>)
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	43db      	mvns	r3, r3
 80053be:	491e      	ldr	r1, [pc, #120]	; (8005438 <HAL_GPIO_Init+0x2d0>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d006      	beq.n	80053de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80053d0:	4b19      	ldr	r3, [pc, #100]	; (8005438 <HAL_GPIO_Init+0x2d0>)
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	4918      	ldr	r1, [pc, #96]	; (8005438 <HAL_GPIO_Init+0x2d0>)
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	4313      	orrs	r3, r2
 80053da:	608b      	str	r3, [r1, #8]
 80053dc:	e006      	b.n	80053ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80053de:	4b16      	ldr	r3, [pc, #88]	; (8005438 <HAL_GPIO_Init+0x2d0>)
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	43db      	mvns	r3, r3
 80053e6:	4914      	ldr	r1, [pc, #80]	; (8005438 <HAL_GPIO_Init+0x2d0>)
 80053e8:	4013      	ands	r3, r2
 80053ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d021      	beq.n	800543c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80053f8:	4b0f      	ldr	r3, [pc, #60]	; (8005438 <HAL_GPIO_Init+0x2d0>)
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	490e      	ldr	r1, [pc, #56]	; (8005438 <HAL_GPIO_Init+0x2d0>)
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	4313      	orrs	r3, r2
 8005402:	60cb      	str	r3, [r1, #12]
 8005404:	e021      	b.n	800544a <HAL_GPIO_Init+0x2e2>
 8005406:	bf00      	nop
 8005408:	10320000 	.word	0x10320000
 800540c:	10310000 	.word	0x10310000
 8005410:	10220000 	.word	0x10220000
 8005414:	10210000 	.word	0x10210000
 8005418:	10120000 	.word	0x10120000
 800541c:	10110000 	.word	0x10110000
 8005420:	40021000 	.word	0x40021000
 8005424:	40010000 	.word	0x40010000
 8005428:	40010800 	.word	0x40010800
 800542c:	40010c00 	.word	0x40010c00
 8005430:	40011000 	.word	0x40011000
 8005434:	40011400 	.word	0x40011400
 8005438:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800543c:	4b0b      	ldr	r3, [pc, #44]	; (800546c <HAL_GPIO_Init+0x304>)
 800543e:	68da      	ldr	r2, [r3, #12]
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	43db      	mvns	r3, r3
 8005444:	4909      	ldr	r1, [pc, #36]	; (800546c <HAL_GPIO_Init+0x304>)
 8005446:	4013      	ands	r3, r2
 8005448:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	3301      	adds	r3, #1
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	fa22 f303 	lsr.w	r3, r2, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	f47f ae8e 	bne.w	800517c <HAL_GPIO_Init+0x14>
  }
}
 8005460:	bf00      	nop
 8005462:	bf00      	nop
 8005464:	372c      	adds	r7, #44	; 0x2c
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr
 800546c:	40010400 	.word	0x40010400

08005470 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	460b      	mov	r3, r1
 800547a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	887b      	ldrh	r3, [r7, #2]
 8005482:	4013      	ands	r3, r2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005488:	2301      	movs	r3, #1
 800548a:	73fb      	strb	r3, [r7, #15]
 800548c:	e001      	b.n	8005492 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800548e:	2300      	movs	r3, #0
 8005490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005492:	7bfb      	ldrb	r3, [r7, #15]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr

0800549e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	460b      	mov	r3, r1
 80054a8:	807b      	strh	r3, [r7, #2]
 80054aa:	4613      	mov	r3, r2
 80054ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054ae:	787b      	ldrb	r3, [r7, #1]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054b4:	887a      	ldrh	r2, [r7, #2]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80054ba:	e003      	b.n	80054c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80054bc:	887b      	ldrh	r3, [r7, #2]
 80054be:	041a      	lsls	r2, r3, #16
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	611a      	str	r2, [r3, #16]
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr

080054ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b085      	sub	sp, #20
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	460b      	mov	r3, r1
 80054d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054e0:	887a      	ldrh	r2, [r7, #2]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4013      	ands	r3, r2
 80054e6:	041a      	lsls	r2, r3, #16
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	43d9      	mvns	r1, r3
 80054ec:	887b      	ldrh	r3, [r7, #2]
 80054ee:	400b      	ands	r3, r1
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	611a      	str	r2, [r3, #16]
}
 80054f6:	bf00      	nop
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr

08005500 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e12b      	b.n	800576a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fe ff2c 	bl	8004384 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2224      	movs	r2, #36	; 0x24
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0201 	bic.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005552:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005562:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005564:	f001 f906 	bl	8006774 <HAL_RCC_GetPCLK1Freq>
 8005568:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	4a81      	ldr	r2, [pc, #516]	; (8005774 <HAL_I2C_Init+0x274>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d807      	bhi.n	8005584 <HAL_I2C_Init+0x84>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4a80      	ldr	r2, [pc, #512]	; (8005778 <HAL_I2C_Init+0x278>)
 8005578:	4293      	cmp	r3, r2
 800557a:	bf94      	ite	ls
 800557c:	2301      	movls	r3, #1
 800557e:	2300      	movhi	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	e006      	b.n	8005592 <HAL_I2C_Init+0x92>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4a7d      	ldr	r2, [pc, #500]	; (800577c <HAL_I2C_Init+0x27c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	bf94      	ite	ls
 800558c:	2301      	movls	r3, #1
 800558e:	2300      	movhi	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e0e7      	b.n	800576a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4a78      	ldr	r2, [pc, #480]	; (8005780 <HAL_I2C_Init+0x280>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	0c9b      	lsrs	r3, r3, #18
 80055a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	4a6a      	ldr	r2, [pc, #424]	; (8005774 <HAL_I2C_Init+0x274>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d802      	bhi.n	80055d4 <HAL_I2C_Init+0xd4>
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	3301      	adds	r3, #1
 80055d2:	e009      	b.n	80055e8 <HAL_I2C_Init+0xe8>
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055da:	fb02 f303 	mul.w	r3, r2, r3
 80055de:	4a69      	ldr	r2, [pc, #420]	; (8005784 <HAL_I2C_Init+0x284>)
 80055e0:	fba2 2303 	umull	r2, r3, r2, r3
 80055e4:	099b      	lsrs	r3, r3, #6
 80055e6:	3301      	adds	r3, #1
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6812      	ldr	r2, [r2, #0]
 80055ec:	430b      	orrs	r3, r1
 80055ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	495c      	ldr	r1, [pc, #368]	; (8005774 <HAL_I2C_Init+0x274>)
 8005604:	428b      	cmp	r3, r1
 8005606:	d819      	bhi.n	800563c <HAL_I2C_Init+0x13c>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	1e59      	subs	r1, r3, #1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	fbb1 f3f3 	udiv	r3, r1, r3
 8005616:	1c59      	adds	r1, r3, #1
 8005618:	f640 73fc 	movw	r3, #4092	; 0xffc
 800561c:	400b      	ands	r3, r1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <HAL_I2C_Init+0x138>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	1e59      	subs	r1, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005630:	3301      	adds	r3, #1
 8005632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005636:	e051      	b.n	80056dc <HAL_I2C_Init+0x1dc>
 8005638:	2304      	movs	r3, #4
 800563a:	e04f      	b.n	80056dc <HAL_I2C_Init+0x1dc>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d111      	bne.n	8005668 <HAL_I2C_Init+0x168>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	1e58      	subs	r0, r3, #1
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6859      	ldr	r1, [r3, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	440b      	add	r3, r1
 8005652:	fbb0 f3f3 	udiv	r3, r0, r3
 8005656:	3301      	adds	r3, #1
 8005658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800565c:	2b00      	cmp	r3, #0
 800565e:	bf0c      	ite	eq
 8005660:	2301      	moveq	r3, #1
 8005662:	2300      	movne	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	e012      	b.n	800568e <HAL_I2C_Init+0x18e>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	1e58      	subs	r0, r3, #1
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6859      	ldr	r1, [r3, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	440b      	add	r3, r1
 8005676:	0099      	lsls	r1, r3, #2
 8005678:	440b      	add	r3, r1
 800567a:	fbb0 f3f3 	udiv	r3, r0, r3
 800567e:	3301      	adds	r3, #1
 8005680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005684:	2b00      	cmp	r3, #0
 8005686:	bf0c      	ite	eq
 8005688:	2301      	moveq	r3, #1
 800568a:	2300      	movne	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <HAL_I2C_Init+0x196>
 8005692:	2301      	movs	r3, #1
 8005694:	e022      	b.n	80056dc <HAL_I2C_Init+0x1dc>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10e      	bne.n	80056bc <HAL_I2C_Init+0x1bc>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	1e58      	subs	r0, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6859      	ldr	r1, [r3, #4]
 80056a6:	460b      	mov	r3, r1
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	440b      	add	r3, r1
 80056ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80056b0:	3301      	adds	r3, #1
 80056b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ba:	e00f      	b.n	80056dc <HAL_I2C_Init+0x1dc>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	1e58      	subs	r0, r3, #1
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6859      	ldr	r1, [r3, #4]
 80056c4:	460b      	mov	r3, r1
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	0099      	lsls	r1, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80056d2:	3301      	adds	r3, #1
 80056d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	6809      	ldr	r1, [r1, #0]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69da      	ldr	r2, [r3, #28]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800570a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6911      	ldr	r1, [r2, #16]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	68d2      	ldr	r2, [r2, #12]
 8005716:	4311      	orrs	r1, r2
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6812      	ldr	r2, [r2, #0]
 800571c:	430b      	orrs	r3, r1
 800571e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695a      	ldr	r2, [r3, #20]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0201 	orr.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	000186a0 	.word	0x000186a0
 8005778:	001e847f 	.word	0x001e847f
 800577c:	003d08ff 	.word	0x003d08ff
 8005780:	431bde83 	.word	0x431bde83
 8005784:	10624dd3 	.word	0x10624dd3

08005788 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af02      	add	r7, sp, #8
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	607a      	str	r2, [r7, #4]
 8005792:	461a      	mov	r2, r3
 8005794:	460b      	mov	r3, r1
 8005796:	817b      	strh	r3, [r7, #10]
 8005798:	4613      	mov	r3, r2
 800579a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800579c:	f7ff f9ba 	bl	8004b14 <HAL_GetTick>
 80057a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	f040 80e0 	bne.w	8005970 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	2319      	movs	r3, #25
 80057b6:	2201      	movs	r2, #1
 80057b8:	4970      	ldr	r1, [pc, #448]	; (800597c <HAL_I2C_Master_Transmit+0x1f4>)
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 f964 	bl	8005a88 <I2C_WaitOnFlagUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80057c6:	2302      	movs	r3, #2
 80057c8:	e0d3      	b.n	8005972 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_I2C_Master_Transmit+0x50>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e0cc      	b.n	8005972 <HAL_I2C_Master_Transmit+0x1ea>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d007      	beq.n	80057fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0201 	orr.w	r2, r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800580c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2221      	movs	r2, #33	; 0x21
 8005812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2210      	movs	r2, #16
 800581a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	893a      	ldrh	r2, [r7, #8]
 800582e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4a50      	ldr	r2, [pc, #320]	; (8005980 <HAL_I2C_Master_Transmit+0x1f8>)
 800583e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005840:	8979      	ldrh	r1, [r7, #10]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	6a3a      	ldr	r2, [r7, #32]
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 f89c 	bl	8005984 <I2C_MasterRequestWrite>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e08d      	b.n	8005972 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005856:	2300      	movs	r3, #0
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	613b      	str	r3, [r7, #16]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	613b      	str	r3, [r7, #16]
 800586a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800586c:	e066      	b.n	800593c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	6a39      	ldr	r1, [r7, #32]
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 f9de 	bl	8005c34 <I2C_WaitOnTXEFlagUntilTimeout>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00d      	beq.n	800589a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	2b04      	cmp	r3, #4
 8005884:	d107      	bne.n	8005896 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005894:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e06b      	b.n	8005972 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	781a      	ldrb	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d11b      	bne.n	8005910 <HAL_I2C_Master_Transmit+0x188>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d017      	beq.n	8005910 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	781a      	ldrb	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	6a39      	ldr	r1, [r7, #32]
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 f9ce 	bl	8005cb6 <I2C_WaitOnBTFFlagUntilTimeout>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00d      	beq.n	800593c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005924:	2b04      	cmp	r3, #4
 8005926:	d107      	bne.n	8005938 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005936:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e01a      	b.n	8005972 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005940:	2b00      	cmp	r3, #0
 8005942:	d194      	bne.n	800586e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	e000      	b.n	8005972 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005970:	2302      	movs	r3, #2
  }
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	00100002 	.word	0x00100002
 8005980:	ffff0000 	.word	0xffff0000

08005984 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b088      	sub	sp, #32
 8005988:	af02      	add	r7, sp, #8
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	607a      	str	r2, [r7, #4]
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	460b      	mov	r3, r1
 8005992:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2b08      	cmp	r3, #8
 800599e:	d006      	beq.n	80059ae <I2C_MasterRequestWrite+0x2a>
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d003      	beq.n	80059ae <I2C_MasterRequestWrite+0x2a>
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059ac:	d108      	bne.n	80059c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	e00b      	b.n	80059d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c4:	2b12      	cmp	r3, #18
 80059c6:	d107      	bne.n	80059d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 f84f 	bl	8005a88 <I2C_WaitOnFlagUntilTimeout>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00d      	beq.n	8005a0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059fe:	d103      	bne.n	8005a08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e035      	b.n	8005a78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a14:	d108      	bne.n	8005a28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a16:	897b      	ldrh	r3, [r7, #10]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a24:	611a      	str	r2, [r3, #16]
 8005a26:	e01b      	b.n	8005a60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a28:	897b      	ldrh	r3, [r7, #10]
 8005a2a:	11db      	asrs	r3, r3, #7
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	f003 0306 	and.w	r3, r3, #6
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	f063 030f 	orn	r3, r3, #15
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	490e      	ldr	r1, [pc, #56]	; (8005a80 <I2C_MasterRequestWrite+0xfc>)
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f000 f875 	bl	8005b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e010      	b.n	8005a78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a56:	897b      	ldrh	r3, [r7, #10]
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	4907      	ldr	r1, [pc, #28]	; (8005a84 <I2C_MasterRequestWrite+0x100>)
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 f865 	bl	8005b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e000      	b.n	8005a78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	00010008 	.word	0x00010008
 8005a84:	00010002 	.word	0x00010002

08005a88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	603b      	str	r3, [r7, #0]
 8005a94:	4613      	mov	r3, r2
 8005a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a98:	e025      	b.n	8005ae6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa0:	d021      	beq.n	8005ae6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa2:	f7ff f837 	bl	8004b14 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d302      	bcc.n	8005ab8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d116      	bne.n	8005ae6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	f043 0220 	orr.w	r2, r3, #32
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e023      	b.n	8005b2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	0c1b      	lsrs	r3, r3, #16
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d10d      	bne.n	8005b0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	43da      	mvns	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	4013      	ands	r3, r2
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	bf0c      	ite	eq
 8005b02:	2301      	moveq	r3, #1
 8005b04:	2300      	movne	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	e00c      	b.n	8005b26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	43da      	mvns	r2, r3
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	4013      	ands	r3, r2
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	bf0c      	ite	eq
 8005b1e:	2301      	moveq	r3, #1
 8005b20:	2300      	movne	r3, #0
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	461a      	mov	r2, r3
 8005b26:	79fb      	ldrb	r3, [r7, #7]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d0b6      	beq.n	8005a9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	607a      	str	r2, [r7, #4]
 8005b42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b44:	e051      	b.n	8005bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b54:	d123      	bne.n	8005b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	f043 0204 	orr.w	r2, r3, #4
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e046      	b.n	8005c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba4:	d021      	beq.n	8005bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba6:	f7fe ffb5 	bl	8004b14 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d302      	bcc.n	8005bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d116      	bne.n	8005bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	f043 0220 	orr.w	r2, r3, #32
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e020      	b.n	8005c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	0c1b      	lsrs	r3, r3, #16
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d10c      	bne.n	8005c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	43da      	mvns	r2, r3
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	bf14      	ite	ne
 8005c06:	2301      	movne	r3, #1
 8005c08:	2300      	moveq	r3, #0
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	e00b      	b.n	8005c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	43da      	mvns	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bf14      	ite	ne
 8005c20:	2301      	movne	r3, #1
 8005c22:	2300      	moveq	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d18d      	bne.n	8005b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c40:	e02d      	b.n	8005c9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 f878 	bl	8005d38 <I2C_IsAcknowledgeFailed>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e02d      	b.n	8005cae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c58:	d021      	beq.n	8005c9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c5a:	f7fe ff5b 	bl	8004b14 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d302      	bcc.n	8005c70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d116      	bne.n	8005c9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	f043 0220 	orr.w	r2, r3, #32
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e007      	b.n	8005cae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca8:	2b80      	cmp	r3, #128	; 0x80
 8005caa:	d1ca      	bne.n	8005c42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cc2:	e02d      	b.n	8005d20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 f837 	bl	8005d38 <I2C_IsAcknowledgeFailed>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e02d      	b.n	8005d30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cda:	d021      	beq.n	8005d20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cdc:	f7fe ff1a 	bl	8004b14 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d302      	bcc.n	8005cf2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d116      	bne.n	8005d20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	f043 0220 	orr.w	r2, r3, #32
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e007      	b.n	8005d30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	f003 0304 	and.w	r3, r3, #4
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d1ca      	bne.n	8005cc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d4e:	d11b      	bne.n	8005d88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2220      	movs	r2, #32
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d74:	f043 0204 	orr.w	r2, r3, #4
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e000      	b.n	8005d8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr

08005d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e304      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 8087 	beq.w	8005ec2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005db4:	4b92      	ldr	r3, [pc, #584]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f003 030c 	and.w	r3, r3, #12
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d00c      	beq.n	8005dda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005dc0:	4b8f      	ldr	r3, [pc, #572]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f003 030c 	and.w	r3, r3, #12
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d112      	bne.n	8005df2 <HAL_RCC_OscConfig+0x5e>
 8005dcc:	4b8c      	ldr	r3, [pc, #560]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd8:	d10b      	bne.n	8005df2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dda:	4b89      	ldr	r3, [pc, #548]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d06c      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x12c>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d168      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e2de      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dfa:	d106      	bne.n	8005e0a <HAL_RCC_OscConfig+0x76>
 8005dfc:	4b80      	ldr	r3, [pc, #512]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a7f      	ldr	r2, [pc, #508]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	e02e      	b.n	8005e68 <HAL_RCC_OscConfig+0xd4>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10c      	bne.n	8005e2c <HAL_RCC_OscConfig+0x98>
 8005e12:	4b7b      	ldr	r3, [pc, #492]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a7a      	ldr	r2, [pc, #488]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	4b78      	ldr	r3, [pc, #480]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a77      	ldr	r2, [pc, #476]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	e01d      	b.n	8005e68 <HAL_RCC_OscConfig+0xd4>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e34:	d10c      	bne.n	8005e50 <HAL_RCC_OscConfig+0xbc>
 8005e36:	4b72      	ldr	r3, [pc, #456]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a71      	ldr	r2, [pc, #452]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	4b6f      	ldr	r3, [pc, #444]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a6e      	ldr	r2, [pc, #440]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	e00b      	b.n	8005e68 <HAL_RCC_OscConfig+0xd4>
 8005e50:	4b6b      	ldr	r3, [pc, #428]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a6a      	ldr	r2, [pc, #424]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e5a:	6013      	str	r3, [r2, #0]
 8005e5c:	4b68      	ldr	r3, [pc, #416]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a67      	ldr	r2, [pc, #412]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d013      	beq.n	8005e98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e70:	f7fe fe50 	bl	8004b14 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e78:	f7fe fe4c 	bl	8004b14 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b64      	cmp	r3, #100	; 0x64
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e292      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e8a:	4b5d      	ldr	r3, [pc, #372]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0f0      	beq.n	8005e78 <HAL_RCC_OscConfig+0xe4>
 8005e96:	e014      	b.n	8005ec2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e98:	f7fe fe3c 	bl	8004b14 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ea0:	f7fe fe38 	bl	8004b14 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b64      	cmp	r3, #100	; 0x64
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e27e      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eb2:	4b53      	ldr	r3, [pc, #332]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1f0      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x10c>
 8005ebe:	e000      	b.n	8005ec2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d063      	beq.n	8005f96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ece:	4b4c      	ldr	r3, [pc, #304]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f003 030c 	and.w	r3, r3, #12
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00b      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005eda:	4b49      	ldr	r3, [pc, #292]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f003 030c 	and.w	r3, r3, #12
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d11c      	bne.n	8005f20 <HAL_RCC_OscConfig+0x18c>
 8005ee6:	4b46      	ldr	r3, [pc, #280]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d116      	bne.n	8005f20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ef2:	4b43      	ldr	r3, [pc, #268]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d005      	beq.n	8005f0a <HAL_RCC_OscConfig+0x176>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d001      	beq.n	8005f0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e252      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f0a:	4b3d      	ldr	r3, [pc, #244]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	4939      	ldr	r1, [pc, #228]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f1e:	e03a      	b.n	8005f96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d020      	beq.n	8005f6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f28:	4b36      	ldr	r3, [pc, #216]	; (8006004 <HAL_RCC_OscConfig+0x270>)
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f2e:	f7fe fdf1 	bl	8004b14 <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f34:	e008      	b.n	8005f48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f36:	f7fe fded 	bl	8004b14 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e233      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f48:	4b2d      	ldr	r3, [pc, #180]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d0f0      	beq.n	8005f36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f54:	4b2a      	ldr	r3, [pc, #168]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	4927      	ldr	r1, [pc, #156]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	600b      	str	r3, [r1, #0]
 8005f68:	e015      	b.n	8005f96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f6a:	4b26      	ldr	r3, [pc, #152]	; (8006004 <HAL_RCC_OscConfig+0x270>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f70:	f7fe fdd0 	bl	8004b14 <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f78:	f7fe fdcc 	bl	8004b14 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e212      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f8a:	4b1d      	ldr	r3, [pc, #116]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1f0      	bne.n	8005f78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0308 	and.w	r3, r3, #8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d03a      	beq.n	8006018 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d019      	beq.n	8005fde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005faa:	4b17      	ldr	r3, [pc, #92]	; (8006008 <HAL_RCC_OscConfig+0x274>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fb0:	f7fe fdb0 	bl	8004b14 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fb8:	f7fe fdac 	bl	8004b14 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e1f2      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fca:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <HAL_RCC_OscConfig+0x26c>)
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0f0      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005fd6:	2001      	movs	r0, #1
 8005fd8:	f000 fbf4 	bl	80067c4 <RCC_Delay>
 8005fdc:	e01c      	b.n	8006018 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fde:	4b0a      	ldr	r3, [pc, #40]	; (8006008 <HAL_RCC_OscConfig+0x274>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe4:	f7fe fd96 	bl	8004b14 <HAL_GetTick>
 8005fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fea:	e00f      	b.n	800600c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fec:	f7fe fd92 	bl	8004b14 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d908      	bls.n	800600c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e1d8      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
 8005ffe:	bf00      	nop
 8006000:	40021000 	.word	0x40021000
 8006004:	42420000 	.word	0x42420000
 8006008:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800600c:	4b9b      	ldr	r3, [pc, #620]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1e9      	bne.n	8005fec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 80a6 	beq.w	8006172 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006026:	2300      	movs	r3, #0
 8006028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800602a:	4b94      	ldr	r3, [pc, #592]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10d      	bne.n	8006052 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006036:	4b91      	ldr	r3, [pc, #580]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	4a90      	ldr	r2, [pc, #576]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 800603c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006040:	61d3      	str	r3, [r2, #28]
 8006042:	4b8e      	ldr	r3, [pc, #568]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800604a:	60bb      	str	r3, [r7, #8]
 800604c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800604e:	2301      	movs	r3, #1
 8006050:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006052:	4b8b      	ldr	r3, [pc, #556]	; (8006280 <HAL_RCC_OscConfig+0x4ec>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605a:	2b00      	cmp	r3, #0
 800605c:	d118      	bne.n	8006090 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800605e:	4b88      	ldr	r3, [pc, #544]	; (8006280 <HAL_RCC_OscConfig+0x4ec>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a87      	ldr	r2, [pc, #540]	; (8006280 <HAL_RCC_OscConfig+0x4ec>)
 8006064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800606a:	f7fe fd53 	bl	8004b14 <HAL_GetTick>
 800606e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006070:	e008      	b.n	8006084 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006072:	f7fe fd4f 	bl	8004b14 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b64      	cmp	r3, #100	; 0x64
 800607e:	d901      	bls.n	8006084 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e195      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006084:	4b7e      	ldr	r3, [pc, #504]	; (8006280 <HAL_RCC_OscConfig+0x4ec>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0f0      	beq.n	8006072 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d106      	bne.n	80060a6 <HAL_RCC_OscConfig+0x312>
 8006098:	4b78      	ldr	r3, [pc, #480]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	4a77      	ldr	r2, [pc, #476]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 800609e:	f043 0301 	orr.w	r3, r3, #1
 80060a2:	6213      	str	r3, [r2, #32]
 80060a4:	e02d      	b.n	8006102 <HAL_RCC_OscConfig+0x36e>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10c      	bne.n	80060c8 <HAL_RCC_OscConfig+0x334>
 80060ae:	4b73      	ldr	r3, [pc, #460]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	4a72      	ldr	r2, [pc, #456]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80060b4:	f023 0301 	bic.w	r3, r3, #1
 80060b8:	6213      	str	r3, [r2, #32]
 80060ba:	4b70      	ldr	r3, [pc, #448]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	4a6f      	ldr	r2, [pc, #444]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80060c0:	f023 0304 	bic.w	r3, r3, #4
 80060c4:	6213      	str	r3, [r2, #32]
 80060c6:	e01c      	b.n	8006102 <HAL_RCC_OscConfig+0x36e>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	2b05      	cmp	r3, #5
 80060ce:	d10c      	bne.n	80060ea <HAL_RCC_OscConfig+0x356>
 80060d0:	4b6a      	ldr	r3, [pc, #424]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	4a69      	ldr	r2, [pc, #420]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80060d6:	f043 0304 	orr.w	r3, r3, #4
 80060da:	6213      	str	r3, [r2, #32]
 80060dc:	4b67      	ldr	r3, [pc, #412]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	4a66      	ldr	r2, [pc, #408]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80060e2:	f043 0301 	orr.w	r3, r3, #1
 80060e6:	6213      	str	r3, [r2, #32]
 80060e8:	e00b      	b.n	8006102 <HAL_RCC_OscConfig+0x36e>
 80060ea:	4b64      	ldr	r3, [pc, #400]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	4a63      	ldr	r2, [pc, #396]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80060f0:	f023 0301 	bic.w	r3, r3, #1
 80060f4:	6213      	str	r3, [r2, #32]
 80060f6:	4b61      	ldr	r3, [pc, #388]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	4a60      	ldr	r2, [pc, #384]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80060fc:	f023 0304 	bic.w	r3, r3, #4
 8006100:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d015      	beq.n	8006136 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800610a:	f7fe fd03 	bl	8004b14 <HAL_GetTick>
 800610e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006110:	e00a      	b.n	8006128 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006112:	f7fe fcff 	bl	8004b14 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006120:	4293      	cmp	r3, r2
 8006122:	d901      	bls.n	8006128 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e143      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006128:	4b54      	ldr	r3, [pc, #336]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b00      	cmp	r3, #0
 8006132:	d0ee      	beq.n	8006112 <HAL_RCC_OscConfig+0x37e>
 8006134:	e014      	b.n	8006160 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006136:	f7fe fced 	bl	8004b14 <HAL_GetTick>
 800613a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800613c:	e00a      	b.n	8006154 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800613e:	f7fe fce9 	bl	8004b14 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	f241 3288 	movw	r2, #5000	; 0x1388
 800614c:	4293      	cmp	r3, r2
 800614e:	d901      	bls.n	8006154 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e12d      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006154:	4b49      	ldr	r3, [pc, #292]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1ee      	bne.n	800613e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006160:	7dfb      	ldrb	r3, [r7, #23]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d105      	bne.n	8006172 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006166:	4b45      	ldr	r3, [pc, #276]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	4a44      	ldr	r2, [pc, #272]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 800616c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006170:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 808c 	beq.w	8006294 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800617c:	4b3f      	ldr	r3, [pc, #252]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006188:	d10e      	bne.n	80061a8 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800618a:	4b3c      	ldr	r3, [pc, #240]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8006192:	2b08      	cmp	r3, #8
 8006194:	d108      	bne.n	80061a8 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8006196:	4b39      	ldr	r3, [pc, #228]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 8006198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800619e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a2:	d101      	bne.n	80061a8 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e103      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d14e      	bne.n	800624e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80061b0:	4b32      	ldr	r3, [pc, #200]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d009      	beq.n	80061d0 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80061bc:	4b2f      	ldr	r3, [pc, #188]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80061be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d001      	beq.n	80061d0 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e0ef      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80061d0:	4b2c      	ldr	r3, [pc, #176]	; (8006284 <HAL_RCC_OscConfig+0x4f0>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d6:	f7fe fc9d 	bl	8004b14 <HAL_GetTick>
 80061da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80061dc:	e008      	b.n	80061f0 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80061de:	f7fe fc99 	bl	8004b14 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b64      	cmp	r3, #100	; 0x64
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e0df      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80061f0:	4b22      	ldr	r3, [pc, #136]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1f0      	bne.n	80061de <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80061fc:	4b1f      	ldr	r3, [pc, #124]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006208:	491c      	ldr	r1, [pc, #112]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 800620a:	4313      	orrs	r3, r2
 800620c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800620e:	4b1b      	ldr	r3, [pc, #108]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 8006210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006212:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621a:	4918      	ldr	r1, [pc, #96]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 800621c:	4313      	orrs	r3, r2
 800621e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8006220:	4b18      	ldr	r3, [pc, #96]	; (8006284 <HAL_RCC_OscConfig+0x4f0>)
 8006222:	2201      	movs	r2, #1
 8006224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006226:	f7fe fc75 	bl	8004b14 <HAL_GetTick>
 800622a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800622c:	e008      	b.n	8006240 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800622e:	f7fe fc71 	bl	8004b14 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b64      	cmp	r3, #100	; 0x64
 800623a:	d901      	bls.n	8006240 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e0b7      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8006240:	4b0e      	ldr	r3, [pc, #56]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0f0      	beq.n	800622e <HAL_RCC_OscConfig+0x49a>
 800624c:	e022      	b.n	8006294 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800624e:	4b0b      	ldr	r3, [pc, #44]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 8006250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006252:	4a0a      	ldr	r2, [pc, #40]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 8006254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006258:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800625a:	4b0a      	ldr	r3, [pc, #40]	; (8006284 <HAL_RCC_OscConfig+0x4f0>)
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006260:	f7fe fc58 	bl	8004b14 <HAL_GetTick>
 8006264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8006266:	e00f      	b.n	8006288 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006268:	f7fe fc54 	bl	8004b14 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b64      	cmp	r3, #100	; 0x64
 8006274:	d908      	bls.n	8006288 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e09a      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
 800627a:	bf00      	nop
 800627c:	40021000 	.word	0x40021000
 8006280:	40007000 	.word	0x40007000
 8006284:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8006288:	4b4b      	ldr	r3, [pc, #300]	; (80063b8 <HAL_RCC_OscConfig+0x624>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e9      	bne.n	8006268 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8088 	beq.w	80063ae <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800629e:	4b46      	ldr	r3, [pc, #280]	; (80063b8 <HAL_RCC_OscConfig+0x624>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f003 030c 	and.w	r3, r3, #12
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d068      	beq.n	800637c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d14d      	bne.n	800634e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b2:	4b42      	ldr	r3, [pc, #264]	; (80063bc <HAL_RCC_OscConfig+0x628>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b8:	f7fe fc2c 	bl	8004b14 <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c0:	f7fe fc28 	bl	8004b14 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e06e      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062d2:	4b39      	ldr	r3, [pc, #228]	; (80063b8 <HAL_RCC_OscConfig+0x624>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f0      	bne.n	80062c0 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e6:	d10f      	bne.n	8006308 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80062e8:	4b33      	ldr	r3, [pc, #204]	; (80063b8 <HAL_RCC_OscConfig+0x624>)
 80062ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	4931      	ldr	r1, [pc, #196]	; (80063b8 <HAL_RCC_OscConfig+0x624>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80062f6:	4b30      	ldr	r3, [pc, #192]	; (80063b8 <HAL_RCC_OscConfig+0x624>)
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	f023 020f 	bic.w	r2, r3, #15
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	492d      	ldr	r1, [pc, #180]	; (80063b8 <HAL_RCC_OscConfig+0x624>)
 8006304:	4313      	orrs	r3, r2
 8006306:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006308:	4b2b      	ldr	r3, [pc, #172]	; (80063b8 <HAL_RCC_OscConfig+0x624>)
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006318:	430b      	orrs	r3, r1
 800631a:	4927      	ldr	r1, [pc, #156]	; (80063b8 <HAL_RCC_OscConfig+0x624>)
 800631c:	4313      	orrs	r3, r2
 800631e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006320:	4b26      	ldr	r3, [pc, #152]	; (80063bc <HAL_RCC_OscConfig+0x628>)
 8006322:	2201      	movs	r2, #1
 8006324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006326:	f7fe fbf5 	bl	8004b14 <HAL_GetTick>
 800632a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800632c:	e008      	b.n	8006340 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800632e:	f7fe fbf1 	bl	8004b14 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e037      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006340:	4b1d      	ldr	r3, [pc, #116]	; (80063b8 <HAL_RCC_OscConfig+0x624>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0f0      	beq.n	800632e <HAL_RCC_OscConfig+0x59a>
 800634c:	e02f      	b.n	80063ae <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800634e:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <HAL_RCC_OscConfig+0x628>)
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006354:	f7fe fbde 	bl	8004b14 <HAL_GetTick>
 8006358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800635c:	f7fe fbda 	bl	8004b14 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e020      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800636e:	4b12      	ldr	r3, [pc, #72]	; (80063b8 <HAL_RCC_OscConfig+0x624>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1f0      	bne.n	800635c <HAL_RCC_OscConfig+0x5c8>
 800637a:	e018      	b.n	80063ae <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e013      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006388:	4b0b      	ldr	r3, [pc, #44]	; (80063b8 <HAL_RCC_OscConfig+0x624>)
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	429a      	cmp	r2, r3
 800639a:	d106      	bne.n	80063aa <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d001      	beq.n	80063ae <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e000      	b.n	80063b0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	40021000 	.word	0x40021000
 80063bc:	42420060 	.word	0x42420060

080063c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e0d0      	b.n	8006576 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063d4:	4b6a      	ldr	r3, [pc, #424]	; (8006580 <HAL_RCC_ClockConfig+0x1c0>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d910      	bls.n	8006404 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063e2:	4b67      	ldr	r3, [pc, #412]	; (8006580 <HAL_RCC_ClockConfig+0x1c0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f023 0207 	bic.w	r2, r3, #7
 80063ea:	4965      	ldr	r1, [pc, #404]	; (8006580 <HAL_RCC_ClockConfig+0x1c0>)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063f2:	4b63      	ldr	r3, [pc, #396]	; (8006580 <HAL_RCC_ClockConfig+0x1c0>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d001      	beq.n	8006404 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e0b8      	b.n	8006576 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d020      	beq.n	8006452 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800641c:	4b59      	ldr	r3, [pc, #356]	; (8006584 <HAL_RCC_ClockConfig+0x1c4>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	4a58      	ldr	r2, [pc, #352]	; (8006584 <HAL_RCC_ClockConfig+0x1c4>)
 8006422:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006426:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0308 	and.w	r3, r3, #8
 8006430:	2b00      	cmp	r3, #0
 8006432:	d005      	beq.n	8006440 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006434:	4b53      	ldr	r3, [pc, #332]	; (8006584 <HAL_RCC_ClockConfig+0x1c4>)
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	4a52      	ldr	r2, [pc, #328]	; (8006584 <HAL_RCC_ClockConfig+0x1c4>)
 800643a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800643e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006440:	4b50      	ldr	r3, [pc, #320]	; (8006584 <HAL_RCC_ClockConfig+0x1c4>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	494d      	ldr	r1, [pc, #308]	; (8006584 <HAL_RCC_ClockConfig+0x1c4>)
 800644e:	4313      	orrs	r3, r2
 8006450:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d040      	beq.n	80064e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d107      	bne.n	8006476 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006466:	4b47      	ldr	r3, [pc, #284]	; (8006584 <HAL_RCC_ClockConfig+0x1c4>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d115      	bne.n	800649e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e07f      	b.n	8006576 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2b02      	cmp	r3, #2
 800647c:	d107      	bne.n	800648e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800647e:	4b41      	ldr	r3, [pc, #260]	; (8006584 <HAL_RCC_ClockConfig+0x1c4>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d109      	bne.n	800649e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e073      	b.n	8006576 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800648e:	4b3d      	ldr	r3, [pc, #244]	; (8006584 <HAL_RCC_ClockConfig+0x1c4>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e06b      	b.n	8006576 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800649e:	4b39      	ldr	r3, [pc, #228]	; (8006584 <HAL_RCC_ClockConfig+0x1c4>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f023 0203 	bic.w	r2, r3, #3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	4936      	ldr	r1, [pc, #216]	; (8006584 <HAL_RCC_ClockConfig+0x1c4>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064b0:	f7fe fb30 	bl	8004b14 <HAL_GetTick>
 80064b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064b6:	e00a      	b.n	80064ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064b8:	f7fe fb2c 	bl	8004b14 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e053      	b.n	8006576 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ce:	4b2d      	ldr	r3, [pc, #180]	; (8006584 <HAL_RCC_ClockConfig+0x1c4>)
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f003 020c 	and.w	r2, r3, #12
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	429a      	cmp	r2, r3
 80064de:	d1eb      	bne.n	80064b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064e0:	4b27      	ldr	r3, [pc, #156]	; (8006580 <HAL_RCC_ClockConfig+0x1c0>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d210      	bcs.n	8006510 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ee:	4b24      	ldr	r3, [pc, #144]	; (8006580 <HAL_RCC_ClockConfig+0x1c0>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f023 0207 	bic.w	r2, r3, #7
 80064f6:	4922      	ldr	r1, [pc, #136]	; (8006580 <HAL_RCC_ClockConfig+0x1c0>)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064fe:	4b20      	ldr	r3, [pc, #128]	; (8006580 <HAL_RCC_ClockConfig+0x1c0>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0307 	and.w	r3, r3, #7
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	429a      	cmp	r2, r3
 800650a:	d001      	beq.n	8006510 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e032      	b.n	8006576 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	d008      	beq.n	800652e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800651c:	4b19      	ldr	r3, [pc, #100]	; (8006584 <HAL_RCC_ClockConfig+0x1c4>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	4916      	ldr	r1, [pc, #88]	; (8006584 <HAL_RCC_ClockConfig+0x1c4>)
 800652a:	4313      	orrs	r3, r2
 800652c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0308 	and.w	r3, r3, #8
 8006536:	2b00      	cmp	r3, #0
 8006538:	d009      	beq.n	800654e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800653a:	4b12      	ldr	r3, [pc, #72]	; (8006584 <HAL_RCC_ClockConfig+0x1c4>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	00db      	lsls	r3, r3, #3
 8006548:	490e      	ldr	r1, [pc, #56]	; (8006584 <HAL_RCC_ClockConfig+0x1c4>)
 800654a:	4313      	orrs	r3, r2
 800654c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800654e:	f000 f821 	bl	8006594 <HAL_RCC_GetSysClockFreq>
 8006552:	4602      	mov	r2, r0
 8006554:	4b0b      	ldr	r3, [pc, #44]	; (8006584 <HAL_RCC_ClockConfig+0x1c4>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	091b      	lsrs	r3, r3, #4
 800655a:	f003 030f 	and.w	r3, r3, #15
 800655e:	490a      	ldr	r1, [pc, #40]	; (8006588 <HAL_RCC_ClockConfig+0x1c8>)
 8006560:	5ccb      	ldrb	r3, [r1, r3]
 8006562:	fa22 f303 	lsr.w	r3, r2, r3
 8006566:	4a09      	ldr	r2, [pc, #36]	; (800658c <HAL_RCC_ClockConfig+0x1cc>)
 8006568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800656a:	4b09      	ldr	r3, [pc, #36]	; (8006590 <HAL_RCC_ClockConfig+0x1d0>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4618      	mov	r0, r3
 8006570:	f7fe fa8e 	bl	8004a90 <HAL_InitTick>

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	40022000 	.word	0x40022000
 8006584:	40021000 	.word	0x40021000
 8006588:	0800fabc 	.word	0x0800fabc
 800658c:	20000014 	.word	0x20000014
 8006590:	20000018 	.word	0x20000018

08006594 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006598:	b091      	sub	sp, #68	; 0x44
 800659a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 800659c:	4b6a      	ldr	r3, [pc, #424]	; (8006748 <HAL_RCC_GetSysClockFreq+0x1b4>)
 800659e:	f107 0414 	add.w	r4, r7, #20
 80065a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065a4:	c407      	stmia	r4!, {r0, r1, r2}
 80065a6:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80065a8:	4b68      	ldr	r3, [pc, #416]	; (800674c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80065aa:	1d3c      	adds	r4, r7, #4
 80065ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	637b      	str	r3, [r7, #52]	; 0x34
 80065b6:	2300      	movs	r3, #0
 80065b8:	633b      	str	r3, [r7, #48]	; 0x30
 80065ba:	2300      	movs	r3, #0
 80065bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065be:	2300      	movs	r3, #0
 80065c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ca:	2300      	movs	r3, #0
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80065ce:	4b60      	ldr	r3, [pc, #384]	; (8006750 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80065d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d6:	f003 030c 	and.w	r3, r3, #12
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d002      	beq.n	80065e4 <HAL_RCC_GetSysClockFreq+0x50>
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d003      	beq.n	80065ea <HAL_RCC_GetSysClockFreq+0x56>
 80065e2:	e0a8      	b.n	8006736 <HAL_RCC_GetSysClockFreq+0x1a2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80065e4:	4b5b      	ldr	r3, [pc, #364]	; (8006754 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80065e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80065e8:	e0a8      	b.n	800673c <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80065ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ec:	0c9b      	lsrs	r3, r3, #18
 80065ee:	f003 030f 	and.w	r3, r3, #15
 80065f2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80065f6:	4413      	add	r3, r2
 80065f8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80065fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80065fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 808e 	beq.w	8006726 <HAL_RCC_GetSysClockFreq+0x192>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800660a:	4b51      	ldr	r3, [pc, #324]	; (8006750 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800660c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006616:	4413      	add	r3, r2
 8006618:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800661c:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800661e:	4b4c      	ldr	r3, [pc, #304]	; (8006750 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d06b      	beq.n	8006702 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800662a:	4b49      	ldr	r3, [pc, #292]	; (8006750 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800662c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662e:	091b      	lsrs	r3, r3, #4
 8006630:	f003 030f 	and.w	r3, r3, #15
 8006634:	3301      	adds	r3, #1
 8006636:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8006638:	4b45      	ldr	r3, [pc, #276]	; (8006750 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	0a1b      	lsrs	r3, r3, #8
 800663e:	f003 030f 	and.w	r3, r3, #15
 8006642:	3302      	adds	r3, #2
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	4618      	mov	r0, r3
 800664a:	f04f 0100 	mov.w	r1, #0
 800664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006650:	461a      	mov	r2, r3
 8006652:	f04f 0300 	mov.w	r3, #0
 8006656:	fb02 f501 	mul.w	r5, r2, r1
 800665a:	fb00 f403 	mul.w	r4, r0, r3
 800665e:	192e      	adds	r6, r5, r4
 8006660:	fba0 4502 	umull	r4, r5, r0, r2
 8006664:	1973      	adds	r3, r6, r5
 8006666:	461d      	mov	r5, r3
 8006668:	4620      	mov	r0, r4
 800666a:	4629      	mov	r1, r5
 800666c:	f04f 0200 	mov.w	r2, #0
 8006670:	f04f 0300 	mov.w	r3, #0
 8006674:	014b      	lsls	r3, r1, #5
 8006676:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800667a:	0142      	lsls	r2, r0, #5
 800667c:	4610      	mov	r0, r2
 800667e:	4619      	mov	r1, r3
 8006680:	1b00      	subs	r0, r0, r4
 8006682:	eb61 0105 	sbc.w	r1, r1, r5
 8006686:	f04f 0200 	mov.w	r2, #0
 800668a:	f04f 0300 	mov.w	r3, #0
 800668e:	018b      	lsls	r3, r1, #6
 8006690:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006694:	0182      	lsls	r2, r0, #6
 8006696:	1a12      	subs	r2, r2, r0
 8006698:	eb63 0301 	sbc.w	r3, r3, r1
 800669c:	f04f 0000 	mov.w	r0, #0
 80066a0:	f04f 0100 	mov.w	r1, #0
 80066a4:	00d9      	lsls	r1, r3, #3
 80066a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066aa:	00d0      	lsls	r0, r2, #3
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	1912      	adds	r2, r2, r4
 80066b2:	eb45 0303 	adc.w	r3, r5, r3
 80066b6:	f04f 0000 	mov.w	r0, #0
 80066ba:	f04f 0100 	mov.w	r1, #0
 80066be:	0299      	lsls	r1, r3, #10
 80066c0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80066c4:	0290      	lsls	r0, r2, #10
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4690      	mov	r8, r2
 80066cc:	4699      	mov	r9, r3
 80066ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d0:	4618      	mov	r0, r3
 80066d2:	f04f 0100 	mov.w	r1, #0
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	461a      	mov	r2, r3
 80066da:	f04f 0300 	mov.w	r3, #0
 80066de:	fb02 f501 	mul.w	r5, r2, r1
 80066e2:	fb00 f403 	mul.w	r4, r0, r3
 80066e6:	442c      	add	r4, r5
 80066e8:	fba0 2302 	umull	r2, r3, r0, r2
 80066ec:	18e1      	adds	r1, r4, r3
 80066ee:	460b      	mov	r3, r1
 80066f0:	4640      	mov	r0, r8
 80066f2:	4649      	mov	r1, r9
 80066f4:	f7fa fd78 	bl	80011e8 <__aeabi_uldivmod>
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	4613      	mov	r3, r2
 80066fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006700:	e007      	b.n	8006712 <HAL_RCC_GetSysClockFreq+0x17e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	4a13      	ldr	r2, [pc, #76]	; (8006754 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006706:	fb02 f203 	mul.w	r2, r2, r3
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006710:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8006712:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006716:	461a      	mov	r2, r3
 8006718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671a:	4293      	cmp	r3, r2
 800671c:	d108      	bne.n	8006730 <HAL_RCC_GetSysClockFreq+0x19c>
        {
          pllclk = pllclk / 2;
 800671e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006720:	085b      	lsrs	r3, r3, #1
 8006722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006724:	e004      	b.n	8006730 <HAL_RCC_GetSysClockFreq+0x19c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	4a0b      	ldr	r2, [pc, #44]	; (8006758 <HAL_RCC_GetSysClockFreq+0x1c4>)
 800672a:	fb02 f303 	mul.w	r3, r2, r3
 800672e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8006730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006732:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006734:	e002      	b.n	800673c <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006736:	4b09      	ldr	r3, [pc, #36]	; (800675c <HAL_RCC_GetSysClockFreq+0x1c8>)
 8006738:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800673a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800673c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800673e:	4618      	mov	r0, r3
 8006740:	3744      	adds	r7, #68	; 0x44
 8006742:	46bd      	mov	sp, r7
 8006744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006748:	0800f2a0 	.word	0x0800f2a0
 800674c:	0800f2b0 	.word	0x0800f2b0
 8006750:	40021000 	.word	0x40021000
 8006754:	00f42400 	.word	0x00f42400
 8006758:	003d0900 	.word	0x003d0900
 800675c:	007a1200 	.word	0x007a1200

08006760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006764:	4b02      	ldr	r3, [pc, #8]	; (8006770 <HAL_RCC_GetHCLKFreq+0x10>)
 8006766:	681b      	ldr	r3, [r3, #0]
}
 8006768:	4618      	mov	r0, r3
 800676a:	46bd      	mov	sp, r7
 800676c:	bc80      	pop	{r7}
 800676e:	4770      	bx	lr
 8006770:	20000014 	.word	0x20000014

08006774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006778:	f7ff fff2 	bl	8006760 <HAL_RCC_GetHCLKFreq>
 800677c:	4602      	mov	r2, r0
 800677e:	4b05      	ldr	r3, [pc, #20]	; (8006794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	0a1b      	lsrs	r3, r3, #8
 8006784:	f003 0307 	and.w	r3, r3, #7
 8006788:	4903      	ldr	r1, [pc, #12]	; (8006798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800678a:	5ccb      	ldrb	r3, [r1, r3]
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006790:	4618      	mov	r0, r3
 8006792:	bd80      	pop	{r7, pc}
 8006794:	40021000 	.word	0x40021000
 8006798:	0800facc 	.word	0x0800facc

0800679c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80067a0:	f7ff ffde 	bl	8006760 <HAL_RCC_GetHCLKFreq>
 80067a4:	4602      	mov	r2, r0
 80067a6:	4b05      	ldr	r3, [pc, #20]	; (80067bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	0adb      	lsrs	r3, r3, #11
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	4903      	ldr	r1, [pc, #12]	; (80067c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067b2:	5ccb      	ldrb	r3, [r1, r3]
 80067b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	40021000 	.word	0x40021000
 80067c0:	0800facc 	.word	0x0800facc

080067c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80067cc:	4b0a      	ldr	r3, [pc, #40]	; (80067f8 <RCC_Delay+0x34>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a0a      	ldr	r2, [pc, #40]	; (80067fc <RCC_Delay+0x38>)
 80067d2:	fba2 2303 	umull	r2, r3, r2, r3
 80067d6:	0a5b      	lsrs	r3, r3, #9
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	fb02 f303 	mul.w	r3, r2, r3
 80067de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80067e0:	bf00      	nop
  }
  while (Delay --);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	1e5a      	subs	r2, r3, #1
 80067e6:	60fa      	str	r2, [r7, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1f9      	bne.n	80067e0 <RCC_Delay+0x1c>
}
 80067ec:	bf00      	nop
 80067ee:	bf00      	nop
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr
 80067f8:	20000014 	.word	0x20000014
 80067fc:	10624dd3 	.word	0x10624dd3

08006800 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b088      	sub	sp, #32
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	2300      	movs	r3, #0
 800680e:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d07d      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8006820:	2300      	movs	r3, #0
 8006822:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006824:	4b8b      	ldr	r3, [pc, #556]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10d      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006830:	4b88      	ldr	r3, [pc, #544]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	4a87      	ldr	r2, [pc, #540]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800683a:	61d3      	str	r3, [r2, #28]
 800683c:	4b85      	ldr	r3, [pc, #532]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006848:	2301      	movs	r3, #1
 800684a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800684c:	4b82      	ldr	r3, [pc, #520]	; (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006854:	2b00      	cmp	r3, #0
 8006856:	d118      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006858:	4b7f      	ldr	r3, [pc, #508]	; (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a7e      	ldr	r2, [pc, #504]	; (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800685e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006862:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006864:	f7fe f956 	bl	8004b14 <HAL_GetTick>
 8006868:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800686a:	e008      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800686c:	f7fe f952 	bl	8004b14 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b64      	cmp	r3, #100	; 0x64
 8006878:	d901      	bls.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e0e5      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800687e:	4b76      	ldr	r3, [pc, #472]	; (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f0      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800688a:	4b72      	ldr	r3, [pc, #456]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006892:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d02e      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d027      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068a8:	4b6a      	ldr	r3, [pc, #424]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068b2:	4b6a      	ldr	r3, [pc, #424]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80068b4:	2201      	movs	r2, #1
 80068b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068b8:	4b68      	ldr	r3, [pc, #416]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80068be:	4a65      	ldr	r2, [pc, #404]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d014      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ce:	f7fe f921 	bl	8004b14 <HAL_GetTick>
 80068d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068d4:	e00a      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d6:	f7fe f91d 	bl	8004b14 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d901      	bls.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e0ae      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ec:	4b59      	ldr	r3, [pc, #356]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0ee      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068f8:	4b56      	ldr	r3, [pc, #344]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	4953      	ldr	r1, [pc, #332]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006906:	4313      	orrs	r3, r2
 8006908:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800690a:	7efb      	ldrb	r3, [r7, #27]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d105      	bne.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006910:	4b50      	ldr	r3, [pc, #320]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	4a4f      	ldr	r2, [pc, #316]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800691a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d008      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006928:	4b4a      	ldr	r3, [pc, #296]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	4947      	ldr	r1, [pc, #284]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006936:	4313      	orrs	r3, r2
 8006938:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0304 	and.w	r3, r3, #4
 8006942:	2b00      	cmp	r3, #0
 8006944:	d008      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006946:	4b43      	ldr	r3, [pc, #268]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	4940      	ldr	r1, [pc, #256]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006954:	4313      	orrs	r3, r2
 8006956:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0308 	and.w	r3, r3, #8
 8006960:	2b00      	cmp	r3, #0
 8006962:	d008      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8006964:	4b3b      	ldr	r3, [pc, #236]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006968:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	4938      	ldr	r1, [pc, #224]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006972:	4313      	orrs	r3, r2
 8006974:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8006976:	4b37      	ldr	r3, [pc, #220]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d105      	bne.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8006982:	4b34      	ldr	r3, [pc, #208]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800698e:	2301      	movs	r3, #1
 8006990:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d148      	bne.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8006998:	4b2e      	ldr	r3, [pc, #184]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d138      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80069a4:	4b2b      	ldr	r3, [pc, #172]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d009      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80069b0:	4b28      	ldr	r3, [pc, #160]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80069bc:	429a      	cmp	r2, r3
 80069be:	d001      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e042      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80069c4:	4b23      	ldr	r3, [pc, #140]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	4920      	ldr	r1, [pc, #128]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80069d6:	4b1f      	ldr	r3, [pc, #124]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	491c      	ldr	r1, [pc, #112]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80069e8:	4b1d      	ldr	r3, [pc, #116]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069ea:	2201      	movs	r2, #1
 80069ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ee:	f7fe f891 	bl	8004b14 <HAL_GetTick>
 80069f2:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069f4:	e008      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80069f6:	f7fe f88d 	bl	8004b14 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	2b64      	cmp	r3, #100	; 0x64
 8006a02:	d901      	bls.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e020      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a08:	4b12      	ldr	r3, [pc, #72]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d0f0      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006a14:	e009      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8006a16:	4b0f      	ldr	r3, [pc, #60]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d001      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e00f      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0310 	and.w	r3, r3, #16
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d008      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a36:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	4904      	ldr	r1, [pc, #16]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3720      	adds	r7, #32
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	40021000 	.word	0x40021000
 8006a58:	40007000 	.word	0x40007000
 8006a5c:	42420440 	.word	0x42420440
 8006a60:	42420070 	.word	0x42420070

08006a64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e076      	b.n	8006b64 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d108      	bne.n	8006a90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a86:	d009      	beq.n	8006a9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	61da      	str	r2, [r3, #28]
 8006a8e:	e005      	b.n	8006a9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d106      	bne.n	8006abc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7fd fca4 	bl	8004404 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ad2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aee:	431a      	orrs	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	431a      	orrs	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	431a      	orrs	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b16:	431a      	orrs	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b20:	ea42 0103 	orr.w	r1, r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	0c1a      	lsrs	r2, r3, #16
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f002 0204 	and.w	r2, r2, #4
 8006b42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	69da      	ldr	r2, [r3, #28]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b088      	sub	sp, #32
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	603b      	str	r3, [r7, #0]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d101      	bne.n	8006b8e <HAL_SPI_Transmit+0x22>
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	e126      	b.n	8006ddc <HAL_SPI_Transmit+0x270>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b96:	f7fd ffbd 	bl	8004b14 <HAL_GetTick>
 8006b9a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b9c:	88fb      	ldrh	r3, [r7, #6]
 8006b9e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d002      	beq.n	8006bb2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006bac:	2302      	movs	r3, #2
 8006bae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bb0:	e10b      	b.n	8006dca <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <HAL_SPI_Transmit+0x52>
 8006bb8:	88fb      	ldrh	r3, [r7, #6]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d102      	bne.n	8006bc4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bc2:	e102      	b.n	8006dca <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2203      	movs	r2, #3
 8006bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	88fa      	ldrh	r2, [r7, #6]
 8006bdc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	88fa      	ldrh	r2, [r7, #6]
 8006be2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c0a:	d10f      	bne.n	8006c2c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c2a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c36:	2b40      	cmp	r3, #64	; 0x40
 8006c38:	d007      	beq.n	8006c4a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c52:	d14b      	bne.n	8006cec <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d002      	beq.n	8006c62 <HAL_SPI_Transmit+0xf6>
 8006c5c:	8afb      	ldrh	r3, [r7, #22]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d13e      	bne.n	8006ce0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c66:	881a      	ldrh	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c72:	1c9a      	adds	r2, r3, #2
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c86:	e02b      	b.n	8006ce0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d112      	bne.n	8006cbc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9a:	881a      	ldrh	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca6:	1c9a      	adds	r2, r3, #2
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	86da      	strh	r2, [r3, #54]	; 0x36
 8006cba:	e011      	b.n	8006ce0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cbc:	f7fd ff2a 	bl	8004b14 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d803      	bhi.n	8006cd4 <HAL_SPI_Transmit+0x168>
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd2:	d102      	bne.n	8006cda <HAL_SPI_Transmit+0x16e>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d102      	bne.n	8006ce0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006cde:	e074      	b.n	8006dca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1ce      	bne.n	8006c88 <HAL_SPI_Transmit+0x11c>
 8006cea:	e04c      	b.n	8006d86 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <HAL_SPI_Transmit+0x18e>
 8006cf4:	8afb      	ldrh	r3, [r7, #22]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d140      	bne.n	8006d7c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	330c      	adds	r3, #12
 8006d04:	7812      	ldrb	r2, [r2, #0]
 8006d06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d20:	e02c      	b.n	8006d7c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d113      	bne.n	8006d58 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	330c      	adds	r3, #12
 8006d3a:	7812      	ldrb	r2, [r2, #0]
 8006d3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d56:	e011      	b.n	8006d7c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d58:	f7fd fedc 	bl	8004b14 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d803      	bhi.n	8006d70 <HAL_SPI_Transmit+0x204>
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6e:	d102      	bne.n	8006d76 <HAL_SPI_Transmit+0x20a>
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d102      	bne.n	8006d7c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d7a:	e026      	b.n	8006dca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1cd      	bne.n	8006d22 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 fbc4 	bl	8007518 <SPI_EndRxTxTransaction>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006da4:	2300      	movs	r3, #0
 8006da6:	613b      	str	r3, [r7, #16]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	613b      	str	r3, [r7, #16]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	613b      	str	r3, [r7, #16]
 8006db8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	77fb      	strb	r3, [r7, #31]
 8006dc6:	e000      	b.n	8006dca <HAL_SPI_Transmit+0x25e>
  }

error:
 8006dc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006dda:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3720      	adds	r7, #32
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af02      	add	r7, sp, #8
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	603b      	str	r3, [r7, #0]
 8006df0:	4613      	mov	r3, r2
 8006df2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e00:	d112      	bne.n	8006e28 <HAL_SPI_Receive+0x44>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10e      	bne.n	8006e28 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2204      	movs	r2, #4
 8006e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006e12:	88fa      	ldrh	r2, [r7, #6]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	68b9      	ldr	r1, [r7, #8]
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 f8f1 	bl	8007006 <HAL_SPI_TransmitReceive>
 8006e24:	4603      	mov	r3, r0
 8006e26:	e0ea      	b.n	8006ffe <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d101      	bne.n	8006e36 <HAL_SPI_Receive+0x52>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e0e3      	b.n	8006ffe <HAL_SPI_Receive+0x21a>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e3e:	f7fd fe69 	bl	8004b14 <HAL_GetTick>
 8006e42:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d002      	beq.n	8006e56 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006e50:	2302      	movs	r3, #2
 8006e52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e54:	e0ca      	b.n	8006fec <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <HAL_SPI_Receive+0x7e>
 8006e5c:	88fb      	ldrh	r3, [r7, #6]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d102      	bne.n	8006e68 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e66:	e0c1      	b.n	8006fec <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2204      	movs	r2, #4
 8006e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	88fa      	ldrh	r2, [r7, #6]
 8006e80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	88fa      	ldrh	r2, [r7, #6]
 8006e86:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eae:	d10f      	bne.n	8006ed0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ebe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ece:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eda:	2b40      	cmp	r3, #64	; 0x40
 8006edc:	d007      	beq.n	8006eee <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d162      	bne.n	8006fbc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006ef6:	e02e      	b.n	8006f56 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d115      	bne.n	8006f32 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f103 020c 	add.w	r2, r3, #12
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f12:	7812      	ldrb	r2, [r2, #0]
 8006f14:	b2d2      	uxtb	r2, r2
 8006f16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f30:	e011      	b.n	8006f56 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f32:	f7fd fdef 	bl	8004b14 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d803      	bhi.n	8006f4a <HAL_SPI_Receive+0x166>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f48:	d102      	bne.n	8006f50 <HAL_SPI_Receive+0x16c>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d102      	bne.n	8006f56 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006f54:	e04a      	b.n	8006fec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1cb      	bne.n	8006ef8 <HAL_SPI_Receive+0x114>
 8006f60:	e031      	b.n	8006fc6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d113      	bne.n	8006f98 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7a:	b292      	uxth	r2, r2
 8006f7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f82:	1c9a      	adds	r2, r3, #2
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f96:	e011      	b.n	8006fbc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f98:	f7fd fdbc 	bl	8004b14 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d803      	bhi.n	8006fb0 <HAL_SPI_Receive+0x1cc>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fae:	d102      	bne.n	8006fb6 <HAL_SPI_Receive+0x1d2>
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d102      	bne.n	8006fbc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006fba:	e017      	b.n	8006fec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1cd      	bne.n	8006f62 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 fa52 	bl	8007474 <SPI_EndRxTransaction>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	75fb      	strb	r3, [r7, #23]
 8006fe8:	e000      	b.n	8006fec <HAL_SPI_Receive+0x208>
  }

error :
 8006fea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b08c      	sub	sp, #48	; 0x30
 800700a:	af00      	add	r7, sp, #0
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	60b9      	str	r1, [r7, #8]
 8007010:	607a      	str	r2, [r7, #4]
 8007012:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007014:	2301      	movs	r3, #1
 8007016:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_SPI_TransmitReceive+0x26>
 8007028:	2302      	movs	r3, #2
 800702a:	e18a      	b.n	8007342 <HAL_SPI_TransmitReceive+0x33c>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007034:	f7fd fd6e 	bl	8004b14 <HAL_GetTick>
 8007038:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800704a:	887b      	ldrh	r3, [r7, #2]
 800704c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800704e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007052:	2b01      	cmp	r3, #1
 8007054:	d00f      	beq.n	8007076 <HAL_SPI_TransmitReceive+0x70>
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800705c:	d107      	bne.n	800706e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d103      	bne.n	800706e <HAL_SPI_TransmitReceive+0x68>
 8007066:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800706a:	2b04      	cmp	r3, #4
 800706c:	d003      	beq.n	8007076 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800706e:	2302      	movs	r3, #2
 8007070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007074:	e15b      	b.n	800732e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <HAL_SPI_TransmitReceive+0x82>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <HAL_SPI_TransmitReceive+0x82>
 8007082:	887b      	ldrh	r3, [r7, #2]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d103      	bne.n	8007090 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800708e:	e14e      	b.n	800732e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b04      	cmp	r3, #4
 800709a:	d003      	beq.n	80070a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2205      	movs	r2, #5
 80070a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	887a      	ldrh	r2, [r7, #2]
 80070b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	887a      	ldrh	r2, [r7, #2]
 80070ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	887a      	ldrh	r2, [r7, #2]
 80070c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	887a      	ldrh	r2, [r7, #2]
 80070cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e4:	2b40      	cmp	r3, #64	; 0x40
 80070e6:	d007      	beq.n	80070f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007100:	d178      	bne.n	80071f4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d002      	beq.n	8007110 <HAL_SPI_TransmitReceive+0x10a>
 800710a:	8b7b      	ldrh	r3, [r7, #26]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d166      	bne.n	80071de <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007114:	881a      	ldrh	r2, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007120:	1c9a      	adds	r2, r3, #2
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800712a:	b29b      	uxth	r3, r3
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007134:	e053      	b.n	80071de <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f003 0302 	and.w	r3, r3, #2
 8007140:	2b02      	cmp	r3, #2
 8007142:	d11b      	bne.n	800717c <HAL_SPI_TransmitReceive+0x176>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007148:	b29b      	uxth	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d016      	beq.n	800717c <HAL_SPI_TransmitReceive+0x176>
 800714e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007150:	2b01      	cmp	r3, #1
 8007152:	d113      	bne.n	800717c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007158:	881a      	ldrh	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007164:	1c9a      	adds	r2, r3, #2
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800716e:	b29b      	uxth	r3, r3
 8007170:	3b01      	subs	r3, #1
 8007172:	b29a      	uxth	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b01      	cmp	r3, #1
 8007188:	d119      	bne.n	80071be <HAL_SPI_TransmitReceive+0x1b8>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800718e:	b29b      	uxth	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d014      	beq.n	80071be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719e:	b292      	uxth	r2, r2
 80071a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a6:	1c9a      	adds	r2, r3, #2
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	3b01      	subs	r3, #1
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071ba:	2301      	movs	r3, #1
 80071bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80071be:	f7fd fca9 	bl	8004b14 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d807      	bhi.n	80071de <HAL_SPI_TransmitReceive+0x1d8>
 80071ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d4:	d003      	beq.n	80071de <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80071dc:	e0a7      	b.n	800732e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1a6      	bne.n	8007136 <HAL_SPI_TransmitReceive+0x130>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1a1      	bne.n	8007136 <HAL_SPI_TransmitReceive+0x130>
 80071f2:	e07c      	b.n	80072ee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <HAL_SPI_TransmitReceive+0x1fc>
 80071fc:	8b7b      	ldrh	r3, [r7, #26]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d16b      	bne.n	80072da <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	330c      	adds	r3, #12
 800720c:	7812      	ldrb	r2, [r2, #0]
 800720e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007214:	1c5a      	adds	r2, r3, #1
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800721e:	b29b      	uxth	r3, r3
 8007220:	3b01      	subs	r3, #1
 8007222:	b29a      	uxth	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007228:	e057      	b.n	80072da <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b02      	cmp	r3, #2
 8007236:	d11c      	bne.n	8007272 <HAL_SPI_TransmitReceive+0x26c>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800723c:	b29b      	uxth	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d017      	beq.n	8007272 <HAL_SPI_TransmitReceive+0x26c>
 8007242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007244:	2b01      	cmp	r3, #1
 8007246:	d114      	bne.n	8007272 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	330c      	adds	r3, #12
 8007252:	7812      	ldrb	r2, [r2, #0]
 8007254:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007264:	b29b      	uxth	r3, r3
 8007266:	3b01      	subs	r3, #1
 8007268:	b29a      	uxth	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b01      	cmp	r3, #1
 800727e:	d119      	bne.n	80072b4 <HAL_SPI_TransmitReceive+0x2ae>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007284:	b29b      	uxth	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d014      	beq.n	80072b4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007294:	b2d2      	uxtb	r2, r2
 8007296:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729c:	1c5a      	adds	r2, r3, #1
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	3b01      	subs	r3, #1
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072b0:	2301      	movs	r3, #1
 80072b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80072b4:	f7fd fc2e 	bl	8004b14 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d803      	bhi.n	80072cc <HAL_SPI_TransmitReceive+0x2c6>
 80072c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ca:	d102      	bne.n	80072d2 <HAL_SPI_TransmitReceive+0x2cc>
 80072cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d103      	bne.n	80072da <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80072d8:	e029      	b.n	800732e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072de:	b29b      	uxth	r3, r3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1a2      	bne.n	800722a <HAL_SPI_TransmitReceive+0x224>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d19d      	bne.n	800722a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f000 f910 	bl	8007518 <SPI_EndRxTxTransaction>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d006      	beq.n	800730c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2220      	movs	r2, #32
 8007308:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800730a:	e010      	b.n	800732e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10b      	bne.n	800732c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007314:	2300      	movs	r3, #0
 8007316:	617b      	str	r3, [r7, #20]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	617b      	str	r3, [r7, #20]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	617b      	str	r3, [r7, #20]
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	e000      	b.n	800732e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800732c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800733e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007342:	4618      	mov	r0, r3
 8007344:	3730      	adds	r7, #48	; 0x30
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007358:	b2db      	uxtb	r3, r3
}
 800735a:	4618      	mov	r0, r3
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	bc80      	pop	{r7}
 8007362:	4770      	bx	lr

08007364 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	603b      	str	r3, [r7, #0]
 8007370:	4613      	mov	r3, r2
 8007372:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007374:	f7fd fbce 	bl	8004b14 <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	1a9b      	subs	r3, r3, r2
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	4413      	add	r3, r2
 8007382:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007384:	f7fd fbc6 	bl	8004b14 <HAL_GetTick>
 8007388:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800738a:	4b39      	ldr	r3, [pc, #228]	; (8007470 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	015b      	lsls	r3, r3, #5
 8007390:	0d1b      	lsrs	r3, r3, #20
 8007392:	69fa      	ldr	r2, [r7, #28]
 8007394:	fb02 f303 	mul.w	r3, r2, r3
 8007398:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800739a:	e054      	b.n	8007446 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a2:	d050      	beq.n	8007446 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073a4:	f7fd fbb6 	bl	8004b14 <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	69fa      	ldr	r2, [r7, #28]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d902      	bls.n	80073ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d13d      	bne.n	8007436 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073d2:	d111      	bne.n	80073f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073dc:	d004      	beq.n	80073e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073e6:	d107      	bne.n	80073f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007400:	d10f      	bne.n	8007422 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007420:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e017      	b.n	8007466 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d101      	bne.n	8007440 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800743c:	2300      	movs	r3, #0
 800743e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	3b01      	subs	r3, #1
 8007444:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	4013      	ands	r3, r2
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	429a      	cmp	r2, r3
 8007454:	bf0c      	ite	eq
 8007456:	2301      	moveq	r3, #1
 8007458:	2300      	movne	r3, #0
 800745a:	b2db      	uxtb	r3, r3
 800745c:	461a      	mov	r2, r3
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	429a      	cmp	r2, r3
 8007462:	d19b      	bne.n	800739c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3720      	adds	r7, #32
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	20000014 	.word	0x20000014

08007474 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af02      	add	r7, sp, #8
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007488:	d111      	bne.n	80074ae <SPI_EndRxTransaction+0x3a>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007492:	d004      	beq.n	800749e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800749c:	d107      	bne.n	80074ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ac:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074b6:	d117      	bne.n	80074e8 <SPI_EndRxTransaction+0x74>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074c0:	d112      	bne.n	80074e8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	2200      	movs	r2, #0
 80074ca:	2101      	movs	r1, #1
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f7ff ff49 	bl	8007364 <SPI_WaitFlagStateUntilTimeout>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d01a      	beq.n	800750e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074dc:	f043 0220 	orr.w	r2, r3, #32
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e013      	b.n	8007510 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2200      	movs	r2, #0
 80074f0:	2180      	movs	r1, #128	; 0x80
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f7ff ff36 	bl	8007364 <SPI_WaitFlagStateUntilTimeout>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d007      	beq.n	800750e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007502:	f043 0220 	orr.w	r2, r3, #32
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e000      	b.n	8007510 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af02      	add	r7, sp, #8
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2200      	movs	r2, #0
 800752c:	2180      	movs	r1, #128	; 0x80
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f7ff ff18 	bl	8007364 <SPI_WaitFlagStateUntilTimeout>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d007      	beq.n	800754a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753e:	f043 0220 	orr.w	r2, r3, #32
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e000      	b.n	800754c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e041      	b.n	80075ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d106      	bne.n	8007580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7fc ffc8 	bl	8004510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	3304      	adds	r3, #4
 8007590:	4619      	mov	r1, r3
 8007592:	4610      	mov	r0, r2
 8007594:	f000 fb22 	bl	8007bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b01      	cmp	r3, #1
 8007606:	d001      	beq.n	800760c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e037      	b.n	800767c <HAL_TIM_Base_Start+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a1b      	ldr	r2, [pc, #108]	; (8007688 <HAL_TIM_Base_Start+0x94>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d013      	beq.n	8007646 <HAL_TIM_Base_Start+0x52>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007626:	d00e      	beq.n	8007646 <HAL_TIM_Base_Start+0x52>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a17      	ldr	r2, [pc, #92]	; (800768c <HAL_TIM_Base_Start+0x98>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d009      	beq.n	8007646 <HAL_TIM_Base_Start+0x52>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a16      	ldr	r2, [pc, #88]	; (8007690 <HAL_TIM_Base_Start+0x9c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d004      	beq.n	8007646 <HAL_TIM_Base_Start+0x52>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a14      	ldr	r2, [pc, #80]	; (8007694 <HAL_TIM_Base_Start+0xa0>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d111      	bne.n	800766a <HAL_TIM_Base_Start+0x76>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f003 0307 	and.w	r3, r3, #7
 8007650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2b06      	cmp	r3, #6
 8007656:	d010      	beq.n	800767a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 0201 	orr.w	r2, r2, #1
 8007666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007668:	e007      	b.n	800767a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f042 0201 	orr.w	r2, r2, #1
 8007678:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	bc80      	pop	{r7}
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	40012c00 	.word	0x40012c00
 800768c:	40000400 	.word	0x40000400
 8007690:	40000800 	.word	0x40000800
 8007694:	40000c00 	.word	0x40000c00

08007698 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e041      	b.n	800772e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d106      	bne.n	80076c4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7fc ff5e 	bl	8004580 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3304      	adds	r3, #4
 80076d4:	4619      	mov	r1, r3
 80076d6:	4610      	mov	r0, r2
 80076d8:	f000 fa80 	bl	8007bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b082      	sub	sp, #8
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	f003 0302 	and.w	r3, r3, #2
 8007748:	2b02      	cmp	r3, #2
 800774a:	d122      	bne.n	8007792 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b02      	cmp	r3, #2
 8007758:	d11b      	bne.n	8007792 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f06f 0202 	mvn.w	r2, #2
 8007762:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	f003 0303 	and.w	r3, r3, #3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fa13 	bl	8007ba4 <HAL_TIM_IC_CaptureCallback>
 800777e:	e005      	b.n	800778c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fa06 	bl	8007b92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fa15 	bl	8007bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	f003 0304 	and.w	r3, r3, #4
 800779c:	2b04      	cmp	r3, #4
 800779e:	d122      	bne.n	80077e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	f003 0304 	and.w	r3, r3, #4
 80077aa:	2b04      	cmp	r3, #4
 80077ac:	d11b      	bne.n	80077e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f06f 0204 	mvn.w	r2, #4
 80077b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d003      	beq.n	80077d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f9e9 	bl	8007ba4 <HAL_TIM_IC_CaptureCallback>
 80077d2:	e005      	b.n	80077e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f9dc 	bl	8007b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f9eb 	bl	8007bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	f003 0308 	and.w	r3, r3, #8
 80077f0:	2b08      	cmp	r3, #8
 80077f2:	d122      	bne.n	800783a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f003 0308 	and.w	r3, r3, #8
 80077fe:	2b08      	cmp	r3, #8
 8007800:	d11b      	bne.n	800783a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f06f 0208 	mvn.w	r2, #8
 800780a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2204      	movs	r2, #4
 8007810:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	f003 0303 	and.w	r3, r3, #3
 800781c:	2b00      	cmp	r3, #0
 800781e:	d003      	beq.n	8007828 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f9bf 	bl	8007ba4 <HAL_TIM_IC_CaptureCallback>
 8007826:	e005      	b.n	8007834 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f9b2 	bl	8007b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f9c1 	bl	8007bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	f003 0310 	and.w	r3, r3, #16
 8007844:	2b10      	cmp	r3, #16
 8007846:	d122      	bne.n	800788e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	f003 0310 	and.w	r3, r3, #16
 8007852:	2b10      	cmp	r3, #16
 8007854:	d11b      	bne.n	800788e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f06f 0210 	mvn.w	r2, #16
 800785e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2208      	movs	r2, #8
 8007864:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	69db      	ldr	r3, [r3, #28]
 800786c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f995 	bl	8007ba4 <HAL_TIM_IC_CaptureCallback>
 800787a:	e005      	b.n	8007888 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f988 	bl	8007b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f997 	bl	8007bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b01      	cmp	r3, #1
 800789a:	d10e      	bne.n	80078ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d107      	bne.n	80078ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f06f 0201 	mvn.w	r2, #1
 80078b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f963 	bl	8007b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c4:	2b80      	cmp	r3, #128	; 0x80
 80078c6:	d10e      	bne.n	80078e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d2:	2b80      	cmp	r3, #128	; 0x80
 80078d4:	d107      	bne.n	80078e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fcc5 	bl	8008270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f0:	2b40      	cmp	r3, #64	; 0x40
 80078f2:	d10e      	bne.n	8007912 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fe:	2b40      	cmp	r3, #64	; 0x40
 8007900:	d107      	bne.n	8007912 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800790a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f95b 	bl	8007bc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	f003 0320 	and.w	r3, r3, #32
 800791c:	2b20      	cmp	r3, #32
 800791e:	d10e      	bne.n	800793e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	f003 0320 	and.w	r3, r3, #32
 800792a:	2b20      	cmp	r3, #32
 800792c:	d107      	bne.n	800793e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f06f 0220 	mvn.w	r2, #32
 8007936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fc90 	bl	800825e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800793e:	bf00      	nop
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
	...

08007948 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800795a:	2b01      	cmp	r3, #1
 800795c:	d101      	bne.n	8007962 <HAL_TIM_OC_ConfigChannel+0x1a>
 800795e:	2302      	movs	r3, #2
 8007960:	e046      	b.n	80079f0 <HAL_TIM_OC_ConfigChannel+0xa8>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b0c      	cmp	r3, #12
 800796e:	d839      	bhi.n	80079e4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8007970:	a201      	add	r2, pc, #4	; (adr r2, 8007978 <HAL_TIM_OC_ConfigChannel+0x30>)
 8007972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007976:	bf00      	nop
 8007978:	080079ad 	.word	0x080079ad
 800797c:	080079e5 	.word	0x080079e5
 8007980:	080079e5 	.word	0x080079e5
 8007984:	080079e5 	.word	0x080079e5
 8007988:	080079bb 	.word	0x080079bb
 800798c:	080079e5 	.word	0x080079e5
 8007990:	080079e5 	.word	0x080079e5
 8007994:	080079e5 	.word	0x080079e5
 8007998:	080079c9 	.word	0x080079c9
 800799c:	080079e5 	.word	0x080079e5
 80079a0:	080079e5 	.word	0x080079e5
 80079a4:	080079e5 	.word	0x080079e5
 80079a8:	080079d7 	.word	0x080079d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68b9      	ldr	r1, [r7, #8]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 f97e 	bl	8007cb4 <TIM_OC1_SetConfig>
      break;
 80079b8:	e015      	b.n	80079e6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68b9      	ldr	r1, [r7, #8]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 f9dd 	bl	8007d80 <TIM_OC2_SetConfig>
      break;
 80079c6:	e00e      	b.n	80079e6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68b9      	ldr	r1, [r7, #8]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 fa40 	bl	8007e54 <TIM_OC3_SetConfig>
      break;
 80079d4:	e007      	b.n	80079e6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 faa3 	bl	8007f28 <TIM_OC4_SetConfig>
      break;
 80079e2:	e000      	b.n	80079e6 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80079e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d101      	bne.n	8007a10 <HAL_TIM_ConfigClockSource+0x18>
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	e0b3      	b.n	8007b78 <HAL_TIM_ConfigClockSource+0x180>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a48:	d03e      	beq.n	8007ac8 <HAL_TIM_ConfigClockSource+0xd0>
 8007a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a4e:	f200 8087 	bhi.w	8007b60 <HAL_TIM_ConfigClockSource+0x168>
 8007a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a56:	f000 8085 	beq.w	8007b64 <HAL_TIM_ConfigClockSource+0x16c>
 8007a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a5e:	d87f      	bhi.n	8007b60 <HAL_TIM_ConfigClockSource+0x168>
 8007a60:	2b70      	cmp	r3, #112	; 0x70
 8007a62:	d01a      	beq.n	8007a9a <HAL_TIM_ConfigClockSource+0xa2>
 8007a64:	2b70      	cmp	r3, #112	; 0x70
 8007a66:	d87b      	bhi.n	8007b60 <HAL_TIM_ConfigClockSource+0x168>
 8007a68:	2b60      	cmp	r3, #96	; 0x60
 8007a6a:	d050      	beq.n	8007b0e <HAL_TIM_ConfigClockSource+0x116>
 8007a6c:	2b60      	cmp	r3, #96	; 0x60
 8007a6e:	d877      	bhi.n	8007b60 <HAL_TIM_ConfigClockSource+0x168>
 8007a70:	2b50      	cmp	r3, #80	; 0x50
 8007a72:	d03c      	beq.n	8007aee <HAL_TIM_ConfigClockSource+0xf6>
 8007a74:	2b50      	cmp	r3, #80	; 0x50
 8007a76:	d873      	bhi.n	8007b60 <HAL_TIM_ConfigClockSource+0x168>
 8007a78:	2b40      	cmp	r3, #64	; 0x40
 8007a7a:	d058      	beq.n	8007b2e <HAL_TIM_ConfigClockSource+0x136>
 8007a7c:	2b40      	cmp	r3, #64	; 0x40
 8007a7e:	d86f      	bhi.n	8007b60 <HAL_TIM_ConfigClockSource+0x168>
 8007a80:	2b30      	cmp	r3, #48	; 0x30
 8007a82:	d064      	beq.n	8007b4e <HAL_TIM_ConfigClockSource+0x156>
 8007a84:	2b30      	cmp	r3, #48	; 0x30
 8007a86:	d86b      	bhi.n	8007b60 <HAL_TIM_ConfigClockSource+0x168>
 8007a88:	2b20      	cmp	r3, #32
 8007a8a:	d060      	beq.n	8007b4e <HAL_TIM_ConfigClockSource+0x156>
 8007a8c:	2b20      	cmp	r3, #32
 8007a8e:	d867      	bhi.n	8007b60 <HAL_TIM_ConfigClockSource+0x168>
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d05c      	beq.n	8007b4e <HAL_TIM_ConfigClockSource+0x156>
 8007a94:	2b10      	cmp	r3, #16
 8007a96:	d05a      	beq.n	8007b4e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007a98:	e062      	b.n	8007b60 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6818      	ldr	r0, [r3, #0]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	6899      	ldr	r1, [r3, #8]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f000 fb02 	bl	80080b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007abc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	609a      	str	r2, [r3, #8]
      break;
 8007ac6:	e04e      	b.n	8007b66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6818      	ldr	r0, [r3, #0]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	6899      	ldr	r1, [r3, #8]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f000 faeb 	bl	80080b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689a      	ldr	r2, [r3, #8]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007aea:	609a      	str	r2, [r3, #8]
      break;
 8007aec:	e03b      	b.n	8007b66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6818      	ldr	r0, [r3, #0]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	6859      	ldr	r1, [r3, #4]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	461a      	mov	r2, r3
 8007afc:	f000 fa62 	bl	8007fc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2150      	movs	r1, #80	; 0x50
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 fab9 	bl	800807e <TIM_ITRx_SetConfig>
      break;
 8007b0c:	e02b      	b.n	8007b66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	6859      	ldr	r1, [r3, #4]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	f000 fa80 	bl	8008020 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2160      	movs	r1, #96	; 0x60
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 faa9 	bl	800807e <TIM_ITRx_SetConfig>
      break;
 8007b2c:	e01b      	b.n	8007b66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	6859      	ldr	r1, [r3, #4]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	f000 fa42 	bl	8007fc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2140      	movs	r1, #64	; 0x40
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fa99 	bl	800807e <TIM_ITRx_SetConfig>
      break;
 8007b4c:	e00b      	b.n	8007b66 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4619      	mov	r1, r3
 8007b58:	4610      	mov	r0, r2
 8007b5a:	f000 fa90 	bl	800807e <TIM_ITRx_SetConfig>
        break;
 8007b5e:	e002      	b.n	8007b66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007b60:	bf00      	nop
 8007b62:	e000      	b.n	8007b66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007b64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bc80      	pop	{r7}
 8007b90:	4770      	bx	lr

08007b92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bc80      	pop	{r7}
 8007ba2:	4770      	bx	lr

08007ba4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bc80      	pop	{r7}
 8007bb4:	4770      	bx	lr

08007bb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bbe:	bf00      	nop
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bc80      	pop	{r7}
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bc80      	pop	{r7}
 8007bd8:	4770      	bx	lr
	...

08007bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a2d      	ldr	r2, [pc, #180]	; (8007ca4 <TIM_Base_SetConfig+0xc8>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d00f      	beq.n	8007c14 <TIM_Base_SetConfig+0x38>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bfa:	d00b      	beq.n	8007c14 <TIM_Base_SetConfig+0x38>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a2a      	ldr	r2, [pc, #168]	; (8007ca8 <TIM_Base_SetConfig+0xcc>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d007      	beq.n	8007c14 <TIM_Base_SetConfig+0x38>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a29      	ldr	r2, [pc, #164]	; (8007cac <TIM_Base_SetConfig+0xd0>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d003      	beq.n	8007c14 <TIM_Base_SetConfig+0x38>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a28      	ldr	r2, [pc, #160]	; (8007cb0 <TIM_Base_SetConfig+0xd4>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d108      	bne.n	8007c26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a1e      	ldr	r2, [pc, #120]	; (8007ca4 <TIM_Base_SetConfig+0xc8>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d00f      	beq.n	8007c4e <TIM_Base_SetConfig+0x72>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c34:	d00b      	beq.n	8007c4e <TIM_Base_SetConfig+0x72>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a1b      	ldr	r2, [pc, #108]	; (8007ca8 <TIM_Base_SetConfig+0xcc>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d007      	beq.n	8007c4e <TIM_Base_SetConfig+0x72>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a1a      	ldr	r2, [pc, #104]	; (8007cac <TIM_Base_SetConfig+0xd0>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d003      	beq.n	8007c4e <TIM_Base_SetConfig+0x72>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a19      	ldr	r2, [pc, #100]	; (8007cb0 <TIM_Base_SetConfig+0xd4>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d108      	bne.n	8007c60 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	689a      	ldr	r2, [r3, #8]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a07      	ldr	r2, [pc, #28]	; (8007ca4 <TIM_Base_SetConfig+0xc8>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d103      	bne.n	8007c94 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	691a      	ldr	r2, [r3, #16]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	615a      	str	r2, [r3, #20]
}
 8007c9a:	bf00      	nop
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bc80      	pop	{r7}
 8007ca2:	4770      	bx	lr
 8007ca4:	40012c00 	.word	0x40012c00
 8007ca8:	40000400 	.word	0x40000400
 8007cac:	40000800 	.word	0x40000800
 8007cb0:	40000c00 	.word	0x40000c00

08007cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b087      	sub	sp, #28
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	f023 0201 	bic.w	r2, r3, #1
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f023 0303 	bic.w	r3, r3, #3
 8007cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f023 0302 	bic.w	r3, r3, #2
 8007cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a1c      	ldr	r2, [pc, #112]	; (8007d7c <TIM_OC1_SetConfig+0xc8>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d10c      	bne.n	8007d2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	f023 0308 	bic.w	r3, r3, #8
 8007d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f023 0304 	bic.w	r3, r3, #4
 8007d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a13      	ldr	r2, [pc, #76]	; (8007d7c <TIM_OC1_SetConfig+0xc8>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d111      	bne.n	8007d56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	621a      	str	r2, [r3, #32]
}
 8007d70:	bf00      	nop
 8007d72:	371c      	adds	r7, #28
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bc80      	pop	{r7}
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	40012c00 	.word	0x40012c00

08007d80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	f023 0210 	bic.w	r2, r3, #16
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007db6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	021b      	lsls	r3, r3, #8
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	f023 0320 	bic.w	r3, r3, #32
 8007dca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	011b      	lsls	r3, r3, #4
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a1d      	ldr	r2, [pc, #116]	; (8007e50 <TIM_OC2_SetConfig+0xd0>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d10d      	bne.n	8007dfc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	011b      	lsls	r3, r3, #4
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a14      	ldr	r2, [pc, #80]	; (8007e50 <TIM_OC2_SetConfig+0xd0>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d113      	bne.n	8007e2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	621a      	str	r2, [r3, #32]
}
 8007e46:	bf00      	nop
 8007e48:	371c      	adds	r7, #28
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bc80      	pop	{r7}
 8007e4e:	4770      	bx	lr
 8007e50:	40012c00 	.word	0x40012c00

08007e54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b087      	sub	sp, #28
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f023 0303 	bic.w	r3, r3, #3
 8007e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	021b      	lsls	r3, r3, #8
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a1d      	ldr	r2, [pc, #116]	; (8007f24 <TIM_OC3_SetConfig+0xd0>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d10d      	bne.n	8007ece <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	021b      	lsls	r3, r3, #8
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a14      	ldr	r2, [pc, #80]	; (8007f24 <TIM_OC3_SetConfig+0xd0>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d113      	bne.n	8007efe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	011b      	lsls	r3, r3, #4
 8007eec:	693a      	ldr	r2, [r7, #16]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	011b      	lsls	r3, r3, #4
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	621a      	str	r2, [r3, #32]
}
 8007f18:	bf00      	nop
 8007f1a:	371c      	adds	r7, #28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bc80      	pop	{r7}
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	40012c00 	.word	0x40012c00

08007f28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	021b      	lsls	r3, r3, #8
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	031b      	lsls	r3, r3, #12
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a0f      	ldr	r2, [pc, #60]	; (8007fc0 <TIM_OC4_SetConfig+0x98>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d109      	bne.n	8007f9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	019b      	lsls	r3, r3, #6
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	621a      	str	r2, [r3, #32]
}
 8007fb6:	bf00      	nop
 8007fb8:	371c      	adds	r7, #28
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bc80      	pop	{r7}
 8007fbe:	4770      	bx	lr
 8007fc0:	40012c00 	.word	0x40012c00

08007fc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6a1b      	ldr	r3, [r3, #32]
 8007fd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	f023 0201 	bic.w	r2, r3, #1
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f023 030a 	bic.w	r3, r3, #10
 8008000:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	4313      	orrs	r3, r2
 8008008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	621a      	str	r2, [r3, #32]
}
 8008016:	bf00      	nop
 8008018:	371c      	adds	r7, #28
 800801a:	46bd      	mov	sp, r7
 800801c:	bc80      	pop	{r7}
 800801e:	4770      	bx	lr

08008020 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a1b      	ldr	r3, [r3, #32]
 8008030:	f023 0210 	bic.w	r2, r3, #16
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800804a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	031b      	lsls	r3, r3, #12
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	4313      	orrs	r3, r2
 8008054:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800805c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	011b      	lsls	r3, r3, #4
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	4313      	orrs	r3, r2
 8008066:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	621a      	str	r2, [r3, #32]
}
 8008074:	bf00      	nop
 8008076:	371c      	adds	r7, #28
 8008078:	46bd      	mov	sp, r7
 800807a:	bc80      	pop	{r7}
 800807c:	4770      	bx	lr

0800807e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800807e:	b480      	push	{r7}
 8008080:	b085      	sub	sp, #20
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008094:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008096:	683a      	ldr	r2, [r7, #0]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4313      	orrs	r3, r2
 800809c:	f043 0307 	orr.w	r3, r3, #7
 80080a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	609a      	str	r2, [r3, #8]
}
 80080a8:	bf00      	nop
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bc80      	pop	{r7}
 80080b0:	4770      	bx	lr

080080b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b087      	sub	sp, #28
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	60b9      	str	r1, [r7, #8]
 80080bc:	607a      	str	r2, [r7, #4]
 80080be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	021a      	lsls	r2, r3, #8
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	431a      	orrs	r2, r3
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	4313      	orrs	r3, r2
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	4313      	orrs	r3, r2
 80080de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	609a      	str	r2, [r3, #8]
}
 80080e6:	bf00      	nop
 80080e8:	371c      	adds	r7, #28
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bc80      	pop	{r7}
 80080ee:	4770      	bx	lr

080080f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008100:	2b01      	cmp	r3, #1
 8008102:	d101      	bne.n	8008108 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008104:	2302      	movs	r3, #2
 8008106:	e04b      	b.n	80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2202      	movs	r2, #2
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800812e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	4313      	orrs	r3, r2
 8008138:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a19      	ldr	r2, [pc, #100]	; (80081ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d013      	beq.n	8008174 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008154:	d00e      	beq.n	8008174 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a15      	ldr	r2, [pc, #84]	; (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d009      	beq.n	8008174 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a13      	ldr	r2, [pc, #76]	; (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d004      	beq.n	8008174 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a12      	ldr	r2, [pc, #72]	; (80081b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d10c      	bne.n	800818e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800817a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	4313      	orrs	r3, r2
 8008184:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bc80      	pop	{r7}
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	40012c00 	.word	0x40012c00
 80081b0:	40000400 	.word	0x40000400
 80081b4:	40000800 	.word	0x40000800
 80081b8:	40000c00 	.word	0x40000c00

080081bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d101      	bne.n	80081d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80081d4:	2302      	movs	r3, #2
 80081d6:	e03d      	b.n	8008254 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	4313      	orrs	r3, r2
 8008208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4313      	orrs	r3, r2
 8008216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	4313      	orrs	r3, r2
 8008224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	4313      	orrs	r3, r2
 8008232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	4313      	orrs	r3, r2
 8008240:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	bc80      	pop	{r7}
 800825c:	4770      	bx	lr

0800825e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800825e:	b480      	push	{r7}
 8008260:	b083      	sub	sp, #12
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008266:	bf00      	nop
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	bc80      	pop	{r7}
 800826e:	4770      	bx	lr

08008270 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	bc80      	pop	{r7}
 8008280:	4770      	bx	lr

08008282 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b082      	sub	sp, #8
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e03f      	b.n	8008314 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b00      	cmp	r3, #0
 800829e:	d106      	bne.n	80082ae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f7fc f987 	bl	80045bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2224      	movs	r2, #36	; 0x24
 80082b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68da      	ldr	r2, [r3, #12]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f904 	bl	80084d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	691a      	ldr	r2, [r3, #16]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	695a      	ldr	r2, [r3, #20]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082ea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68da      	ldr	r2, [r3, #12]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2220      	movs	r2, #32
 8008306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2220      	movs	r2, #32
 800830e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b08a      	sub	sp, #40	; 0x28
 8008320:	af02      	add	r7, sp, #8
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	603b      	str	r3, [r7, #0]
 8008328:	4613      	mov	r3, r2
 800832a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800832c:	2300      	movs	r3, #0
 800832e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b20      	cmp	r3, #32
 800833a:	d17c      	bne.n	8008436 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <HAL_UART_Transmit+0x2c>
 8008342:	88fb      	ldrh	r3, [r7, #6]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e075      	b.n	8008438 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008352:	2b01      	cmp	r3, #1
 8008354:	d101      	bne.n	800835a <HAL_UART_Transmit+0x3e>
 8008356:	2302      	movs	r3, #2
 8008358:	e06e      	b.n	8008438 <HAL_UART_Transmit+0x11c>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2221      	movs	r2, #33	; 0x21
 800836c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008370:	f7fc fbd0 	bl	8004b14 <HAL_GetTick>
 8008374:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	88fa      	ldrh	r2, [r7, #6]
 800837a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	88fa      	ldrh	r2, [r7, #6]
 8008380:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800838a:	d108      	bne.n	800839e <HAL_UART_Transmit+0x82>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d104      	bne.n	800839e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008394:	2300      	movs	r3, #0
 8008396:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	61bb      	str	r3, [r7, #24]
 800839c:	e003      	b.n	80083a6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80083ae:	e02a      	b.n	8008406 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	2200      	movs	r2, #0
 80083b8:	2180      	movs	r1, #128	; 0x80
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f000 f840 	bl	8008440 <UART_WaitOnFlagUntilTimeout>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e036      	b.n	8008438 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10b      	bne.n	80083e8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	461a      	mov	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083de:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	3302      	adds	r3, #2
 80083e4:	61bb      	str	r3, [r7, #24]
 80083e6:	e007      	b.n	80083f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	781a      	ldrb	r2, [r3, #0]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	3301      	adds	r3, #1
 80083f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	3b01      	subs	r3, #1
 8008400:	b29a      	uxth	r2, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800840a:	b29b      	uxth	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1cf      	bne.n	80083b0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	2200      	movs	r2, #0
 8008418:	2140      	movs	r1, #64	; 0x40
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f000 f810 	bl	8008440 <UART_WaitOnFlagUntilTimeout>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	e006      	b.n	8008438 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2220      	movs	r2, #32
 800842e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008432:	2300      	movs	r3, #0
 8008434:	e000      	b.n	8008438 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008436:	2302      	movs	r3, #2
  }
}
 8008438:	4618      	mov	r0, r3
 800843a:	3720      	adds	r7, #32
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	603b      	str	r3, [r7, #0]
 800844c:	4613      	mov	r3, r2
 800844e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008450:	e02c      	b.n	80084ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008458:	d028      	beq.n	80084ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d007      	beq.n	8008470 <UART_WaitOnFlagUntilTimeout+0x30>
 8008460:	f7fc fb58 	bl	8004b14 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	69ba      	ldr	r2, [r7, #24]
 800846c:	429a      	cmp	r2, r3
 800846e:	d21d      	bcs.n	80084ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68da      	ldr	r2, [r3, #12]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800847e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	695a      	ldr	r2, [r3, #20]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 0201 	bic.w	r2, r2, #1
 800848e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2220      	movs	r2, #32
 8008494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2220      	movs	r2, #32
 800849c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e00f      	b.n	80084cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	4013      	ands	r3, r2
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	bf0c      	ite	eq
 80084bc:	2301      	moveq	r3, #1
 80084be:	2300      	movne	r3, #0
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	461a      	mov	r2, r3
 80084c4:	79fb      	ldrb	r3, [r7, #7]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d0c3      	beq.n	8008452 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689a      	ldr	r2, [r3, #8]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	431a      	orrs	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	695b      	ldr	r3, [r3, #20]
 8008500:	4313      	orrs	r3, r2
 8008502:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800850e:	f023 030c 	bic.w	r3, r3, #12
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	6812      	ldr	r2, [r2, #0]
 8008516:	68b9      	ldr	r1, [r7, #8]
 8008518:	430b      	orrs	r3, r1
 800851a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	699a      	ldr	r2, [r3, #24]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	430a      	orrs	r2, r1
 8008530:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a2c      	ldr	r2, [pc, #176]	; (80085e8 <UART_SetConfig+0x114>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d103      	bne.n	8008544 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800853c:	f7fe f92e 	bl	800679c <HAL_RCC_GetPCLK2Freq>
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	e002      	b.n	800854a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008544:	f7fe f916 	bl	8006774 <HAL_RCC_GetPCLK1Freq>
 8008548:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	4613      	mov	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	009a      	lsls	r2, r3, #2
 8008554:	441a      	add	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008560:	4a22      	ldr	r2, [pc, #136]	; (80085ec <UART_SetConfig+0x118>)
 8008562:	fba2 2303 	umull	r2, r3, r2, r3
 8008566:	095b      	lsrs	r3, r3, #5
 8008568:	0119      	lsls	r1, r3, #4
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	4613      	mov	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	009a      	lsls	r2, r3, #2
 8008574:	441a      	add	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008580:	4b1a      	ldr	r3, [pc, #104]	; (80085ec <UART_SetConfig+0x118>)
 8008582:	fba3 0302 	umull	r0, r3, r3, r2
 8008586:	095b      	lsrs	r3, r3, #5
 8008588:	2064      	movs	r0, #100	; 0x64
 800858a:	fb00 f303 	mul.w	r3, r0, r3
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	011b      	lsls	r3, r3, #4
 8008592:	3332      	adds	r3, #50	; 0x32
 8008594:	4a15      	ldr	r2, [pc, #84]	; (80085ec <UART_SetConfig+0x118>)
 8008596:	fba2 2303 	umull	r2, r3, r2, r3
 800859a:	095b      	lsrs	r3, r3, #5
 800859c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085a0:	4419      	add	r1, r3
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	4613      	mov	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	009a      	lsls	r2, r3, #2
 80085ac:	441a      	add	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80085b8:	4b0c      	ldr	r3, [pc, #48]	; (80085ec <UART_SetConfig+0x118>)
 80085ba:	fba3 0302 	umull	r0, r3, r3, r2
 80085be:	095b      	lsrs	r3, r3, #5
 80085c0:	2064      	movs	r0, #100	; 0x64
 80085c2:	fb00 f303 	mul.w	r3, r0, r3
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	011b      	lsls	r3, r3, #4
 80085ca:	3332      	adds	r3, #50	; 0x32
 80085cc:	4a07      	ldr	r2, [pc, #28]	; (80085ec <UART_SetConfig+0x118>)
 80085ce:	fba2 2303 	umull	r2, r3, r2, r3
 80085d2:	095b      	lsrs	r3, r3, #5
 80085d4:	f003 020f 	and.w	r2, r3, #15
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	440a      	add	r2, r1
 80085de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80085e0:	bf00      	nop
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	40013800 	.word	0x40013800
 80085ec:	51eb851f 	.word	0x51eb851f

080085f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80085f4:	4904      	ldr	r1, [pc, #16]	; (8008608 <MX_FATFS_Init+0x18>)
 80085f6:	4805      	ldr	r0, [pc, #20]	; (800860c <MX_FATFS_Init+0x1c>)
 80085f8:	f003 fe30 	bl	800c25c <FATFS_LinkDriver>
 80085fc:	4603      	mov	r3, r0
 80085fe:	461a      	mov	r2, r3
 8008600:	4b03      	ldr	r3, [pc, #12]	; (8008610 <MX_FATFS_Init+0x20>)
 8008602:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008604:	bf00      	nop
 8008606:	bd80      	pop	{r7, pc}
 8008608:	200027e4 	.word	0x200027e4
 800860c:	20000020 	.word	0x20000020
 8008610:	200027e8 	.word	0x200027e8

08008614 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008614:	b480      	push	{r7}
 8008616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008618:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800861a:	4618      	mov	r0, r3
 800861c:	46bd      	mov	sp, r7
 800861e:	bc80      	pop	{r7}
 8008620:	4770      	bx	lr

08008622 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b082      	sub	sp, #8
 8008626:	af00      	add	r7, sp, #0
 8008628:	4603      	mov	r3, r0
 800862a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800862c:	79fb      	ldrb	r3, [r7, #7]
 800862e:	4618      	mov	r0, r3
 8008630:	f7f9 fa5a 	bl	8001ae8 <SD_disk_initialize>
 8008634:	4603      	mov	r3, r0
 8008636:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008638:	4618      	mov	r0, r3
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	4618      	mov	r0, r3
 800864e:	f7f9 fb35 	bl	8001cbc <SD_disk_status>
 8008652:	4603      	mov	r3, r0
 8008654:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
 8008668:	603b      	str	r3, [r7, #0]
 800866a:	4603      	mov	r3, r0
 800866c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800866e:	7bf8      	ldrb	r0, [r7, #15]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	68b9      	ldr	r1, [r7, #8]
 8008676:	f7f9 fb35 	bl	8001ce4 <SD_disk_read>
 800867a:	4603      	mov	r3, r0
 800867c:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b084      	sub	sp, #16
 800868a:	af00      	add	r7, sp, #0
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	603b      	str	r3, [r7, #0]
 8008692:	4603      	mov	r3, r0
 8008694:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8008696:	7bf8      	ldrb	r0, [r7, #15]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	68b9      	ldr	r1, [r7, #8]
 800869e:	f7f9 fb8b 	bl	8001db8 <SD_disk_write>
 80086a2:	4603      	mov	r3, r0
 80086a4:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b082      	sub	sp, #8
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	4603      	mov	r3, r0
 80086b6:	603a      	str	r2, [r7, #0]
 80086b8:	71fb      	strb	r3, [r7, #7]
 80086ba:	460b      	mov	r3, r1
 80086bc:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80086be:	79fb      	ldrb	r3, [r7, #7]
 80086c0:	79b9      	ldrb	r1, [r7, #6]
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7f9 fbfb 	bl	8001ec0 <SD_disk_ioctl>
 80086ca:	4603      	mov	r3, r0
 80086cc:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
	...

080086d8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	4603      	mov	r3, r0
 80086e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80086e2:	79fb      	ldrb	r3, [r7, #7]
 80086e4:	4a08      	ldr	r2, [pc, #32]	; (8008708 <disk_status+0x30>)
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	79fa      	ldrb	r2, [r7, #7]
 80086f0:	4905      	ldr	r1, [pc, #20]	; (8008708 <disk_status+0x30>)
 80086f2:	440a      	add	r2, r1
 80086f4:	7a12      	ldrb	r2, [r2, #8]
 80086f6:	4610      	mov	r0, r2
 80086f8:	4798      	blx	r3
 80086fa:	4603      	mov	r3, r0
 80086fc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	20000448 	.word	0x20000448

0800870c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	4603      	mov	r3, r0
 8008714:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800871a:	79fb      	ldrb	r3, [r7, #7]
 800871c:	4a0d      	ldr	r2, [pc, #52]	; (8008754 <disk_initialize+0x48>)
 800871e:	5cd3      	ldrb	r3, [r2, r3]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d111      	bne.n	8008748 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8008724:	79fb      	ldrb	r3, [r7, #7]
 8008726:	4a0b      	ldr	r2, [pc, #44]	; (8008754 <disk_initialize+0x48>)
 8008728:	2101      	movs	r1, #1
 800872a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800872c:	79fb      	ldrb	r3, [r7, #7]
 800872e:	4a09      	ldr	r2, [pc, #36]	; (8008754 <disk_initialize+0x48>)
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	79fa      	ldrb	r2, [r7, #7]
 800873a:	4906      	ldr	r1, [pc, #24]	; (8008754 <disk_initialize+0x48>)
 800873c:	440a      	add	r2, r1
 800873e:	7a12      	ldrb	r2, [r2, #8]
 8008740:	4610      	mov	r0, r2
 8008742:	4798      	blx	r3
 8008744:	4603      	mov	r3, r0
 8008746:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008748:	7bfb      	ldrb	r3, [r7, #15]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20000448 	.word	0x20000448

08008758 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008758:	b590      	push	{r4, r7, lr}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	60b9      	str	r1, [r7, #8]
 8008760:	607a      	str	r2, [r7, #4]
 8008762:	603b      	str	r3, [r7, #0]
 8008764:	4603      	mov	r3, r0
 8008766:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	4a0a      	ldr	r2, [pc, #40]	; (8008794 <disk_read+0x3c>)
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	689c      	ldr	r4, [r3, #8]
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	4a07      	ldr	r2, [pc, #28]	; (8008794 <disk_read+0x3c>)
 8008778:	4413      	add	r3, r2
 800877a:	7a18      	ldrb	r0, [r3, #8]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	68b9      	ldr	r1, [r7, #8]
 8008782:	47a0      	blx	r4
 8008784:	4603      	mov	r3, r0
 8008786:	75fb      	strb	r3, [r7, #23]
  return res;
 8008788:	7dfb      	ldrb	r3, [r7, #23]
}
 800878a:	4618      	mov	r0, r3
 800878c:	371c      	adds	r7, #28
 800878e:	46bd      	mov	sp, r7
 8008790:	bd90      	pop	{r4, r7, pc}
 8008792:	bf00      	nop
 8008794:	20000448 	.word	0x20000448

08008798 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008798:	b590      	push	{r4, r7, lr}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	60b9      	str	r1, [r7, #8]
 80087a0:	607a      	str	r2, [r7, #4]
 80087a2:	603b      	str	r3, [r7, #0]
 80087a4:	4603      	mov	r3, r0
 80087a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
 80087aa:	4a0a      	ldr	r2, [pc, #40]	; (80087d4 <disk_write+0x3c>)
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	68dc      	ldr	r4, [r3, #12]
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
 80087b6:	4a07      	ldr	r2, [pc, #28]	; (80087d4 <disk_write+0x3c>)
 80087b8:	4413      	add	r3, r2
 80087ba:	7a18      	ldrb	r0, [r3, #8]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	68b9      	ldr	r1, [r7, #8]
 80087c2:	47a0      	blx	r4
 80087c4:	4603      	mov	r3, r0
 80087c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80087c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	371c      	adds	r7, #28
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd90      	pop	{r4, r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20000448 	.word	0x20000448

080087d8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	603a      	str	r2, [r7, #0]
 80087e2:	71fb      	strb	r3, [r7, #7]
 80087e4:	460b      	mov	r3, r1
 80087e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80087e8:	79fb      	ldrb	r3, [r7, #7]
 80087ea:	4a09      	ldr	r2, [pc, #36]	; (8008810 <disk_ioctl+0x38>)
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	79fa      	ldrb	r2, [r7, #7]
 80087f6:	4906      	ldr	r1, [pc, #24]	; (8008810 <disk_ioctl+0x38>)
 80087f8:	440a      	add	r2, r1
 80087fa:	7a10      	ldrb	r0, [r2, #8]
 80087fc:	79b9      	ldrb	r1, [r7, #6]
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	4798      	blx	r3
 8008802:	4603      	mov	r3, r0
 8008804:	73fb      	strb	r3, [r7, #15]
  return res;
 8008806:	7bfb      	ldrb	r3, [r7, #15]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	20000448 	.word	0x20000448

08008814 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8008828:	e007      	b.n	800883a <mem_cpy+0x26>
		*d++ = *s++;
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	1c53      	adds	r3, r2, #1
 800882e:	613b      	str	r3, [r7, #16]
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	1c59      	adds	r1, r3, #1
 8008834:	6179      	str	r1, [r7, #20]
 8008836:	7812      	ldrb	r2, [r2, #0]
 8008838:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	1e5a      	subs	r2, r3, #1
 800883e:	607a      	str	r2, [r7, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1f2      	bne.n	800882a <mem_cpy+0x16>
}
 8008844:	bf00      	nop
 8008846:	bf00      	nop
 8008848:	371c      	adds	r7, #28
 800884a:	46bd      	mov	sp, r7
 800884c:	bc80      	pop	{r7}
 800884e:	4770      	bx	lr

08008850 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008850:	b480      	push	{r7}
 8008852:	b087      	sub	sp, #28
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8008860:	e005      	b.n	800886e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	1c5a      	adds	r2, r3, #1
 8008866:	617a      	str	r2, [r7, #20]
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	b2d2      	uxtb	r2, r2
 800886c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	1e5a      	subs	r2, r3, #1
 8008872:	607a      	str	r2, [r7, #4]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1f4      	bne.n	8008862 <mem_set+0x12>
}
 8008878:	bf00      	nop
 800887a:	bf00      	nop
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	bc80      	pop	{r7}
 8008882:	4770      	bx	lr

08008884 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8008884:	b480      	push	{r7}
 8008886:	b089      	sub	sp, #36	; 0x24
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	61fb      	str	r3, [r7, #28]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008898:	2300      	movs	r3, #0
 800889a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800889c:	bf00      	nop
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	1e5a      	subs	r2, r3, #1
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00d      	beq.n	80088c4 <mem_cmp+0x40>
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	1c5a      	adds	r2, r3, #1
 80088ac:	61fa      	str	r2, [r7, #28]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	4619      	mov	r1, r3
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	1c5a      	adds	r2, r3, #1
 80088b6:	61ba      	str	r2, [r7, #24]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	1acb      	subs	r3, r1, r3
 80088bc:	617b      	str	r3, [r7, #20]
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d0ec      	beq.n	800889e <mem_cmp+0x1a>
	return r;
 80088c4:	697b      	ldr	r3, [r7, #20]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3724      	adds	r7, #36	; 0x24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bc80      	pop	{r7}
 80088ce:	4770      	bx	lr

080088d0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80088da:	e002      	b.n	80088e2 <chk_chr+0x12>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	3301      	adds	r3, #1
 80088e0:	607b      	str	r3, [r7, #4]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d005      	beq.n	80088f6 <chk_chr+0x26>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	461a      	mov	r2, r3
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d1f2      	bne.n	80088dc <chk_chr+0xc>
	return *str;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	781b      	ldrb	r3, [r3, #0]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	370c      	adds	r7, #12
 80088fe:	46bd      	mov	sp, r7
 8008900:	bc80      	pop	{r7}
 8008902:	4770      	bx	lr

08008904 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800890e:	2300      	movs	r3, #0
 8008910:	60bb      	str	r3, [r7, #8]
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	60fb      	str	r3, [r7, #12]
 8008916:	e03d      	b.n	8008994 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 8008918:	4932      	ldr	r1, [pc, #200]	; (80089e4 <chk_lock+0xe0>)
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	4613      	mov	r3, r2
 800891e:	005b      	lsls	r3, r3, #1
 8008920:	4413      	add	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	440b      	add	r3, r1
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d02e      	beq.n	800898a <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800892c:	492d      	ldr	r1, [pc, #180]	; (80089e4 <chk_lock+0xe0>)
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	4613      	mov	r3, r2
 8008932:	005b      	lsls	r3, r3, #1
 8008934:	4413      	add	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	440b      	add	r3, r1
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	429a      	cmp	r2, r3
 8008946:	d122      	bne.n	800898e <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 8008948:	4926      	ldr	r1, [pc, #152]	; (80089e4 <chk_lock+0xe0>)
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	4613      	mov	r3, r2
 800894e:	005b      	lsls	r3, r3, #1
 8008950:	4413      	add	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	440b      	add	r3, r1
 8008956:	3304      	adds	r3, #4
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008960:	3308      	adds	r3, #8
 8008962:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008964:	429a      	cmp	r2, r3
 8008966:	d112      	bne.n	800898e <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8008968:	491e      	ldr	r1, [pc, #120]	; (80089e4 <chk_lock+0xe0>)
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	4613      	mov	r3, r2
 800896e:	005b      	lsls	r3, r3, #1
 8008970:	4413      	add	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	440b      	add	r3, r1
 8008976:	3308      	adds	r3, #8
 8008978:	881a      	ldrh	r2, [r3, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008980:	3306      	adds	r3, #6
 8008982:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 8008984:	429a      	cmp	r2, r3
 8008986:	d102      	bne.n	800898e <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8008988:	e007      	b.n	800899a <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 800898a:	2301      	movs	r3, #1
 800898c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	3301      	adds	r3, #1
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d9be      	bls.n	8008918 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2b02      	cmp	r3, #2
 800899e:	d109      	bne.n	80089b4 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d102      	bne.n	80089ac <chk_lock+0xa8>
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d101      	bne.n	80089b0 <chk_lock+0xac>
 80089ac:	2300      	movs	r3, #0
 80089ae:	e013      	b.n	80089d8 <chk_lock+0xd4>
 80089b0:	2312      	movs	r3, #18
 80089b2:	e011      	b.n	80089d8 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d10b      	bne.n	80089d2 <chk_lock+0xce>
 80089ba:	490a      	ldr	r1, [pc, #40]	; (80089e4 <chk_lock+0xe0>)
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	4613      	mov	r3, r2
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	4413      	add	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	440b      	add	r3, r1
 80089c8:	330a      	adds	r3, #10
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089d0:	d101      	bne.n	80089d6 <chk_lock+0xd2>
 80089d2:	2310      	movs	r3, #16
 80089d4:	e000      	b.n	80089d8 <chk_lock+0xd4>
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	20000230 	.word	0x20000230

080089e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80089ee:	2300      	movs	r3, #0
 80089f0:	607b      	str	r3, [r7, #4]
 80089f2:	e002      	b.n	80089fa <enq_lock+0x12>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	3301      	adds	r3, #1
 80089f8:	607b      	str	r3, [r7, #4]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d809      	bhi.n	8008a14 <enq_lock+0x2c>
 8008a00:	490a      	ldr	r1, [pc, #40]	; (8008a2c <enq_lock+0x44>)
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	4613      	mov	r3, r2
 8008a06:	005b      	lsls	r3, r3, #1
 8008a08:	4413      	add	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	440b      	add	r3, r1
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1ef      	bne.n	80089f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	bf14      	ite	ne
 8008a1a:	2301      	movne	r3, #1
 8008a1c:	2300      	moveq	r3, #0
 8008a1e:	b2db      	uxtb	r3, r3
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bc80      	pop	{r7}
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	20000230 	.word	0x20000230

08008a30 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	60fb      	str	r3, [r7, #12]
 8008a3e:	e030      	b.n	8008aa2 <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 8008a40:	495a      	ldr	r1, [pc, #360]	; (8008bac <inc_lock+0x17c>)
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	4613      	mov	r3, r2
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	4413      	add	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	440b      	add	r3, r1
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d11f      	bne.n	8008a9c <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 8008a5c:	4953      	ldr	r1, [pc, #332]	; (8008bac <inc_lock+0x17c>)
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	4613      	mov	r3, r2
 8008a62:	005b      	lsls	r3, r3, #1
 8008a64:	4413      	add	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	440b      	add	r3, r1
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a74:	3308      	adds	r3, #8
 8008a76:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d10f      	bne.n	8008a9c <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8008a7c:	494b      	ldr	r1, [pc, #300]	; (8008bac <inc_lock+0x17c>)
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	4613      	mov	r3, r2
 8008a82:	005b      	lsls	r3, r3, #1
 8008a84:	4413      	add	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	440b      	add	r3, r1
 8008a8a:	3308      	adds	r3, #8
 8008a8c:	881a      	ldrh	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a94:	3306      	adds	r3, #6
 8008a96:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d006      	beq.n	8008aaa <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	60fb      	str	r3, [r7, #12]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d9cb      	bls.n	8008a40 <inc_lock+0x10>
 8008aa8:	e000      	b.n	8008aac <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 8008aaa:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d14a      	bne.n	8008b48 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60fb      	str	r3, [r7, #12]
 8008ab6:	e002      	b.n	8008abe <inc_lock+0x8e>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	3301      	adds	r3, #1
 8008abc:	60fb      	str	r3, [r7, #12]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d809      	bhi.n	8008ad8 <inc_lock+0xa8>
 8008ac4:	4939      	ldr	r1, [pc, #228]	; (8008bac <inc_lock+0x17c>)
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	005b      	lsls	r3, r3, #1
 8008acc:	4413      	add	r3, r2
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	440b      	add	r3, r1
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1ef      	bne.n	8008ab8 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d101      	bne.n	8008ae2 <inc_lock+0xb2>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	e05f      	b.n	8008ba2 <inc_lock+0x172>
		Files[i].fs = dp->fs;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ae8:	6819      	ldr	r1, [r3, #0]
 8008aea:	4830      	ldr	r0, [pc, #192]	; (8008bac <inc_lock+0x17c>)
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4613      	mov	r3, r2
 8008af0:	005b      	lsls	r3, r3, #1
 8008af2:	4413      	add	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4403      	add	r3, r0
 8008af8:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b00:	3308      	adds	r3, #8
 8008b02:	6819      	ldr	r1, [r3, #0]
 8008b04:	4829      	ldr	r0, [pc, #164]	; (8008bac <inc_lock+0x17c>)
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4403      	add	r3, r0
 8008b12:	3304      	adds	r3, #4
 8008b14:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b1c:	3306      	adds	r3, #6
 8008b1e:	8818      	ldrh	r0, [r3, #0]
 8008b20:	4922      	ldr	r1, [pc, #136]	; (8008bac <inc_lock+0x17c>)
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	4613      	mov	r3, r2
 8008b26:	005b      	lsls	r3, r3, #1
 8008b28:	4413      	add	r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	440b      	add	r3, r1
 8008b2e:	3308      	adds	r3, #8
 8008b30:	4602      	mov	r2, r0
 8008b32:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8008b34:	491d      	ldr	r1, [pc, #116]	; (8008bac <inc_lock+0x17c>)
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	005b      	lsls	r3, r3, #1
 8008b3c:	4413      	add	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	440b      	add	r3, r1
 8008b42:	330a      	adds	r3, #10
 8008b44:	2200      	movs	r2, #0
 8008b46:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00c      	beq.n	8008b68 <inc_lock+0x138>
 8008b4e:	4917      	ldr	r1, [pc, #92]	; (8008bac <inc_lock+0x17c>)
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	4613      	mov	r3, r2
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	4413      	add	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	440b      	add	r3, r1
 8008b5c:	330a      	adds	r3, #10
 8008b5e:	881b      	ldrh	r3, [r3, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <inc_lock+0x138>
 8008b64:	2300      	movs	r3, #0
 8008b66:	e01c      	b.n	8008ba2 <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10b      	bne.n	8008b86 <inc_lock+0x156>
 8008b6e:	490f      	ldr	r1, [pc, #60]	; (8008bac <inc_lock+0x17c>)
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	4613      	mov	r3, r2
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	4413      	add	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	440b      	add	r3, r1
 8008b7c:	330a      	adds	r3, #10
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	3301      	adds	r3, #1
 8008b82:	b299      	uxth	r1, r3
 8008b84:	e001      	b.n	8008b8a <inc_lock+0x15a>
 8008b86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008b8a:	4808      	ldr	r0, [pc, #32]	; (8008bac <inc_lock+0x17c>)
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	4613      	mov	r3, r2
 8008b90:	005b      	lsls	r3, r3, #1
 8008b92:	4413      	add	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4403      	add	r3, r0
 8008b98:	330a      	adds	r3, #10
 8008b9a:	460a      	mov	r2, r1
 8008b9c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	3301      	adds	r3, #1
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bc80      	pop	{r7}
 8008baa:	4770      	bx	lr
 8008bac:	20000230 	.word	0x20000230

08008bb0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	607b      	str	r3, [r7, #4]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d82e      	bhi.n	8008c22 <dec_lock+0x72>
		n = Files[i].ctr;
 8008bc4:	491b      	ldr	r1, [pc, #108]	; (8008c34 <dec_lock+0x84>)
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	005b      	lsls	r3, r3, #1
 8008bcc:	4413      	add	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	440b      	add	r3, r1
 8008bd2:	330a      	adds	r3, #10
 8008bd4:	881b      	ldrh	r3, [r3, #0]
 8008bd6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008bd8:	89fb      	ldrh	r3, [r7, #14]
 8008bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bde:	d101      	bne.n	8008be4 <dec_lock+0x34>
 8008be0:	2300      	movs	r3, #0
 8008be2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8008be4:	89fb      	ldrh	r3, [r7, #14]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d002      	beq.n	8008bf0 <dec_lock+0x40>
 8008bea:	89fb      	ldrh	r3, [r7, #14]
 8008bec:	3b01      	subs	r3, #1
 8008bee:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008bf0:	4910      	ldr	r1, [pc, #64]	; (8008c34 <dec_lock+0x84>)
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	4413      	add	r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	440b      	add	r3, r1
 8008bfe:	330a      	adds	r3, #10
 8008c00:	89fa      	ldrh	r2, [r7, #14]
 8008c02:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008c04:	89fb      	ldrh	r3, [r7, #14]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d108      	bne.n	8008c1c <dec_lock+0x6c>
 8008c0a:	490a      	ldr	r1, [pc, #40]	; (8008c34 <dec_lock+0x84>)
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	005b      	lsls	r3, r3, #1
 8008c12:	4413      	add	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	440b      	add	r3, r1
 8008c18:	2200      	movs	r2, #0
 8008c1a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	737b      	strb	r3, [r7, #13]
 8008c20:	e001      	b.n	8008c26 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008c22:	2302      	movs	r3, #2
 8008c24:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008c26:	7b7b      	ldrb	r3, [r7, #13]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bc80      	pop	{r7}
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	20000230 	.word	0x20000230

08008c38 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008c40:	2300      	movs	r3, #0
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	e016      	b.n	8008c74 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008c46:	4910      	ldr	r1, [pc, #64]	; (8008c88 <clear_lock+0x50>)
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	005b      	lsls	r3, r3, #1
 8008c4e:	4413      	add	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	440b      	add	r3, r1
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d108      	bne.n	8008c6e <clear_lock+0x36>
 8008c5c:	490a      	ldr	r1, [pc, #40]	; (8008c88 <clear_lock+0x50>)
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	4613      	mov	r3, r2
 8008c62:	005b      	lsls	r3, r3, #1
 8008c64:	4413      	add	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	440b      	add	r3, r1
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	3301      	adds	r3, #1
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d9e5      	bls.n	8008c46 <clear_lock+0xe>
	}
}
 8008c7a:	bf00      	nop
 8008c7c:	bf00      	nop
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bc80      	pop	{r7}
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	20000230 	.word	0x20000230

08008c8c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c9e:	3304      	adds	r3, #4
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d047      	beq.n	8008d36 <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008cac:	330c      	adds	r3, #12
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb8:	3301      	adds	r3, #1
 8008cba:	7818      	ldrb	r0, [r3, #0]
 8008cbc:	6879      	ldr	r1, [r7, #4]
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	f7ff fd69 	bl	8008798 <disk_write>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d002      	beq.n	8008cd2 <sync_window+0x46>
			res = FR_DISK_ERR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	73fb      	strb	r3, [r7, #15]
 8008cd0:	e031      	b.n	8008d36 <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cd8:	3304      	adds	r3, #4
 8008cda:	2200      	movs	r2, #0
 8008cdc:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	1ad2      	subs	r2, r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cf0:	3318      	adds	r3, #24
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d21e      	bcs.n	8008d36 <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cfe:	3303      	adds	r3, #3
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	613b      	str	r3, [r7, #16]
 8008d04:	e014      	b.n	8008d30 <sync_window+0xa4>
					wsect += fs->fsize;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d0c:	3318      	adds	r3, #24
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	4413      	add	r3, r2
 8008d14:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	7818      	ldrb	r0, [r3, #0]
 8008d20:	6879      	ldr	r1, [r7, #4]
 8008d22:	2301      	movs	r3, #1
 8008d24:	697a      	ldr	r2, [r7, #20]
 8008d26:	f7ff fd37 	bl	8008798 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	613b      	str	r3, [r7, #16]
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d8e7      	bhi.n	8008d06 <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3718      	adds	r7, #24
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008d54:	330c      	adds	r3, #12
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d01f      	beq.n	8008d9e <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7ff ff94 	bl	8008c8c <sync_window>
 8008d64:	4603      	mov	r3, r0
 8008d66:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d117      	bne.n	8008d9e <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d74:	3301      	adds	r3, #1
 8008d76:	7818      	ldrb	r0, [r3, #0]
 8008d78:	6879      	ldr	r1, [r7, #4]
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	683a      	ldr	r2, [r7, #0]
 8008d7e:	f7ff fceb 	bl	8008758 <disk_read>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d004      	beq.n	8008d92 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008d88:	f04f 33ff 	mov.w	r3, #4294967295
 8008d8c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008d98:	330c      	adds	r3, #12
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f7ff ff6b 	bl	8008c8c <sync_window>
 8008db6:	4603      	mov	r3, r0
 8008db8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008dba:	7bfb      	ldrb	r3, [r7, #15]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f040 80bd 	bne.w	8008f3c <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	f040 80a7 	bne.w	8008f1e <sync_fs+0x176>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dd6:	3305      	adds	r3, #5
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	f040 809f 	bne.w	8008f1e <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008de8:	330a      	adds	r3, #10
 8008dea:	881b      	ldrh	r3, [r3, #0]
 8008dec:	461a      	mov	r2, r3
 8008dee:	2100      	movs	r1, #0
 8008df0:	f7ff fd2e 	bl	8008850 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2255      	movs	r2, #85	; 0x55
 8008df8:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	22aa      	movs	r2, #170	; 0xaa
 8008e00:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2252      	movs	r2, #82	; 0x52
 8008e08:	701a      	strb	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2252      	movs	r2, #82	; 0x52
 8008e0e:	705a      	strb	r2, [r3, #1]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2261      	movs	r2, #97	; 0x61
 8008e14:	709a      	strb	r2, [r3, #2]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2241      	movs	r2, #65	; 0x41
 8008e1a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2272      	movs	r2, #114	; 0x72
 8008e20:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2272      	movs	r2, #114	; 0x72
 8008e28:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2241      	movs	r2, #65	; 0x41
 8008e30:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2261      	movs	r2, #97	; 0x61
 8008e38:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e42:	3310      	adds	r3, #16
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e54:	3310      	adds	r3, #16
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	0a1b      	lsrs	r3, r3, #8
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	b2da      	uxtb	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e6c:	3310      	adds	r3, #16
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	0c1b      	lsrs	r3, r3, #16
 8008e72:	b2da      	uxtb	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e80:	3310      	adds	r3, #16
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	0e1b      	lsrs	r3, r3, #24
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e94:	330c      	adds	r3, #12
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ea6:	330c      	adds	r3, #12
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	0a1b      	lsrs	r3, r3, #8
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ebe:	330c      	adds	r3, #12
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	0c1b      	lsrs	r3, r3, #16
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ed2:	330c      	adds	r3, #12
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	0e1b      	lsrs	r3, r3, #24
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ee6:	331c      	adds	r3, #28
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	1c5a      	adds	r2, r3, #1
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008ef2:	330c      	adds	r3, #12
 8008ef4:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008efc:	3301      	adds	r3, #1
 8008efe:	7818      	ldrb	r0, [r3, #0]
 8008f00:	6879      	ldr	r1, [r7, #4]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008f08:	330c      	adds	r3, #12
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	f7ff fc43 	bl	8008798 <disk_write>
			fs->fsi_flag = 0;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f18:	3305      	adds	r3, #5
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f24:	3301      	adds	r3, #1
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7ff fc53 	bl	80087d8 <disk_ioctl>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d001      	beq.n	8008f3c <sync_fs+0x194>
			res = FR_DISK_ERR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b083      	sub	sp, #12
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	3b02      	subs	r3, #2
 8008f54:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f5c:	3314      	adds	r3, #20
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3b02      	subs	r3, #2
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d301      	bcc.n	8008f6c <clust2sect+0x26>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	e00e      	b.n	8008f8a <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f72:	3302      	adds	r3, #2
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	461a      	mov	r2, r3
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	fb03 f202 	mul.w	r2, r3, r2
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008f84:	3308      	adds	r3, #8
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4413      	add	r3, r2
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	370c      	adds	r7, #12
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bc80      	pop	{r7}
 8008f92:	4770      	bx	lr

08008f94 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d907      	bls.n	8008fb4 <get_fat+0x20>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008faa:	3314      	adds	r3, #20
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d302      	bcc.n	8008fba <get_fat+0x26>
		val = 1;	/* Internal error */
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	617b      	str	r3, [r7, #20]
 8008fb8:	e0ec      	b.n	8009194 <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008fba:	f04f 33ff 	mov.w	r3, #4294967295
 8008fbe:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	2b03      	cmp	r3, #3
 8008fca:	f000 809e 	beq.w	800910a <get_fat+0x176>
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	f300 80d6 	bgt.w	8009180 <get_fat+0x1ec>
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d002      	beq.n	8008fde <get_fat+0x4a>
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d063      	beq.n	80090a4 <get_fat+0x110>
 8008fdc:	e0d0      	b.n	8009180 <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	60fb      	str	r3, [r7, #12]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	085b      	lsrs	r3, r3, #1
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	4413      	add	r3, r2
 8008fea:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ffa:	330a      	adds	r3, #10
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	4619      	mov	r1, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	fbb3 f3f1 	udiv	r3, r3, r1
 8009006:	4413      	add	r3, r2
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7ff fe98 	bl	8008d40 <move_window>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	f040 80b7 	bne.w	8009186 <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	1c5a      	adds	r2, r3, #1
 800901c:	60fa      	str	r2, [r7, #12]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009024:	320a      	adds	r2, #10
 8009026:	8812      	ldrh	r2, [r2, #0]
 8009028:	fbb3 f1f2 	udiv	r1, r3, r2
 800902c:	fb02 f201 	mul.w	r2, r2, r1
 8009030:	1a9b      	subs	r3, r3, r2
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	5cd3      	ldrb	r3, [r2, r3]
 8009036:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009046:	330a      	adds	r3, #10
 8009048:	881b      	ldrh	r3, [r3, #0]
 800904a:	4619      	mov	r1, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009052:	4413      	add	r3, r2
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7ff fe72 	bl	8008d40 <move_window>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	f040 8093 	bne.w	800918a <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800906a:	330a      	adds	r3, #10
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	461a      	mov	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	fbb3 f1f2 	udiv	r1, r3, r2
 8009076:	fb02 f201 	mul.w	r2, r2, r1
 800907a:	1a9b      	subs	r3, r3, r2
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	5cd3      	ldrb	r3, [r2, r3]
 8009080:	021b      	lsls	r3, r3, #8
 8009082:	461a      	mov	r2, r3
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	4313      	orrs	r3, r2
 8009088:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	f003 0301 	and.w	r3, r3, #1
 8009090:	2b00      	cmp	r3, #0
 8009092:	d002      	beq.n	800909a <get_fat+0x106>
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	091b      	lsrs	r3, r3, #4
 8009098:	e002      	b.n	80090a0 <get_fat+0x10c>
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090a0:	617b      	str	r3, [r7, #20]
			break;
 80090a2:	e077      	b.n	8009194 <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090b2:	330a      	adds	r3, #10
 80090b4:	881b      	ldrh	r3, [r3, #0]
 80090b6:	085b      	lsrs	r3, r3, #1
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	4619      	mov	r1, r3
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	fbb3 f3f1 	udiv	r3, r3, r1
 80090c2:	4413      	add	r3, r2
 80090c4:	4619      	mov	r1, r3
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7ff fe3a 	bl	8008d40 <move_window>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d15d      	bne.n	800918e <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	005a      	lsls	r2, r3, #1
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090dc:	330a      	adds	r3, #10
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80090e4:	fb03 f301 	mul.w	r3, r3, r1
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	4413      	add	r3, r2
 80090ee:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	3301      	adds	r3, #1
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	021b      	lsls	r3, r3, #8
 80090f8:	b21a      	sxth	r2, r3
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	b21b      	sxth	r3, r3
 8009100:	4313      	orrs	r3, r2
 8009102:	b21b      	sxth	r3, r3
 8009104:	b29b      	uxth	r3, r3
 8009106:	617b      	str	r3, [r7, #20]
			break;
 8009108:	e044      	b.n	8009194 <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009118:	330a      	adds	r3, #10
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	089b      	lsrs	r3, r3, #2
 800911e:	b29b      	uxth	r3, r3
 8009120:	4619      	mov	r1, r3
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	fbb3 f3f1 	udiv	r3, r3, r1
 8009128:	4413      	add	r3, r2
 800912a:	4619      	mov	r1, r3
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f7ff fe07 	bl	8008d40 <move_window>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d12c      	bne.n	8009192 <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	009a      	lsls	r2, r3, #2
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009142:	330a      	adds	r3, #10
 8009144:	881b      	ldrh	r3, [r3, #0]
 8009146:	fbb2 f1f3 	udiv	r1, r2, r3
 800914a:	fb03 f301 	mul.w	r3, r3, r1
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	4413      	add	r3, r2
 8009154:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	3303      	adds	r3, #3
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	061a      	lsls	r2, r3, #24
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	3302      	adds	r3, #2
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	041b      	lsls	r3, r3, #16
 8009166:	4313      	orrs	r3, r2
 8009168:	693a      	ldr	r2, [r7, #16]
 800916a:	3201      	adds	r2, #1
 800916c:	7812      	ldrb	r2, [r2, #0]
 800916e:	0212      	lsls	r2, r2, #8
 8009170:	4313      	orrs	r3, r2
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	7812      	ldrb	r2, [r2, #0]
 8009176:	4313      	orrs	r3, r2
 8009178:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800917c:	617b      	str	r3, [r7, #20]
			break;
 800917e:	e009      	b.n	8009194 <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 8009180:	2301      	movs	r3, #1
 8009182:	617b      	str	r3, [r7, #20]
 8009184:	e006      	b.n	8009194 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009186:	bf00      	nop
 8009188:	e004      	b.n	8009194 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800918a:	bf00      	nop
 800918c:	e002      	b.n	8009194 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800918e:	bf00      	nop
 8009190:	e000      	b.n	8009194 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009192:	bf00      	nop
		}
	}

	return val;
 8009194:	697b      	ldr	r3, [r7, #20]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3718      	adds	r7, #24
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b088      	sub	sp, #32
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	60f8      	str	r0, [r7, #12]
 80091a6:	60b9      	str	r1, [r7, #8]
 80091a8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d907      	bls.n	80091c0 <put_fat+0x22>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091b6:	3314      	adds	r3, #20
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d302      	bcc.n	80091c6 <put_fat+0x28>
		res = FR_INT_ERR;
 80091c0:	2302      	movs	r3, #2
 80091c2:	77fb      	strb	r3, [r7, #31]
 80091c4:	e146      	b.n	8009454 <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	2b03      	cmp	r3, #3
 80091d0:	f000 80d9 	beq.w	8009386 <put_fat+0x1e8>
 80091d4:	2b03      	cmp	r3, #3
 80091d6:	f300 8133 	bgt.w	8009440 <put_fat+0x2a2>
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d003      	beq.n	80091e6 <put_fat+0x48>
 80091de:	2b02      	cmp	r3, #2
 80091e0:	f000 8095 	beq.w	800930e <put_fat+0x170>
 80091e4:	e12c      	b.n	8009440 <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	617b      	str	r3, [r7, #20]
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	085b      	lsrs	r3, r3, #1
 80091ee:	697a      	ldr	r2, [r7, #20]
 80091f0:	4413      	add	r3, r2
 80091f2:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009202:	330a      	adds	r3, #10
 8009204:	881b      	ldrh	r3, [r3, #0]
 8009206:	4619      	mov	r1, r3
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	fbb3 f3f1 	udiv	r3, r3, r1
 800920e:	4413      	add	r3, r2
 8009210:	4619      	mov	r1, r3
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f7ff fd94 	bl	8008d40 <move_window>
 8009218:	4603      	mov	r3, r0
 800921a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800921c:	7ffb      	ldrb	r3, [r7, #31]
 800921e:	2b00      	cmp	r3, #0
 8009220:	f040 8111 	bne.w	8009446 <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	617a      	str	r2, [r7, #20]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009230:	320a      	adds	r2, #10
 8009232:	8812      	ldrh	r2, [r2, #0]
 8009234:	fbb3 f1f2 	udiv	r1, r3, r2
 8009238:	fb02 f201 	mul.w	r2, r2, r1
 800923c:	1a9b      	subs	r3, r3, r2
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	4413      	add	r3, r2
 8009242:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00d      	beq.n	800926a <put_fat+0xcc>
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	b25b      	sxtb	r3, r3
 8009254:	f003 030f 	and.w	r3, r3, #15
 8009258:	b25a      	sxtb	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	b2db      	uxtb	r3, r3
 800925e:	011b      	lsls	r3, r3, #4
 8009260:	b25b      	sxtb	r3, r3
 8009262:	4313      	orrs	r3, r2
 8009264:	b25b      	sxtb	r3, r3
 8009266:	b2db      	uxtb	r3, r3
 8009268:	e001      	b.n	800926e <put_fat+0xd0>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	b2db      	uxtb	r3, r3
 800926e:	69ba      	ldr	r2, [r7, #24]
 8009270:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009278:	3304      	adds	r3, #4
 800927a:	2201      	movs	r2, #1
 800927c:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800928c:	330a      	adds	r3, #10
 800928e:	881b      	ldrh	r3, [r3, #0]
 8009290:	4619      	mov	r1, r3
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	fbb3 f3f1 	udiv	r3, r3, r1
 8009298:	4413      	add	r3, r2
 800929a:	4619      	mov	r1, r3
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f7ff fd4f 	bl	8008d40 <move_window>
 80092a2:	4603      	mov	r3, r0
 80092a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80092a6:	7ffb      	ldrb	r3, [r7, #31]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f040 80ce 	bne.w	800944a <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b4:	330a      	adds	r3, #10
 80092b6:	881b      	ldrh	r3, [r3, #0]
 80092b8:	461a      	mov	r2, r3
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80092c0:	fb02 f201 	mul.w	r2, r2, r1
 80092c4:	1a9b      	subs	r3, r3, r2
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	4413      	add	r3, r2
 80092ca:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d003      	beq.n	80092de <put_fat+0x140>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	091b      	lsrs	r3, r3, #4
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	e00e      	b.n	80092fc <put_fat+0x15e>
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	b25b      	sxtb	r3, r3
 80092e4:	f023 030f 	bic.w	r3, r3, #15
 80092e8:	b25a      	sxtb	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	0a1b      	lsrs	r3, r3, #8
 80092ee:	b25b      	sxtb	r3, r3
 80092f0:	f003 030f 	and.w	r3, r3, #15
 80092f4:	b25b      	sxtb	r3, r3
 80092f6:	4313      	orrs	r3, r2
 80092f8:	b25b      	sxtb	r3, r3
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	69ba      	ldr	r2, [r7, #24]
 80092fe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009306:	3304      	adds	r3, #4
 8009308:	2201      	movs	r2, #1
 800930a:	701a      	strb	r2, [r3, #0]
			break;
 800930c:	e0a2      	b.n	8009454 <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800931c:	330a      	adds	r3, #10
 800931e:	881b      	ldrh	r3, [r3, #0]
 8009320:	085b      	lsrs	r3, r3, #1
 8009322:	b29b      	uxth	r3, r3
 8009324:	4619      	mov	r1, r3
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	fbb3 f3f1 	udiv	r3, r3, r1
 800932c:	4413      	add	r3, r2
 800932e:	4619      	mov	r1, r3
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f7ff fd05 	bl	8008d40 <move_window>
 8009336:	4603      	mov	r3, r0
 8009338:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800933a:	7ffb      	ldrb	r3, [r7, #31]
 800933c:	2b00      	cmp	r3, #0
 800933e:	f040 8086 	bne.w	800944e <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	005a      	lsls	r2, r3, #1
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800934c:	330a      	adds	r3, #10
 800934e:	881b      	ldrh	r3, [r3, #0]
 8009350:	fbb2 f1f3 	udiv	r1, r2, r3
 8009354:	fb03 f301 	mul.w	r3, r3, r1
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	4413      	add	r3, r2
 800935e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	b2da      	uxtb	r2, r3
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	701a      	strb	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	b29b      	uxth	r3, r3
 800936c:	0a1b      	lsrs	r3, r3, #8
 800936e:	b29a      	uxth	r2, r3
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	3301      	adds	r3, #1
 8009374:	b2d2      	uxtb	r2, r2
 8009376:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800937e:	3304      	adds	r3, #4
 8009380:	2201      	movs	r2, #1
 8009382:	701a      	strb	r2, [r3, #0]
			break;
 8009384:	e066      	b.n	8009454 <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009394:	330a      	adds	r3, #10
 8009396:	881b      	ldrh	r3, [r3, #0]
 8009398:	089b      	lsrs	r3, r3, #2
 800939a:	b29b      	uxth	r3, r3
 800939c:	4619      	mov	r1, r3
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80093a4:	4413      	add	r3, r2
 80093a6:	4619      	mov	r1, r3
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f7ff fcc9 	bl	8008d40 <move_window>
 80093ae:	4603      	mov	r3, r0
 80093b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80093b2:	7ffb      	ldrb	r3, [r7, #31]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d14c      	bne.n	8009452 <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	009a      	lsls	r2, r3, #2
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093c2:	330a      	adds	r3, #10
 80093c4:	881b      	ldrh	r3, [r3, #0]
 80093c6:	fbb2 f1f3 	udiv	r1, r2, r3
 80093ca:	fb03 f301 	mul.w	r3, r3, r1
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	4413      	add	r3, r2
 80093d4:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	3303      	adds	r3, #3
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	061a      	lsls	r2, r3, #24
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	3302      	adds	r3, #2
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	041b      	lsls	r3, r3, #16
 80093e6:	4313      	orrs	r3, r2
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	3201      	adds	r2, #1
 80093ec:	7812      	ldrb	r2, [r2, #0]
 80093ee:	0212      	lsls	r2, r2, #8
 80093f0:	4313      	orrs	r3, r2
 80093f2:	69ba      	ldr	r2, [r7, #24]
 80093f4:	7812      	ldrb	r2, [r2, #0]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	4313      	orrs	r3, r2
 8009400:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	b2da      	uxtb	r2, r3
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	701a      	strb	r2, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	b29b      	uxth	r3, r3
 800940e:	0a1b      	lsrs	r3, r3, #8
 8009410:	b29a      	uxth	r2, r3
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	3301      	adds	r3, #1
 8009416:	b2d2      	uxtb	r2, r2
 8009418:	701a      	strb	r2, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	0c1a      	lsrs	r2, r3, #16
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	3302      	adds	r3, #2
 8009422:	b2d2      	uxtb	r2, r2
 8009424:	701a      	strb	r2, [r3, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	0e1a      	lsrs	r2, r3, #24
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	3303      	adds	r3, #3
 800942e:	b2d2      	uxtb	r2, r2
 8009430:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009438:	3304      	adds	r3, #4
 800943a:	2201      	movs	r2, #1
 800943c:	701a      	strb	r2, [r3, #0]
			break;
 800943e:	e009      	b.n	8009454 <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 8009440:	2302      	movs	r3, #2
 8009442:	77fb      	strb	r3, [r7, #31]
 8009444:	e006      	b.n	8009454 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8009446:	bf00      	nop
 8009448:	e004      	b.n	8009454 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800944a:	bf00      	nop
 800944c:	e002      	b.n	8009454 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800944e:	bf00      	nop
 8009450:	e000      	b.n	8009454 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8009452:	bf00      	nop
		}
	}

	return res;
 8009454:	7ffb      	ldrb	r3, [r7, #31]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3720      	adds	r7, #32
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b084      	sub	sp, #16
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d907      	bls.n	800947e <remove_chain+0x20>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009474:	3314      	adds	r3, #20
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	429a      	cmp	r2, r3
 800947c:	d302      	bcc.n	8009484 <remove_chain+0x26>
		res = FR_INT_ERR;
 800947e:	2302      	movs	r3, #2
 8009480:	73fb      	strb	r3, [r7, #15]
 8009482:	e04f      	b.n	8009524 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 8009484:	2300      	movs	r3, #0
 8009486:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8009488:	e040      	b.n	800950c <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f7ff fd81 	bl	8008f94 <get_fat>
 8009492:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d041      	beq.n	800951e <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d102      	bne.n	80094a6 <remove_chain+0x48>
 80094a0:	2302      	movs	r3, #2
 80094a2:	73fb      	strb	r3, [r7, #15]
 80094a4:	e03e      	b.n	8009524 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ac:	d102      	bne.n	80094b4 <remove_chain+0x56>
 80094ae:	2301      	movs	r3, #1
 80094b0:	73fb      	strb	r3, [r7, #15]
 80094b2:	e037      	b.n	8009524 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80094b4:	2200      	movs	r2, #0
 80094b6:	6839      	ldr	r1, [r7, #0]
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f7ff fe70 	bl	800919e <put_fat>
 80094be:	4603      	mov	r3, r0
 80094c0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d12c      	bne.n	8009522 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ce:	3310      	adds	r3, #16
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d6:	d017      	beq.n	8009508 <remove_chain+0xaa>
				fs->free_clust++;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094de:	3310      	adds	r3, #16
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	1c5a      	adds	r2, r3, #1
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ea:	3310      	adds	r3, #16
 80094ec:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f4:	3305      	adds	r3, #5
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	f043 0301 	orr.w	r3, r3, #1
 80094fc:	b2da      	uxtb	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009504:	3305      	adds	r3, #5
 8009506:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009512:	3314      	adds	r3, #20
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	429a      	cmp	r2, r3
 800951a:	d3b6      	bcc.n	800948a <remove_chain+0x2c>
 800951c:	e002      	b.n	8009524 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 800951e:	bf00      	nop
 8009520:	e000      	b.n	8009524 <remove_chain+0xc6>
			if (res != FR_OK) break;
 8009522:	bf00      	nop
		}
	}

	return res;
 8009524:	7bfb      	ldrb	r3, [r7, #15]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b086      	sub	sp, #24
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
 8009536:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d113      	bne.n	8009566 <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009544:	330c      	adds	r3, #12
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d007      	beq.n	8009560 <create_chain+0x32>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009556:	3314      	adds	r3, #20
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	693a      	ldr	r2, [r7, #16]
 800955c:	429a      	cmp	r2, r3
 800955e:	d31e      	bcc.n	800959e <create_chain+0x70>
 8009560:	2301      	movs	r3, #1
 8009562:	613b      	str	r3, [r7, #16]
 8009564:	e01b      	b.n	800959e <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8009566:	6839      	ldr	r1, [r7, #0]
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f7ff fd13 	bl	8008f94 <get_fat>
 800956e:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d801      	bhi.n	800957a <create_chain+0x4c>
 8009576:	2301      	movs	r3, #1
 8009578:	e086      	b.n	8009688 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009580:	d101      	bne.n	8009586 <create_chain+0x58>
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	e080      	b.n	8009688 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800958c:	3314      	adds	r3, #20
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	429a      	cmp	r2, r3
 8009594:	d201      	bcs.n	800959a <create_chain+0x6c>
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	e076      	b.n	8009688 <create_chain+0x15a>
		scl = clst;
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	3301      	adds	r3, #1
 80095a6:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ae:	3314      	adds	r3, #20
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	697a      	ldr	r2, [r7, #20]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d307      	bcc.n	80095c8 <create_chain+0x9a>
			ncl = 2;
 80095b8:	2302      	movs	r3, #2
 80095ba:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80095bc:	697a      	ldr	r2, [r7, #20]
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d901      	bls.n	80095c8 <create_chain+0x9a>
 80095c4:	2300      	movs	r3, #0
 80095c6:	e05f      	b.n	8009688 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80095c8:	6979      	ldr	r1, [r7, #20]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff fce2 	bl	8008f94 <get_fat>
 80095d0:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00e      	beq.n	80095f6 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095de:	d002      	beq.n	80095e6 <create_chain+0xb8>
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d101      	bne.n	80095ea <create_chain+0xbc>
			return cs;
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	e04e      	b.n	8009688 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 80095ea:	697a      	ldr	r2, [r7, #20]
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d1d7      	bne.n	80095a2 <create_chain+0x74>
 80095f2:	2300      	movs	r3, #0
 80095f4:	e048      	b.n	8009688 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 80095f6:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80095f8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80095fc:	6979      	ldr	r1, [r7, #20]
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7ff fdcd 	bl	800919e <put_fat>
 8009604:	4603      	mov	r3, r0
 8009606:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8009608:	7bfb      	ldrb	r3, [r7, #15]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d109      	bne.n	8009622 <create_chain+0xf4>
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d006      	beq.n	8009622 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8009614:	697a      	ldr	r2, [r7, #20]
 8009616:	6839      	ldr	r1, [r7, #0]
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7ff fdc0 	bl	800919e <put_fat>
 800961e:	4603      	mov	r3, r0
 8009620:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d126      	bne.n	8009676 <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800962e:	330c      	adds	r3, #12
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800963a:	3310      	adds	r3, #16
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009642:	d020      	beq.n	8009686 <create_chain+0x158>
			fs->free_clust--;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800964a:	3310      	adds	r3, #16
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	1e5a      	subs	r2, r3, #1
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009656:	3310      	adds	r3, #16
 8009658:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009660:	3305      	adds	r3, #5
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	f043 0301 	orr.w	r3, r3, #1
 8009668:	b2da      	uxtb	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009670:	3305      	adds	r3, #5
 8009672:	701a      	strb	r2, [r3, #0]
 8009674:	e007      	b.n	8009686 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d102      	bne.n	8009682 <create_chain+0x154>
 800967c:	f04f 33ff 	mov.w	r3, #4294967295
 8009680:	e000      	b.n	8009684 <create_chain+0x156>
 8009682:	2301      	movs	r3, #1
 8009684:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8009686:	697b      	ldr	r3, [r7, #20]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3718      	adds	r7, #24
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8009690:	b480      	push	{r7}
 8009692:	b087      	sub	sp, #28
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80096a0:	3304      	adds	r3, #4
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3304      	adds	r3, #4
 80096a6:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096b4:	330a      	adds	r3, #10
 80096b6:	881b      	ldrh	r3, [r3, #0]
 80096b8:	461a      	mov	r2, r3
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096cc:	3302      	adds	r3, #2
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	1d1a      	adds	r2, r3, #4
 80096da:	613a      	str	r2, [r7, #16]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <clmt_clust+0x5a>
 80096e6:	2300      	movs	r3, #0
 80096e8:	e010      	b.n	800970c <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d307      	bcc.n	8009702 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	617b      	str	r3, [r7, #20]
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	3304      	adds	r3, #4
 80096fe:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009700:	e7e9      	b.n	80096d6 <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 8009702:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	4413      	add	r3, r2
}
 800970c:	4618      	mov	r0, r3
 800970e:	371c      	adds	r7, #28
 8009710:	46bd      	mov	sp, r7
 8009712:	bc80      	pop	{r7}
 8009714:	4770      	bx	lr

08009716 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b086      	sub	sp, #24
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	b29a      	uxth	r2, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800972a:	3306      	adds	r3, #6
 800972c:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009734:	3308      	adds	r3, #8
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d00a      	beq.n	8009756 <dir_sdi+0x40>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800974c:	3314      	adds	r3, #20
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	429a      	cmp	r2, r3
 8009754:	d301      	bcc.n	800975a <dir_sdi+0x44>
		return FR_INT_ERR;
 8009756:	2302      	movs	r3, #2
 8009758:	e0b4      	b.n	80098c4 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d111      	bne.n	8009784 <dir_sdi+0x6e>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	2b03      	cmp	r3, #3
 8009770:	d108      	bne.n	8009784 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800977e:	3304      	adds	r3, #4
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d117      	bne.n	80097ba <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009796:	3308      	adds	r3, #8
 8009798:	881b      	ldrh	r3, [r3, #0]
 800979a:	461a      	mov	r2, r3
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	4293      	cmp	r3, r2
 80097a0:	d301      	bcc.n	80097a6 <dir_sdi+0x90>
			return FR_INT_ERR;
 80097a2:	2302      	movs	r3, #2
 80097a4:	e08e      	b.n	80098c4 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80097b2:	3304      	adds	r3, #4
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	613b      	str	r3, [r7, #16]
 80097b8:	e046      	b.n	8009848 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097c6:	330a      	adds	r3, #10
 80097c8:	881b      	ldrh	r3, [r3, #0]
 80097ca:	095b      	lsrs	r3, r3, #5
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	461a      	mov	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097dc:	3302      	adds	r3, #2
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	fb03 f302 	mul.w	r3, r3, r2
 80097e4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80097e6:	e022      	b.n	800982e <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6979      	ldr	r1, [r7, #20]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7ff fbce 	bl	8008f94 <get_fat>
 80097f8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009800:	d101      	bne.n	8009806 <dir_sdi+0xf0>
 8009802:	2301      	movs	r3, #1
 8009804:	e05e      	b.n	80098c4 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d90a      	bls.n	8009822 <dir_sdi+0x10c>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009818:	3314      	adds	r3, #20
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	697a      	ldr	r2, [r7, #20]
 800981e:	429a      	cmp	r2, r3
 8009820:	d301      	bcc.n	8009826 <dir_sdi+0x110>
				return FR_INT_ERR;
 8009822:	2302      	movs	r3, #2
 8009824:	e04e      	b.n	80098c4 <dir_sdi+0x1ae>
			idx -= ic;
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	1ad3      	subs	r3, r2, r3
 800982c:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	429a      	cmp	r2, r3
 8009834:	d2d8      	bcs.n	80097e8 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	6979      	ldr	r1, [r7, #20]
 8009840:	4618      	mov	r0, r3
 8009842:	f7ff fb80 	bl	8008f46 <clust2sect>
 8009846:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800984e:	330c      	adds	r3, #12
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <dir_sdi+0x148>
 800985a:	2302      	movs	r3, #2
 800985c:	e032      	b.n	80098c4 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800986a:	330a      	adds	r3, #10
 800986c:	881b      	ldrh	r3, [r3, #0]
 800986e:	095b      	lsrs	r3, r3, #5
 8009870:	b29b      	uxth	r3, r3
 8009872:	461a      	mov	r2, r3
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	fbb3 f2f2 	udiv	r2, r3, r2
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	441a      	add	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009884:	3310      	adds	r3, #16
 8009886:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4618      	mov	r0, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800989e:	330a      	adds	r3, #10
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	095b      	lsrs	r3, r3, #5
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	461a      	mov	r2, r3
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80098ae:	fb02 f201 	mul.w	r2, r2, r1
 80098b2:	1a9b      	subs	r3, r3, r2
 80098b4:	015b      	lsls	r3, r3, #5
 80098b6:	18c2      	adds	r2, r0, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098be:	3314      	adds	r3, #20
 80098c0:	601a      	str	r2, [r3, #0]

	return FR_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3718      	adds	r7, #24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80098cc:	b590      	push	{r4, r7, lr}
 80098ce:	b087      	sub	sp, #28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098dc:	3306      	adds	r3, #6
 80098de:	881b      	ldrh	r3, [r3, #0]
 80098e0:	3301      	adds	r3, #1
 80098e2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d006      	beq.n	80098fa <dir_next+0x2e>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098f2:	3310      	adds	r3, #16
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <dir_next+0x32>
		return FR_NO_FILE;
 80098fa:	2304      	movs	r3, #4
 80098fc:	e144      	b.n	8009b88 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800990a:	330a      	adds	r3, #10
 800990c:	881b      	ldrh	r3, [r3, #0]
 800990e:	095b      	lsrs	r3, r3, #5
 8009910:	b29b      	uxth	r3, r3
 8009912:	461a      	mov	r2, r3
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	fbb3 f1f2 	udiv	r1, r3, r2
 800991a:	fb02 f201 	mul.w	r2, r2, r1
 800991e:	1a9b      	subs	r3, r3, r2
 8009920:	2b00      	cmp	r3, #0
 8009922:	f040 810c 	bne.w	8009b3e <dir_next+0x272>
		dp->sect++;					/* Next sector */
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800992c:	3310      	adds	r3, #16
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	1c5a      	adds	r2, r3, #1
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009938:	3310      	adds	r3, #16
 800993a:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009942:	330c      	adds	r3, #12
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10e      	bne.n	8009968 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009956:	3308      	adds	r3, #8
 8009958:	881b      	ldrh	r3, [r3, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4293      	cmp	r3, r2
 8009960:	f0c0 80ed 	bcc.w	8009b3e <dir_next+0x272>
				return FR_NO_FILE;
 8009964:	2304      	movs	r3, #4
 8009966:	e10f      	b.n	8009b88 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009974:	330a      	adds	r3, #10
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	095b      	lsrs	r3, r3, #5
 800997a:	b29b      	uxth	r3, r3
 800997c:	461a      	mov	r2, r3
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	fbb3 f2f2 	udiv	r2, r3, r2
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009990:	3302      	adds	r3, #2
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	3b01      	subs	r3, #1
 8009996:	4013      	ands	r3, r2
 8009998:	2b00      	cmp	r3, #0
 800999a:	f040 80d0 	bne.w	8009b3e <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099ac:	330c      	adds	r3, #12
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4619      	mov	r1, r3
 80099b2:	4610      	mov	r0, r2
 80099b4:	f7ff faee 	bl	8008f94 <get_fat>
 80099b8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d801      	bhi.n	80099c4 <dir_next+0xf8>
 80099c0:	2302      	movs	r3, #2
 80099c2:	e0e1      	b.n	8009b88 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ca:	d101      	bne.n	80099d0 <dir_next+0x104>
 80099cc:	2301      	movs	r3, #1
 80099ce:	e0db      	b.n	8009b88 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099dc:	3314      	adds	r3, #20
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	697a      	ldr	r2, [r7, #20]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	f0c0 8097 	bcc.w	8009b16 <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d101      	bne.n	80099f2 <dir_next+0x126>
 80099ee:	2304      	movs	r3, #4
 80099f0:	e0ca      	b.n	8009b88 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a00:	330c      	adds	r3, #12
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4619      	mov	r1, r3
 8009a06:	4610      	mov	r0, r2
 8009a08:	f7ff fd91 	bl	800952e <create_chain>
 8009a0c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d101      	bne.n	8009a18 <dir_next+0x14c>
 8009a14:	2307      	movs	r3, #7
 8009a16:	e0b7      	b.n	8009b88 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d101      	bne.n	8009a22 <dir_next+0x156>
 8009a1e:	2302      	movs	r3, #2
 8009a20:	e0b2      	b.n	8009b88 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a28:	d101      	bne.n	8009a2e <dir_next+0x162>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e0ac      	b.n	8009b88 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7ff f928 	bl	8008c8c <sync_window>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d001      	beq.n	8009a46 <dir_next+0x17a>
 8009a42:	2301      	movs	r3, #1
 8009a44:	e0a0      	b.n	8009b88 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a5c:	330a      	adds	r3, #10
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	461a      	mov	r2, r3
 8009a62:	2100      	movs	r1, #0
 8009a64:	f7fe fef4 	bl	8008850 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a76:	681c      	ldr	r4, [r3, #0]
 8009a78:	6979      	ldr	r1, [r7, #20]
 8009a7a:	4610      	mov	r0, r2
 8009a7c:	f7ff fa63 	bl	8008f46 <clust2sect>
 8009a80:	4602      	mov	r2, r0
 8009a82:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8009a86:	330c      	adds	r3, #12
 8009a88:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	613b      	str	r3, [r7, #16]
 8009a8e:	e024      	b.n	8009ada <dir_next+0x20e>
						dp->fs->wflag = 1;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a9c:	3304      	adds	r3, #4
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7ff f8ee 	bl	8008c8c <sync_window>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d001      	beq.n	8009aba <dir_next+0x1ee>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e066      	b.n	8009b88 <dir_next+0x2bc>
						dp->fs->winsect++;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8009ac6:	330c      	adds	r3, #12
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	1c59      	adds	r1, r3, #1
 8009acc:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8009ad0:	330c      	adds	r3, #12
 8009ad2:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	613b      	str	r3, [r7, #16]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ae6:	3302      	adds	r3, #2
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	461a      	mov	r2, r3
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d3ce      	bcc.n	8009a90 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009afe:	330c      	adds	r3, #12
 8009b00:	6819      	ldr	r1, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	693a      	ldr	r2, [r7, #16]
 8009b0c:	1a8a      	subs	r2, r1, r2
 8009b0e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009b12:	330c      	adds	r3, #12
 8009b14:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b1c:	330c      	adds	r3, #12
 8009b1e:	697a      	ldr	r2, [r7, #20]
 8009b20:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	6979      	ldr	r1, [r7, #20]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7ff fa0a 	bl	8008f46 <clust2sect>
 8009b32:	4602      	mov	r2, r0
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b3a:	3310      	adds	r3, #16
 8009b3c:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b48:	3306      	adds	r3, #6
 8009b4a:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4618      	mov	r0, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b62:	330a      	adds	r3, #10
 8009b64:	881b      	ldrh	r3, [r3, #0]
 8009b66:	095b      	lsrs	r3, r3, #5
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b72:	fb02 f201 	mul.w	r2, r2, r1
 8009b76:	1a9b      	subs	r3, r3, r2
 8009b78:	015b      	lsls	r3, r3, #5
 8009b7a:	18c2      	adds	r2, r0, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b82:	3314      	adds	r3, #20
 8009b84:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8009b86:	2300      	movs	r3, #0
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	371c      	adds	r7, #28
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd90      	pop	{r4, r7, pc}

08009b90 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7ff fdba 	bl	8009716 <dir_sdi>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d138      	bne.n	8009c1e <dir_alloc+0x8e>
		n = 0;
 8009bac:	2300      	movs	r3, #0
 8009bae:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bbe:	3310      	adds	r3, #16
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	f7ff f8bb 	bl	8008d40 <move_window>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d123      	bne.n	8009c1c <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bda:	3314      	adds	r3, #20
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	2be5      	cmp	r3, #229	; 0xe5
 8009be2:	d007      	beq.n	8009bf4 <dir_alloc+0x64>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bea:	3314      	adds	r3, #20
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d107      	bne.n	8009c04 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	60bb      	str	r3, [r7, #8]
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d102      	bne.n	8009c08 <dir_alloc+0x78>
 8009c02:	e00c      	b.n	8009c1e <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009c04:	2300      	movs	r3, #0
 8009c06:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8009c08:	2101      	movs	r1, #1
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7ff fe5e 	bl	80098cc <dir_next>
 8009c10:	4603      	mov	r3, r0
 8009c12:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8009c14:	7bfb      	ldrb	r3, [r7, #15]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d0ca      	beq.n	8009bb0 <dir_alloc+0x20>
 8009c1a:	e000      	b.n	8009c1e <dir_alloc+0x8e>
			if (res != FR_OK) break;
 8009c1c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009c1e:	7bfb      	ldrb	r3, [r7, #15]
 8009c20:	2b04      	cmp	r3, #4
 8009c22:	d101      	bne.n	8009c28 <dir_alloc+0x98>
 8009c24:	2307      	movs	r3, #7
 8009c26:	73fb      	strb	r3, [r7, #15]
	return res;
 8009c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8009c32:	b480      	push	{r7}
 8009c34:	b085      	sub	sp, #20
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	331b      	adds	r3, #27
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	021b      	lsls	r3, r3, #8
 8009c44:	b21a      	sxth	r2, r3
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	331a      	adds	r3, #26
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	b21b      	sxth	r3, r3
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	b21b      	sxth	r3, r3
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	2b03      	cmp	r3, #3
 8009c60:	d10f      	bne.n	8009c82 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	3315      	adds	r3, #21
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	021b      	lsls	r3, r3, #8
 8009c6a:	b21a      	sxth	r2, r3
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	3314      	adds	r3, #20
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	b21b      	sxth	r3, r3
 8009c74:	4313      	orrs	r3, r2
 8009c76:	b21b      	sxth	r3, r3
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	041b      	lsls	r3, r3, #16
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	60fb      	str	r3, [r7, #12]

	return cl;
 8009c82:	68fb      	ldr	r3, [r7, #12]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bc80      	pop	{r7}
 8009c8c:	4770      	bx	lr

08009c8e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8009c8e:	b480      	push	{r7}
 8009c90:	b083      	sub	sp, #12
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
 8009c96:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	331a      	adds	r3, #26
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	b2d2      	uxtb	r2, r2
 8009ca0:	701a      	strb	r2, [r3, #0]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	0a1b      	lsrs	r3, r3, #8
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	331b      	adds	r3, #27
 8009cae:	b2d2      	uxtb	r2, r2
 8009cb0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	0c1a      	lsrs	r2, r3, #16
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	3314      	adds	r3, #20
 8009cba:	b2d2      	uxtb	r2, r2
 8009cbc:	701a      	strb	r2, [r3, #0]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	0c1b      	lsrs	r3, r3, #16
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	0a1b      	lsrs	r3, r3, #8
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	3315      	adds	r3, #21
 8009ccc:	b2d2      	uxtb	r2, r2
 8009cce:	701a      	strb	r2, [r3, #0]
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bc80      	pop	{r7}
 8009cd8:	4770      	bx	lr
	...

08009cdc <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b086      	sub	sp, #24
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cee:	1e5a      	subs	r2, r3, #1
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	005b      	lsls	r3, r3, #1
 8009cf4:	4413      	add	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	613b      	str	r3, [r7, #16]
 8009d00:	2301      	movs	r3, #1
 8009d02:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8009d04:	4a2b      	ldr	r2, [pc, #172]	; (8009db4 <cmp_lfn+0xd8>)
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	4413      	add	r3, r2
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	683a      	ldr	r2, [r7, #0]
 8009d10:	4413      	add	r3, r2
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	021b      	lsls	r3, r3, #8
 8009d16:	b21a      	sxth	r2, r3
 8009d18:	4926      	ldr	r1, [pc, #152]	; (8009db4 <cmp_lfn+0xd8>)
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	440b      	add	r3, r1
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	4619      	mov	r1, r3
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	440b      	add	r3, r1
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	b21b      	sxth	r3, r3
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	b21b      	sxth	r3, r3
 8009d2e:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8009d30:	89fb      	ldrh	r3, [r7, #14]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d019      	beq.n	8009d6a <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8009d36:	89bb      	ldrh	r3, [r7, #12]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f002 fad9 	bl	800c2f0 <ff_wtoupper>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	2bfe      	cmp	r3, #254	; 0xfe
 8009d46:	d80e      	bhi.n	8009d66 <cmp_lfn+0x8a>
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	1c5a      	adds	r2, r3, #1
 8009d4c:	617a      	str	r2, [r7, #20]
 8009d4e:	005b      	lsls	r3, r3, #1
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	4413      	add	r3, r2
 8009d54:	881b      	ldrh	r3, [r3, #0]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f002 faca 	bl	800c2f0 <ff_wtoupper>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	461a      	mov	r2, r3
 8009d60:	89fb      	ldrh	r3, [r7, #14]
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d008      	beq.n	8009d78 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8009d66:	2300      	movs	r3, #0
 8009d68:	e01f      	b.n	8009daa <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8009d6a:	89bb      	ldrh	r3, [r7, #12]
 8009d6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d001      	beq.n	8009d78 <cmp_lfn+0x9c>
 8009d74:	2300      	movs	r3, #0
 8009d76:	e018      	b.n	8009daa <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	613b      	str	r3, [r7, #16]
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	2b0c      	cmp	r3, #12
 8009d82:	d9bf      	bls.n	8009d04 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00b      	beq.n	8009da8 <cmp_lfn+0xcc>
 8009d90:	89fb      	ldrh	r3, [r7, #14]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d008      	beq.n	8009da8 <cmp_lfn+0xcc>
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	005b      	lsls	r3, r3, #1
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	881b      	ldrh	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d001      	beq.n	8009da8 <cmp_lfn+0xcc>
		return 0;
 8009da4:	2300      	movs	r3, #0
 8009da6:	e000      	b.n	8009daa <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8009da8:	2301      	movs	r3, #1
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3718      	adds	r7, #24
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	0800fb54 	.word	0x0800fb54

08009db8 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b089      	sub	sp, #36	; 0x24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	4611      	mov	r1, r2
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	71fb      	strb	r3, [r7, #7]
 8009dca:	4613      	mov	r3, r2
 8009dcc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	330d      	adds	r3, #13
 8009dd2:	79ba      	ldrb	r2, [r7, #6]
 8009dd4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	330b      	adds	r3, #11
 8009dda:	220f      	movs	r2, #15
 8009ddc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	330c      	adds	r3, #12
 8009de2:	2200      	movs	r2, #0
 8009de4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	331a      	adds	r3, #26
 8009dea:	2200      	movs	r2, #0
 8009dec:	701a      	strb	r2, [r3, #0]
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	331b      	adds	r3, #27
 8009df2:	2200      	movs	r2, #0
 8009df4:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8009df6:	79fb      	ldrb	r3, [r7, #7]
 8009df8:	1e5a      	subs	r2, r3, #1
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	005b      	lsls	r3, r3, #1
 8009dfe:	4413      	add	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4413      	add	r3, r2
 8009e04:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009e06:	2300      	movs	r3, #0
 8009e08:	82fb      	strh	r3, [r7, #22]
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8009e0e:	8afb      	ldrh	r3, [r7, #22]
 8009e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d007      	beq.n	8009e28 <fit_lfn+0x70>
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	1c5a      	adds	r2, r3, #1
 8009e1c:	61fa      	str	r2, [r7, #28]
 8009e1e:	005b      	lsls	r3, r3, #1
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	4413      	add	r3, r2
 8009e24:	881b      	ldrh	r3, [r3, #0]
 8009e26:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8009e28:	4a1c      	ldr	r2, [pc, #112]	; (8009e9c <fit_lfn+0xe4>)
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	461a      	mov	r2, r3
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	4413      	add	r3, r2
 8009e36:	8afa      	ldrh	r2, [r7, #22]
 8009e38:	b2d2      	uxtb	r2, r2
 8009e3a:	701a      	strb	r2, [r3, #0]
 8009e3c:	8afb      	ldrh	r3, [r7, #22]
 8009e3e:	0a1b      	lsrs	r3, r3, #8
 8009e40:	b299      	uxth	r1, r3
 8009e42:	4a16      	ldr	r2, [pc, #88]	; (8009e9c <fit_lfn+0xe4>)
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	4413      	add	r3, r2
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	4413      	add	r3, r2
 8009e50:	b2ca      	uxtb	r2, r1
 8009e52:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8009e54:	8afb      	ldrh	r3, [r7, #22]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d102      	bne.n	8009e60 <fit_lfn+0xa8>
 8009e5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e5e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	3301      	adds	r3, #1
 8009e64:	61bb      	str	r3, [r7, #24]
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	2b0c      	cmp	r3, #12
 8009e6a:	d9d0      	bls.n	8009e0e <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8009e6c:	8afb      	ldrh	r3, [r7, #22]
 8009e6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d006      	beq.n	8009e84 <fit_lfn+0xcc>
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	005b      	lsls	r3, r3, #1
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	881b      	ldrh	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d103      	bne.n	8009e8c <fit_lfn+0xd4>
 8009e84:	79fb      	ldrb	r3, [r7, #7]
 8009e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e8a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	79fa      	ldrb	r2, [r7, #7]
 8009e90:	701a      	strb	r2, [r3, #0]
}
 8009e92:	bf00      	nop
 8009e94:	3724      	adds	r7, #36	; 0x24
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bc80      	pop	{r7}
 8009e9a:	4770      	bx	lr
 8009e9c:	0800fb54 	.word	0x0800fb54

08009ea0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b08c      	sub	sp, #48	; 0x30
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009eae:	220b      	movs	r2, #11
 8009eb0:	68b9      	ldr	r1, [r7, #8]
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f7fe fcae 	bl	8008814 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	2b05      	cmp	r3, #5
 8009ebc:	d92b      	bls.n	8009f16 <gen_numname+0x76>
		sr = seq;
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009ec2:	e022      	b.n	8009f0a <gen_numname+0x6a>
			wc = *lfn++;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	1c9a      	adds	r2, r3, #2
 8009ec8:	607a      	str	r2, [r7, #4]
 8009eca:	881b      	ldrh	r3, [r3, #0]
 8009ecc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009ece:	2300      	movs	r3, #0
 8009ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ed2:	e017      	b.n	8009f04 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	005a      	lsls	r2, r3, #1
 8009ed8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009eda:	f003 0301 	and.w	r3, r3, #1
 8009ede:	4413      	add	r3, r2
 8009ee0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009ee2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ee4:	085b      	lsrs	r3, r3, #1
 8009ee6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d005      	beq.n	8009efe <gen_numname+0x5e>
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009ef8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009efc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f00:	3301      	adds	r3, #1
 8009f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	2b0f      	cmp	r3, #15
 8009f08:	d9e4      	bls.n	8009ed4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	881b      	ldrh	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1d8      	bne.n	8009ec4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009f16:	2307      	movs	r3, #7
 8009f18:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	f003 030f 	and.w	r3, r3, #15
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	3330      	adds	r3, #48	; 0x30
 8009f26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f2e:	2b39      	cmp	r3, #57	; 0x39
 8009f30:	d904      	bls.n	8009f3c <gen_numname+0x9c>
 8009f32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f36:	3307      	adds	r3, #7
 8009f38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3e:	1e5a      	subs	r2, r3, #1
 8009f40:	62ba      	str	r2, [r7, #40]	; 0x28
 8009f42:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009f46:	4413      	add	r3, r2
 8009f48:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009f4c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	091b      	lsrs	r3, r3, #4
 8009f54:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1de      	bne.n	8009f1a <gen_numname+0x7a>
	ns[i] = '~';
 8009f5c:	f107 0214 	add.w	r2, r7, #20
 8009f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f62:	4413      	add	r3, r2
 8009f64:	227e      	movs	r2, #126	; 0x7e
 8009f66:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009f68:	2300      	movs	r3, #0
 8009f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8009f6c:	e002      	b.n	8009f74 <gen_numname+0xd4>
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f70:	3301      	adds	r3, #1
 8009f72:	627b      	str	r3, [r7, #36]	; 0x24
 8009f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d205      	bcs.n	8009f88 <gen_numname+0xe8>
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	4413      	add	r3, r2
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	2b20      	cmp	r3, #32
 8009f86:	d1f2      	bne.n	8009f6e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8a:	2b07      	cmp	r3, #7
 8009f8c:	d808      	bhi.n	8009fa0 <gen_numname+0x100>
 8009f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f90:	1c5a      	adds	r2, r3, #1
 8009f92:	62ba      	str	r2, [r7, #40]	; 0x28
 8009f94:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009f98:	4413      	add	r3, r2
 8009f9a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009f9e:	e000      	b.n	8009fa2 <gen_numname+0x102>
 8009fa0:	2120      	movs	r1, #32
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa4:	1c5a      	adds	r2, r3, #1
 8009fa6:	627a      	str	r2, [r7, #36]	; 0x24
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	4413      	add	r3, r2
 8009fac:	460a      	mov	r2, r1
 8009fae:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb2:	2b07      	cmp	r3, #7
 8009fb4:	d9e8      	bls.n	8009f88 <gen_numname+0xe8>
}
 8009fb6:	bf00      	nop
 8009fb8:	bf00      	nop
 8009fba:	3730      	adds	r7, #48	; 0x30
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009fcc:	230b      	movs	r3, #11
 8009fce:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8009fd0:	7bfb      	ldrb	r3, [r7, #15]
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	0852      	lsrs	r2, r2, #1
 8009fd6:	01db      	lsls	r3, r3, #7
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	b2da      	uxtb	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	1c59      	adds	r1, r3, #1
 8009fe0:	6079      	str	r1, [r7, #4]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	73fb      	strb	r3, [r7, #15]
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	3b01      	subs	r3, #1
 8009fec:	60bb      	str	r3, [r7, #8]
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1ed      	bne.n	8009fd0 <sum_sfn+0x10>
	return sum;
 8009ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3714      	adds	r7, #20
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bc80      	pop	{r7}
 8009ffe:	4770      	bx	lr

0800a000 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a008:	2100      	movs	r1, #0
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7ff fb83 	bl	8009716 <dir_sdi>
 800a010:	4603      	mov	r3, r0
 800a012:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a014:	7dfb      	ldrb	r3, [r7, #23]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d001      	beq.n	800a01e <dir_find+0x1e>
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
 800a01c:	e0c1      	b.n	800a1a2 <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800a01e:	23ff      	movs	r3, #255	; 0xff
 800a020:	753b      	strb	r3, [r7, #20]
 800a022:	7d3b      	ldrb	r3, [r7, #20]
 800a024:	757b      	strb	r3, [r7, #21]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a02c:	3304      	adds	r3, #4
 800a02e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a032:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a042:	3310      	adds	r3, #16
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4619      	mov	r1, r3
 800a048:	4610      	mov	r0, r2
 800a04a:	f7fe fe79 	bl	8008d40 <move_window>
 800a04e:	4603      	mov	r3, r0
 800a050:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a052:	7dfb      	ldrb	r3, [r7, #23]
 800a054:	2b00      	cmp	r3, #0
 800a056:	f040 809e 	bne.w	800a196 <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a060:	3314      	adds	r3, #20
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a06c:	7dbb      	ldrb	r3, [r7, #22]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d102      	bne.n	800a078 <dir_find+0x78>
 800a072:	2304      	movs	r3, #4
 800a074:	75fb      	strb	r3, [r7, #23]
 800a076:	e093      	b.n	800a1a0 <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	330b      	adds	r3, #11
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a082:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a084:	7dbb      	ldrb	r3, [r7, #22]
 800a086:	2be5      	cmp	r3, #229	; 0xe5
 800a088:	d007      	beq.n	800a09a <dir_find+0x9a>
 800a08a:	7bfb      	ldrb	r3, [r7, #15]
 800a08c:	f003 0308 	and.w	r3, r3, #8
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00c      	beq.n	800a0ae <dir_find+0xae>
 800a094:	7bfb      	ldrb	r3, [r7, #15]
 800a096:	2b0f      	cmp	r3, #15
 800a098:	d009      	beq.n	800a0ae <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800a09a:	23ff      	movs	r3, #255	; 0xff
 800a09c:	757b      	strb	r3, [r7, #21]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a0a4:	3304      	adds	r3, #4
 800a0a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0aa:	801a      	strh	r2, [r3, #0]
 800a0ac:	e068      	b.n	800a180 <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	2b0f      	cmp	r3, #15
 800a0b2:	d139      	bne.n	800a128 <dir_find+0x128>
				if (dp->lfn) {
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d05f      	beq.n	800a180 <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a0c0:	7dbb      	ldrb	r3, [r7, #22]
 800a0c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d012      	beq.n	800a0f0 <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	7b5b      	ldrb	r3, [r3, #13]
 800a0ce:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800a0d0:	7dbb      	ldrb	r3, [r7, #22]
 800a0d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0d6:	75bb      	strb	r3, [r7, #22]
 800a0d8:	7dbb      	ldrb	r3, [r7, #22]
 800a0da:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0e2:	3306      	adds	r3, #6
 800a0e4:	881a      	ldrh	r2, [r3, #0]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a0ec:	3304      	adds	r3, #4
 800a0ee:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800a0f0:	7dba      	ldrb	r2, [r7, #22]
 800a0f2:	7d7b      	ldrb	r3, [r7, #21]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d114      	bne.n	800a122 <dir_find+0x122>
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	330d      	adds	r3, #13
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	7d3a      	ldrb	r2, [r7, #20]
 800a100:	429a      	cmp	r2, r3
 800a102:	d10e      	bne.n	800a122 <dir_find+0x122>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	6939      	ldr	r1, [r7, #16]
 800a10e:	4618      	mov	r0, r3
 800a110:	f7ff fde4 	bl	8009cdc <cmp_lfn>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <dir_find+0x122>
 800a11a:	7d7b      	ldrb	r3, [r7, #21]
 800a11c:	3b01      	subs	r3, #1
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	e000      	b.n	800a124 <dir_find+0x124>
 800a122:	23ff      	movs	r3, #255	; 0xff
 800a124:	757b      	strb	r3, [r7, #21]
 800a126:	e02b      	b.n	800a180 <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800a128:	7d7b      	ldrb	r3, [r7, #21]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d107      	bne.n	800a13e <dir_find+0x13e>
 800a12e:	6938      	ldr	r0, [r7, #16]
 800a130:	f7ff ff46 	bl	8009fc0 <sum_sfn>
 800a134:	4603      	mov	r3, r0
 800a136:	461a      	mov	r2, r3
 800a138:	7d3b      	ldrb	r3, [r7, #20]
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d02d      	beq.n	800a19a <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a144:	3318      	adds	r3, #24
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	330b      	adds	r3, #11
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	f003 0301 	and.w	r3, r3, #1
 800a150:	2b00      	cmp	r3, #0
 800a152:	d10c      	bne.n	800a16e <dir_find+0x16e>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a15a:	3318      	adds	r3, #24
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	220b      	movs	r2, #11
 800a160:	4619      	mov	r1, r3
 800a162:	6938      	ldr	r0, [r7, #16]
 800a164:	f7fe fb8e 	bl	8008884 <mem_cmp>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d017      	beq.n	800a19e <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800a16e:	23ff      	movs	r3, #255	; 0xff
 800a170:	757b      	strb	r3, [r7, #21]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a178:	3304      	adds	r3, #4
 800a17a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a17e:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800a180:	2100      	movs	r1, #0
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f7ff fba2 	bl	80098cc <dir_next>
 800a188:	4603      	mov	r3, r0
 800a18a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a18c:	7dfb      	ldrb	r3, [r7, #23]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f43f af50 	beq.w	800a034 <dir_find+0x34>
 800a194:	e004      	b.n	800a1a0 <dir_find+0x1a0>
		if (res != FR_OK) break;
 800a196:	bf00      	nop
 800a198:	e002      	b.n	800a1a0 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800a19a:	bf00      	nop
 800a19c:	e000      	b.n	800a1a0 <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800a19e:	bf00      	nop

	return res;
 800a1a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3718      	adds	r7, #24
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
	...

0800a1ac <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08c      	sub	sp, #48	; 0x30
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ba:	3318      	adds	r3, #24
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	623b      	str	r3, [r7, #32]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800a1ca:	f107 030c 	add.w	r3, r7, #12
 800a1ce:	220c      	movs	r2, #12
 800a1d0:	6a39      	ldr	r1, [r7, #32]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fe fb1e 	bl	8008814 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a1d8:	7dfb      	ldrb	r3, [r7, #23]
 800a1da:	f003 0301 	and.w	r3, r3, #1
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d039      	beq.n	800a256 <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800a1e2:	6a3b      	ldr	r3, [r7, #32]
 800a1e4:	330b      	adds	r3, #11
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	701a      	strb	r2, [r3, #0]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1f8:	e013      	b.n	800a222 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800a1fa:	f107 010c 	add.w	r1, r7, #12
 800a1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a200:	69fa      	ldr	r2, [r7, #28]
 800a202:	6a38      	ldr	r0, [r7, #32]
 800a204:	f7ff fe4c 	bl	8009ea0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7ff fef9 	bl	800a000 <dir_find>
 800a20e:	4603      	mov	r3, r0
 800a210:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a214:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d106      	bne.n	800a22a <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800a21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21e:	3301      	adds	r3, #1
 800a220:	62bb      	str	r3, [r7, #40]	; 0x28
 800a222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a224:	2b63      	cmp	r3, #99	; 0x63
 800a226:	d9e8      	bls.n	800a1fa <dir_register+0x4e>
 800a228:	e000      	b.n	800a22c <dir_register+0x80>
			if (res != FR_OK) break;
 800a22a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22e:	2b64      	cmp	r3, #100	; 0x64
 800a230:	d101      	bne.n	800a236 <dir_register+0x8a>
 800a232:	2307      	movs	r3, #7
 800a234:	e0e3      	b.n	800a3fe <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a236:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a23a:	2b04      	cmp	r3, #4
 800a23c:	d002      	beq.n	800a244 <dir_register+0x98>
 800a23e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a242:	e0dc      	b.n	800a3fe <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800a244:	6a3b      	ldr	r3, [r7, #32]
 800a246:	330b      	adds	r3, #11
 800a248:	7dfa      	ldrb	r2, [r7, #23]
 800a24a:	701a      	strb	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a252:	69fa      	ldr	r2, [r7, #28]
 800a254:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800a256:	7dfb      	ldrb	r3, [r7, #23]
 800a258:	f003 0302 	and.w	r3, r3, #2
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d014      	beq.n	800a28a <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 800a260:	2300      	movs	r3, #0
 800a262:	62bb      	str	r3, [r7, #40]	; 0x28
 800a264:	e002      	b.n	800a26c <dir_register+0xc0>
 800a266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a268:	3301      	adds	r3, #1
 800a26a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26e:	005b      	lsls	r3, r3, #1
 800a270:	69fa      	ldr	r2, [r7, #28]
 800a272:	4413      	add	r3, r2
 800a274:	881b      	ldrh	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1f5      	bne.n	800a266 <dir_register+0xba>
		nent = (n + 25) / 13;
 800a27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27c:	3319      	adds	r3, #25
 800a27e:	4a62      	ldr	r2, [pc, #392]	; (800a408 <dir_register+0x25c>)
 800a280:	fba2 2303 	umull	r2, r3, r2, r3
 800a284:	089b      	lsrs	r3, r3, #2
 800a286:	627b      	str	r3, [r7, #36]	; 0x24
 800a288:	e001      	b.n	800a28e <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800a28a:	2301      	movs	r3, #1
 800a28c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a28e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7ff fc7d 	bl	8009b90 <dir_alloc>
 800a296:	4603      	mov	r3, r0
 800a298:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a29c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d160      	bne.n	800a366 <dir_register+0x1ba>
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	627b      	str	r3, [r7, #36]	; 0x24
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d05a      	beq.n	800a366 <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2b6:	3306      	adds	r3, #6
 800a2b8:	881b      	ldrh	r3, [r3, #0]
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2be:	1ad3      	subs	r3, r2, r3
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f7ff fa27 	bl	8009716 <dir_sdi>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a2ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d147      	bne.n	800a366 <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2dc:	3318      	adds	r3, #24
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7ff fe6d 	bl	8009fc0 <sum_sfn>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2f8:	3310      	adds	r3, #16
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	4610      	mov	r0, r2
 800a300:	f7fe fd1e 	bl	8008d40 <move_window>
 800a304:	4603      	mov	r3, r0
 800a306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800a30a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d128      	bne.n	800a364 <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a318:	6818      	ldr	r0, [r3, #0]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a320:	3314      	adds	r3, #20
 800a322:	6819      	ldr	r1, [r3, #0]
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	b2da      	uxtb	r2, r3
 800a328:	7efb      	ldrb	r3, [r7, #27]
 800a32a:	f7ff fd45 	bl	8009db8 <fit_lfn>
				dp->fs->wflag = 1;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a33a:	3304      	adds	r3, #4
 800a33c:	2201      	movs	r2, #1
 800a33e:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 800a340:	2100      	movs	r1, #0
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f7ff fac2 	bl	80098cc <dir_next>
 800a348:	4603      	mov	r3, r0
 800a34a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a34e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a352:	2b00      	cmp	r3, #0
 800a354:	d107      	bne.n	800a366 <dir_register+0x1ba>
 800a356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a358:	3b01      	subs	r3, #1
 800a35a:	627b      	str	r3, [r7, #36]	; 0x24
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1c3      	bne.n	800a2ea <dir_register+0x13e>
 800a362:	e000      	b.n	800a366 <dir_register+0x1ba>
				if (res != FR_OK) break;
 800a364:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800a366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d145      	bne.n	800a3fa <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a37c:	3310      	adds	r3, #16
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4619      	mov	r1, r3
 800a382:	4610      	mov	r0, r2
 800a384:	f7fe fcdc 	bl	8008d40 <move_window>
 800a388:	4603      	mov	r3, r0
 800a38a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a38e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a392:	2b00      	cmp	r3, #0
 800a394:	d131      	bne.n	800a3fa <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a39c:	3314      	adds	r3, #20
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2220      	movs	r2, #32
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fe fa53 	bl	8008850 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3b0:	3314      	adds	r3, #20
 800a3b2:	6818      	ldr	r0, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ba:	3318      	adds	r3, #24
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	220b      	movs	r2, #11
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	f7fe fa27 	bl	8008814 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3cc:	3318      	adds	r3, #24
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	330b      	adds	r3, #11
 800a3d2:	781a      	ldrb	r2, [r3, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3da:	3314      	adds	r3, #20
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	330c      	adds	r3, #12
 800a3e0:	f002 0218 	and.w	r2, r2, #24
 800a3e4:	b2d2      	uxtb	r2, r2
 800a3e6:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3f4:	3304      	adds	r3, #4
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 800a3fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3730      	adds	r7, #48	; 0x30
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	4ec4ec4f 	.word	0x4ec4ec4f

0800a40c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b08a      	sub	sp, #40	; 0x28
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	613b      	str	r3, [r7, #16]
 800a41c:	e002      	b.n	800a424 <create_name+0x18>
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	3301      	adds	r3, #1
 800a422:	613b      	str	r3, [r7, #16]
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	2b2f      	cmp	r3, #47	; 0x2f
 800a42a:	d0f8      	beq.n	800a41e <create_name+0x12>
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	2b5c      	cmp	r3, #92	; 0x5c
 800a432:	d0f4      	beq.n	800a41e <create_name+0x12>
	lfn = dp->lfn;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800a43e:	2300      	movs	r3, #0
 800a440:	617b      	str	r3, [r7, #20]
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	1c5a      	adds	r2, r3, #1
 800a44a:	61ba      	str	r2, [r7, #24]
 800a44c:	693a      	ldr	r2, [r7, #16]
 800a44e:	4413      	add	r3, r2
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800a454:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a456:	2b1f      	cmp	r3, #31
 800a458:	d92f      	bls.n	800a4ba <create_name+0xae>
 800a45a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a45c:	2b2f      	cmp	r3, #47	; 0x2f
 800a45e:	d02c      	beq.n	800a4ba <create_name+0xae>
 800a460:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a462:	2b5c      	cmp	r3, #92	; 0x5c
 800a464:	d029      	beq.n	800a4ba <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	2bfe      	cmp	r3, #254	; 0xfe
 800a46a:	d901      	bls.n	800a470 <create_name+0x64>
			return FR_INVALID_NAME;
 800a46c:	2306      	movs	r3, #6
 800a46e:	e18b      	b.n	800a788 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a472:	b2db      	uxtb	r3, r3
 800a474:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a476:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a478:	2101      	movs	r1, #1
 800a47a:	4618      	mov	r0, r3
 800a47c:	f001 fefe 	bl	800c27c <ff_convert>
 800a480:	4603      	mov	r3, r0
 800a482:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a484:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a486:	2b00      	cmp	r3, #0
 800a488:	d101      	bne.n	800a48e <create_name+0x82>
 800a48a:	2306      	movs	r3, #6
 800a48c:	e17c      	b.n	800a788 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800a48e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a490:	2b7f      	cmp	r3, #127	; 0x7f
 800a492:	d809      	bhi.n	800a4a8 <create_name+0x9c>
 800a494:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a496:	4619      	mov	r1, r3
 800a498:	488f      	ldr	r0, [pc, #572]	; (800a6d8 <create_name+0x2cc>)
 800a49a:	f7fe fa19 	bl	80088d0 <chk_chr>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d001      	beq.n	800a4a8 <create_name+0x9c>
			return FR_INVALID_NAME;
 800a4a4:	2306      	movs	r3, #6
 800a4a6:	e16f      	b.n	800a788 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	1c5a      	adds	r2, r3, #1
 800a4ac:	617a      	str	r2, [r7, #20]
 800a4ae:	005b      	lsls	r3, r3, #1
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a4b6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a4b8:	e7c5      	b.n	800a446 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	441a      	add	r2, r3
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800a4c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4c6:	2b1f      	cmp	r3, #31
 800a4c8:	d801      	bhi.n	800a4ce <create_name+0xc2>
 800a4ca:	2304      	movs	r3, #4
 800a4cc:	e000      	b.n	800a4d0 <create_name+0xc4>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800a4d4:	e011      	b.n	800a4fa <create_name+0xee>
		w = lfn[di - 1];
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	005b      	lsls	r3, r3, #1
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	881b      	ldrh	r3, [r3, #0]
 800a4e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a4e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4ea:	2b20      	cmp	r3, #32
 800a4ec:	d002      	beq.n	800a4f4 <create_name+0xe8>
 800a4ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a4f2:	d106      	bne.n	800a502 <create_name+0xf6>
		di--;
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d1ea      	bne.n	800a4d6 <create_name+0xca>
 800a500:	e000      	b.n	800a504 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800a502:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <create_name+0x102>
 800a50a:	2306      	movs	r3, #6
 800a50c:	e13c      	b.n	800a788 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	005b      	lsls	r3, r3, #1
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	4413      	add	r3, r2
 800a516:	2200      	movs	r2, #0
 800a518:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a520:	3318      	adds	r3, #24
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	220b      	movs	r2, #11
 800a526:	2120      	movs	r1, #32
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fe f991 	bl	8008850 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a52e:	2300      	movs	r3, #0
 800a530:	61bb      	str	r3, [r7, #24]
 800a532:	e002      	b.n	800a53a <create_name+0x12e>
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	3301      	adds	r3, #1
 800a538:	61bb      	str	r3, [r7, #24]
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	005b      	lsls	r3, r3, #1
 800a53e:	68fa      	ldr	r2, [r7, #12]
 800a540:	4413      	add	r3, r2
 800a542:	881b      	ldrh	r3, [r3, #0]
 800a544:	2b20      	cmp	r3, #32
 800a546:	d0f5      	beq.n	800a534 <create_name+0x128>
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	005b      	lsls	r3, r3, #1
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	4413      	add	r3, r2
 800a550:	881b      	ldrh	r3, [r3, #0]
 800a552:	2b2e      	cmp	r3, #46	; 0x2e
 800a554:	d0ee      	beq.n	800a534 <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d009      	beq.n	800a570 <create_name+0x164>
 800a55c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a560:	f043 0303 	orr.w	r3, r3, #3
 800a564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a568:	e002      	b.n	800a570 <create_name+0x164>
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	3b01      	subs	r3, #1
 800a56e:	617b      	str	r3, [r7, #20]
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d009      	beq.n	800a58a <create_name+0x17e>
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a57c:	3b01      	subs	r3, #1
 800a57e:	005b      	lsls	r3, r3, #1
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	4413      	add	r3, r2
 800a584:	881b      	ldrh	r3, [r3, #0]
 800a586:	2b2e      	cmp	r3, #46	; 0x2e
 800a588:	d1ef      	bne.n	800a56a <create_name+0x15e>

	b = i = 0; ni = 8;
 800a58a:	2300      	movs	r3, #0
 800a58c:	623b      	str	r3, [r7, #32]
 800a58e:	2300      	movs	r3, #0
 800a590:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a594:	2308      	movs	r3, #8
 800a596:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	1c5a      	adds	r2, r3, #1
 800a59c:	61ba      	str	r2, [r7, #24]
 800a59e:	005b      	lsls	r3, r3, #1
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	881b      	ldrh	r3, [r3, #0]
 800a5a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a5a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	f000 8092 	beq.w	800a6d4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a5b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5b2:	2b20      	cmp	r3, #32
 800a5b4:	d006      	beq.n	800a5c4 <create_name+0x1b8>
 800a5b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5b8:	2b2e      	cmp	r3, #46	; 0x2e
 800a5ba:	d10a      	bne.n	800a5d2 <create_name+0x1c6>
 800a5bc:	69ba      	ldr	r2, [r7, #24]
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d006      	beq.n	800a5d2 <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 800a5c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5c8:	f043 0303 	orr.w	r3, r3, #3
 800a5cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a5d0:	e07f      	b.n	800a6d2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a5d2:	6a3a      	ldr	r2, [r7, #32]
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d203      	bcs.n	800a5e2 <create_name+0x1d6>
 800a5da:	69ba      	ldr	r2, [r7, #24]
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d123      	bne.n	800a62a <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	2b0b      	cmp	r3, #11
 800a5e6:	d106      	bne.n	800a5f6 <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 800a5e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5ec:	f043 0303 	orr.w	r3, r3, #3
 800a5f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a5f4:	e077      	b.n	800a6e6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a5f6:	69ba      	ldr	r2, [r7, #24]
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d005      	beq.n	800a60a <create_name+0x1fe>
 800a5fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a602:	f043 0303 	orr.w	r3, r3, #3
 800a606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a60a:	69ba      	ldr	r2, [r7, #24]
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d868      	bhi.n	800a6e4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	61bb      	str	r3, [r7, #24]
 800a616:	2308      	movs	r3, #8
 800a618:	623b      	str	r3, [r7, #32]
 800a61a:	230b      	movs	r3, #11
 800a61c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a61e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a628:	e053      	b.n	800a6d2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a62a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a62c:	2b7f      	cmp	r3, #127	; 0x7f
 800a62e:	d914      	bls.n	800a65a <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a630:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a632:	2100      	movs	r1, #0
 800a634:	4618      	mov	r0, r3
 800a636:	f001 fe21 	bl	800c27c <ff_convert>
 800a63a:	4603      	mov	r3, r0
 800a63c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a63e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a640:	2b00      	cmp	r3, #0
 800a642:	d004      	beq.n	800a64e <create_name+0x242>
 800a644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a646:	3b80      	subs	r3, #128	; 0x80
 800a648:	4a24      	ldr	r2, [pc, #144]	; (800a6dc <create_name+0x2d0>)
 800a64a:	5cd3      	ldrb	r3, [r2, r3]
 800a64c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a64e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a652:	f043 0302 	orr.w	r3, r3, #2
 800a656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a65a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d007      	beq.n	800a670 <create_name+0x264>
 800a660:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a662:	4619      	mov	r1, r3
 800a664:	481e      	ldr	r0, [pc, #120]	; (800a6e0 <create_name+0x2d4>)
 800a666:	f7fe f933 	bl	80088d0 <chk_chr>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d008      	beq.n	800a682 <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a670:	235f      	movs	r3, #95	; 0x5f
 800a672:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a678:	f043 0303 	orr.w	r3, r3, #3
 800a67c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a680:	e01b      	b.n	800a6ba <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a682:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a684:	2b40      	cmp	r3, #64	; 0x40
 800a686:	d909      	bls.n	800a69c <create_name+0x290>
 800a688:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a68a:	2b5a      	cmp	r3, #90	; 0x5a
 800a68c:	d806      	bhi.n	800a69c <create_name+0x290>
					b |= 2;
 800a68e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a692:	f043 0302 	orr.w	r3, r3, #2
 800a696:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a69a:	e00e      	b.n	800a6ba <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a69c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a69e:	2b60      	cmp	r3, #96	; 0x60
 800a6a0:	d90b      	bls.n	800a6ba <create_name+0x2ae>
 800a6a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6a4:	2b7a      	cmp	r3, #122	; 0x7a
 800a6a6:	d808      	bhi.n	800a6ba <create_name+0x2ae>
						b |= 1; w -= 0x20;
 800a6a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a6ac:	f043 0301 	orr.w	r3, r3, #1
 800a6b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a6b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6b6:	3b20      	subs	r3, #32
 800a6b8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6c0:	3318      	adds	r3, #24
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	6a3b      	ldr	r3, [r7, #32]
 800a6c6:	1c59      	adds	r1, r3, #1
 800a6c8:	6239      	str	r1, [r7, #32]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a6ce:	b2d2      	uxtb	r2, r2
 800a6d0:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800a6d2:	e761      	b.n	800a598 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 800a6d4:	bf00      	nop
 800a6d6:	e006      	b.n	800a6e6 <create_name+0x2da>
 800a6d8:	0800f2c0 	.word	0x0800f2c0
 800a6dc:	0800fad4 	.word	0x0800fad4
 800a6e0:	0800f2cc 	.word	0x0800f2cc
			if (si > di) break;			/* No extension */
 800a6e4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ec:	3318      	adds	r3, #24
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	2be5      	cmp	r3, #229	; 0xe5
 800a6f4:	d106      	bne.n	800a704 <create_name+0x2f8>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6fc:	3318      	adds	r3, #24
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2205      	movs	r2, #5
 800a702:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	2b08      	cmp	r3, #8
 800a708:	d104      	bne.n	800a714 <create_name+0x308>
 800a70a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800a714:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a718:	f003 030c 	and.w	r3, r3, #12
 800a71c:	2b0c      	cmp	r3, #12
 800a71e:	d005      	beq.n	800a72c <create_name+0x320>
 800a720:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a724:	f003 0303 	and.w	r3, r3, #3
 800a728:	2b03      	cmp	r3, #3
 800a72a:	d105      	bne.n	800a738 <create_name+0x32c>
		cf |= NS_LFN;
 800a72c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a730:	f043 0302 	orr.w	r3, r3, #2
 800a734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a73c:	f003 0302 	and.w	r3, r3, #2
 800a740:	2b00      	cmp	r3, #0
 800a742:	d117      	bne.n	800a774 <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a744:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a748:	f003 0303 	and.w	r3, r3, #3
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d105      	bne.n	800a75c <create_name+0x350>
 800a750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a754:	f043 0310 	orr.w	r3, r3, #16
 800a758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a75c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a760:	f003 030c 	and.w	r3, r3, #12
 800a764:	2b04      	cmp	r3, #4
 800a766:	d105      	bne.n	800a774 <create_name+0x368>
 800a768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a76c:	f043 0308 	orr.w	r3, r3, #8
 800a770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a77a:	3318      	adds	r3, #24
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	330b      	adds	r3, #11
 800a780:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a784:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a786:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3728      	adds	r7, #40	; 0x28
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	2b2f      	cmp	r3, #47	; 0x2f
 800a7a0:	d003      	beq.n	800a7aa <follow_path+0x1a>
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	2b5c      	cmp	r3, #92	; 0x5c
 800a7a8:	d102      	bne.n	800a7b0 <follow_path+0x20>
		path++;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7b6:	3308      	adds	r3, #8
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	2b1f      	cmp	r3, #31
 800a7c2:	d80c      	bhi.n	800a7de <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f7fe ffa5 	bl	8009716 <dir_sdi>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7d6:	3314      	adds	r3, #20
 800a7d8:	2200      	movs	r2, #0
 800a7da:	601a      	str	r2, [r3, #0]
 800a7dc:	e04c      	b.n	800a878 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a7de:	463b      	mov	r3, r7
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7ff fe12 	bl	800a40c <create_name>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a7ec:	7bfb      	ldrb	r3, [r7, #15]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d13d      	bne.n	800a86e <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f7ff fc04 	bl	800a000 <dir_find>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a802:	3318      	adds	r3, #24
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	7adb      	ldrb	r3, [r3, #11]
 800a808:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800a80a:	7bfb      	ldrb	r3, [r7, #15]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d00a      	beq.n	800a826 <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a810:	7bfb      	ldrb	r3, [r7, #15]
 800a812:	2b04      	cmp	r3, #4
 800a814:	d12d      	bne.n	800a872 <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a816:	7bbb      	ldrb	r3, [r7, #14]
 800a818:	f003 0304 	and.w	r3, r3, #4
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d128      	bne.n	800a872 <follow_path+0xe2>
 800a820:	2305      	movs	r3, #5
 800a822:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800a824:	e025      	b.n	800a872 <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a826:	7bbb      	ldrb	r3, [r7, #14]
 800a828:	f003 0304 	and.w	r3, r3, #4
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d122      	bne.n	800a876 <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a836:	3314      	adds	r3, #20
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	330b      	adds	r3, #11
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	f003 0310 	and.w	r3, r3, #16
 800a846:	2b00      	cmp	r3, #0
 800a848:	d102      	bne.n	800a850 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 800a84a:	2305      	movs	r3, #5
 800a84c:	73fb      	strb	r3, [r7, #15]
 800a84e:	e013      	b.n	800a878 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68b9      	ldr	r1, [r7, #8]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7ff f9e9 	bl	8009c32 <ld_clust>
 800a860:	4602      	mov	r2, r0
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a868:	3308      	adds	r3, #8
 800a86a:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a86c:	e7b7      	b.n	800a7de <follow_path+0x4e>
			if (res != FR_OK) break;
 800a86e:	bf00      	nop
 800a870:	e002      	b.n	800a878 <follow_path+0xe8>
				break;
 800a872:	bf00      	nop
 800a874:	e000      	b.n	800a878 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a876:	bf00      	nop
		}
	}

	return res;
 800a878:	7bfb      	ldrb	r3, [r7, #15]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a882:	b480      	push	{r7}
 800a884:	b087      	sub	sp, #28
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a88a:	f04f 33ff 	mov.w	r3, #4294967295
 800a88e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d031      	beq.n	800a8fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	617b      	str	r3, [r7, #20]
 800a89e:	e002      	b.n	800a8a6 <get_ldnumber+0x24>
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	617b      	str	r3, [r7, #20]
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	2b1f      	cmp	r3, #31
 800a8ac:	d903      	bls.n	800a8b6 <get_ldnumber+0x34>
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	2b3a      	cmp	r3, #58	; 0x3a
 800a8b4:	d1f4      	bne.n	800a8a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	2b3a      	cmp	r3, #58	; 0x3a
 800a8bc:	d11c      	bne.n	800a8f8 <get_ldnumber+0x76>
			tp = *path;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	1c5a      	adds	r2, r3, #1
 800a8c8:	60fa      	str	r2, [r7, #12]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	3b30      	subs	r3, #48	; 0x30
 800a8ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	2b09      	cmp	r3, #9
 800a8d4:	d80e      	bhi.n	800a8f4 <get_ldnumber+0x72>
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d10a      	bne.n	800a8f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d107      	bne.n	800a8f4 <get_ldnumber+0x72>
					vol = (int)i;
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	617b      	str	r3, [r7, #20]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	697a      	ldr	r2, [r7, #20]
 800a8f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	e002      	b.n	800a8fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a8fc:	693b      	ldr	r3, [r7, #16]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	371c      	adds	r7, #28
 800a902:	46bd      	mov	sp, r7
 800a904:	bc80      	pop	{r7}
 800a906:	4770      	bx	lr

0800a908 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a918:	3304      	adds	r3, #4
 800a91a:	2200      	movs	r2, #0
 800a91c:	701a      	strb	r2, [r3, #0]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a924:	330c      	adds	r3, #12
 800a926:	f04f 32ff 	mov.w	r2, #4294967295
 800a92a:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800a92c:	6839      	ldr	r1, [r7, #0]
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f7fe fa06 	bl	8008d40 <move_window>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d001      	beq.n	800a93e <check_fs+0x36>
		return 3;
 800a93a:	2303      	movs	r3, #3
 800a93c:	e04a      	b.n	800a9d4 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a944:	3301      	adds	r3, #1
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	021b      	lsls	r3, r3, #8
 800a94a:	b21a      	sxth	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800a952:	b21b      	sxth	r3, r3
 800a954:	4313      	orrs	r3, r2
 800a956:	b21b      	sxth	r3, r3
 800a958:	4a20      	ldr	r2, [pc, #128]	; (800a9dc <check_fs+0xd4>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d001      	beq.n	800a962 <check_fs+0x5a>
		return 2;
 800a95e:	2302      	movs	r3, #2
 800a960:	e038      	b.n	800a9d4 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	3336      	adds	r3, #54	; 0x36
 800a966:	3303      	adds	r3, #3
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	061a      	lsls	r2, r3, #24
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	3336      	adds	r3, #54	; 0x36
 800a970:	3302      	adds	r3, #2
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	041b      	lsls	r3, r3, #16
 800a976:	4313      	orrs	r3, r2
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	3236      	adds	r2, #54	; 0x36
 800a97c:	3201      	adds	r2, #1
 800a97e:	7812      	ldrb	r2, [r2, #0]
 800a980:	0212      	lsls	r2, r2, #8
 800a982:	4313      	orrs	r3, r2
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800a98a:	4313      	orrs	r3, r2
 800a98c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a990:	4a13      	ldr	r2, [pc, #76]	; (800a9e0 <check_fs+0xd8>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d101      	bne.n	800a99a <check_fs+0x92>
		return 0;
 800a996:	2300      	movs	r3, #0
 800a998:	e01c      	b.n	800a9d4 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	3352      	adds	r3, #82	; 0x52
 800a99e:	3303      	adds	r3, #3
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	061a      	lsls	r2, r3, #24
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	3352      	adds	r3, #82	; 0x52
 800a9a8:	3302      	adds	r3, #2
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	041b      	lsls	r3, r3, #16
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	3252      	adds	r2, #82	; 0x52
 800a9b4:	3201      	adds	r2, #1
 800a9b6:	7812      	ldrb	r2, [r2, #0]
 800a9b8:	0212      	lsls	r2, r2, #8
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a9c8:	4a05      	ldr	r2, [pc, #20]	; (800a9e0 <check_fs+0xd8>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d101      	bne.n	800a9d2 <check_fs+0xca>
		return 0;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	e000      	b.n	800a9d4 <check_fs+0xcc>

	return 1;
 800a9d2:	2301      	movs	r3, #1
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3708      	adds	r7, #8
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	ffffaa55 	.word	0xffffaa55
 800a9e0:	00544146 	.word	0x00544146

0800a9e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b096      	sub	sp, #88	; 0x58
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a9f8:	68b8      	ldr	r0, [r7, #8]
 800a9fa:	f7ff ff42 	bl	800a882 <get_ldnumber>
 800a9fe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800aa00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	da01      	bge.n	800aa0a <find_volume+0x26>
 800aa06:	230b      	movs	r3, #11
 800aa08:	e33c      	b.n	800b084 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800aa0a:	4ab3      	ldr	r2, [pc, #716]	; (800acd8 <find_volume+0x2f4>)
 800aa0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa12:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800aa14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <find_volume+0x3a>
 800aa1a:	230c      	movs	r3, #12
 800aa1c:	e332      	b.n	800b084 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa22:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800aa24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d01d      	beq.n	800aa6c <find_volume+0x88>
		stat = disk_status(fs->drv);
 800aa30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa36:	3301      	adds	r3, #1
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fd fe4c 	bl	80086d8 <disk_status>
 800aa40:	4603      	mov	r3, r0
 800aa42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800aa46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa4a:	f003 0301 	and.w	r3, r3, #1
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d10c      	bne.n	800aa6c <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800aa52:	79fb      	ldrb	r3, [r7, #7]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d007      	beq.n	800aa68 <find_volume+0x84>
 800aa58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa5c:	f003 0304 	and.w	r3, r3, #4
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d001      	beq.n	800aa68 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800aa64:	230a      	movs	r3, #10
 800aa66:	e30d      	b.n	800b084 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 800aa68:	2300      	movs	r3, #0
 800aa6a:	e30b      	b.n	800b084 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800aa6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa72:	2200      	movs	r2, #0
 800aa74:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800aa76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa78:	b2da      	uxtb	r2, r3
 800aa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa80:	3301      	adds	r3, #1
 800aa82:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800aa84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fd fe3c 	bl	800870c <disk_initialize>
 800aa94:	4603      	mov	r3, r0
 800aa96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800aa9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa9e:	f003 0301 	and.w	r3, r3, #1
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d001      	beq.n	800aaaa <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	e2ec      	b.n	800b084 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800aaaa:	79fb      	ldrb	r3, [r7, #7]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d007      	beq.n	800aac0 <find_volume+0xdc>
 800aab0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aab4:	f003 0304 	and.w	r3, r3, #4
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d001      	beq.n	800aac0 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800aabc:	230a      	movs	r3, #10
 800aabe:	e2e1      	b.n	800b084 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800aac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aac6:	3301      	adds	r3, #1
 800aac8:	7818      	ldrb	r0, [r3, #0]
 800aaca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aacc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aad0:	330a      	adds	r3, #10
 800aad2:	461a      	mov	r2, r3
 800aad4:	2102      	movs	r1, #2
 800aad6:	f7fd fe7f 	bl	80087d8 <disk_ioctl>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d10f      	bne.n	800ab00 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800aae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aae6:	330a      	adds	r3, #10
 800aae8:	881b      	ldrh	r3, [r3, #0]
 800aaea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aaee:	d307      	bcc.n	800ab00 <find_volume+0x11c>
 800aaf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaf6:	330a      	adds	r3, #10
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aafe:	d901      	bls.n	800ab04 <find_volume+0x120>
 800ab00:	2301      	movs	r3, #1
 800ab02:	e2bf      	b.n	800b084 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800ab08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ab0a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab0c:	f7ff fefc 	bl	800a908 <check_fs>
 800ab10:	4603      	mov	r3, r0
 800ab12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800ab16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d155      	bne.n	800abca <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800ab1e:	2300      	movs	r3, #0
 800ab20:	643b      	str	r3, [r7, #64]	; 0x40
 800ab22:	e029      	b.n	800ab78 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800ab24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab28:	011b      	lsls	r3, r3, #4
 800ab2a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ab2e:	4413      	add	r3, r2
 800ab30:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800ab32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab34:	3304      	adds	r3, #4
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d012      	beq.n	800ab62 <find_volume+0x17e>
 800ab3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3e:	330b      	adds	r3, #11
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	061a      	lsls	r2, r3, #24
 800ab44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab46:	330a      	adds	r3, #10
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	041b      	lsls	r3, r3, #16
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab50:	3209      	adds	r2, #9
 800ab52:	7812      	ldrb	r2, [r2, #0]
 800ab54:	0212      	lsls	r2, r2, #8
 800ab56:	4313      	orrs	r3, r2
 800ab58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab5a:	3208      	adds	r2, #8
 800ab5c:	7812      	ldrb	r2, [r2, #0]
 800ab5e:	431a      	orrs	r2, r3
 800ab60:	e000      	b.n	800ab64 <find_volume+0x180>
 800ab62:	2200      	movs	r2, #0
 800ab64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ab6c:	440b      	add	r3, r1
 800ab6e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800ab72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab74:	3301      	adds	r3, #1
 800ab76:	643b      	str	r3, [r7, #64]	; 0x40
 800ab78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab7a:	2b03      	cmp	r3, #3
 800ab7c:	d9d2      	bls.n	800ab24 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800ab7e:	2300      	movs	r3, #0
 800ab80:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ab82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d002      	beq.n	800ab8e <find_volume+0x1aa>
 800ab88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800ab8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ab96:	4413      	add	r3, r2
 800ab98:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ab9c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800ab9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d005      	beq.n	800abb0 <find_volume+0x1cc>
 800aba4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aba6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aba8:	f7ff feae 	bl	800a908 <check_fs>
 800abac:	4603      	mov	r3, r0
 800abae:	e000      	b.n	800abb2 <find_volume+0x1ce>
 800abb0:	2302      	movs	r3, #2
 800abb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800abb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d005      	beq.n	800abca <find_volume+0x1e6>
 800abbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abc0:	3301      	adds	r3, #1
 800abc2:	643b      	str	r3, [r7, #64]	; 0x40
 800abc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abc6:	2b03      	cmp	r3, #3
 800abc8:	d9e1      	bls.n	800ab8e <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800abca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800abce:	2b03      	cmp	r3, #3
 800abd0:	d101      	bne.n	800abd6 <find_volume+0x1f2>
 800abd2:	2301      	movs	r3, #1
 800abd4:	e256      	b.n	800b084 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800abd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d001      	beq.n	800abe2 <find_volume+0x1fe>
 800abde:	230d      	movs	r3, #13
 800abe0:	e250      	b.n	800b084 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800abe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe4:	7b1b      	ldrb	r3, [r3, #12]
 800abe6:	021b      	lsls	r3, r3, #8
 800abe8:	b21a      	sxth	r2, r3
 800abea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abec:	7adb      	ldrb	r3, [r3, #11]
 800abee:	b21b      	sxth	r3, r3
 800abf0:	4313      	orrs	r3, r2
 800abf2:	b21a      	sxth	r2, r3
 800abf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abfa:	330a      	adds	r3, #10
 800abfc:	881b      	ldrh	r3, [r3, #0]
 800abfe:	b21b      	sxth	r3, r3
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d001      	beq.n	800ac08 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 800ac04:	230d      	movs	r3, #13
 800ac06:	e23d      	b.n	800b084 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800ac08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0a:	7ddb      	ldrb	r3, [r3, #23]
 800ac0c:	021b      	lsls	r3, r3, #8
 800ac0e:	b21a      	sxth	r2, r3
 800ac10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac12:	7d9b      	ldrb	r3, [r3, #22]
 800ac14:	b21b      	sxth	r3, r3
 800ac16:	4313      	orrs	r3, r2
 800ac18:	b21b      	sxth	r3, r3
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800ac1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d112      	bne.n	800ac4a <find_volume+0x266>
 800ac24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac26:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ac2a:	061a      	lsls	r2, r3, #24
 800ac2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800ac32:	041b      	lsls	r3, r3, #16
 800ac34:	4313      	orrs	r3, r2
 800ac36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac38:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800ac3c:	0212      	lsls	r2, r2, #8
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac42:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800ac46:	4313      	orrs	r3, r2
 800ac48:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800ac4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac50:	3318      	adds	r3, #24
 800ac52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac54:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800ac56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac58:	7c1a      	ldrb	r2, [r3, #16]
 800ac5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac60:	3303      	adds	r3, #3
 800ac62:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800ac64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac6a:	3303      	adds	r3, #3
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d008      	beq.n	800ac84 <find_volume+0x2a0>
 800ac72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac78:	3303      	adds	r3, #3
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d001      	beq.n	800ac84 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800ac80:	230d      	movs	r3, #13
 800ac82:	e1ff      	b.n	800b084 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800ac84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac8a:	3303      	adds	r3, #3
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac92:	fb02 f303 	mul.w	r3, r2, r3
 800ac96:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800ac98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9a:	7b5a      	ldrb	r2, [r3, #13]
 800ac9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aca2:	3302      	adds	r3, #2
 800aca4:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800aca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acac:	3302      	adds	r3, #2
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00e      	beq.n	800acd2 <find_volume+0x2ee>
 800acb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acba:	3302      	adds	r3, #2
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	461a      	mov	r2, r3
 800acc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acc6:	3302      	adds	r3, #2
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	3b01      	subs	r3, #1
 800accc:	4013      	ands	r3, r2
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d004      	beq.n	800acdc <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 800acd2:	230d      	movs	r3, #13
 800acd4:	e1d6      	b.n	800b084 <find_volume+0x6a0>
 800acd6:	bf00      	nop
 800acd8:	20000228 	.word	0x20000228

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800acdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acde:	7c9b      	ldrb	r3, [r3, #18]
 800ace0:	021b      	lsls	r3, r3, #8
 800ace2:	b21a      	sxth	r2, r3
 800ace4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace6:	7c5b      	ldrb	r3, [r3, #17]
 800ace8:	b21b      	sxth	r3, r3
 800acea:	4313      	orrs	r3, r2
 800acec:	b21b      	sxth	r3, r3
 800acee:	b29a      	uxth	r2, r3
 800acf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acf6:	3308      	adds	r3, #8
 800acf8:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800acfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad00:	3308      	adds	r3, #8
 800ad02:	881a      	ldrh	r2, [r3, #0]
 800ad04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad0a:	330a      	adds	r3, #10
 800ad0c:	881b      	ldrh	r3, [r3, #0]
 800ad0e:	095b      	lsrs	r3, r3, #5
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	fbb2 f1f3 	udiv	r1, r2, r3
 800ad16:	fb03 f301 	mul.w	r3, r3, r1
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d001      	beq.n	800ad26 <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 800ad22:	230d      	movs	r3, #13
 800ad24:	e1ae      	b.n	800b084 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800ad26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad28:	7d1b      	ldrb	r3, [r3, #20]
 800ad2a:	021b      	lsls	r3, r3, #8
 800ad2c:	b21a      	sxth	r2, r3
 800ad2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad30:	7cdb      	ldrb	r3, [r3, #19]
 800ad32:	b21b      	sxth	r3, r3
 800ad34:	4313      	orrs	r3, r2
 800ad36:	b21b      	sxth	r3, r3
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800ad3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d112      	bne.n	800ad68 <find_volume+0x384>
 800ad42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad44:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800ad48:	061a      	lsls	r2, r3, #24
 800ad4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800ad50:	041b      	lsls	r3, r3, #16
 800ad52:	4313      	orrs	r3, r2
 800ad54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad56:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800ad5a:	0212      	lsls	r2, r2, #8
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad60:	f892 2020 	ldrb.w	r2, [r2, #32]
 800ad64:	4313      	orrs	r3, r2
 800ad66:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800ad68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6a:	7bdb      	ldrb	r3, [r3, #15]
 800ad6c:	021b      	lsls	r3, r3, #8
 800ad6e:	b21a      	sxth	r2, r3
 800ad70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad72:	7b9b      	ldrb	r3, [r3, #14]
 800ad74:	b21b      	sxth	r3, r3
 800ad76:	4313      	orrs	r3, r2
 800ad78:	b21b      	sxth	r3, r3
 800ad7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800ad7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d101      	bne.n	800ad86 <find_volume+0x3a2>
 800ad82:	230d      	movs	r3, #13
 800ad84:	e17e      	b.n	800b084 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800ad86:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ad88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad8a:	441a      	add	r2, r3
 800ad8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad92:	3308      	adds	r3, #8
 800ad94:	8819      	ldrh	r1, [r3, #0]
 800ad96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad9c:	330a      	adds	r3, #10
 800ad9e:	881b      	ldrh	r3, [r3, #0]
 800ada0:	095b      	lsrs	r3, r3, #5
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	fbb1 f3f3 	udiv	r3, r1, r3
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	4413      	add	r3, r2
 800adac:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800adae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d201      	bcs.n	800adba <find_volume+0x3d6>
 800adb6:	230d      	movs	r3, #13
 800adb8:	e164      	b.n	800b084 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800adba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbe:	1ad2      	subs	r2, r2, r3
 800adc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adc6:	3302      	adds	r3, #2
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	fbb2 f3f3 	udiv	r3, r2, r3
 800adce:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add2:	2b00      	cmp	r3, #0
 800add4:	d101      	bne.n	800adda <find_volume+0x3f6>
 800add6:	230d      	movs	r3, #13
 800add8:	e154      	b.n	800b084 <find_volume+0x6a0>
	fmt = FS_FAT12;
 800adda:	2301      	movs	r3, #1
 800addc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800ade0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d902      	bls.n	800adf0 <find_volume+0x40c>
 800adea:	2302      	movs	r3, #2
 800adec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800adf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d902      	bls.n	800ae00 <find_volume+0x41c>
 800adfa:	2303      	movs	r3, #3
 800adfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae02:	1c9a      	adds	r2, r3, #2
 800ae04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae0a:	3314      	adds	r3, #20
 800ae0c:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 800ae0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae14:	331c      	adds	r3, #28
 800ae16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae18:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800ae1a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ae1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae1e:	441a      	add	r2, r3
 800ae20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae22:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ae26:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 800ae28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2c:	441a      	add	r2, r3
 800ae2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae30:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ae34:	3308      	adds	r3, #8
 800ae36:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 800ae38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae3c:	2b03      	cmp	r3, #3
 800ae3e:	d127      	bne.n	800ae90 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800ae40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae46:	3308      	adds	r3, #8
 800ae48:	881b      	ldrh	r3, [r3, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d001      	beq.n	800ae52 <find_volume+0x46e>
 800ae4e:	230d      	movs	r3, #13
 800ae50:	e118      	b.n	800b084 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800ae52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae54:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ae58:	061a      	lsls	r2, r3, #24
 800ae5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ae60:	041b      	lsls	r3, r3, #16
 800ae62:	4313      	orrs	r3, r2
 800ae64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae66:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800ae6a:	0212      	lsls	r2, r2, #8
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae70:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800ae74:	431a      	orrs	r2, r3
 800ae76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae78:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800ae80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae86:	3314      	adds	r3, #20
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	647b      	str	r3, [r7, #68]	; 0x44
 800ae8e:	e030      	b.n	800aef2 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800ae90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae96:	3308      	adds	r3, #8
 800ae98:	881b      	ldrh	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d101      	bne.n	800aea2 <find_volume+0x4be>
 800ae9e:	230d      	movs	r3, #13
 800aea0:	e0f0      	b.n	800b084 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800aea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeac:	441a      	add	r2, r3
 800aeae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800aeb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d106      	bne.n	800aece <find_volume+0x4ea>
 800aec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aec6:	3314      	adds	r3, #20
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	005b      	lsls	r3, r3, #1
 800aecc:	e010      	b.n	800aef0 <find_volume+0x50c>
 800aece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aed4:	3314      	adds	r3, #20
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	4613      	mov	r3, r2
 800aeda:	005b      	lsls	r3, r3, #1
 800aedc:	4413      	add	r3, r2
 800aede:	085a      	lsrs	r2, r3, #1
 800aee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aee6:	3314      	adds	r3, #20
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f003 0301 	and.w	r3, r3, #1
 800aeee:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800aef0:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800aef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aef8:	3318      	adds	r3, #24
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af02:	330a      	adds	r3, #10
 800af04:	881b      	ldrh	r3, [r3, #0]
 800af06:	4619      	mov	r1, r3
 800af08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af0a:	440b      	add	r3, r1
 800af0c:	1e59      	subs	r1, r3, #1
 800af0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af14:	330a      	adds	r3, #10
 800af16:	881b      	ldrh	r3, [r3, #0]
 800af18:	fbb1 f3f3 	udiv	r3, r1, r3
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d201      	bcs.n	800af24 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 800af20:	230d      	movs	r3, #13
 800af22:	e0af      	b.n	800b084 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800af24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af2a:	3310      	adds	r3, #16
 800af2c:	f04f 32ff 	mov.w	r2, #4294967295
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af38:	3310      	adds	r3, #16
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af42:	330c      	adds	r3, #12
 800af44:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800af46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af4c:	3305      	adds	r3, #5
 800af4e:	2280      	movs	r2, #128	; 0x80
 800af50:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800af52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af56:	2b03      	cmp	r3, #3
 800af58:	d17d      	bne.n	800b056 <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800af5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800af60:	021b      	lsls	r3, r3, #8
 800af62:	b21a      	sxth	r2, r3
 800af64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af6a:	b21b      	sxth	r3, r3
 800af6c:	4313      	orrs	r3, r2
 800af6e:	b21b      	sxth	r3, r3
 800af70:	2b01      	cmp	r3, #1
 800af72:	d170      	bne.n	800b056 <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 800af74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af76:	3301      	adds	r3, #1
 800af78:	4619      	mov	r1, r3
 800af7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af7c:	f7fd fee0 	bl	8008d40 <move_window>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d167      	bne.n	800b056 <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 800af86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af8c:	3305      	adds	r3, #5
 800af8e:	2200      	movs	r2, #0
 800af90:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800af92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af94:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800af98:	021b      	lsls	r3, r3, #8
 800af9a:	b21a      	sxth	r2, r3
 800af9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800afa2:	b21b      	sxth	r3, r3
 800afa4:	4313      	orrs	r3, r2
 800afa6:	b21b      	sxth	r3, r3
 800afa8:	4a38      	ldr	r2, [pc, #224]	; (800b08c <find_volume+0x6a8>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d153      	bne.n	800b056 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800afae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb0:	78db      	ldrb	r3, [r3, #3]
 800afb2:	061a      	lsls	r2, r3, #24
 800afb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb6:	789b      	ldrb	r3, [r3, #2]
 800afb8:	041b      	lsls	r3, r3, #16
 800afba:	4313      	orrs	r3, r2
 800afbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afbe:	7852      	ldrb	r2, [r2, #1]
 800afc0:	0212      	lsls	r2, r2, #8
 800afc2:	4313      	orrs	r3, r2
 800afc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afc6:	7812      	ldrb	r2, [r2, #0]
 800afc8:	4313      	orrs	r3, r2
 800afca:	4a31      	ldr	r2, [pc, #196]	; (800b090 <find_volume+0x6ac>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d142      	bne.n	800b056 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800afd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd2:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800afd6:	061a      	lsls	r2, r3, #24
 800afd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afda:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800afde:	041b      	lsls	r3, r3, #16
 800afe0:	4313      	orrs	r3, r2
 800afe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afe4:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800afe8:	0212      	lsls	r2, r2, #8
 800afea:	4313      	orrs	r3, r2
 800afec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afee:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800aff2:	4313      	orrs	r3, r2
 800aff4:	4a27      	ldr	r2, [pc, #156]	; (800b094 <find_volume+0x6b0>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d12d      	bne.n	800b056 <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800affa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affc:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800b000:	061a      	lsls	r2, r3, #24
 800b002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b004:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800b008:	041b      	lsls	r3, r3, #16
 800b00a:	4313      	orrs	r3, r2
 800b00c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b00e:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800b012:	0212      	lsls	r2, r2, #8
 800b014:	4313      	orrs	r3, r2
 800b016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b018:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800b01c:	431a      	orrs	r2, r3
 800b01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b024:	3310      	adds	r3, #16
 800b026:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800b028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02a:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800b02e:	061a      	lsls	r2, r3, #24
 800b030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b032:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800b036:	041b      	lsls	r3, r3, #16
 800b038:	4313      	orrs	r3, r2
 800b03a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b03c:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800b040:	0212      	lsls	r2, r2, #8
 800b042:	4313      	orrs	r3, r2
 800b044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b046:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800b04a:	431a      	orrs	r2, r3
 800b04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b052:	330c      	adds	r3, #12
 800b054:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800b056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b05c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b060:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800b062:	4b0d      	ldr	r3, [pc, #52]	; (800b098 <find_volume+0x6b4>)
 800b064:	881b      	ldrh	r3, [r3, #0]
 800b066:	3301      	adds	r3, #1
 800b068:	b29a      	uxth	r2, r3
 800b06a:	4b0b      	ldr	r3, [pc, #44]	; (800b098 <find_volume+0x6b4>)
 800b06c:	801a      	strh	r2, [r3, #0]
 800b06e:	4b0a      	ldr	r3, [pc, #40]	; (800b098 <find_volume+0x6b4>)
 800b070:	881a      	ldrh	r2, [r3, #0]
 800b072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b078:	3306      	adds	r3, #6
 800b07a:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800b07c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b07e:	f7fd fddb 	bl	8008c38 <clear_lock>
#endif

	return FR_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3758      	adds	r7, #88	; 0x58
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	ffffaa55 	.word	0xffffaa55
 800b090:	41615252 	.word	0x41615252
 800b094:	61417272 	.word	0x61417272
 800b098:	2000022c 	.word	0x2000022c

0800b09c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d02d      	beq.n	800b10a <validate+0x6e>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d027      	beq.n	800b10a <validate+0x6e>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d01e      	beq.n	800b10a <validate+0x6e>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0d8:	3306      	adds	r3, #6
 800b0da:	881a      	ldrh	r2, [r3, #0]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0e2:	3304      	adds	r3, #4
 800b0e4:	881b      	ldrh	r3, [r3, #0]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d10f      	bne.n	800b10a <validate+0x6e>
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7fd faec 	bl	80086d8 <disk_status>
 800b100:	4603      	mov	r3, r0
 800b102:	f003 0301 	and.w	r3, r3, #1
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <validate+0x72>
		return FR_INVALID_OBJECT;
 800b10a:	2309      	movs	r3, #9
 800b10c:	e000      	b.n	800b110 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800b10e:	2300      	movs	r3, #0
}
 800b110:	4618      	mov	r0, r3
 800b112:	3710      	adds	r7, #16
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b088      	sub	sp, #32
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	4613      	mov	r3, r2
 800b124:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800b12a:	f107 0310 	add.w	r3, r7, #16
 800b12e:	4618      	mov	r0, r3
 800b130:	f7ff fba7 	bl	800a882 <get_ldnumber>
 800b134:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	da01      	bge.n	800b140 <f_mount+0x28>
 800b13c:	230b      	movs	r3, #11
 800b13e:	e02f      	b.n	800b1a0 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b140:	4a19      	ldr	r2, [pc, #100]	; (800b1a8 <f_mount+0x90>)
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b148:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d007      	beq.n	800b160 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800b150:	69b8      	ldr	r0, [r7, #24]
 800b152:	f7fd fd71 	bl	8008c38 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b15c:	2200      	movs	r2, #0
 800b15e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d004      	beq.n	800b170 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b16c:	2200      	movs	r2, #0
 800b16e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	490d      	ldr	r1, [pc, #52]	; (800b1a8 <f_mount+0x90>)
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d002      	beq.n	800b186 <f_mount+0x6e>
 800b180:	79fb      	ldrb	r3, [r7, #7]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d001      	beq.n	800b18a <f_mount+0x72>
 800b186:	2300      	movs	r3, #0
 800b188:	e00a      	b.n	800b1a0 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800b18a:	f107 0108 	add.w	r1, r7, #8
 800b18e:	f107 030c 	add.w	r3, r7, #12
 800b192:	2200      	movs	r2, #0
 800b194:	4618      	mov	r0, r3
 800b196:	f7ff fc25 	bl	800a9e4 <find_volume>
 800b19a:	4603      	mov	r3, r0
 800b19c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b19e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3720      	adds	r7, #32
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}
 800b1a8:	20000228 	.word	0x20000228

0800b1ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	f107 0318 	add.w	r3, r7, #24
 800b1ba:	3b0c      	subs	r3, #12
 800b1bc:	6018      	str	r0, [r3, #0]
 800b1be:	f107 0318 	add.w	r3, r7, #24
 800b1c2:	3b10      	subs	r3, #16
 800b1c4:	6019      	str	r1, [r3, #0]
 800b1c6:	f107 0318 	add.w	r3, r7, #24
 800b1ca:	3b11      	subs	r3, #17
 800b1cc:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800b1ce:	f107 0318 	add.w	r3, r7, #24
 800b1d2:	3b0c      	subs	r3, #12
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d101      	bne.n	800b1de <f_open+0x32>
 800b1da:	2309      	movs	r3, #9
 800b1dc:	e319      	b.n	800b812 <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 800b1de:	f107 0318 	add.w	r3, r7, #24
 800b1e2:	3b0c      	subs	r3, #12
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800b1ee:	f107 0318 	add.w	r3, r7, #24
 800b1f2:	3b11      	subs	r3, #17
 800b1f4:	f107 0218 	add.w	r2, r7, #24
 800b1f8:	3a11      	subs	r2, #17
 800b1fa:	7812      	ldrb	r2, [r2, #0]
 800b1fc:	f002 021f 	and.w	r2, r2, #31
 800b200:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800b202:	f107 0318 	add.w	r3, r7, #24
 800b206:	3b11      	subs	r3, #17
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	f023 0301 	bic.w	r3, r3, #1
 800b20e:	b2da      	uxtb	r2, r3
 800b210:	f107 0118 	add.w	r1, r7, #24
 800b214:	3910      	subs	r1, #16
 800b216:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b21a:	3b18      	subs	r3, #24
 800b21c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b220:	4618      	mov	r0, r3
 800b222:	f7ff fbdf 	bl	800a9e4 <find_volume>
 800b226:	4603      	mov	r3, r0
 800b228:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b22c:	f102 0217 	add.w	r2, r2, #23
 800b230:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800b232:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b236:	f103 0317 	add.w	r3, r3, #23
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f040 82e3 	bne.w	800b808 <f_open+0x65c>
		INIT_BUF(dj);
 800b242:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b246:	3b18      	subs	r3, #24
 800b248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b24c:	3318      	adds	r3, #24
 800b24e:	f107 0218 	add.w	r2, r7, #24
 800b252:	3a04      	subs	r2, #4
 800b254:	601a      	str	r2, [r3, #0]
 800b256:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b25a:	3b18      	subs	r3, #24
 800b25c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b260:	4ad1      	ldr	r2, [pc, #836]	; (800b5a8 <f_open+0x3fc>)
 800b262:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 800b264:	f107 0318 	add.w	r3, r7, #24
 800b268:	3b10      	subs	r3, #16
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b270:	3b18      	subs	r3, #24
 800b272:	4611      	mov	r1, r2
 800b274:	4618      	mov	r0, r3
 800b276:	f7ff fa8b 	bl	800a790 <follow_path>
 800b27a:	4603      	mov	r3, r0
 800b27c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b280:	f102 0217 	add.w	r2, r2, #23
 800b284:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800b286:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b28a:	3b18      	subs	r3, #24
 800b28c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b290:	3314      	adds	r3, #20
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b298:	f102 0210 	add.w	r2, r2, #16
 800b29c:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b29e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b2a2:	f103 0317 	add.w	r3, r3, #23
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d126      	bne.n	800b2fa <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 800b2ac:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b2b0:	f103 0310 	add.w	r3, r3, #16
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d106      	bne.n	800b2c8 <f_open+0x11c>
				res = FR_INVALID_NAME;
 800b2ba:	2306      	movs	r3, #6
 800b2bc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b2c0:	f102 0217 	add.w	r2, r2, #23
 800b2c4:	7013      	strb	r3, [r2, #0]
 800b2c6:	e018      	b.n	800b2fa <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b2c8:	f107 0318 	add.w	r3, r7, #24
 800b2cc:	3b11      	subs	r3, #17
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	f023 0301 	bic.w	r3, r3, #1
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	bf14      	ite	ne
 800b2d8:	2301      	movne	r3, #1
 800b2da:	2300      	moveq	r3, #0
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	461a      	mov	r2, r3
 800b2e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b2e4:	3b18      	subs	r3, #24
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fd fb0b 	bl	8008904 <chk_lock>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b2f4:	f102 0217 	add.w	r2, r2, #23
 800b2f8:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b2fa:	f107 0318 	add.w	r3, r7, #24
 800b2fe:	3b11      	subs	r3, #17
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	f003 031c 	and.w	r3, r3, #28
 800b306:	2b00      	cmp	r3, #0
 800b308:	f000 8150 	beq.w	800b5ac <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 800b30c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b310:	f103 0317 	add.w	r3, r3, #23
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d030      	beq.n	800b37c <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800b31a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b31e:	f103 0317 	add.w	r3, r3, #23
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	2b04      	cmp	r3, #4
 800b326:	d112      	bne.n	800b34e <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b328:	f7fd fb5e 	bl	80089e8 <enq_lock>
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d007      	beq.n	800b342 <f_open+0x196>
 800b332:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b336:	3b18      	subs	r3, #24
 800b338:	4618      	mov	r0, r3
 800b33a:	f7fe ff37 	bl	800a1ac <dir_register>
 800b33e:	4603      	mov	r3, r0
 800b340:	e000      	b.n	800b344 <f_open+0x198>
 800b342:	2312      	movs	r3, #18
 800b344:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b348:	f102 0217 	add.w	r2, r2, #23
 800b34c:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b34e:	f107 0318 	add.w	r3, r7, #24
 800b352:	3b11      	subs	r3, #17
 800b354:	f107 0218 	add.w	r2, r7, #24
 800b358:	3a11      	subs	r2, #17
 800b35a:	7812      	ldrb	r2, [r2, #0]
 800b35c:	f042 0208 	orr.w	r2, r2, #8
 800b360:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800b362:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b366:	3b18      	subs	r3, #24
 800b368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b36c:	3314      	adds	r3, #20
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b374:	f102 0210 	add.w	r2, r2, #16
 800b378:	6013      	str	r3, [r2, #0]
 800b37a:	e01f      	b.n	800b3bc <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b37c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b380:	f103 0310 	add.w	r3, r3, #16
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	330b      	adds	r3, #11
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	f003 0311 	and.w	r3, r3, #17
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d006      	beq.n	800b3a0 <f_open+0x1f4>
					res = FR_DENIED;
 800b392:	2307      	movs	r3, #7
 800b394:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b398:	f102 0217 	add.w	r2, r2, #23
 800b39c:	7013      	strb	r3, [r2, #0]
 800b39e:	e00d      	b.n	800b3bc <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800b3a0:	f107 0318 	add.w	r3, r7, #24
 800b3a4:	3b11      	subs	r3, #17
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	f003 0304 	and.w	r3, r3, #4
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d005      	beq.n	800b3bc <f_open+0x210>
						res = FR_EXIST;
 800b3b0:	2308      	movs	r3, #8
 800b3b2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b3b6:	f102 0217 	add.w	r2, r2, #23
 800b3ba:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b3bc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b3c0:	f103 0317 	add.w	r3, r3, #23
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f040 8122 	bne.w	800b610 <f_open+0x464>
 800b3cc:	f107 0318 	add.w	r3, r7, #24
 800b3d0:	3b11      	subs	r3, #17
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	f003 0308 	and.w	r3, r3, #8
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	f000 8119 	beq.w	800b610 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 800b3de:	f7fd f919 	bl	8008614 <get_fattime>
 800b3e2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b3e6:	f103 030c 	add.w	r3, r3, #12
 800b3ea:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800b3ec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b3f0:	f103 0310 	add.w	r3, r3, #16
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	330e      	adds	r3, #14
 800b3f8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b3fc:	f102 020c 	add.w	r2, r2, #12
 800b400:	6812      	ldr	r2, [r2, #0]
 800b402:	b2d2      	uxtb	r2, r2
 800b404:	701a      	strb	r2, [r3, #0]
 800b406:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b40a:	f103 030c 	add.w	r3, r3, #12
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	b29b      	uxth	r3, r3
 800b412:	0a1b      	lsrs	r3, r3, #8
 800b414:	b29a      	uxth	r2, r3
 800b416:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b41a:	f103 0310 	add.w	r3, r3, #16
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	330f      	adds	r3, #15
 800b422:	b2d2      	uxtb	r2, r2
 800b424:	701a      	strb	r2, [r3, #0]
 800b426:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b42a:	f103 030c 	add.w	r3, r3, #12
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	0c1a      	lsrs	r2, r3, #16
 800b432:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b436:	f103 0310 	add.w	r3, r3, #16
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	3310      	adds	r3, #16
 800b43e:	b2d2      	uxtb	r2, r2
 800b440:	701a      	strb	r2, [r3, #0]
 800b442:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b446:	f103 030c 	add.w	r3, r3, #12
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	0e1a      	lsrs	r2, r3, #24
 800b44e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b452:	f103 0310 	add.w	r3, r3, #16
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	3311      	adds	r3, #17
 800b45a:	b2d2      	uxtb	r2, r2
 800b45c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800b45e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b462:	f103 0310 	add.w	r3, r3, #16
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	330b      	adds	r3, #11
 800b46a:	2200      	movs	r2, #0
 800b46c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800b46e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b472:	f103 0310 	add.w	r3, r3, #16
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	331c      	adds	r3, #28
 800b47a:	2200      	movs	r2, #0
 800b47c:	701a      	strb	r2, [r3, #0]
 800b47e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b482:	f103 0310 	add.w	r3, r3, #16
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	331d      	adds	r3, #29
 800b48a:	2200      	movs	r2, #0
 800b48c:	701a      	strb	r2, [r3, #0]
 800b48e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b492:	f103 0310 	add.w	r3, r3, #16
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	331e      	adds	r3, #30
 800b49a:	2200      	movs	r2, #0
 800b49c:	701a      	strb	r2, [r3, #0]
 800b49e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b4a2:	f103 0310 	add.w	r3, r3, #16
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	331f      	adds	r3, #31
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800b4ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b4b2:	3b18      	subs	r3, #24
 800b4b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b4be:	f102 0210 	add.w	r2, r2, #16
 800b4c2:	6811      	ldr	r1, [r2, #0]
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7fe fbb4 	bl	8009c32 <ld_clust>
 800b4ca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b4ce:	f103 0308 	add.w	r3, r3, #8
 800b4d2:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b4da:	f103 0310 	add.w	r3, r3, #16
 800b4de:	6818      	ldr	r0, [r3, #0]
 800b4e0:	f7fe fbd5 	bl	8009c8e <st_clust>
				dj.fs->wflag = 1;
 800b4e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b4e8:	3b18      	subs	r3, #24
 800b4ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4f4:	3304      	adds	r3, #4
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 800b4fa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b4fe:	f103 0308 	add.w	r3, r3, #8
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	f000 8083 	beq.w	800b610 <f_open+0x464>
					dw = dj.fs->winsect;
 800b50a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b50e:	3b18      	subs	r3, #24
 800b510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b51a:	330c      	adds	r3, #12
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b522:	f102 020c 	add.w	r2, r2, #12
 800b526:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800b528:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b52c:	3b18      	subs	r3, #24
 800b52e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b538:	f102 0208 	add.w	r2, r2, #8
 800b53c:	6811      	ldr	r1, [r2, #0]
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fd ff8d 	bl	800945e <remove_chain>
 800b544:	4603      	mov	r3, r0
 800b546:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b54a:	f102 0217 	add.w	r2, r2, #23
 800b54e:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800b550:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b554:	f103 0317 	add.w	r3, r3, #23
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d158      	bne.n	800b610 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800b55e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b562:	3b18      	subs	r3, #24
 800b564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b56e:	f102 0208 	add.w	r2, r2, #8
 800b572:	6812      	ldr	r2, [r2, #0]
 800b574:	3a01      	subs	r2, #1
 800b576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b57a:	330c      	adds	r3, #12
 800b57c:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 800b57e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b582:	3b18      	subs	r3, #24
 800b584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b58e:	f102 020c 	add.w	r2, r2, #12
 800b592:	6811      	ldr	r1, [r2, #0]
 800b594:	4618      	mov	r0, r3
 800b596:	f7fd fbd3 	bl	8008d40 <move_window>
 800b59a:	4603      	mov	r3, r0
 800b59c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b5a0:	f102 0217 	add.w	r2, r2, #23
 800b5a4:	7013      	strb	r3, [r2, #0]
 800b5a6:	e033      	b.n	800b610 <f_open+0x464>
 800b5a8:	20000248 	.word	0x20000248
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800b5ac:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b5b0:	f103 0317 	add.w	r3, r3, #23
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d12a      	bne.n	800b610 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800b5ba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b5be:	f103 0310 	add.w	r3, r3, #16
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	330b      	adds	r3, #11
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	f003 0310 	and.w	r3, r3, #16
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d006      	beq.n	800b5de <f_open+0x432>
					res = FR_NO_FILE;
 800b5d0:	2304      	movs	r3, #4
 800b5d2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b5d6:	f102 0217 	add.w	r2, r2, #23
 800b5da:	7013      	strb	r3, [r2, #0]
 800b5dc:	e018      	b.n	800b610 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800b5de:	f107 0318 	add.w	r3, r7, #24
 800b5e2:	3b11      	subs	r3, #17
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	f003 0302 	and.w	r3, r3, #2
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d010      	beq.n	800b610 <f_open+0x464>
 800b5ee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b5f2:	f103 0310 	add.w	r3, r3, #16
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	330b      	adds	r3, #11
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	f003 0301 	and.w	r3, r3, #1
 800b600:	2b00      	cmp	r3, #0
 800b602:	d005      	beq.n	800b610 <f_open+0x464>
						res = FR_DENIED;
 800b604:	2307      	movs	r3, #7
 800b606:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b60a:	f102 0217 	add.w	r2, r2, #23
 800b60e:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800b610:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b614:	f103 0317 	add.w	r3, r3, #23
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d15b      	bne.n	800b6d6 <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b61e:	f107 0318 	add.w	r3, r7, #24
 800b622:	3b11      	subs	r3, #17
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	f003 0308 	and.w	r3, r3, #8
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d009      	beq.n	800b642 <f_open+0x496>
				mode |= FA__WRITTEN;
 800b62e:	f107 0318 	add.w	r3, r7, #24
 800b632:	3b11      	subs	r3, #17
 800b634:	f107 0218 	add.w	r2, r7, #24
 800b638:	3a11      	subs	r2, #17
 800b63a:	7812      	ldrb	r2, [r2, #0]
 800b63c:	f042 0220 	orr.w	r2, r2, #32
 800b640:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800b642:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b646:	3b18      	subs	r3, #24
 800b648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b652:	330c      	adds	r3, #12
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	f107 0318 	add.w	r3, r7, #24
 800b65a:	3b0c      	subs	r3, #12
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b662:	331c      	adds	r3, #28
 800b664:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 800b666:	f107 0318 	add.w	r3, r7, #24
 800b66a:	3b0c      	subs	r3, #12
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b672:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b676:	f102 0210 	add.w	r2, r2, #16
 800b67a:	6812      	ldr	r2, [r2, #0]
 800b67c:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b67e:	f107 0318 	add.w	r3, r7, #24
 800b682:	3b11      	subs	r3, #17
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	f023 0301 	bic.w	r3, r3, #1
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	bf14      	ite	ne
 800b68e:	2301      	movne	r3, #1
 800b690:	2300      	moveq	r3, #0
 800b692:	b2db      	uxtb	r3, r3
 800b694:	461a      	mov	r2, r3
 800b696:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b69a:	3b18      	subs	r3, #24
 800b69c:	4611      	mov	r1, r2
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7fd f9c6 	bl	8008a30 <inc_lock>
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	f107 0318 	add.w	r3, r7, #24
 800b6aa:	3b0c      	subs	r3, #12
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b6b2:	3308      	adds	r3, #8
 800b6b4:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 800b6b6:	f107 0318 	add.w	r3, r7, #24
 800b6ba:	3b0c      	subs	r3, #12
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b6c2:	3308      	adds	r3, #8
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d105      	bne.n	800b6d6 <f_open+0x52a>
 800b6ca:	2302      	movs	r3, #2
 800b6cc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b6d0:	f102 0217 	add.w	r2, r2, #23
 800b6d4:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800b6d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b6da:	f103 0317 	add.w	r3, r3, #23
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f040 8091 	bne.w	800b808 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 800b6e6:	f107 0318 	add.w	r3, r7, #24
 800b6ea:	3b0c      	subs	r3, #12
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6f2:	3306      	adds	r3, #6
 800b6f4:	f107 0218 	add.w	r2, r7, #24
 800b6f8:	3a11      	subs	r2, #17
 800b6fa:	7812      	ldrb	r2, [r2, #0]
 800b6fc:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 800b6fe:	f107 0318 	add.w	r3, r7, #24
 800b702:	3b0c      	subs	r3, #12
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b70a:	3307      	adds	r3, #7
 800b70c:	2200      	movs	r2, #0
 800b70e:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800b710:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b714:	3b18      	subs	r3, #24
 800b716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b720:	f102 0210 	add.w	r2, r2, #16
 800b724:	6811      	ldr	r1, [r2, #0]
 800b726:	4618      	mov	r0, r3
 800b728:	f7fe fa83 	bl	8009c32 <ld_clust>
 800b72c:	4602      	mov	r2, r0
 800b72e:	f107 0318 	add.w	r3, r7, #24
 800b732:	3b0c      	subs	r3, #12
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b73a:	3310      	adds	r3, #16
 800b73c:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800b73e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b742:	f103 0310 	add.w	r3, r3, #16
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	331f      	adds	r3, #31
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	061a      	lsls	r2, r3, #24
 800b74e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b752:	f103 0310 	add.w	r3, r3, #16
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	331e      	adds	r3, #30
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	041b      	lsls	r3, r3, #16
 800b75e:	4313      	orrs	r3, r2
 800b760:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b764:	f102 0210 	add.w	r2, r2, #16
 800b768:	6812      	ldr	r2, [r2, #0]
 800b76a:	321d      	adds	r2, #29
 800b76c:	7812      	ldrb	r2, [r2, #0]
 800b76e:	0212      	lsls	r2, r2, #8
 800b770:	4313      	orrs	r3, r2
 800b772:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b776:	f102 0210 	add.w	r2, r2, #16
 800b77a:	6812      	ldr	r2, [r2, #0]
 800b77c:	321c      	adds	r2, #28
 800b77e:	7812      	ldrb	r2, [r2, #0]
 800b780:	431a      	orrs	r2, r3
 800b782:	f107 0318 	add.w	r3, r7, #24
 800b786:	3b0c      	subs	r3, #12
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b78e:	330c      	adds	r3, #12
 800b790:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 800b792:	f107 0318 	add.w	r3, r7, #24
 800b796:	3b0c      	subs	r3, #12
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b79e:	3308      	adds	r3, #8
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 800b7a4:	f107 0318 	add.w	r3, r7, #24
 800b7a8:	3b0c      	subs	r3, #12
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7b0:	3318      	adds	r3, #24
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800b7b6:	f107 0318 	add.w	r3, r7, #24
 800b7ba:	3b0c      	subs	r3, #12
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b7c2:	3304      	adds	r3, #4
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800b7c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b7cc:	3b18      	subs	r3, #24
 800b7ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	f107 0318 	add.w	r3, r7, #24
 800b7d8:	3b0c      	subs	r3, #12
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7e0:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800b7e2:	f107 0318 	add.w	r3, r7, #24
 800b7e6:	3b0c      	subs	r3, #12
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7f4:	3306      	adds	r3, #6
 800b7f6:	881a      	ldrh	r2, [r3, #0]
 800b7f8:	f107 0318 	add.w	r3, r7, #24
 800b7fc:	3b0c      	subs	r3, #12
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b804:	3304      	adds	r3, #4
 800b806:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 800b808:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b80c:	f103 0317 	add.w	r3, r3, #23
 800b810:	781b      	ldrb	r3, [r3, #0]
}
 800b812:	4618      	mov	r0, r3
 800b814:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800b818:	3718      	adds	r7, #24
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop

0800b820 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b08a      	sub	sp, #40	; 0x28
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
 800b82c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	2200      	movs	r2, #0
 800b836:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f7ff fc2f 	bl	800b09c <validate>
 800b83e:	4603      	mov	r3, r0
 800b840:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800b842:	7dfb      	ldrb	r3, [r7, #23]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d001      	beq.n	800b84c <f_write+0x2c>
 800b848:	7dfb      	ldrb	r3, [r7, #23]
 800b84a:	e258      	b.n	800bcfe <f_write+0x4de>
	if (fp->err)							/* Check error */
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b852:	3307      	adds	r3, #7
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d005      	beq.n	800b866 <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b860:	3307      	adds	r3, #7
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	e24b      	b.n	800bcfe <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b86c:	3306      	adds	r3, #6
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	f003 0302 	and.w	r3, r3, #2
 800b874:	2b00      	cmp	r3, #0
 800b876:	d101      	bne.n	800b87c <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800b878:	2307      	movs	r3, #7
 800b87a:	e240      	b.n	800bcfe <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b882:	3308      	adds	r3, #8
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	441a      	add	r2, r3
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b890:	3308      	adds	r3, #8
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	429a      	cmp	r2, r3
 800b896:	f080 8208 	bcs.w	800bcaa <f_write+0x48a>
 800b89a:	2300      	movs	r3, #0
 800b89c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800b89e:	e204      	b.n	800bcaa <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8a6:	3308      	adds	r3, #8
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8b6:	330a      	adds	r3, #10
 800b8b8:	881b      	ldrh	r3, [r3, #0]
 800b8ba:	fbb2 f1f3 	udiv	r1, r2, r3
 800b8be:	fb03 f301 	mul.w	r3, r3, r1
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	f040 818d 	bne.w	800bbe4 <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8d0:	3308      	adds	r3, #8
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8e0:	330a      	adds	r3, #10
 800b8e2:	881b      	ldrh	r3, [r3, #0]
 800b8e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8e8:	b2da      	uxtb	r2, r3
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8f6:	3302      	adds	r3, #2
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	4013      	ands	r3, r2
 800b900:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800b902:	7dbb      	ldrb	r3, [r7, #22]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d167      	bne.n	800b9d8 <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b90e:	3308      	adds	r3, #8
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d112      	bne.n	800b93c <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b91c:	3310      	adds	r3, #16
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800b922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b924:	2b00      	cmp	r3, #0
 800b926:	d129      	bne.n	800b97c <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	2100      	movs	r1, #0
 800b932:	4618      	mov	r0, r3
 800b934:	f7fd fdfb 	bl	800952e <create_chain>
 800b938:	6278      	str	r0, [r7, #36]	; 0x24
 800b93a:	e01f      	b.n	800b97c <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b942:	3304      	adds	r3, #4
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00a      	beq.n	800b960 <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b950:	3308      	adds	r3, #8
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4619      	mov	r1, r3
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f7fd fe9a 	bl	8009690 <clmt_clust>
 800b95c:	6278      	str	r0, [r7, #36]	; 0x24
 800b95e:	e00d      	b.n	800b97c <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b96e:	3314      	adds	r3, #20
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4619      	mov	r1, r3
 800b974:	4610      	mov	r0, r2
 800b976:	f7fd fdda 	bl	800952e <create_chain>
 800b97a:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97e:	2b00      	cmp	r3, #0
 800b980:	f000 8198 	beq.w	800bcb4 <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b986:	2b01      	cmp	r3, #1
 800b988:	d107      	bne.n	800b99a <f_write+0x17a>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b990:	3307      	adds	r3, #7
 800b992:	2202      	movs	r2, #2
 800b994:	701a      	strb	r2, [r3, #0]
 800b996:	2302      	movs	r3, #2
 800b998:	e1b1      	b.n	800bcfe <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a0:	d107      	bne.n	800b9b2 <f_write+0x192>
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9a8:	3307      	adds	r3, #7
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	701a      	strb	r2, [r3, #0]
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e1a5      	b.n	800bcfe <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9b8:	3314      	adds	r3, #20
 800b9ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9bc:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9c4:	3310      	adds	r3, #16
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d105      	bne.n	800b9d8 <f_write+0x1b8>
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9d2:	3310      	adds	r3, #16
 800b9d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9d6:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9de:	3306      	adds	r3, #6
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d028      	beq.n	800ba3c <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	7818      	ldrb	r0, [r3, #0]
 800b9fa:	68f9      	ldr	r1, [r7, #12]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba02:	3318      	adds	r3, #24
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	2301      	movs	r3, #1
 800ba08:	f7fc fec6 	bl	8008798 <disk_write>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d007      	beq.n	800ba22 <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba18:	3307      	adds	r3, #7
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	701a      	strb	r2, [r3, #0]
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e16d      	b.n	800bcfe <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba28:	3306      	adds	r3, #6
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba30:	b2da      	uxtb	r2, r3
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba38:	3306      	adds	r3, #6
 800ba3a:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba4a:	3314      	adds	r3, #20
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4619      	mov	r1, r3
 800ba50:	4610      	mov	r0, r2
 800ba52:	f7fd fa78 	bl	8008f46 <clust2sect>
 800ba56:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d107      	bne.n	800ba6e <f_write+0x24e>
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba64:	3307      	adds	r3, #7
 800ba66:	2202      	movs	r2, #2
 800ba68:	701a      	strb	r2, [r3, #0]
 800ba6a:	2302      	movs	r3, #2
 800ba6c:	e147      	b.n	800bcfe <f_write+0x4de>
			sect += csect;
 800ba6e:	7dbb      	ldrb	r3, [r7, #22]
 800ba70:	693a      	ldr	r2, [r7, #16]
 800ba72:	4413      	add	r3, r2
 800ba74:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba82:	330a      	adds	r3, #10
 800ba84:	881b      	ldrh	r3, [r3, #0]
 800ba86:	461a      	mov	r2, r3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba8e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d074      	beq.n	800bb80 <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800ba96:	7dba      	ldrb	r2, [r7, #22]
 800ba98:	69fb      	ldr	r3, [r7, #28]
 800ba9a:	441a      	add	r2, r3
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baa8:	3302      	adds	r3, #2
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	429a      	cmp	r2, r3
 800baae:	d90b      	bls.n	800bac8 <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800babc:	3302      	adds	r3, #2
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	461a      	mov	r2, r3
 800bac2:	7dbb      	ldrb	r3, [r7, #22]
 800bac4:	1ad3      	subs	r3, r2, r3
 800bac6:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bad4:	3301      	adds	r3, #1
 800bad6:	7818      	ldrb	r0, [r3, #0]
 800bad8:	69fb      	ldr	r3, [r7, #28]
 800bada:	693a      	ldr	r2, [r7, #16]
 800badc:	69b9      	ldr	r1, [r7, #24]
 800bade:	f7fc fe5b 	bl	8008798 <disk_write>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d007      	beq.n	800baf8 <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baee:	3307      	adds	r3, #7
 800baf0:	2201      	movs	r2, #1
 800baf2:	701a      	strb	r2, [r3, #0]
 800baf4:	2301      	movs	r3, #1
 800baf6:	e102      	b.n	800bcfe <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bafe:	3318      	adds	r3, #24
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	1ad3      	subs	r3, r2, r3
 800bb06:	69fa      	ldr	r2, [r7, #28]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d92b      	bls.n	800bb64 <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb14:	3318      	adds	r3, #24
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	1ad2      	subs	r2, r2, r3
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb28:	330a      	adds	r3, #10
 800bb2a:	881b      	ldrh	r3, [r3, #0]
 800bb2c:	fb03 f302 	mul.w	r3, r3, r2
 800bb30:	69ba      	ldr	r2, [r7, #24]
 800bb32:	18d1      	adds	r1, r2, r3
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb40:	330a      	adds	r3, #10
 800bb42:	881b      	ldrh	r3, [r3, #0]
 800bb44:	461a      	mov	r2, r3
 800bb46:	f7fc fe65 	bl	8008814 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb50:	3306      	adds	r3, #6
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb58:	b2da      	uxtb	r2, r3
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb60:	3306      	adds	r3, #6
 800bb62:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb70:	330a      	adds	r3, #10
 800bb72:	881b      	ldrh	r3, [r3, #0]
 800bb74:	461a      	mov	r2, r3
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	fb02 f303 	mul.w	r3, r2, r3
 800bb7c:	623b      	str	r3, [r7, #32]
				continue;
 800bb7e:	e07a      	b.n	800bc76 <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb86:	3318      	adds	r3, #24
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	693a      	ldr	r2, [r7, #16]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d023      	beq.n	800bbd8 <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb96:	3308      	adds	r3, #8
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bba0:	330c      	adds	r3, #12
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d217      	bcs.n	800bbd8 <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	7818      	ldrb	r0, [r3, #0]
 800bbb8:	68f9      	ldr	r1, [r7, #12]
 800bbba:	2301      	movs	r3, #1
 800bbbc:	693a      	ldr	r2, [r7, #16]
 800bbbe:	f7fc fdcb 	bl	8008758 <disk_read>
 800bbc2:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d007      	beq.n	800bbd8 <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbce:	3307      	adds	r3, #7
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	701a      	strb	r2, [r3, #0]
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	e092      	b.n	800bcfe <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbde:	3318      	adds	r3, #24
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbf0:	330a      	adds	r3, #10
 800bbf2:	881b      	ldrh	r3, [r3, #0]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbfc:	3308      	adds	r3, #8
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc0c:	330a      	adds	r3, #10
 800bc0e:	881b      	ldrh	r3, [r3, #0]
 800bc10:	fbb2 f1f3 	udiv	r1, r2, r3
 800bc14:	fb03 f301 	mul.w	r3, r3, r1
 800bc18:	1ad3      	subs	r3, r2, r3
 800bc1a:	1ac3      	subs	r3, r0, r3
 800bc1c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800bc1e:	6a3a      	ldr	r2, [r7, #32]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d901      	bls.n	800bc2a <f_write+0x40a>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc30:	3308      	adds	r3, #8
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc40:	330a      	adds	r3, #10
 800bc42:	881b      	ldrh	r3, [r3, #0]
 800bc44:	fbb2 f1f3 	udiv	r1, r2, r3
 800bc48:	fb03 f301 	mul.w	r3, r3, r1
 800bc4c:	1ad3      	subs	r3, r2, r3
 800bc4e:	68fa      	ldr	r2, [r7, #12]
 800bc50:	4413      	add	r3, r2
 800bc52:	6a3a      	ldr	r2, [r7, #32]
 800bc54:	69b9      	ldr	r1, [r7, #24]
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7fc fddc 	bl	8008814 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc62:	3306      	adds	r3, #6
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc6a:	b2da      	uxtb	r2, r3
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc72:	3306      	adds	r3, #6
 800bc74:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800bc76:	69ba      	ldr	r2, [r7, #24]
 800bc78:	6a3b      	ldr	r3, [r7, #32]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	61bb      	str	r3, [r7, #24]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc84:	3308      	adds	r3, #8
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	6a3b      	ldr	r3, [r7, #32]
 800bc8a:	441a      	add	r2, r3
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc92:	3308      	adds	r3, #8
 800bc94:	601a      	str	r2, [r3, #0]
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	6a3b      	ldr	r3, [r7, #32]
 800bc9c:	441a      	add	r2, r3
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	601a      	str	r2, [r3, #0]
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	6a3b      	ldr	r3, [r7, #32]
 800bca6:	1ad3      	subs	r3, r2, r3
 800bca8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f47f adf7 	bne.w	800b8a0 <f_write+0x80>
 800bcb2:	e000      	b.n	800bcb6 <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bcb4:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcbc:	3308      	adds	r3, #8
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcc6:	330c      	adds	r3, #12
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d909      	bls.n	800bce2 <f_write+0x4c2>
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcd4:	3308      	adds	r3, #8
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcde:	330c      	adds	r3, #12
 800bce0:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bce8:	3306      	adds	r3, #6
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	f043 0320 	orr.w	r3, r3, #32
 800bcf0:	b2da      	uxtb	r2, r3
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcf8:	3306      	adds	r3, #6
 800bcfa:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 800bcfc:	2300      	movs	r3, #0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3728      	adds	r7, #40	; 0x28
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b086      	sub	sp, #24
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f7ff f9c4 	bl	800b09c <validate>
 800bd14:	4603      	mov	r3, r0
 800bd16:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bd18:	7dfb      	ldrb	r3, [r7, #23]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	f040 80cc 	bne.w	800beb8 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd26:	3306      	adds	r3, #6
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	f003 0320 	and.w	r3, r3, #32
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	f000 80c2 	beq.w	800beb8 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd3a:	3306      	adds	r3, #6
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d022      	beq.n	800bd8c <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd52:	3301      	adds	r3, #1
 800bd54:	7818      	ldrb	r0, [r3, #0]
 800bd56:	6879      	ldr	r1, [r7, #4]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd5e:	3318      	adds	r3, #24
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	2301      	movs	r3, #1
 800bd64:	f7fc fd18 	bl	8008798 <disk_write>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d001      	beq.n	800bd72 <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e0a3      	b.n	800beba <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd78:	3306      	adds	r3, #6
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd80:	b2da      	uxtb	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd88:	3306      	adds	r3, #6
 800bd8a:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd9a:	331c      	adds	r3, #28
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4619      	mov	r1, r3
 800bda0:	4610      	mov	r0, r2
 800bda2:	f7fc ffcd 	bl	8008d40 <move_window>
 800bda6:	4603      	mov	r3, r0
 800bda8:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800bdaa:	7dfb      	ldrb	r3, [r7, #23]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	f040 8083 	bne.w	800beb8 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	330b      	adds	r3, #11
 800bdc0:	781a      	ldrb	r2, [r3, #0]
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	330b      	adds	r3, #11
 800bdc6:	f042 0220 	orr.w	r2, r2, #32
 800bdca:	b2d2      	uxtb	r2, r2
 800bdcc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdd4:	330c      	adds	r3, #12
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	331c      	adds	r3, #28
 800bddc:	b2d2      	uxtb	r2, r2
 800bdde:	701a      	strb	r2, [r3, #0]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bde6:	330c      	adds	r3, #12
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	0a1b      	lsrs	r3, r3, #8
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	331d      	adds	r3, #29
 800bdf4:	b2d2      	uxtb	r2, r2
 800bdf6:	701a      	strb	r2, [r3, #0]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdfe:	330c      	adds	r3, #12
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	0c1a      	lsrs	r2, r3, #16
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	331e      	adds	r3, #30
 800be08:	b2d2      	uxtb	r2, r2
 800be0a:	701a      	strb	r2, [r3, #0]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be12:	330c      	adds	r3, #12
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	0e1a      	lsrs	r2, r3, #24
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	331f      	adds	r3, #31
 800be1c:	b2d2      	uxtb	r2, r2
 800be1e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be26:	3310      	adds	r3, #16
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4619      	mov	r1, r3
 800be2c:	6938      	ldr	r0, [r7, #16]
 800be2e:	f7fd ff2e 	bl	8009c8e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800be32:	f7fc fbef 	bl	8008614 <get_fattime>
 800be36:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	3316      	adds	r3, #22
 800be3c:	68fa      	ldr	r2, [r7, #12]
 800be3e:	b2d2      	uxtb	r2, r2
 800be40:	701a      	strb	r2, [r3, #0]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	b29b      	uxth	r3, r3
 800be46:	0a1b      	lsrs	r3, r3, #8
 800be48:	b29a      	uxth	r2, r3
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	3317      	adds	r3, #23
 800be4e:	b2d2      	uxtb	r2, r2
 800be50:	701a      	strb	r2, [r3, #0]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	0c1a      	lsrs	r2, r3, #16
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	3318      	adds	r3, #24
 800be5a:	b2d2      	uxtb	r2, r2
 800be5c:	701a      	strb	r2, [r3, #0]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	0e1a      	lsrs	r2, r3, #24
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	3319      	adds	r3, #25
 800be66:	b2d2      	uxtb	r2, r2
 800be68:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	3312      	adds	r3, #18
 800be6e:	2200      	movs	r2, #0
 800be70:	701a      	strb	r2, [r3, #0]
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	3313      	adds	r3, #19
 800be76:	2200      	movs	r2, #0
 800be78:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be80:	3306      	adds	r3, #6
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	f023 0320 	bic.w	r3, r3, #32
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be90:	3306      	adds	r3, #6
 800be92:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bea0:	3304      	adds	r3, #4
 800bea2:	2201      	movs	r2, #1
 800bea4:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4618      	mov	r0, r3
 800beb0:	f7fc ff7a 	bl	8008da8 <sync_fs>
 800beb4:	4603      	mov	r3, r0
 800beb6:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800beb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3718      	adds	r7, #24
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b084      	sub	sp, #16
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f7ff ff1b 	bl	800bd06 <f_sync>
 800bed0:	4603      	mov	r3, r0
 800bed2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bed4:	7bfb      	ldrb	r3, [r7, #15]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d119      	bne.n	800bf0e <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f7ff f8de 	bl	800b09c <validate>
 800bee0:	4603      	mov	r3, r0
 800bee2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bee4:	7bfb      	ldrb	r3, [r7, #15]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d111      	bne.n	800bf0e <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bef0:	3308      	adds	r3, #8
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7fc fe5b 	bl	8008bb0 <dec_lock>
 800befa:	4603      	mov	r3, r0
 800befc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800befe:	7bfb      	ldrb	r3, [r7, #15]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d104      	bne.n	800bf0e <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bf0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b08e      	sub	sp, #56	; 0x38
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800bf24:	f107 030c 	add.w	r3, r7, #12
 800bf28:	2200      	movs	r2, #0
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f7fe fd59 	bl	800a9e4 <find_volume>
 800bf32:	4603      	mov	r3, r0
 800bf34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800bf3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f040 80c4 	bne.w	800c0d0 <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf4e:	3310      	adds	r3, #16
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf58:	3314      	adds	r3, #20
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	3b02      	subs	r3, #2
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d807      	bhi.n	800bf72 <f_getfree+0x5a>
			*nclst = fs->free_clust;
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf68:	3310      	adds	r3, #16
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	601a      	str	r2, [r3, #0]
 800bf70:	e0ae      	b.n	800c0d0 <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800bf72:	69fb      	ldr	r3, [r7, #28]
 800bf74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800bf80:	7efb      	ldrb	r3, [r7, #27]
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d127      	bne.n	800bfd6 <f_getfree+0xbe>
				clst = 2;
 800bf86:	2302      	movs	r3, #2
 800bf88:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800bf8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf8c:	69f8      	ldr	r0, [r7, #28]
 800bf8e:	f7fd f801 	bl	8008f94 <get_fat>
 800bf92:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf9a:	d103      	bne.n	800bfa4 <f_getfree+0x8c>
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bfa2:	e07f      	b.n	800c0a4 <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d103      	bne.n	800bfb2 <f_getfree+0x9a>
 800bfaa:	2302      	movs	r3, #2
 800bfac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bfb0:	e078      	b.n	800c0a4 <f_getfree+0x18c>
					if (stat == 0) n++;
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d102      	bne.n	800bfbe <f_getfree+0xa6>
 800bfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfba:	3301      	adds	r3, #1
 800bfbc:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800bfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfca:	3314      	adds	r3, #20
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d3da      	bcc.n	800bf8a <f_getfree+0x72>
 800bfd4:	e066      	b.n	800c0a4 <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 800bfd6:	69fb      	ldr	r3, [r7, #28]
 800bfd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfdc:	3314      	adds	r3, #20
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800bfec:	2300      	movs	r3, #0
 800bfee:	627b      	str	r3, [r7, #36]	; 0x24
 800bff0:	2300      	movs	r3, #0
 800bff2:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800bff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d115      	bne.n	800c026 <f_getfree+0x10e>
						res = move_window(fs, sect++);
 800bffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffc:	1c5a      	adds	r2, r3, #1
 800bffe:	62ba      	str	r2, [r7, #40]	; 0x28
 800c000:	4619      	mov	r1, r3
 800c002:	69f8      	ldr	r0, [r7, #28]
 800c004:	f7fc fe9c 	bl	8008d40 <move_window>
 800c008:	4603      	mov	r3, r0
 800c00a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800c00e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c012:	2b00      	cmp	r3, #0
 800c014:	d145      	bne.n	800c0a2 <f_getfree+0x18a>
						p = fs->win.d8;
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800c01a:	69fb      	ldr	r3, [r7, #28]
 800c01c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c020:	330a      	adds	r3, #10
 800c022:	881b      	ldrh	r3, [r3, #0]
 800c024:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800c026:	7efb      	ldrb	r3, [r7, #27]
 800c028:	2b02      	cmp	r3, #2
 800c02a:	d115      	bne.n	800c058 <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 800c02c:	6a3b      	ldr	r3, [r7, #32]
 800c02e:	3301      	adds	r3, #1
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	021b      	lsls	r3, r3, #8
 800c034:	b21a      	sxth	r2, r3
 800c036:	6a3b      	ldr	r3, [r7, #32]
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	b21b      	sxth	r3, r3
 800c03c:	4313      	orrs	r3, r2
 800c03e:	b21b      	sxth	r3, r3
 800c040:	2b00      	cmp	r3, #0
 800c042:	d102      	bne.n	800c04a <f_getfree+0x132>
 800c044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c046:	3301      	adds	r3, #1
 800c048:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800c04a:	6a3b      	ldr	r3, [r7, #32]
 800c04c:	3302      	adds	r3, #2
 800c04e:	623b      	str	r3, [r7, #32]
 800c050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c052:	3b02      	subs	r3, #2
 800c054:	627b      	str	r3, [r7, #36]	; 0x24
 800c056:	e01d      	b.n	800c094 <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800c058:	6a3b      	ldr	r3, [r7, #32]
 800c05a:	3303      	adds	r3, #3
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	061a      	lsls	r2, r3, #24
 800c060:	6a3b      	ldr	r3, [r7, #32]
 800c062:	3302      	adds	r3, #2
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	041b      	lsls	r3, r3, #16
 800c068:	4313      	orrs	r3, r2
 800c06a:	6a3a      	ldr	r2, [r7, #32]
 800c06c:	3201      	adds	r2, #1
 800c06e:	7812      	ldrb	r2, [r2, #0]
 800c070:	0212      	lsls	r2, r2, #8
 800c072:	4313      	orrs	r3, r2
 800c074:	6a3a      	ldr	r2, [r7, #32]
 800c076:	7812      	ldrb	r2, [r2, #0]
 800c078:	4313      	orrs	r3, r2
 800c07a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d102      	bne.n	800c088 <f_getfree+0x170>
 800c082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c084:	3301      	adds	r3, #1
 800c086:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800c088:	6a3b      	ldr	r3, [r7, #32]
 800c08a:	3304      	adds	r3, #4
 800c08c:	623b      	str	r3, [r7, #32]
 800c08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c090:	3b04      	subs	r3, #4
 800c092:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800c094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c096:	3b01      	subs	r3, #1
 800c098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d1a9      	bne.n	800bff4 <f_getfree+0xdc>
 800c0a0:	e000      	b.n	800c0a4 <f_getfree+0x18c>
						if (res != FR_OK) break;
 800c0a2:	bf00      	nop
			}
			fs->free_clust = n;
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0aa:	3310      	adds	r3, #16
 800c0ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0ae:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0b6:	3305      	adds	r3, #5
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	f043 0301 	orr.w	r3, r3, #1
 800c0be:	b2da      	uxtb	r2, r3
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0c6:	3305      	adds	r3, #5
 800c0c8:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0ce:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800c0d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3738      	adds	r7, #56	; 0x38
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800c0e8:	78fb      	ldrb	r3, [r7, #3]
 800c0ea:	2b0a      	cmp	r3, #10
 800c0ec:	d103      	bne.n	800c0f6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c0ee:	210d      	movs	r1, #13
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f7ff fff3 	bl	800c0dc <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	db25      	blt.n	800c14e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	1c5a      	adds	r2, r3, #1
 800c106:	60fa      	str	r2, [r7, #12]
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	4413      	add	r3, r2
 800c10c:	78fa      	ldrb	r2, [r7, #3]
 800c10e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2b3c      	cmp	r3, #60	; 0x3c
 800c114:	dd12      	ble.n	800c13c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6818      	ldr	r0, [r3, #0]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f103 010c 	add.w	r1, r3, #12
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	f107 0308 	add.w	r3, r7, #8
 800c126:	f7ff fb7b 	bl	800b820 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c12a:	68ba      	ldr	r2, [r7, #8]
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	429a      	cmp	r2, r3
 800c130:	d101      	bne.n	800c136 <putc_bfd+0x5a>
 800c132:	2300      	movs	r3, #0
 800c134:	e001      	b.n	800c13a <putc_bfd+0x5e>
 800c136:	f04f 33ff 	mov.w	r3, #4294967295
 800c13a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	1c5a      	adds	r2, r3, #1
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	609a      	str	r2, [r3, #8]
 800c14c:	e000      	b.n	800c150 <putc_bfd+0x74>
	if (i < 0) return;
 800c14e:	bf00      	nop
}
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c156:	b590      	push	{r4, r7, lr}
 800c158:	b097      	sub	sp, #92	; 0x5c
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
 800c15e:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800c164:	2300      	movs	r3, #0
 800c166:	613b      	str	r3, [r7, #16]
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800c16c:	e009      	b.n	800c182 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	1c5a      	adds	r2, r3, #1
 800c172:	607a      	str	r2, [r7, #4]
 800c174:	781a      	ldrb	r2, [r3, #0]
 800c176:	f107 030c 	add.w	r3, r7, #12
 800c17a:	4611      	mov	r1, r2
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7ff ffad 	bl	800c0dc <putc_bfd>
	while (*str)			/* Put the string */
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d1f1      	bne.n	800c16e <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	db15      	blt.n	800c1bc <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800c190:	68f8      	ldr	r0, [r7, #12]
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	461c      	mov	r4, r3
 800c196:	f107 0208 	add.w	r2, r7, #8
 800c19a:	f107 030c 	add.w	r3, r7, #12
 800c19e:	f103 010c 	add.w	r1, r3, #12
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	4622      	mov	r2, r4
 800c1a6:	f7ff fb3b 	bl	800b820 <f_write>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d105      	bne.n	800c1bc <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	68ba      	ldr	r2, [r7, #8]
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d101      	bne.n	800c1bc <f_puts+0x66>
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	e001      	b.n	800c1c0 <f_puts+0x6a>
	return EOF;
 800c1bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	375c      	adds	r7, #92	; 0x5c
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd90      	pop	{r4, r7, pc}

0800c1c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b087      	sub	sp, #28
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c1de:	4b1e      	ldr	r3, [pc, #120]	; (800c258 <FATFS_LinkDriverEx+0x90>)
 800c1e0:	7a5b      	ldrb	r3, [r3, #9]
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d831      	bhi.n	800c24c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c1e8:	4b1b      	ldr	r3, [pc, #108]	; (800c258 <FATFS_LinkDriverEx+0x90>)
 800c1ea:	7a5b      	ldrb	r3, [r3, #9]
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	4b19      	ldr	r3, [pc, #100]	; (800c258 <FATFS_LinkDriverEx+0x90>)
 800c1f2:	2100      	movs	r1, #0
 800c1f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c1f6:	4b18      	ldr	r3, [pc, #96]	; (800c258 <FATFS_LinkDriverEx+0x90>)
 800c1f8:	7a5b      	ldrb	r3, [r3, #9]
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	4a16      	ldr	r2, [pc, #88]	; (800c258 <FATFS_LinkDriverEx+0x90>)
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	4413      	add	r3, r2
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c206:	4b14      	ldr	r3, [pc, #80]	; (800c258 <FATFS_LinkDriverEx+0x90>)
 800c208:	7a5b      	ldrb	r3, [r3, #9]
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	461a      	mov	r2, r3
 800c20e:	4b12      	ldr	r3, [pc, #72]	; (800c258 <FATFS_LinkDriverEx+0x90>)
 800c210:	4413      	add	r3, r2
 800c212:	79fa      	ldrb	r2, [r7, #7]
 800c214:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c216:	4b10      	ldr	r3, [pc, #64]	; (800c258 <FATFS_LinkDriverEx+0x90>)
 800c218:	7a5b      	ldrb	r3, [r3, #9]
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	1c5a      	adds	r2, r3, #1
 800c21e:	b2d1      	uxtb	r1, r2
 800c220:	4a0d      	ldr	r2, [pc, #52]	; (800c258 <FATFS_LinkDriverEx+0x90>)
 800c222:	7251      	strb	r1, [r2, #9]
 800c224:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c226:	7dbb      	ldrb	r3, [r7, #22]
 800c228:	3330      	adds	r3, #48	; 0x30
 800c22a:	b2da      	uxtb	r2, r3
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	3301      	adds	r3, #1
 800c234:	223a      	movs	r2, #58	; 0x3a
 800c236:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	3302      	adds	r3, #2
 800c23c:	222f      	movs	r2, #47	; 0x2f
 800c23e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	3303      	adds	r3, #3
 800c244:	2200      	movs	r2, #0
 800c246:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c248:	2300      	movs	r3, #0
 800c24a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c24c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	371c      	adds	r7, #28
 800c252:	46bd      	mov	sp, r7
 800c254:	bc80      	pop	{r7}
 800c256:	4770      	bx	lr
 800c258:	20000448 	.word	0x20000448

0800c25c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c266:	2200      	movs	r2, #0
 800c268:	6839      	ldr	r1, [r7, #0]
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f7ff ffac 	bl	800c1c8 <FATFS_LinkDriverEx>
 800c270:	4603      	mov	r3, r0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3708      	adds	r7, #8
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
	...

0800c27c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b085      	sub	sp, #20
 800c280:	af00      	add	r7, sp, #0
 800c282:	4603      	mov	r3, r0
 800c284:	6039      	str	r1, [r7, #0]
 800c286:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c288:	88fb      	ldrh	r3, [r7, #6]
 800c28a:	2b7f      	cmp	r3, #127	; 0x7f
 800c28c:	d802      	bhi.n	800c294 <ff_convert+0x18>
		c = chr;
 800c28e:	88fb      	ldrh	r3, [r7, #6]
 800c290:	81fb      	strh	r3, [r7, #14]
 800c292:	e025      	b.n	800c2e0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00b      	beq.n	800c2b2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c29a:	88fb      	ldrh	r3, [r7, #6]
 800c29c:	2bff      	cmp	r3, #255	; 0xff
 800c29e:	d805      	bhi.n	800c2ac <ff_convert+0x30>
 800c2a0:	88fb      	ldrh	r3, [r7, #6]
 800c2a2:	3b80      	subs	r3, #128	; 0x80
 800c2a4:	4a11      	ldr	r2, [pc, #68]	; (800c2ec <ff_convert+0x70>)
 800c2a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2aa:	e000      	b.n	800c2ae <ff_convert+0x32>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	81fb      	strh	r3, [r7, #14]
 800c2b0:	e016      	b.n	800c2e0 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	81fb      	strh	r3, [r7, #14]
 800c2b6:	e009      	b.n	800c2cc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c2b8:	89fb      	ldrh	r3, [r7, #14]
 800c2ba:	4a0c      	ldr	r2, [pc, #48]	; (800c2ec <ff_convert+0x70>)
 800c2bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2c0:	88fa      	ldrh	r2, [r7, #6]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d006      	beq.n	800c2d4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c2c6:	89fb      	ldrh	r3, [r7, #14]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	81fb      	strh	r3, [r7, #14]
 800c2cc:	89fb      	ldrh	r3, [r7, #14]
 800c2ce:	2b7f      	cmp	r3, #127	; 0x7f
 800c2d0:	d9f2      	bls.n	800c2b8 <ff_convert+0x3c>
 800c2d2:	e000      	b.n	800c2d6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c2d4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c2d6:	89fb      	ldrh	r3, [r7, #14]
 800c2d8:	3380      	adds	r3, #128	; 0x80
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c2e0:	89fb      	ldrh	r3, [r7, #14]
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3714      	adds	r7, #20
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bc80      	pop	{r7}
 800c2ea:	4770      	bx	lr
 800c2ec:	0800fb64 	.word	0x0800fb64

0800c2f0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	60fb      	str	r3, [r7, #12]
 800c2fe:	e002      	b.n	800c306 <ff_wtoupper+0x16>
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	3301      	adds	r3, #1
 800c304:	60fb      	str	r3, [r7, #12]
 800c306:	4a0f      	ldr	r2, [pc, #60]	; (800c344 <ff_wtoupper+0x54>)
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d006      	beq.n	800c320 <ff_wtoupper+0x30>
 800c312:	4a0c      	ldr	r2, [pc, #48]	; (800c344 <ff_wtoupper+0x54>)
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c31a:	88fa      	ldrh	r2, [r7, #6]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d1ef      	bne.n	800c300 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800c320:	4a08      	ldr	r2, [pc, #32]	; (800c344 <ff_wtoupper+0x54>)
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d004      	beq.n	800c336 <ff_wtoupper+0x46>
 800c32c:	4a06      	ldr	r2, [pc, #24]	; (800c348 <ff_wtoupper+0x58>)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c334:	e000      	b.n	800c338 <ff_wtoupper+0x48>
 800c336:	88fb      	ldrh	r3, [r7, #6]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3714      	adds	r7, #20
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bc80      	pop	{r7}
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	0800fc64 	.word	0x0800fc64
 800c348:	0800fe44 	.word	0x0800fe44

0800c34c <__errno>:
 800c34c:	4b01      	ldr	r3, [pc, #4]	; (800c354 <__errno+0x8>)
 800c34e:	6818      	ldr	r0, [r3, #0]
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop
 800c354:	20000034 	.word	0x20000034

0800c358 <__libc_init_array>:
 800c358:	b570      	push	{r4, r5, r6, lr}
 800c35a:	2600      	movs	r6, #0
 800c35c:	4d0c      	ldr	r5, [pc, #48]	; (800c390 <__libc_init_array+0x38>)
 800c35e:	4c0d      	ldr	r4, [pc, #52]	; (800c394 <__libc_init_array+0x3c>)
 800c360:	1b64      	subs	r4, r4, r5
 800c362:	10a4      	asrs	r4, r4, #2
 800c364:	42a6      	cmp	r6, r4
 800c366:	d109      	bne.n	800c37c <__libc_init_array+0x24>
 800c368:	f002 fec8 	bl	800f0fc <_init>
 800c36c:	2600      	movs	r6, #0
 800c36e:	4d0a      	ldr	r5, [pc, #40]	; (800c398 <__libc_init_array+0x40>)
 800c370:	4c0a      	ldr	r4, [pc, #40]	; (800c39c <__libc_init_array+0x44>)
 800c372:	1b64      	subs	r4, r4, r5
 800c374:	10a4      	asrs	r4, r4, #2
 800c376:	42a6      	cmp	r6, r4
 800c378:	d105      	bne.n	800c386 <__libc_init_array+0x2e>
 800c37a:	bd70      	pop	{r4, r5, r6, pc}
 800c37c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c380:	4798      	blx	r3
 800c382:	3601      	adds	r6, #1
 800c384:	e7ee      	b.n	800c364 <__libc_init_array+0xc>
 800c386:	f855 3b04 	ldr.w	r3, [r5], #4
 800c38a:	4798      	blx	r3
 800c38c:	3601      	adds	r6, #1
 800c38e:	e7f2      	b.n	800c376 <__libc_init_array+0x1e>
 800c390:	0801040c 	.word	0x0801040c
 800c394:	0801040c 	.word	0x0801040c
 800c398:	0801040c 	.word	0x0801040c
 800c39c:	08010410 	.word	0x08010410

0800c3a0 <memset>:
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	4402      	add	r2, r0
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d100      	bne.n	800c3aa <memset+0xa>
 800c3a8:	4770      	bx	lr
 800c3aa:	f803 1b01 	strb.w	r1, [r3], #1
 800c3ae:	e7f9      	b.n	800c3a4 <memset+0x4>

0800c3b0 <__cvt>:
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3b6:	461f      	mov	r7, r3
 800c3b8:	bfbb      	ittet	lt
 800c3ba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800c3be:	461f      	movlt	r7, r3
 800c3c0:	2300      	movge	r3, #0
 800c3c2:	232d      	movlt	r3, #45	; 0x2d
 800c3c4:	b088      	sub	sp, #32
 800c3c6:	4614      	mov	r4, r2
 800c3c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c3ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800c3cc:	7013      	strb	r3, [r2, #0]
 800c3ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c3d0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800c3d4:	f023 0820 	bic.w	r8, r3, #32
 800c3d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c3dc:	d005      	beq.n	800c3ea <__cvt+0x3a>
 800c3de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c3e2:	d100      	bne.n	800c3e6 <__cvt+0x36>
 800c3e4:	3501      	adds	r5, #1
 800c3e6:	2302      	movs	r3, #2
 800c3e8:	e000      	b.n	800c3ec <__cvt+0x3c>
 800c3ea:	2303      	movs	r3, #3
 800c3ec:	aa07      	add	r2, sp, #28
 800c3ee:	9204      	str	r2, [sp, #16]
 800c3f0:	aa06      	add	r2, sp, #24
 800c3f2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800c3f6:	e9cd 3500 	strd	r3, r5, [sp]
 800c3fa:	4622      	mov	r2, r4
 800c3fc:	463b      	mov	r3, r7
 800c3fe:	f000 fcf3 	bl	800cde8 <_dtoa_r>
 800c402:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c406:	4606      	mov	r6, r0
 800c408:	d102      	bne.n	800c410 <__cvt+0x60>
 800c40a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c40c:	07db      	lsls	r3, r3, #31
 800c40e:	d522      	bpl.n	800c456 <__cvt+0xa6>
 800c410:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c414:	eb06 0905 	add.w	r9, r6, r5
 800c418:	d110      	bne.n	800c43c <__cvt+0x8c>
 800c41a:	7833      	ldrb	r3, [r6, #0]
 800c41c:	2b30      	cmp	r3, #48	; 0x30
 800c41e:	d10a      	bne.n	800c436 <__cvt+0x86>
 800c420:	2200      	movs	r2, #0
 800c422:	2300      	movs	r3, #0
 800c424:	4620      	mov	r0, r4
 800c426:	4639      	mov	r1, r7
 800c428:	f7f4 fb2a 	bl	8000a80 <__aeabi_dcmpeq>
 800c42c:	b918      	cbnz	r0, 800c436 <__cvt+0x86>
 800c42e:	f1c5 0501 	rsb	r5, r5, #1
 800c432:	f8ca 5000 	str.w	r5, [sl]
 800c436:	f8da 3000 	ldr.w	r3, [sl]
 800c43a:	4499      	add	r9, r3
 800c43c:	2200      	movs	r2, #0
 800c43e:	2300      	movs	r3, #0
 800c440:	4620      	mov	r0, r4
 800c442:	4639      	mov	r1, r7
 800c444:	f7f4 fb1c 	bl	8000a80 <__aeabi_dcmpeq>
 800c448:	b108      	cbz	r0, 800c44e <__cvt+0x9e>
 800c44a:	f8cd 901c 	str.w	r9, [sp, #28]
 800c44e:	2230      	movs	r2, #48	; 0x30
 800c450:	9b07      	ldr	r3, [sp, #28]
 800c452:	454b      	cmp	r3, r9
 800c454:	d307      	bcc.n	800c466 <__cvt+0xb6>
 800c456:	4630      	mov	r0, r6
 800c458:	9b07      	ldr	r3, [sp, #28]
 800c45a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c45c:	1b9b      	subs	r3, r3, r6
 800c45e:	6013      	str	r3, [r2, #0]
 800c460:	b008      	add	sp, #32
 800c462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c466:	1c59      	adds	r1, r3, #1
 800c468:	9107      	str	r1, [sp, #28]
 800c46a:	701a      	strb	r2, [r3, #0]
 800c46c:	e7f0      	b.n	800c450 <__cvt+0xa0>

0800c46e <__exponent>:
 800c46e:	4603      	mov	r3, r0
 800c470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c472:	2900      	cmp	r1, #0
 800c474:	f803 2b02 	strb.w	r2, [r3], #2
 800c478:	bfb6      	itet	lt
 800c47a:	222d      	movlt	r2, #45	; 0x2d
 800c47c:	222b      	movge	r2, #43	; 0x2b
 800c47e:	4249      	neglt	r1, r1
 800c480:	2909      	cmp	r1, #9
 800c482:	7042      	strb	r2, [r0, #1]
 800c484:	dd2b      	ble.n	800c4de <__exponent+0x70>
 800c486:	f10d 0407 	add.w	r4, sp, #7
 800c48a:	46a4      	mov	ip, r4
 800c48c:	270a      	movs	r7, #10
 800c48e:	fb91 f6f7 	sdiv	r6, r1, r7
 800c492:	460a      	mov	r2, r1
 800c494:	46a6      	mov	lr, r4
 800c496:	fb07 1516 	mls	r5, r7, r6, r1
 800c49a:	2a63      	cmp	r2, #99	; 0x63
 800c49c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800c4a0:	4631      	mov	r1, r6
 800c4a2:	f104 34ff 	add.w	r4, r4, #4294967295
 800c4a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c4aa:	dcf0      	bgt.n	800c48e <__exponent+0x20>
 800c4ac:	3130      	adds	r1, #48	; 0x30
 800c4ae:	f1ae 0502 	sub.w	r5, lr, #2
 800c4b2:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c4b6:	4629      	mov	r1, r5
 800c4b8:	1c44      	adds	r4, r0, #1
 800c4ba:	4561      	cmp	r1, ip
 800c4bc:	d30a      	bcc.n	800c4d4 <__exponent+0x66>
 800c4be:	f10d 0209 	add.w	r2, sp, #9
 800c4c2:	eba2 020e 	sub.w	r2, r2, lr
 800c4c6:	4565      	cmp	r5, ip
 800c4c8:	bf88      	it	hi
 800c4ca:	2200      	movhi	r2, #0
 800c4cc:	4413      	add	r3, r2
 800c4ce:	1a18      	subs	r0, r3, r0
 800c4d0:	b003      	add	sp, #12
 800c4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4d8:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c4dc:	e7ed      	b.n	800c4ba <__exponent+0x4c>
 800c4de:	2330      	movs	r3, #48	; 0x30
 800c4e0:	3130      	adds	r1, #48	; 0x30
 800c4e2:	7083      	strb	r3, [r0, #2]
 800c4e4:	70c1      	strb	r1, [r0, #3]
 800c4e6:	1d03      	adds	r3, r0, #4
 800c4e8:	e7f1      	b.n	800c4ce <__exponent+0x60>
	...

0800c4ec <_printf_float>:
 800c4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f0:	b091      	sub	sp, #68	; 0x44
 800c4f2:	460c      	mov	r4, r1
 800c4f4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800c4f8:	4616      	mov	r6, r2
 800c4fa:	461f      	mov	r7, r3
 800c4fc:	4605      	mov	r5, r0
 800c4fe:	f001 fa61 	bl	800d9c4 <_localeconv_r>
 800c502:	6803      	ldr	r3, [r0, #0]
 800c504:	4618      	mov	r0, r3
 800c506:	9309      	str	r3, [sp, #36]	; 0x24
 800c508:	f7f3 fe8e 	bl	8000228 <strlen>
 800c50c:	2300      	movs	r3, #0
 800c50e:	930e      	str	r3, [sp, #56]	; 0x38
 800c510:	f8d8 3000 	ldr.w	r3, [r8]
 800c514:	900a      	str	r0, [sp, #40]	; 0x28
 800c516:	3307      	adds	r3, #7
 800c518:	f023 0307 	bic.w	r3, r3, #7
 800c51c:	f103 0208 	add.w	r2, r3, #8
 800c520:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c524:	f8d4 b000 	ldr.w	fp, [r4]
 800c528:	f8c8 2000 	str.w	r2, [r8]
 800c52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c530:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c534:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800c538:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800c53c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c53e:	f04f 32ff 	mov.w	r2, #4294967295
 800c542:	4640      	mov	r0, r8
 800c544:	4b9c      	ldr	r3, [pc, #624]	; (800c7b8 <_printf_float+0x2cc>)
 800c546:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c548:	f7f4 facc 	bl	8000ae4 <__aeabi_dcmpun>
 800c54c:	bb70      	cbnz	r0, 800c5ac <_printf_float+0xc0>
 800c54e:	f04f 32ff 	mov.w	r2, #4294967295
 800c552:	4640      	mov	r0, r8
 800c554:	4b98      	ldr	r3, [pc, #608]	; (800c7b8 <_printf_float+0x2cc>)
 800c556:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c558:	f7f4 faa6 	bl	8000aa8 <__aeabi_dcmple>
 800c55c:	bb30      	cbnz	r0, 800c5ac <_printf_float+0xc0>
 800c55e:	2200      	movs	r2, #0
 800c560:	2300      	movs	r3, #0
 800c562:	4640      	mov	r0, r8
 800c564:	4651      	mov	r1, sl
 800c566:	f7f4 fa95 	bl	8000a94 <__aeabi_dcmplt>
 800c56a:	b110      	cbz	r0, 800c572 <_printf_float+0x86>
 800c56c:	232d      	movs	r3, #45	; 0x2d
 800c56e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c572:	4b92      	ldr	r3, [pc, #584]	; (800c7bc <_printf_float+0x2d0>)
 800c574:	4892      	ldr	r0, [pc, #584]	; (800c7c0 <_printf_float+0x2d4>)
 800c576:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c57a:	bf94      	ite	ls
 800c57c:	4698      	movls	r8, r3
 800c57e:	4680      	movhi	r8, r0
 800c580:	2303      	movs	r3, #3
 800c582:	f04f 0a00 	mov.w	sl, #0
 800c586:	6123      	str	r3, [r4, #16]
 800c588:	f02b 0304 	bic.w	r3, fp, #4
 800c58c:	6023      	str	r3, [r4, #0]
 800c58e:	4633      	mov	r3, r6
 800c590:	4621      	mov	r1, r4
 800c592:	4628      	mov	r0, r5
 800c594:	9700      	str	r7, [sp, #0]
 800c596:	aa0f      	add	r2, sp, #60	; 0x3c
 800c598:	f000 f9d4 	bl	800c944 <_printf_common>
 800c59c:	3001      	adds	r0, #1
 800c59e:	f040 8090 	bne.w	800c6c2 <_printf_float+0x1d6>
 800c5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a6:	b011      	add	sp, #68	; 0x44
 800c5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ac:	4642      	mov	r2, r8
 800c5ae:	4653      	mov	r3, sl
 800c5b0:	4640      	mov	r0, r8
 800c5b2:	4651      	mov	r1, sl
 800c5b4:	f7f4 fa96 	bl	8000ae4 <__aeabi_dcmpun>
 800c5b8:	b148      	cbz	r0, 800c5ce <_printf_float+0xe2>
 800c5ba:	f1ba 0f00 	cmp.w	sl, #0
 800c5be:	bfb8      	it	lt
 800c5c0:	232d      	movlt	r3, #45	; 0x2d
 800c5c2:	4880      	ldr	r0, [pc, #512]	; (800c7c4 <_printf_float+0x2d8>)
 800c5c4:	bfb8      	it	lt
 800c5c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c5ca:	4b7f      	ldr	r3, [pc, #508]	; (800c7c8 <_printf_float+0x2dc>)
 800c5cc:	e7d3      	b.n	800c576 <_printf_float+0x8a>
 800c5ce:	6863      	ldr	r3, [r4, #4]
 800c5d0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c5d4:	1c5a      	adds	r2, r3, #1
 800c5d6:	d142      	bne.n	800c65e <_printf_float+0x172>
 800c5d8:	2306      	movs	r3, #6
 800c5da:	6063      	str	r3, [r4, #4]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	9206      	str	r2, [sp, #24]
 800c5e0:	aa0e      	add	r2, sp, #56	; 0x38
 800c5e2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800c5e6:	aa0d      	add	r2, sp, #52	; 0x34
 800c5e8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800c5ec:	9203      	str	r2, [sp, #12]
 800c5ee:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800c5f2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c5f6:	6023      	str	r3, [r4, #0]
 800c5f8:	6863      	ldr	r3, [r4, #4]
 800c5fa:	4642      	mov	r2, r8
 800c5fc:	9300      	str	r3, [sp, #0]
 800c5fe:	4628      	mov	r0, r5
 800c600:	4653      	mov	r3, sl
 800c602:	910b      	str	r1, [sp, #44]	; 0x2c
 800c604:	f7ff fed4 	bl	800c3b0 <__cvt>
 800c608:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c60a:	4680      	mov	r8, r0
 800c60c:	2947      	cmp	r1, #71	; 0x47
 800c60e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c610:	d108      	bne.n	800c624 <_printf_float+0x138>
 800c612:	1cc8      	adds	r0, r1, #3
 800c614:	db02      	blt.n	800c61c <_printf_float+0x130>
 800c616:	6863      	ldr	r3, [r4, #4]
 800c618:	4299      	cmp	r1, r3
 800c61a:	dd40      	ble.n	800c69e <_printf_float+0x1b2>
 800c61c:	f1a9 0902 	sub.w	r9, r9, #2
 800c620:	fa5f f989 	uxtb.w	r9, r9
 800c624:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c628:	d81f      	bhi.n	800c66a <_printf_float+0x17e>
 800c62a:	464a      	mov	r2, r9
 800c62c:	3901      	subs	r1, #1
 800c62e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c632:	910d      	str	r1, [sp, #52]	; 0x34
 800c634:	f7ff ff1b 	bl	800c46e <__exponent>
 800c638:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c63a:	4682      	mov	sl, r0
 800c63c:	1813      	adds	r3, r2, r0
 800c63e:	2a01      	cmp	r2, #1
 800c640:	6123      	str	r3, [r4, #16]
 800c642:	dc02      	bgt.n	800c64a <_printf_float+0x15e>
 800c644:	6822      	ldr	r2, [r4, #0]
 800c646:	07d2      	lsls	r2, r2, #31
 800c648:	d501      	bpl.n	800c64e <_printf_float+0x162>
 800c64a:	3301      	adds	r3, #1
 800c64c:	6123      	str	r3, [r4, #16]
 800c64e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c652:	2b00      	cmp	r3, #0
 800c654:	d09b      	beq.n	800c58e <_printf_float+0xa2>
 800c656:	232d      	movs	r3, #45	; 0x2d
 800c658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c65c:	e797      	b.n	800c58e <_printf_float+0xa2>
 800c65e:	2947      	cmp	r1, #71	; 0x47
 800c660:	d1bc      	bne.n	800c5dc <_printf_float+0xf0>
 800c662:	2b00      	cmp	r3, #0
 800c664:	d1ba      	bne.n	800c5dc <_printf_float+0xf0>
 800c666:	2301      	movs	r3, #1
 800c668:	e7b7      	b.n	800c5da <_printf_float+0xee>
 800c66a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c66e:	d118      	bne.n	800c6a2 <_printf_float+0x1b6>
 800c670:	2900      	cmp	r1, #0
 800c672:	6863      	ldr	r3, [r4, #4]
 800c674:	dd0b      	ble.n	800c68e <_printf_float+0x1a2>
 800c676:	6121      	str	r1, [r4, #16]
 800c678:	b913      	cbnz	r3, 800c680 <_printf_float+0x194>
 800c67a:	6822      	ldr	r2, [r4, #0]
 800c67c:	07d0      	lsls	r0, r2, #31
 800c67e:	d502      	bpl.n	800c686 <_printf_float+0x19a>
 800c680:	3301      	adds	r3, #1
 800c682:	440b      	add	r3, r1
 800c684:	6123      	str	r3, [r4, #16]
 800c686:	f04f 0a00 	mov.w	sl, #0
 800c68a:	65a1      	str	r1, [r4, #88]	; 0x58
 800c68c:	e7df      	b.n	800c64e <_printf_float+0x162>
 800c68e:	b913      	cbnz	r3, 800c696 <_printf_float+0x1aa>
 800c690:	6822      	ldr	r2, [r4, #0]
 800c692:	07d2      	lsls	r2, r2, #31
 800c694:	d501      	bpl.n	800c69a <_printf_float+0x1ae>
 800c696:	3302      	adds	r3, #2
 800c698:	e7f4      	b.n	800c684 <_printf_float+0x198>
 800c69a:	2301      	movs	r3, #1
 800c69c:	e7f2      	b.n	800c684 <_printf_float+0x198>
 800c69e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c6a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6a4:	4299      	cmp	r1, r3
 800c6a6:	db05      	blt.n	800c6b4 <_printf_float+0x1c8>
 800c6a8:	6823      	ldr	r3, [r4, #0]
 800c6aa:	6121      	str	r1, [r4, #16]
 800c6ac:	07d8      	lsls	r0, r3, #31
 800c6ae:	d5ea      	bpl.n	800c686 <_printf_float+0x19a>
 800c6b0:	1c4b      	adds	r3, r1, #1
 800c6b2:	e7e7      	b.n	800c684 <_printf_float+0x198>
 800c6b4:	2900      	cmp	r1, #0
 800c6b6:	bfcc      	ite	gt
 800c6b8:	2201      	movgt	r2, #1
 800c6ba:	f1c1 0202 	rsble	r2, r1, #2
 800c6be:	4413      	add	r3, r2
 800c6c0:	e7e0      	b.n	800c684 <_printf_float+0x198>
 800c6c2:	6823      	ldr	r3, [r4, #0]
 800c6c4:	055a      	lsls	r2, r3, #21
 800c6c6:	d407      	bmi.n	800c6d8 <_printf_float+0x1ec>
 800c6c8:	6923      	ldr	r3, [r4, #16]
 800c6ca:	4642      	mov	r2, r8
 800c6cc:	4631      	mov	r1, r6
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	47b8      	blx	r7
 800c6d2:	3001      	adds	r0, #1
 800c6d4:	d12b      	bne.n	800c72e <_printf_float+0x242>
 800c6d6:	e764      	b.n	800c5a2 <_printf_float+0xb6>
 800c6d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c6dc:	f240 80dd 	bls.w	800c89a <_printf_float+0x3ae>
 800c6e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f7f4 f9ca 	bl	8000a80 <__aeabi_dcmpeq>
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	d033      	beq.n	800c758 <_printf_float+0x26c>
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	4631      	mov	r1, r6
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	4a35      	ldr	r2, [pc, #212]	; (800c7cc <_printf_float+0x2e0>)
 800c6f8:	47b8      	blx	r7
 800c6fa:	3001      	adds	r0, #1
 800c6fc:	f43f af51 	beq.w	800c5a2 <_printf_float+0xb6>
 800c700:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c704:	429a      	cmp	r2, r3
 800c706:	db02      	blt.n	800c70e <_printf_float+0x222>
 800c708:	6823      	ldr	r3, [r4, #0]
 800c70a:	07d8      	lsls	r0, r3, #31
 800c70c:	d50f      	bpl.n	800c72e <_printf_float+0x242>
 800c70e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c712:	4631      	mov	r1, r6
 800c714:	4628      	mov	r0, r5
 800c716:	47b8      	blx	r7
 800c718:	3001      	adds	r0, #1
 800c71a:	f43f af42 	beq.w	800c5a2 <_printf_float+0xb6>
 800c71e:	f04f 0800 	mov.w	r8, #0
 800c722:	f104 091a 	add.w	r9, r4, #26
 800c726:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c728:	3b01      	subs	r3, #1
 800c72a:	4543      	cmp	r3, r8
 800c72c:	dc09      	bgt.n	800c742 <_printf_float+0x256>
 800c72e:	6823      	ldr	r3, [r4, #0]
 800c730:	079b      	lsls	r3, r3, #30
 800c732:	f100 8102 	bmi.w	800c93a <_printf_float+0x44e>
 800c736:	68e0      	ldr	r0, [r4, #12]
 800c738:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c73a:	4298      	cmp	r0, r3
 800c73c:	bfb8      	it	lt
 800c73e:	4618      	movlt	r0, r3
 800c740:	e731      	b.n	800c5a6 <_printf_float+0xba>
 800c742:	2301      	movs	r3, #1
 800c744:	464a      	mov	r2, r9
 800c746:	4631      	mov	r1, r6
 800c748:	4628      	mov	r0, r5
 800c74a:	47b8      	blx	r7
 800c74c:	3001      	adds	r0, #1
 800c74e:	f43f af28 	beq.w	800c5a2 <_printf_float+0xb6>
 800c752:	f108 0801 	add.w	r8, r8, #1
 800c756:	e7e6      	b.n	800c726 <_printf_float+0x23a>
 800c758:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	dc38      	bgt.n	800c7d0 <_printf_float+0x2e4>
 800c75e:	2301      	movs	r3, #1
 800c760:	4631      	mov	r1, r6
 800c762:	4628      	mov	r0, r5
 800c764:	4a19      	ldr	r2, [pc, #100]	; (800c7cc <_printf_float+0x2e0>)
 800c766:	47b8      	blx	r7
 800c768:	3001      	adds	r0, #1
 800c76a:	f43f af1a 	beq.w	800c5a2 <_printf_float+0xb6>
 800c76e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c772:	4313      	orrs	r3, r2
 800c774:	d102      	bne.n	800c77c <_printf_float+0x290>
 800c776:	6823      	ldr	r3, [r4, #0]
 800c778:	07d9      	lsls	r1, r3, #31
 800c77a:	d5d8      	bpl.n	800c72e <_printf_float+0x242>
 800c77c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c780:	4631      	mov	r1, r6
 800c782:	4628      	mov	r0, r5
 800c784:	47b8      	blx	r7
 800c786:	3001      	adds	r0, #1
 800c788:	f43f af0b 	beq.w	800c5a2 <_printf_float+0xb6>
 800c78c:	f04f 0900 	mov.w	r9, #0
 800c790:	f104 0a1a 	add.w	sl, r4, #26
 800c794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c796:	425b      	negs	r3, r3
 800c798:	454b      	cmp	r3, r9
 800c79a:	dc01      	bgt.n	800c7a0 <_printf_float+0x2b4>
 800c79c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c79e:	e794      	b.n	800c6ca <_printf_float+0x1de>
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	4652      	mov	r2, sl
 800c7a4:	4631      	mov	r1, r6
 800c7a6:	4628      	mov	r0, r5
 800c7a8:	47b8      	blx	r7
 800c7aa:	3001      	adds	r0, #1
 800c7ac:	f43f aef9 	beq.w	800c5a2 <_printf_float+0xb6>
 800c7b0:	f109 0901 	add.w	r9, r9, #1
 800c7b4:	e7ee      	b.n	800c794 <_printf_float+0x2a8>
 800c7b6:	bf00      	nop
 800c7b8:	7fefffff 	.word	0x7fefffff
 800c7bc:	08010028 	.word	0x08010028
 800c7c0:	0801002c 	.word	0x0801002c
 800c7c4:	08010034 	.word	0x08010034
 800c7c8:	08010030 	.word	0x08010030
 800c7cc:	08010038 	.word	0x08010038
 800c7d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	bfa8      	it	ge
 800c7d8:	461a      	movge	r2, r3
 800c7da:	2a00      	cmp	r2, #0
 800c7dc:	4691      	mov	r9, r2
 800c7de:	dc37      	bgt.n	800c850 <_printf_float+0x364>
 800c7e0:	f04f 0b00 	mov.w	fp, #0
 800c7e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7e8:	f104 021a 	add.w	r2, r4, #26
 800c7ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c7f0:	ebaa 0309 	sub.w	r3, sl, r9
 800c7f4:	455b      	cmp	r3, fp
 800c7f6:	dc33      	bgt.n	800c860 <_printf_float+0x374>
 800c7f8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	db3b      	blt.n	800c878 <_printf_float+0x38c>
 800c800:	6823      	ldr	r3, [r4, #0]
 800c802:	07da      	lsls	r2, r3, #31
 800c804:	d438      	bmi.n	800c878 <_printf_float+0x38c>
 800c806:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c808:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c80a:	eba2 030a 	sub.w	r3, r2, sl
 800c80e:	eba2 0901 	sub.w	r9, r2, r1
 800c812:	4599      	cmp	r9, r3
 800c814:	bfa8      	it	ge
 800c816:	4699      	movge	r9, r3
 800c818:	f1b9 0f00 	cmp.w	r9, #0
 800c81c:	dc34      	bgt.n	800c888 <_printf_float+0x39c>
 800c81e:	f04f 0800 	mov.w	r8, #0
 800c822:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c826:	f104 0a1a 	add.w	sl, r4, #26
 800c82a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c82e:	1a9b      	subs	r3, r3, r2
 800c830:	eba3 0309 	sub.w	r3, r3, r9
 800c834:	4543      	cmp	r3, r8
 800c836:	f77f af7a 	ble.w	800c72e <_printf_float+0x242>
 800c83a:	2301      	movs	r3, #1
 800c83c:	4652      	mov	r2, sl
 800c83e:	4631      	mov	r1, r6
 800c840:	4628      	mov	r0, r5
 800c842:	47b8      	blx	r7
 800c844:	3001      	adds	r0, #1
 800c846:	f43f aeac 	beq.w	800c5a2 <_printf_float+0xb6>
 800c84a:	f108 0801 	add.w	r8, r8, #1
 800c84e:	e7ec      	b.n	800c82a <_printf_float+0x33e>
 800c850:	4613      	mov	r3, r2
 800c852:	4631      	mov	r1, r6
 800c854:	4642      	mov	r2, r8
 800c856:	4628      	mov	r0, r5
 800c858:	47b8      	blx	r7
 800c85a:	3001      	adds	r0, #1
 800c85c:	d1c0      	bne.n	800c7e0 <_printf_float+0x2f4>
 800c85e:	e6a0      	b.n	800c5a2 <_printf_float+0xb6>
 800c860:	2301      	movs	r3, #1
 800c862:	4631      	mov	r1, r6
 800c864:	4628      	mov	r0, r5
 800c866:	920b      	str	r2, [sp, #44]	; 0x2c
 800c868:	47b8      	blx	r7
 800c86a:	3001      	adds	r0, #1
 800c86c:	f43f ae99 	beq.w	800c5a2 <_printf_float+0xb6>
 800c870:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c872:	f10b 0b01 	add.w	fp, fp, #1
 800c876:	e7b9      	b.n	800c7ec <_printf_float+0x300>
 800c878:	4631      	mov	r1, r6
 800c87a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c87e:	4628      	mov	r0, r5
 800c880:	47b8      	blx	r7
 800c882:	3001      	adds	r0, #1
 800c884:	d1bf      	bne.n	800c806 <_printf_float+0x31a>
 800c886:	e68c      	b.n	800c5a2 <_printf_float+0xb6>
 800c888:	464b      	mov	r3, r9
 800c88a:	4631      	mov	r1, r6
 800c88c:	4628      	mov	r0, r5
 800c88e:	eb08 020a 	add.w	r2, r8, sl
 800c892:	47b8      	blx	r7
 800c894:	3001      	adds	r0, #1
 800c896:	d1c2      	bne.n	800c81e <_printf_float+0x332>
 800c898:	e683      	b.n	800c5a2 <_printf_float+0xb6>
 800c89a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c89c:	2a01      	cmp	r2, #1
 800c89e:	dc01      	bgt.n	800c8a4 <_printf_float+0x3b8>
 800c8a0:	07db      	lsls	r3, r3, #31
 800c8a2:	d537      	bpl.n	800c914 <_printf_float+0x428>
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	4642      	mov	r2, r8
 800c8a8:	4631      	mov	r1, r6
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	47b8      	blx	r7
 800c8ae:	3001      	adds	r0, #1
 800c8b0:	f43f ae77 	beq.w	800c5a2 <_printf_float+0xb6>
 800c8b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8b8:	4631      	mov	r1, r6
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	47b8      	blx	r7
 800c8be:	3001      	adds	r0, #1
 800c8c0:	f43f ae6f 	beq.w	800c5a2 <_printf_float+0xb6>
 800c8c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	f7f4 f8d8 	bl	8000a80 <__aeabi_dcmpeq>
 800c8d0:	b9d8      	cbnz	r0, 800c90a <_printf_float+0x41e>
 800c8d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8d4:	f108 0201 	add.w	r2, r8, #1
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	4631      	mov	r1, r6
 800c8dc:	4628      	mov	r0, r5
 800c8de:	47b8      	blx	r7
 800c8e0:	3001      	adds	r0, #1
 800c8e2:	d10e      	bne.n	800c902 <_printf_float+0x416>
 800c8e4:	e65d      	b.n	800c5a2 <_printf_float+0xb6>
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	464a      	mov	r2, r9
 800c8ea:	4631      	mov	r1, r6
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	47b8      	blx	r7
 800c8f0:	3001      	adds	r0, #1
 800c8f2:	f43f ae56 	beq.w	800c5a2 <_printf_float+0xb6>
 800c8f6:	f108 0801 	add.w	r8, r8, #1
 800c8fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	4543      	cmp	r3, r8
 800c900:	dcf1      	bgt.n	800c8e6 <_printf_float+0x3fa>
 800c902:	4653      	mov	r3, sl
 800c904:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c908:	e6e0      	b.n	800c6cc <_printf_float+0x1e0>
 800c90a:	f04f 0800 	mov.w	r8, #0
 800c90e:	f104 091a 	add.w	r9, r4, #26
 800c912:	e7f2      	b.n	800c8fa <_printf_float+0x40e>
 800c914:	2301      	movs	r3, #1
 800c916:	4642      	mov	r2, r8
 800c918:	e7df      	b.n	800c8da <_printf_float+0x3ee>
 800c91a:	2301      	movs	r3, #1
 800c91c:	464a      	mov	r2, r9
 800c91e:	4631      	mov	r1, r6
 800c920:	4628      	mov	r0, r5
 800c922:	47b8      	blx	r7
 800c924:	3001      	adds	r0, #1
 800c926:	f43f ae3c 	beq.w	800c5a2 <_printf_float+0xb6>
 800c92a:	f108 0801 	add.w	r8, r8, #1
 800c92e:	68e3      	ldr	r3, [r4, #12]
 800c930:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c932:	1a5b      	subs	r3, r3, r1
 800c934:	4543      	cmp	r3, r8
 800c936:	dcf0      	bgt.n	800c91a <_printf_float+0x42e>
 800c938:	e6fd      	b.n	800c736 <_printf_float+0x24a>
 800c93a:	f04f 0800 	mov.w	r8, #0
 800c93e:	f104 0919 	add.w	r9, r4, #25
 800c942:	e7f4      	b.n	800c92e <_printf_float+0x442>

0800c944 <_printf_common>:
 800c944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c948:	4616      	mov	r6, r2
 800c94a:	4699      	mov	r9, r3
 800c94c:	688a      	ldr	r2, [r1, #8]
 800c94e:	690b      	ldr	r3, [r1, #16]
 800c950:	4607      	mov	r7, r0
 800c952:	4293      	cmp	r3, r2
 800c954:	bfb8      	it	lt
 800c956:	4613      	movlt	r3, r2
 800c958:	6033      	str	r3, [r6, #0]
 800c95a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c95e:	460c      	mov	r4, r1
 800c960:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c964:	b10a      	cbz	r2, 800c96a <_printf_common+0x26>
 800c966:	3301      	adds	r3, #1
 800c968:	6033      	str	r3, [r6, #0]
 800c96a:	6823      	ldr	r3, [r4, #0]
 800c96c:	0699      	lsls	r1, r3, #26
 800c96e:	bf42      	ittt	mi
 800c970:	6833      	ldrmi	r3, [r6, #0]
 800c972:	3302      	addmi	r3, #2
 800c974:	6033      	strmi	r3, [r6, #0]
 800c976:	6825      	ldr	r5, [r4, #0]
 800c978:	f015 0506 	ands.w	r5, r5, #6
 800c97c:	d106      	bne.n	800c98c <_printf_common+0x48>
 800c97e:	f104 0a19 	add.w	sl, r4, #25
 800c982:	68e3      	ldr	r3, [r4, #12]
 800c984:	6832      	ldr	r2, [r6, #0]
 800c986:	1a9b      	subs	r3, r3, r2
 800c988:	42ab      	cmp	r3, r5
 800c98a:	dc28      	bgt.n	800c9de <_printf_common+0x9a>
 800c98c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c990:	1e13      	subs	r3, r2, #0
 800c992:	6822      	ldr	r2, [r4, #0]
 800c994:	bf18      	it	ne
 800c996:	2301      	movne	r3, #1
 800c998:	0692      	lsls	r2, r2, #26
 800c99a:	d42d      	bmi.n	800c9f8 <_printf_common+0xb4>
 800c99c:	4649      	mov	r1, r9
 800c99e:	4638      	mov	r0, r7
 800c9a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9a4:	47c0      	blx	r8
 800c9a6:	3001      	adds	r0, #1
 800c9a8:	d020      	beq.n	800c9ec <_printf_common+0xa8>
 800c9aa:	6823      	ldr	r3, [r4, #0]
 800c9ac:	68e5      	ldr	r5, [r4, #12]
 800c9ae:	f003 0306 	and.w	r3, r3, #6
 800c9b2:	2b04      	cmp	r3, #4
 800c9b4:	bf18      	it	ne
 800c9b6:	2500      	movne	r5, #0
 800c9b8:	6832      	ldr	r2, [r6, #0]
 800c9ba:	f04f 0600 	mov.w	r6, #0
 800c9be:	68a3      	ldr	r3, [r4, #8]
 800c9c0:	bf08      	it	eq
 800c9c2:	1aad      	subeq	r5, r5, r2
 800c9c4:	6922      	ldr	r2, [r4, #16]
 800c9c6:	bf08      	it	eq
 800c9c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	bfc4      	itt	gt
 800c9d0:	1a9b      	subgt	r3, r3, r2
 800c9d2:	18ed      	addgt	r5, r5, r3
 800c9d4:	341a      	adds	r4, #26
 800c9d6:	42b5      	cmp	r5, r6
 800c9d8:	d11a      	bne.n	800ca10 <_printf_common+0xcc>
 800c9da:	2000      	movs	r0, #0
 800c9dc:	e008      	b.n	800c9f0 <_printf_common+0xac>
 800c9de:	2301      	movs	r3, #1
 800c9e0:	4652      	mov	r2, sl
 800c9e2:	4649      	mov	r1, r9
 800c9e4:	4638      	mov	r0, r7
 800c9e6:	47c0      	blx	r8
 800c9e8:	3001      	adds	r0, #1
 800c9ea:	d103      	bne.n	800c9f4 <_printf_common+0xb0>
 800c9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9f4:	3501      	adds	r5, #1
 800c9f6:	e7c4      	b.n	800c982 <_printf_common+0x3e>
 800c9f8:	2030      	movs	r0, #48	; 0x30
 800c9fa:	18e1      	adds	r1, r4, r3
 800c9fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca00:	1c5a      	adds	r2, r3, #1
 800ca02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca06:	4422      	add	r2, r4
 800ca08:	3302      	adds	r3, #2
 800ca0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca0e:	e7c5      	b.n	800c99c <_printf_common+0x58>
 800ca10:	2301      	movs	r3, #1
 800ca12:	4622      	mov	r2, r4
 800ca14:	4649      	mov	r1, r9
 800ca16:	4638      	mov	r0, r7
 800ca18:	47c0      	blx	r8
 800ca1a:	3001      	adds	r0, #1
 800ca1c:	d0e6      	beq.n	800c9ec <_printf_common+0xa8>
 800ca1e:	3601      	adds	r6, #1
 800ca20:	e7d9      	b.n	800c9d6 <_printf_common+0x92>
	...

0800ca24 <_printf_i>:
 800ca24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca28:	460c      	mov	r4, r1
 800ca2a:	7e27      	ldrb	r7, [r4, #24]
 800ca2c:	4691      	mov	r9, r2
 800ca2e:	2f78      	cmp	r7, #120	; 0x78
 800ca30:	4680      	mov	r8, r0
 800ca32:	469a      	mov	sl, r3
 800ca34:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ca36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca3a:	d807      	bhi.n	800ca4c <_printf_i+0x28>
 800ca3c:	2f62      	cmp	r7, #98	; 0x62
 800ca3e:	d80a      	bhi.n	800ca56 <_printf_i+0x32>
 800ca40:	2f00      	cmp	r7, #0
 800ca42:	f000 80d9 	beq.w	800cbf8 <_printf_i+0x1d4>
 800ca46:	2f58      	cmp	r7, #88	; 0x58
 800ca48:	f000 80a4 	beq.w	800cb94 <_printf_i+0x170>
 800ca4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ca50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca54:	e03a      	b.n	800cacc <_printf_i+0xa8>
 800ca56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca5a:	2b15      	cmp	r3, #21
 800ca5c:	d8f6      	bhi.n	800ca4c <_printf_i+0x28>
 800ca5e:	a001      	add	r0, pc, #4	; (adr r0, 800ca64 <_printf_i+0x40>)
 800ca60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ca64:	0800cabd 	.word	0x0800cabd
 800ca68:	0800cad1 	.word	0x0800cad1
 800ca6c:	0800ca4d 	.word	0x0800ca4d
 800ca70:	0800ca4d 	.word	0x0800ca4d
 800ca74:	0800ca4d 	.word	0x0800ca4d
 800ca78:	0800ca4d 	.word	0x0800ca4d
 800ca7c:	0800cad1 	.word	0x0800cad1
 800ca80:	0800ca4d 	.word	0x0800ca4d
 800ca84:	0800ca4d 	.word	0x0800ca4d
 800ca88:	0800ca4d 	.word	0x0800ca4d
 800ca8c:	0800ca4d 	.word	0x0800ca4d
 800ca90:	0800cbdf 	.word	0x0800cbdf
 800ca94:	0800cb01 	.word	0x0800cb01
 800ca98:	0800cbc1 	.word	0x0800cbc1
 800ca9c:	0800ca4d 	.word	0x0800ca4d
 800caa0:	0800ca4d 	.word	0x0800ca4d
 800caa4:	0800cc01 	.word	0x0800cc01
 800caa8:	0800ca4d 	.word	0x0800ca4d
 800caac:	0800cb01 	.word	0x0800cb01
 800cab0:	0800ca4d 	.word	0x0800ca4d
 800cab4:	0800ca4d 	.word	0x0800ca4d
 800cab8:	0800cbc9 	.word	0x0800cbc9
 800cabc:	680b      	ldr	r3, [r1, #0]
 800cabe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cac2:	1d1a      	adds	r2, r3, #4
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	600a      	str	r2, [r1, #0]
 800cac8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cacc:	2301      	movs	r3, #1
 800cace:	e0a4      	b.n	800cc1a <_printf_i+0x1f6>
 800cad0:	6825      	ldr	r5, [r4, #0]
 800cad2:	6808      	ldr	r0, [r1, #0]
 800cad4:	062e      	lsls	r6, r5, #24
 800cad6:	f100 0304 	add.w	r3, r0, #4
 800cada:	d50a      	bpl.n	800caf2 <_printf_i+0xce>
 800cadc:	6805      	ldr	r5, [r0, #0]
 800cade:	600b      	str	r3, [r1, #0]
 800cae0:	2d00      	cmp	r5, #0
 800cae2:	da03      	bge.n	800caec <_printf_i+0xc8>
 800cae4:	232d      	movs	r3, #45	; 0x2d
 800cae6:	426d      	negs	r5, r5
 800cae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caec:	230a      	movs	r3, #10
 800caee:	485e      	ldr	r0, [pc, #376]	; (800cc68 <_printf_i+0x244>)
 800caf0:	e019      	b.n	800cb26 <_printf_i+0x102>
 800caf2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800caf6:	6805      	ldr	r5, [r0, #0]
 800caf8:	600b      	str	r3, [r1, #0]
 800cafa:	bf18      	it	ne
 800cafc:	b22d      	sxthne	r5, r5
 800cafe:	e7ef      	b.n	800cae0 <_printf_i+0xbc>
 800cb00:	680b      	ldr	r3, [r1, #0]
 800cb02:	6825      	ldr	r5, [r4, #0]
 800cb04:	1d18      	adds	r0, r3, #4
 800cb06:	6008      	str	r0, [r1, #0]
 800cb08:	0628      	lsls	r0, r5, #24
 800cb0a:	d501      	bpl.n	800cb10 <_printf_i+0xec>
 800cb0c:	681d      	ldr	r5, [r3, #0]
 800cb0e:	e002      	b.n	800cb16 <_printf_i+0xf2>
 800cb10:	0669      	lsls	r1, r5, #25
 800cb12:	d5fb      	bpl.n	800cb0c <_printf_i+0xe8>
 800cb14:	881d      	ldrh	r5, [r3, #0]
 800cb16:	2f6f      	cmp	r7, #111	; 0x6f
 800cb18:	bf0c      	ite	eq
 800cb1a:	2308      	moveq	r3, #8
 800cb1c:	230a      	movne	r3, #10
 800cb1e:	4852      	ldr	r0, [pc, #328]	; (800cc68 <_printf_i+0x244>)
 800cb20:	2100      	movs	r1, #0
 800cb22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb26:	6866      	ldr	r6, [r4, #4]
 800cb28:	2e00      	cmp	r6, #0
 800cb2a:	bfa8      	it	ge
 800cb2c:	6821      	ldrge	r1, [r4, #0]
 800cb2e:	60a6      	str	r6, [r4, #8]
 800cb30:	bfa4      	itt	ge
 800cb32:	f021 0104 	bicge.w	r1, r1, #4
 800cb36:	6021      	strge	r1, [r4, #0]
 800cb38:	b90d      	cbnz	r5, 800cb3e <_printf_i+0x11a>
 800cb3a:	2e00      	cmp	r6, #0
 800cb3c:	d04d      	beq.n	800cbda <_printf_i+0x1b6>
 800cb3e:	4616      	mov	r6, r2
 800cb40:	fbb5 f1f3 	udiv	r1, r5, r3
 800cb44:	fb03 5711 	mls	r7, r3, r1, r5
 800cb48:	5dc7      	ldrb	r7, [r0, r7]
 800cb4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cb4e:	462f      	mov	r7, r5
 800cb50:	42bb      	cmp	r3, r7
 800cb52:	460d      	mov	r5, r1
 800cb54:	d9f4      	bls.n	800cb40 <_printf_i+0x11c>
 800cb56:	2b08      	cmp	r3, #8
 800cb58:	d10b      	bne.n	800cb72 <_printf_i+0x14e>
 800cb5a:	6823      	ldr	r3, [r4, #0]
 800cb5c:	07df      	lsls	r7, r3, #31
 800cb5e:	d508      	bpl.n	800cb72 <_printf_i+0x14e>
 800cb60:	6923      	ldr	r3, [r4, #16]
 800cb62:	6861      	ldr	r1, [r4, #4]
 800cb64:	4299      	cmp	r1, r3
 800cb66:	bfde      	ittt	le
 800cb68:	2330      	movle	r3, #48	; 0x30
 800cb6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cb6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cb72:	1b92      	subs	r2, r2, r6
 800cb74:	6122      	str	r2, [r4, #16]
 800cb76:	464b      	mov	r3, r9
 800cb78:	4621      	mov	r1, r4
 800cb7a:	4640      	mov	r0, r8
 800cb7c:	f8cd a000 	str.w	sl, [sp]
 800cb80:	aa03      	add	r2, sp, #12
 800cb82:	f7ff fedf 	bl	800c944 <_printf_common>
 800cb86:	3001      	adds	r0, #1
 800cb88:	d14c      	bne.n	800cc24 <_printf_i+0x200>
 800cb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8e:	b004      	add	sp, #16
 800cb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb94:	4834      	ldr	r0, [pc, #208]	; (800cc68 <_printf_i+0x244>)
 800cb96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cb9a:	680e      	ldr	r6, [r1, #0]
 800cb9c:	6823      	ldr	r3, [r4, #0]
 800cb9e:	f856 5b04 	ldr.w	r5, [r6], #4
 800cba2:	061f      	lsls	r7, r3, #24
 800cba4:	600e      	str	r6, [r1, #0]
 800cba6:	d514      	bpl.n	800cbd2 <_printf_i+0x1ae>
 800cba8:	07d9      	lsls	r1, r3, #31
 800cbaa:	bf44      	itt	mi
 800cbac:	f043 0320 	orrmi.w	r3, r3, #32
 800cbb0:	6023      	strmi	r3, [r4, #0]
 800cbb2:	b91d      	cbnz	r5, 800cbbc <_printf_i+0x198>
 800cbb4:	6823      	ldr	r3, [r4, #0]
 800cbb6:	f023 0320 	bic.w	r3, r3, #32
 800cbba:	6023      	str	r3, [r4, #0]
 800cbbc:	2310      	movs	r3, #16
 800cbbe:	e7af      	b.n	800cb20 <_printf_i+0xfc>
 800cbc0:	6823      	ldr	r3, [r4, #0]
 800cbc2:	f043 0320 	orr.w	r3, r3, #32
 800cbc6:	6023      	str	r3, [r4, #0]
 800cbc8:	2378      	movs	r3, #120	; 0x78
 800cbca:	4828      	ldr	r0, [pc, #160]	; (800cc6c <_printf_i+0x248>)
 800cbcc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cbd0:	e7e3      	b.n	800cb9a <_printf_i+0x176>
 800cbd2:	065e      	lsls	r6, r3, #25
 800cbd4:	bf48      	it	mi
 800cbd6:	b2ad      	uxthmi	r5, r5
 800cbd8:	e7e6      	b.n	800cba8 <_printf_i+0x184>
 800cbda:	4616      	mov	r6, r2
 800cbdc:	e7bb      	b.n	800cb56 <_printf_i+0x132>
 800cbde:	680b      	ldr	r3, [r1, #0]
 800cbe0:	6826      	ldr	r6, [r4, #0]
 800cbe2:	1d1d      	adds	r5, r3, #4
 800cbe4:	6960      	ldr	r0, [r4, #20]
 800cbe6:	600d      	str	r5, [r1, #0]
 800cbe8:	0635      	lsls	r5, r6, #24
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	d501      	bpl.n	800cbf2 <_printf_i+0x1ce>
 800cbee:	6018      	str	r0, [r3, #0]
 800cbf0:	e002      	b.n	800cbf8 <_printf_i+0x1d4>
 800cbf2:	0671      	lsls	r1, r6, #25
 800cbf4:	d5fb      	bpl.n	800cbee <_printf_i+0x1ca>
 800cbf6:	8018      	strh	r0, [r3, #0]
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	4616      	mov	r6, r2
 800cbfc:	6123      	str	r3, [r4, #16]
 800cbfe:	e7ba      	b.n	800cb76 <_printf_i+0x152>
 800cc00:	680b      	ldr	r3, [r1, #0]
 800cc02:	1d1a      	adds	r2, r3, #4
 800cc04:	600a      	str	r2, [r1, #0]
 800cc06:	681e      	ldr	r6, [r3, #0]
 800cc08:	2100      	movs	r1, #0
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	6862      	ldr	r2, [r4, #4]
 800cc0e:	f000 fee5 	bl	800d9dc <memchr>
 800cc12:	b108      	cbz	r0, 800cc18 <_printf_i+0x1f4>
 800cc14:	1b80      	subs	r0, r0, r6
 800cc16:	6060      	str	r0, [r4, #4]
 800cc18:	6863      	ldr	r3, [r4, #4]
 800cc1a:	6123      	str	r3, [r4, #16]
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc22:	e7a8      	b.n	800cb76 <_printf_i+0x152>
 800cc24:	4632      	mov	r2, r6
 800cc26:	4649      	mov	r1, r9
 800cc28:	4640      	mov	r0, r8
 800cc2a:	6923      	ldr	r3, [r4, #16]
 800cc2c:	47d0      	blx	sl
 800cc2e:	3001      	adds	r0, #1
 800cc30:	d0ab      	beq.n	800cb8a <_printf_i+0x166>
 800cc32:	6823      	ldr	r3, [r4, #0]
 800cc34:	079b      	lsls	r3, r3, #30
 800cc36:	d413      	bmi.n	800cc60 <_printf_i+0x23c>
 800cc38:	68e0      	ldr	r0, [r4, #12]
 800cc3a:	9b03      	ldr	r3, [sp, #12]
 800cc3c:	4298      	cmp	r0, r3
 800cc3e:	bfb8      	it	lt
 800cc40:	4618      	movlt	r0, r3
 800cc42:	e7a4      	b.n	800cb8e <_printf_i+0x16a>
 800cc44:	2301      	movs	r3, #1
 800cc46:	4632      	mov	r2, r6
 800cc48:	4649      	mov	r1, r9
 800cc4a:	4640      	mov	r0, r8
 800cc4c:	47d0      	blx	sl
 800cc4e:	3001      	adds	r0, #1
 800cc50:	d09b      	beq.n	800cb8a <_printf_i+0x166>
 800cc52:	3501      	adds	r5, #1
 800cc54:	68e3      	ldr	r3, [r4, #12]
 800cc56:	9903      	ldr	r1, [sp, #12]
 800cc58:	1a5b      	subs	r3, r3, r1
 800cc5a:	42ab      	cmp	r3, r5
 800cc5c:	dcf2      	bgt.n	800cc44 <_printf_i+0x220>
 800cc5e:	e7eb      	b.n	800cc38 <_printf_i+0x214>
 800cc60:	2500      	movs	r5, #0
 800cc62:	f104 0619 	add.w	r6, r4, #25
 800cc66:	e7f5      	b.n	800cc54 <_printf_i+0x230>
 800cc68:	0801003a 	.word	0x0801003a
 800cc6c:	0801004b 	.word	0x0801004b

0800cc70 <siprintf>:
 800cc70:	b40e      	push	{r1, r2, r3}
 800cc72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc76:	b500      	push	{lr}
 800cc78:	b09c      	sub	sp, #112	; 0x70
 800cc7a:	ab1d      	add	r3, sp, #116	; 0x74
 800cc7c:	9002      	str	r0, [sp, #8]
 800cc7e:	9006      	str	r0, [sp, #24]
 800cc80:	9107      	str	r1, [sp, #28]
 800cc82:	9104      	str	r1, [sp, #16]
 800cc84:	4808      	ldr	r0, [pc, #32]	; (800cca8 <siprintf+0x38>)
 800cc86:	4909      	ldr	r1, [pc, #36]	; (800ccac <siprintf+0x3c>)
 800cc88:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc8c:	9105      	str	r1, [sp, #20]
 800cc8e:	6800      	ldr	r0, [r0, #0]
 800cc90:	a902      	add	r1, sp, #8
 800cc92:	9301      	str	r3, [sp, #4]
 800cc94:	f001 fb50 	bl	800e338 <_svfiprintf_r>
 800cc98:	2200      	movs	r2, #0
 800cc9a:	9b02      	ldr	r3, [sp, #8]
 800cc9c:	701a      	strb	r2, [r3, #0]
 800cc9e:	b01c      	add	sp, #112	; 0x70
 800cca0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cca4:	b003      	add	sp, #12
 800cca6:	4770      	bx	lr
 800cca8:	20000034 	.word	0x20000034
 800ccac:	ffff0208 	.word	0xffff0208

0800ccb0 <strcat>:
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	b510      	push	{r4, lr}
 800ccb4:	7814      	ldrb	r4, [r2, #0]
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	3201      	adds	r2, #1
 800ccba:	2c00      	cmp	r4, #0
 800ccbc:	d1fa      	bne.n	800ccb4 <strcat+0x4>
 800ccbe:	3b01      	subs	r3, #1
 800ccc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccc4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccc8:	2a00      	cmp	r2, #0
 800ccca:	d1f9      	bne.n	800ccc0 <strcat+0x10>
 800cccc:	bd10      	pop	{r4, pc}

0800ccce <quorem>:
 800ccce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd2:	6903      	ldr	r3, [r0, #16]
 800ccd4:	690c      	ldr	r4, [r1, #16]
 800ccd6:	4607      	mov	r7, r0
 800ccd8:	42a3      	cmp	r3, r4
 800ccda:	f2c0 8083 	blt.w	800cde4 <quorem+0x116>
 800ccde:	3c01      	subs	r4, #1
 800cce0:	f100 0514 	add.w	r5, r0, #20
 800cce4:	f101 0814 	add.w	r8, r1, #20
 800cce8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ccec:	9301      	str	r3, [sp, #4]
 800ccee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ccf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	fbb2 f6f3 	udiv	r6, r2, r3
 800ccfe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cd02:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cd06:	d332      	bcc.n	800cd6e <quorem+0xa0>
 800cd08:	f04f 0e00 	mov.w	lr, #0
 800cd0c:	4640      	mov	r0, r8
 800cd0e:	46ac      	mov	ip, r5
 800cd10:	46f2      	mov	sl, lr
 800cd12:	f850 2b04 	ldr.w	r2, [r0], #4
 800cd16:	b293      	uxth	r3, r2
 800cd18:	fb06 e303 	mla	r3, r6, r3, lr
 800cd1c:	0c12      	lsrs	r2, r2, #16
 800cd1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cd22:	fb06 e202 	mla	r2, r6, r2, lr
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	ebaa 0303 	sub.w	r3, sl, r3
 800cd2c:	f8dc a000 	ldr.w	sl, [ip]
 800cd30:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cd34:	fa1f fa8a 	uxth.w	sl, sl
 800cd38:	4453      	add	r3, sl
 800cd3a:	fa1f fa82 	uxth.w	sl, r2
 800cd3e:	f8dc 2000 	ldr.w	r2, [ip]
 800cd42:	4581      	cmp	r9, r0
 800cd44:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800cd48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cd56:	f84c 3b04 	str.w	r3, [ip], #4
 800cd5a:	d2da      	bcs.n	800cd12 <quorem+0x44>
 800cd5c:	f855 300b 	ldr.w	r3, [r5, fp]
 800cd60:	b92b      	cbnz	r3, 800cd6e <quorem+0xa0>
 800cd62:	9b01      	ldr	r3, [sp, #4]
 800cd64:	3b04      	subs	r3, #4
 800cd66:	429d      	cmp	r5, r3
 800cd68:	461a      	mov	r2, r3
 800cd6a:	d32f      	bcc.n	800cdcc <quorem+0xfe>
 800cd6c:	613c      	str	r4, [r7, #16]
 800cd6e:	4638      	mov	r0, r7
 800cd70:	f001 f8ca 	bl	800df08 <__mcmp>
 800cd74:	2800      	cmp	r0, #0
 800cd76:	db25      	blt.n	800cdc4 <quorem+0xf6>
 800cd78:	4628      	mov	r0, r5
 800cd7a:	f04f 0c00 	mov.w	ip, #0
 800cd7e:	3601      	adds	r6, #1
 800cd80:	f858 1b04 	ldr.w	r1, [r8], #4
 800cd84:	f8d0 e000 	ldr.w	lr, [r0]
 800cd88:	b28b      	uxth	r3, r1
 800cd8a:	ebac 0303 	sub.w	r3, ip, r3
 800cd8e:	fa1f f28e 	uxth.w	r2, lr
 800cd92:	4413      	add	r3, r2
 800cd94:	0c0a      	lsrs	r2, r1, #16
 800cd96:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cd9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cda4:	45c1      	cmp	r9, r8
 800cda6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cdaa:	f840 3b04 	str.w	r3, [r0], #4
 800cdae:	d2e7      	bcs.n	800cd80 <quorem+0xb2>
 800cdb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cdb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cdb8:	b922      	cbnz	r2, 800cdc4 <quorem+0xf6>
 800cdba:	3b04      	subs	r3, #4
 800cdbc:	429d      	cmp	r5, r3
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	d30a      	bcc.n	800cdd8 <quorem+0x10a>
 800cdc2:	613c      	str	r4, [r7, #16]
 800cdc4:	4630      	mov	r0, r6
 800cdc6:	b003      	add	sp, #12
 800cdc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdcc:	6812      	ldr	r2, [r2, #0]
 800cdce:	3b04      	subs	r3, #4
 800cdd0:	2a00      	cmp	r2, #0
 800cdd2:	d1cb      	bne.n	800cd6c <quorem+0x9e>
 800cdd4:	3c01      	subs	r4, #1
 800cdd6:	e7c6      	b.n	800cd66 <quorem+0x98>
 800cdd8:	6812      	ldr	r2, [r2, #0]
 800cdda:	3b04      	subs	r3, #4
 800cddc:	2a00      	cmp	r2, #0
 800cdde:	d1f0      	bne.n	800cdc2 <quorem+0xf4>
 800cde0:	3c01      	subs	r4, #1
 800cde2:	e7eb      	b.n	800cdbc <quorem+0xee>
 800cde4:	2000      	movs	r0, #0
 800cde6:	e7ee      	b.n	800cdc6 <quorem+0xf8>

0800cde8 <_dtoa_r>:
 800cde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdec:	4616      	mov	r6, r2
 800cdee:	461f      	mov	r7, r3
 800cdf0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cdf2:	b099      	sub	sp, #100	; 0x64
 800cdf4:	4605      	mov	r5, r0
 800cdf6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cdfa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800cdfe:	b974      	cbnz	r4, 800ce1e <_dtoa_r+0x36>
 800ce00:	2010      	movs	r0, #16
 800ce02:	f000 fde3 	bl	800d9cc <malloc>
 800ce06:	4602      	mov	r2, r0
 800ce08:	6268      	str	r0, [r5, #36]	; 0x24
 800ce0a:	b920      	cbnz	r0, 800ce16 <_dtoa_r+0x2e>
 800ce0c:	21ea      	movs	r1, #234	; 0xea
 800ce0e:	4bae      	ldr	r3, [pc, #696]	; (800d0c8 <_dtoa_r+0x2e0>)
 800ce10:	48ae      	ldr	r0, [pc, #696]	; (800d0cc <_dtoa_r+0x2e4>)
 800ce12:	f001 fba1 	bl	800e558 <__assert_func>
 800ce16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce1a:	6004      	str	r4, [r0, #0]
 800ce1c:	60c4      	str	r4, [r0, #12]
 800ce1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ce20:	6819      	ldr	r1, [r3, #0]
 800ce22:	b151      	cbz	r1, 800ce3a <_dtoa_r+0x52>
 800ce24:	685a      	ldr	r2, [r3, #4]
 800ce26:	2301      	movs	r3, #1
 800ce28:	4093      	lsls	r3, r2
 800ce2a:	604a      	str	r2, [r1, #4]
 800ce2c:	608b      	str	r3, [r1, #8]
 800ce2e:	4628      	mov	r0, r5
 800ce30:	f000 fe30 	bl	800da94 <_Bfree>
 800ce34:	2200      	movs	r2, #0
 800ce36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ce38:	601a      	str	r2, [r3, #0]
 800ce3a:	1e3b      	subs	r3, r7, #0
 800ce3c:	bfaf      	iteee	ge
 800ce3e:	2300      	movge	r3, #0
 800ce40:	2201      	movlt	r2, #1
 800ce42:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ce46:	9305      	strlt	r3, [sp, #20]
 800ce48:	bfa8      	it	ge
 800ce4a:	f8c8 3000 	strge.w	r3, [r8]
 800ce4e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ce52:	4b9f      	ldr	r3, [pc, #636]	; (800d0d0 <_dtoa_r+0x2e8>)
 800ce54:	bfb8      	it	lt
 800ce56:	f8c8 2000 	strlt.w	r2, [r8]
 800ce5a:	ea33 0309 	bics.w	r3, r3, r9
 800ce5e:	d119      	bne.n	800ce94 <_dtoa_r+0xac>
 800ce60:	f242 730f 	movw	r3, #9999	; 0x270f
 800ce64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ce66:	6013      	str	r3, [r2, #0]
 800ce68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce6c:	4333      	orrs	r3, r6
 800ce6e:	f000 8580 	beq.w	800d972 <_dtoa_r+0xb8a>
 800ce72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ce74:	b953      	cbnz	r3, 800ce8c <_dtoa_r+0xa4>
 800ce76:	4b97      	ldr	r3, [pc, #604]	; (800d0d4 <_dtoa_r+0x2ec>)
 800ce78:	e022      	b.n	800cec0 <_dtoa_r+0xd8>
 800ce7a:	4b97      	ldr	r3, [pc, #604]	; (800d0d8 <_dtoa_r+0x2f0>)
 800ce7c:	9308      	str	r3, [sp, #32]
 800ce7e:	3308      	adds	r3, #8
 800ce80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ce82:	6013      	str	r3, [r2, #0]
 800ce84:	9808      	ldr	r0, [sp, #32]
 800ce86:	b019      	add	sp, #100	; 0x64
 800ce88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce8c:	4b91      	ldr	r3, [pc, #580]	; (800d0d4 <_dtoa_r+0x2ec>)
 800ce8e:	9308      	str	r3, [sp, #32]
 800ce90:	3303      	adds	r3, #3
 800ce92:	e7f5      	b.n	800ce80 <_dtoa_r+0x98>
 800ce94:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ce98:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800ce9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cea0:	2200      	movs	r2, #0
 800cea2:	2300      	movs	r3, #0
 800cea4:	f7f3 fdec 	bl	8000a80 <__aeabi_dcmpeq>
 800cea8:	4680      	mov	r8, r0
 800ceaa:	b158      	cbz	r0, 800cec4 <_dtoa_r+0xdc>
 800ceac:	2301      	movs	r3, #1
 800ceae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ceb0:	6013      	str	r3, [r2, #0]
 800ceb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	f000 8559 	beq.w	800d96c <_dtoa_r+0xb84>
 800ceba:	4888      	ldr	r0, [pc, #544]	; (800d0dc <_dtoa_r+0x2f4>)
 800cebc:	6018      	str	r0, [r3, #0]
 800cebe:	1e43      	subs	r3, r0, #1
 800cec0:	9308      	str	r3, [sp, #32]
 800cec2:	e7df      	b.n	800ce84 <_dtoa_r+0x9c>
 800cec4:	ab16      	add	r3, sp, #88	; 0x58
 800cec6:	9301      	str	r3, [sp, #4]
 800cec8:	ab17      	add	r3, sp, #92	; 0x5c
 800ceca:	9300      	str	r3, [sp, #0]
 800cecc:	4628      	mov	r0, r5
 800cece:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ced2:	f001 f8c5 	bl	800e060 <__d2b>
 800ced6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ceda:	4682      	mov	sl, r0
 800cedc:	2c00      	cmp	r4, #0
 800cede:	d07e      	beq.n	800cfde <_dtoa_r+0x1f6>
 800cee0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cee6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ceea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ceee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800cef2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800cef6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800cefa:	2200      	movs	r2, #0
 800cefc:	4b78      	ldr	r3, [pc, #480]	; (800d0e0 <_dtoa_r+0x2f8>)
 800cefe:	f7f3 f99f 	bl	8000240 <__aeabi_dsub>
 800cf02:	a36b      	add	r3, pc, #428	; (adr r3, 800d0b0 <_dtoa_r+0x2c8>)
 800cf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf08:	f7f3 fb52 	bl	80005b0 <__aeabi_dmul>
 800cf0c:	a36a      	add	r3, pc, #424	; (adr r3, 800d0b8 <_dtoa_r+0x2d0>)
 800cf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf12:	f7f3 f997 	bl	8000244 <__adddf3>
 800cf16:	4606      	mov	r6, r0
 800cf18:	4620      	mov	r0, r4
 800cf1a:	460f      	mov	r7, r1
 800cf1c:	f7f3 fade 	bl	80004dc <__aeabi_i2d>
 800cf20:	a367      	add	r3, pc, #412	; (adr r3, 800d0c0 <_dtoa_r+0x2d8>)
 800cf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf26:	f7f3 fb43 	bl	80005b0 <__aeabi_dmul>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	4630      	mov	r0, r6
 800cf30:	4639      	mov	r1, r7
 800cf32:	f7f3 f987 	bl	8000244 <__adddf3>
 800cf36:	4606      	mov	r6, r0
 800cf38:	460f      	mov	r7, r1
 800cf3a:	f7f3 fde9 	bl	8000b10 <__aeabi_d2iz>
 800cf3e:	2200      	movs	r2, #0
 800cf40:	4681      	mov	r9, r0
 800cf42:	2300      	movs	r3, #0
 800cf44:	4630      	mov	r0, r6
 800cf46:	4639      	mov	r1, r7
 800cf48:	f7f3 fda4 	bl	8000a94 <__aeabi_dcmplt>
 800cf4c:	b148      	cbz	r0, 800cf62 <_dtoa_r+0x17a>
 800cf4e:	4648      	mov	r0, r9
 800cf50:	f7f3 fac4 	bl	80004dc <__aeabi_i2d>
 800cf54:	4632      	mov	r2, r6
 800cf56:	463b      	mov	r3, r7
 800cf58:	f7f3 fd92 	bl	8000a80 <__aeabi_dcmpeq>
 800cf5c:	b908      	cbnz	r0, 800cf62 <_dtoa_r+0x17a>
 800cf5e:	f109 39ff 	add.w	r9, r9, #4294967295
 800cf62:	f1b9 0f16 	cmp.w	r9, #22
 800cf66:	d857      	bhi.n	800d018 <_dtoa_r+0x230>
 800cf68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cf6c:	4b5d      	ldr	r3, [pc, #372]	; (800d0e4 <_dtoa_r+0x2fc>)
 800cf6e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800cf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf76:	f7f3 fd8d 	bl	8000a94 <__aeabi_dcmplt>
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	d04e      	beq.n	800d01c <_dtoa_r+0x234>
 800cf7e:	2300      	movs	r3, #0
 800cf80:	f109 39ff 	add.w	r9, r9, #4294967295
 800cf84:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cf88:	1b1c      	subs	r4, r3, r4
 800cf8a:	1e63      	subs	r3, r4, #1
 800cf8c:	9309      	str	r3, [sp, #36]	; 0x24
 800cf8e:	bf49      	itett	mi
 800cf90:	f1c4 0301 	rsbmi	r3, r4, #1
 800cf94:	2300      	movpl	r3, #0
 800cf96:	9306      	strmi	r3, [sp, #24]
 800cf98:	2300      	movmi	r3, #0
 800cf9a:	bf54      	ite	pl
 800cf9c:	9306      	strpl	r3, [sp, #24]
 800cf9e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800cfa0:	f1b9 0f00 	cmp.w	r9, #0
 800cfa4:	db3c      	blt.n	800d020 <_dtoa_r+0x238>
 800cfa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfa8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800cfac:	444b      	add	r3, r9
 800cfae:	9309      	str	r3, [sp, #36]	; 0x24
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	930a      	str	r3, [sp, #40]	; 0x28
 800cfb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cfb6:	2b09      	cmp	r3, #9
 800cfb8:	d86c      	bhi.n	800d094 <_dtoa_r+0x2ac>
 800cfba:	2b05      	cmp	r3, #5
 800cfbc:	bfc4      	itt	gt
 800cfbe:	3b04      	subgt	r3, #4
 800cfc0:	9322      	strgt	r3, [sp, #136]	; 0x88
 800cfc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cfc4:	bfc8      	it	gt
 800cfc6:	2400      	movgt	r4, #0
 800cfc8:	f1a3 0302 	sub.w	r3, r3, #2
 800cfcc:	bfd8      	it	le
 800cfce:	2401      	movle	r4, #1
 800cfd0:	2b03      	cmp	r3, #3
 800cfd2:	f200 808b 	bhi.w	800d0ec <_dtoa_r+0x304>
 800cfd6:	e8df f003 	tbb	[pc, r3]
 800cfda:	4f2d      	.short	0x4f2d
 800cfdc:	5b4d      	.short	0x5b4d
 800cfde:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800cfe2:	441c      	add	r4, r3
 800cfe4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800cfe8:	2b20      	cmp	r3, #32
 800cfea:	bfc3      	ittte	gt
 800cfec:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cff0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800cff4:	fa09 f303 	lslgt.w	r3, r9, r3
 800cff8:	f1c3 0320 	rsble	r3, r3, #32
 800cffc:	bfc6      	itte	gt
 800cffe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d002:	4318      	orrgt	r0, r3
 800d004:	fa06 f003 	lslle.w	r0, r6, r3
 800d008:	f7f3 fa58 	bl	80004bc <__aeabi_ui2d>
 800d00c:	2301      	movs	r3, #1
 800d00e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d012:	3c01      	subs	r4, #1
 800d014:	9313      	str	r3, [sp, #76]	; 0x4c
 800d016:	e770      	b.n	800cefa <_dtoa_r+0x112>
 800d018:	2301      	movs	r3, #1
 800d01a:	e7b3      	b.n	800cf84 <_dtoa_r+0x19c>
 800d01c:	900f      	str	r0, [sp, #60]	; 0x3c
 800d01e:	e7b2      	b.n	800cf86 <_dtoa_r+0x19e>
 800d020:	9b06      	ldr	r3, [sp, #24]
 800d022:	eba3 0309 	sub.w	r3, r3, r9
 800d026:	9306      	str	r3, [sp, #24]
 800d028:	f1c9 0300 	rsb	r3, r9, #0
 800d02c:	930a      	str	r3, [sp, #40]	; 0x28
 800d02e:	2300      	movs	r3, #0
 800d030:	930e      	str	r3, [sp, #56]	; 0x38
 800d032:	e7bf      	b.n	800cfb4 <_dtoa_r+0x1cc>
 800d034:	2300      	movs	r3, #0
 800d036:	930b      	str	r3, [sp, #44]	; 0x2c
 800d038:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	dc59      	bgt.n	800d0f2 <_dtoa_r+0x30a>
 800d03e:	f04f 0b01 	mov.w	fp, #1
 800d042:	465b      	mov	r3, fp
 800d044:	f8cd b008 	str.w	fp, [sp, #8]
 800d048:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800d04c:	2200      	movs	r2, #0
 800d04e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d050:	6042      	str	r2, [r0, #4]
 800d052:	2204      	movs	r2, #4
 800d054:	f102 0614 	add.w	r6, r2, #20
 800d058:	429e      	cmp	r6, r3
 800d05a:	6841      	ldr	r1, [r0, #4]
 800d05c:	d94f      	bls.n	800d0fe <_dtoa_r+0x316>
 800d05e:	4628      	mov	r0, r5
 800d060:	f000 fcd8 	bl	800da14 <_Balloc>
 800d064:	9008      	str	r0, [sp, #32]
 800d066:	2800      	cmp	r0, #0
 800d068:	d14d      	bne.n	800d106 <_dtoa_r+0x31e>
 800d06a:	4602      	mov	r2, r0
 800d06c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d070:	4b1d      	ldr	r3, [pc, #116]	; (800d0e8 <_dtoa_r+0x300>)
 800d072:	e6cd      	b.n	800ce10 <_dtoa_r+0x28>
 800d074:	2301      	movs	r3, #1
 800d076:	e7de      	b.n	800d036 <_dtoa_r+0x24e>
 800d078:	2300      	movs	r3, #0
 800d07a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d07c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d07e:	eb09 0b03 	add.w	fp, r9, r3
 800d082:	f10b 0301 	add.w	r3, fp, #1
 800d086:	2b01      	cmp	r3, #1
 800d088:	9302      	str	r3, [sp, #8]
 800d08a:	bfb8      	it	lt
 800d08c:	2301      	movlt	r3, #1
 800d08e:	e7dd      	b.n	800d04c <_dtoa_r+0x264>
 800d090:	2301      	movs	r3, #1
 800d092:	e7f2      	b.n	800d07a <_dtoa_r+0x292>
 800d094:	2401      	movs	r4, #1
 800d096:	2300      	movs	r3, #0
 800d098:	940b      	str	r4, [sp, #44]	; 0x2c
 800d09a:	9322      	str	r3, [sp, #136]	; 0x88
 800d09c:	f04f 3bff 	mov.w	fp, #4294967295
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	2312      	movs	r3, #18
 800d0a4:	f8cd b008 	str.w	fp, [sp, #8]
 800d0a8:	9223      	str	r2, [sp, #140]	; 0x8c
 800d0aa:	e7cf      	b.n	800d04c <_dtoa_r+0x264>
 800d0ac:	f3af 8000 	nop.w
 800d0b0:	636f4361 	.word	0x636f4361
 800d0b4:	3fd287a7 	.word	0x3fd287a7
 800d0b8:	8b60c8b3 	.word	0x8b60c8b3
 800d0bc:	3fc68a28 	.word	0x3fc68a28
 800d0c0:	509f79fb 	.word	0x509f79fb
 800d0c4:	3fd34413 	.word	0x3fd34413
 800d0c8:	08010069 	.word	0x08010069
 800d0cc:	08010080 	.word	0x08010080
 800d0d0:	7ff00000 	.word	0x7ff00000
 800d0d4:	08010065 	.word	0x08010065
 800d0d8:	0801005c 	.word	0x0801005c
 800d0dc:	08010039 	.word	0x08010039
 800d0e0:	3ff80000 	.word	0x3ff80000
 800d0e4:	08010178 	.word	0x08010178
 800d0e8:	080100df 	.word	0x080100df
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800d0f0:	e7d4      	b.n	800d09c <_dtoa_r+0x2b4>
 800d0f2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800d0f6:	465b      	mov	r3, fp
 800d0f8:	f8cd b008 	str.w	fp, [sp, #8]
 800d0fc:	e7a6      	b.n	800d04c <_dtoa_r+0x264>
 800d0fe:	3101      	adds	r1, #1
 800d100:	6041      	str	r1, [r0, #4]
 800d102:	0052      	lsls	r2, r2, #1
 800d104:	e7a6      	b.n	800d054 <_dtoa_r+0x26c>
 800d106:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d108:	9a08      	ldr	r2, [sp, #32]
 800d10a:	601a      	str	r2, [r3, #0]
 800d10c:	9b02      	ldr	r3, [sp, #8]
 800d10e:	2b0e      	cmp	r3, #14
 800d110:	f200 80a8 	bhi.w	800d264 <_dtoa_r+0x47c>
 800d114:	2c00      	cmp	r4, #0
 800d116:	f000 80a5 	beq.w	800d264 <_dtoa_r+0x47c>
 800d11a:	f1b9 0f00 	cmp.w	r9, #0
 800d11e:	dd34      	ble.n	800d18a <_dtoa_r+0x3a2>
 800d120:	4a9a      	ldr	r2, [pc, #616]	; (800d38c <_dtoa_r+0x5a4>)
 800d122:	f009 030f 	and.w	r3, r9, #15
 800d126:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d12a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800d12e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d132:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d136:	ea4f 1429 	mov.w	r4, r9, asr #4
 800d13a:	d016      	beq.n	800d16a <_dtoa_r+0x382>
 800d13c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d140:	4b93      	ldr	r3, [pc, #588]	; (800d390 <_dtoa_r+0x5a8>)
 800d142:	2703      	movs	r7, #3
 800d144:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d148:	f7f3 fb5c 	bl	8000804 <__aeabi_ddiv>
 800d14c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d150:	f004 040f 	and.w	r4, r4, #15
 800d154:	4e8e      	ldr	r6, [pc, #568]	; (800d390 <_dtoa_r+0x5a8>)
 800d156:	b954      	cbnz	r4, 800d16e <_dtoa_r+0x386>
 800d158:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d15c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d160:	f7f3 fb50 	bl	8000804 <__aeabi_ddiv>
 800d164:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d168:	e029      	b.n	800d1be <_dtoa_r+0x3d6>
 800d16a:	2702      	movs	r7, #2
 800d16c:	e7f2      	b.n	800d154 <_dtoa_r+0x36c>
 800d16e:	07e1      	lsls	r1, r4, #31
 800d170:	d508      	bpl.n	800d184 <_dtoa_r+0x39c>
 800d172:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d176:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d17a:	f7f3 fa19 	bl	80005b0 <__aeabi_dmul>
 800d17e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d182:	3701      	adds	r7, #1
 800d184:	1064      	asrs	r4, r4, #1
 800d186:	3608      	adds	r6, #8
 800d188:	e7e5      	b.n	800d156 <_dtoa_r+0x36e>
 800d18a:	f000 80a5 	beq.w	800d2d8 <_dtoa_r+0x4f0>
 800d18e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d192:	f1c9 0400 	rsb	r4, r9, #0
 800d196:	4b7d      	ldr	r3, [pc, #500]	; (800d38c <_dtoa_r+0x5a4>)
 800d198:	f004 020f 	and.w	r2, r4, #15
 800d19c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a4:	f7f3 fa04 	bl	80005b0 <__aeabi_dmul>
 800d1a8:	2702      	movs	r7, #2
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d1b0:	4e77      	ldr	r6, [pc, #476]	; (800d390 <_dtoa_r+0x5a8>)
 800d1b2:	1124      	asrs	r4, r4, #4
 800d1b4:	2c00      	cmp	r4, #0
 800d1b6:	f040 8084 	bne.w	800d2c2 <_dtoa_r+0x4da>
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1d2      	bne.n	800d164 <_dtoa_r+0x37c>
 800d1be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	f000 808b 	beq.w	800d2dc <_dtoa_r+0x4f4>
 800d1c6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d1ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d1ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	4b6f      	ldr	r3, [pc, #444]	; (800d394 <_dtoa_r+0x5ac>)
 800d1d6:	f7f3 fc5d 	bl	8000a94 <__aeabi_dcmplt>
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	d07e      	beq.n	800d2dc <_dtoa_r+0x4f4>
 800d1de:	9b02      	ldr	r3, [sp, #8]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d07b      	beq.n	800d2dc <_dtoa_r+0x4f4>
 800d1e4:	f1bb 0f00 	cmp.w	fp, #0
 800d1e8:	dd38      	ble.n	800d25c <_dtoa_r+0x474>
 800d1ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	4b69      	ldr	r3, [pc, #420]	; (800d398 <_dtoa_r+0x5b0>)
 800d1f2:	f7f3 f9dd 	bl	80005b0 <__aeabi_dmul>
 800d1f6:	465c      	mov	r4, fp
 800d1f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d1fc:	f109 38ff 	add.w	r8, r9, #4294967295
 800d200:	3701      	adds	r7, #1
 800d202:	4638      	mov	r0, r7
 800d204:	f7f3 f96a 	bl	80004dc <__aeabi_i2d>
 800d208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d20c:	f7f3 f9d0 	bl	80005b0 <__aeabi_dmul>
 800d210:	2200      	movs	r2, #0
 800d212:	4b62      	ldr	r3, [pc, #392]	; (800d39c <_dtoa_r+0x5b4>)
 800d214:	f7f3 f816 	bl	8000244 <__adddf3>
 800d218:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d21c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d220:	9611      	str	r6, [sp, #68]	; 0x44
 800d222:	2c00      	cmp	r4, #0
 800d224:	d15d      	bne.n	800d2e2 <_dtoa_r+0x4fa>
 800d226:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d22a:	2200      	movs	r2, #0
 800d22c:	4b5c      	ldr	r3, [pc, #368]	; (800d3a0 <_dtoa_r+0x5b8>)
 800d22e:	f7f3 f807 	bl	8000240 <__aeabi_dsub>
 800d232:	4602      	mov	r2, r0
 800d234:	460b      	mov	r3, r1
 800d236:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d23a:	4633      	mov	r3, r6
 800d23c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d23e:	f7f3 fc47 	bl	8000ad0 <__aeabi_dcmpgt>
 800d242:	2800      	cmp	r0, #0
 800d244:	f040 829e 	bne.w	800d784 <_dtoa_r+0x99c>
 800d248:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d24c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d24e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d252:	f7f3 fc1f 	bl	8000a94 <__aeabi_dcmplt>
 800d256:	2800      	cmp	r0, #0
 800d258:	f040 8292 	bne.w	800d780 <_dtoa_r+0x998>
 800d25c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800d260:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d264:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d266:	2b00      	cmp	r3, #0
 800d268:	f2c0 8153 	blt.w	800d512 <_dtoa_r+0x72a>
 800d26c:	f1b9 0f0e 	cmp.w	r9, #14
 800d270:	f300 814f 	bgt.w	800d512 <_dtoa_r+0x72a>
 800d274:	4b45      	ldr	r3, [pc, #276]	; (800d38c <_dtoa_r+0x5a4>)
 800d276:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d27a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d27e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800d282:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d284:	2b00      	cmp	r3, #0
 800d286:	f280 80db 	bge.w	800d440 <_dtoa_r+0x658>
 800d28a:	9b02      	ldr	r3, [sp, #8]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	f300 80d7 	bgt.w	800d440 <_dtoa_r+0x658>
 800d292:	f040 8274 	bne.w	800d77e <_dtoa_r+0x996>
 800d296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d29a:	2200      	movs	r2, #0
 800d29c:	4b40      	ldr	r3, [pc, #256]	; (800d3a0 <_dtoa_r+0x5b8>)
 800d29e:	f7f3 f987 	bl	80005b0 <__aeabi_dmul>
 800d2a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2a6:	f7f3 fc09 	bl	8000abc <__aeabi_dcmpge>
 800d2aa:	9c02      	ldr	r4, [sp, #8]
 800d2ac:	4626      	mov	r6, r4
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	f040 824a 	bne.w	800d748 <_dtoa_r+0x960>
 800d2b4:	2331      	movs	r3, #49	; 0x31
 800d2b6:	9f08      	ldr	r7, [sp, #32]
 800d2b8:	f109 0901 	add.w	r9, r9, #1
 800d2bc:	f807 3b01 	strb.w	r3, [r7], #1
 800d2c0:	e246      	b.n	800d750 <_dtoa_r+0x968>
 800d2c2:	07e2      	lsls	r2, r4, #31
 800d2c4:	d505      	bpl.n	800d2d2 <_dtoa_r+0x4ea>
 800d2c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d2ca:	f7f3 f971 	bl	80005b0 <__aeabi_dmul>
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	3701      	adds	r7, #1
 800d2d2:	1064      	asrs	r4, r4, #1
 800d2d4:	3608      	adds	r6, #8
 800d2d6:	e76d      	b.n	800d1b4 <_dtoa_r+0x3cc>
 800d2d8:	2702      	movs	r7, #2
 800d2da:	e770      	b.n	800d1be <_dtoa_r+0x3d6>
 800d2dc:	46c8      	mov	r8, r9
 800d2de:	9c02      	ldr	r4, [sp, #8]
 800d2e0:	e78f      	b.n	800d202 <_dtoa_r+0x41a>
 800d2e2:	9908      	ldr	r1, [sp, #32]
 800d2e4:	4b29      	ldr	r3, [pc, #164]	; (800d38c <_dtoa_r+0x5a4>)
 800d2e6:	4421      	add	r1, r4
 800d2e8:	9112      	str	r1, [sp, #72]	; 0x48
 800d2ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d2ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d2f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800d2f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d2f8:	2900      	cmp	r1, #0
 800d2fa:	d055      	beq.n	800d3a8 <_dtoa_r+0x5c0>
 800d2fc:	2000      	movs	r0, #0
 800d2fe:	4929      	ldr	r1, [pc, #164]	; (800d3a4 <_dtoa_r+0x5bc>)
 800d300:	f7f3 fa80 	bl	8000804 <__aeabi_ddiv>
 800d304:	463b      	mov	r3, r7
 800d306:	4632      	mov	r2, r6
 800d308:	f7f2 ff9a 	bl	8000240 <__aeabi_dsub>
 800d30c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d310:	9f08      	ldr	r7, [sp, #32]
 800d312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d316:	f7f3 fbfb 	bl	8000b10 <__aeabi_d2iz>
 800d31a:	4604      	mov	r4, r0
 800d31c:	f7f3 f8de 	bl	80004dc <__aeabi_i2d>
 800d320:	4602      	mov	r2, r0
 800d322:	460b      	mov	r3, r1
 800d324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d328:	f7f2 ff8a 	bl	8000240 <__aeabi_dsub>
 800d32c:	4602      	mov	r2, r0
 800d32e:	460b      	mov	r3, r1
 800d330:	3430      	adds	r4, #48	; 0x30
 800d332:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d336:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d33a:	f807 4b01 	strb.w	r4, [r7], #1
 800d33e:	f7f3 fba9 	bl	8000a94 <__aeabi_dcmplt>
 800d342:	2800      	cmp	r0, #0
 800d344:	d174      	bne.n	800d430 <_dtoa_r+0x648>
 800d346:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d34a:	2000      	movs	r0, #0
 800d34c:	4911      	ldr	r1, [pc, #68]	; (800d394 <_dtoa_r+0x5ac>)
 800d34e:	f7f2 ff77 	bl	8000240 <__aeabi_dsub>
 800d352:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d356:	f7f3 fb9d 	bl	8000a94 <__aeabi_dcmplt>
 800d35a:	2800      	cmp	r0, #0
 800d35c:	f040 80b6 	bne.w	800d4cc <_dtoa_r+0x6e4>
 800d360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d362:	429f      	cmp	r7, r3
 800d364:	f43f af7a 	beq.w	800d25c <_dtoa_r+0x474>
 800d368:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d36c:	2200      	movs	r2, #0
 800d36e:	4b0a      	ldr	r3, [pc, #40]	; (800d398 <_dtoa_r+0x5b0>)
 800d370:	f7f3 f91e 	bl	80005b0 <__aeabi_dmul>
 800d374:	2200      	movs	r2, #0
 800d376:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d37a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d37e:	4b06      	ldr	r3, [pc, #24]	; (800d398 <_dtoa_r+0x5b0>)
 800d380:	f7f3 f916 	bl	80005b0 <__aeabi_dmul>
 800d384:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d388:	e7c3      	b.n	800d312 <_dtoa_r+0x52a>
 800d38a:	bf00      	nop
 800d38c:	08010178 	.word	0x08010178
 800d390:	08010150 	.word	0x08010150
 800d394:	3ff00000 	.word	0x3ff00000
 800d398:	40240000 	.word	0x40240000
 800d39c:	401c0000 	.word	0x401c0000
 800d3a0:	40140000 	.word	0x40140000
 800d3a4:	3fe00000 	.word	0x3fe00000
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	4639      	mov	r1, r7
 800d3ac:	f7f3 f900 	bl	80005b0 <__aeabi_dmul>
 800d3b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d3b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d3b6:	9c08      	ldr	r4, [sp, #32]
 800d3b8:	9314      	str	r3, [sp, #80]	; 0x50
 800d3ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d3be:	f7f3 fba7 	bl	8000b10 <__aeabi_d2iz>
 800d3c2:	9015      	str	r0, [sp, #84]	; 0x54
 800d3c4:	f7f3 f88a 	bl	80004dc <__aeabi_i2d>
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d3d0:	f7f2 ff36 	bl	8000240 <__aeabi_dsub>
 800d3d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3d6:	4606      	mov	r6, r0
 800d3d8:	3330      	adds	r3, #48	; 0x30
 800d3da:	f804 3b01 	strb.w	r3, [r4], #1
 800d3de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d3e0:	460f      	mov	r7, r1
 800d3e2:	429c      	cmp	r4, r3
 800d3e4:	f04f 0200 	mov.w	r2, #0
 800d3e8:	d124      	bne.n	800d434 <_dtoa_r+0x64c>
 800d3ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d3ee:	4bb3      	ldr	r3, [pc, #716]	; (800d6bc <_dtoa_r+0x8d4>)
 800d3f0:	f7f2 ff28 	bl	8000244 <__adddf3>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	4630      	mov	r0, r6
 800d3fa:	4639      	mov	r1, r7
 800d3fc:	f7f3 fb68 	bl	8000ad0 <__aeabi_dcmpgt>
 800d400:	2800      	cmp	r0, #0
 800d402:	d162      	bne.n	800d4ca <_dtoa_r+0x6e2>
 800d404:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d408:	2000      	movs	r0, #0
 800d40a:	49ac      	ldr	r1, [pc, #688]	; (800d6bc <_dtoa_r+0x8d4>)
 800d40c:	f7f2 ff18 	bl	8000240 <__aeabi_dsub>
 800d410:	4602      	mov	r2, r0
 800d412:	460b      	mov	r3, r1
 800d414:	4630      	mov	r0, r6
 800d416:	4639      	mov	r1, r7
 800d418:	f7f3 fb3c 	bl	8000a94 <__aeabi_dcmplt>
 800d41c:	2800      	cmp	r0, #0
 800d41e:	f43f af1d 	beq.w	800d25c <_dtoa_r+0x474>
 800d422:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d424:	1e7b      	subs	r3, r7, #1
 800d426:	9314      	str	r3, [sp, #80]	; 0x50
 800d428:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800d42c:	2b30      	cmp	r3, #48	; 0x30
 800d42e:	d0f8      	beq.n	800d422 <_dtoa_r+0x63a>
 800d430:	46c1      	mov	r9, r8
 800d432:	e03a      	b.n	800d4aa <_dtoa_r+0x6c2>
 800d434:	4ba2      	ldr	r3, [pc, #648]	; (800d6c0 <_dtoa_r+0x8d8>)
 800d436:	f7f3 f8bb 	bl	80005b0 <__aeabi_dmul>
 800d43a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d43e:	e7bc      	b.n	800d3ba <_dtoa_r+0x5d2>
 800d440:	9f08      	ldr	r7, [sp, #32]
 800d442:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d446:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d44a:	f7f3 f9db 	bl	8000804 <__aeabi_ddiv>
 800d44e:	f7f3 fb5f 	bl	8000b10 <__aeabi_d2iz>
 800d452:	4604      	mov	r4, r0
 800d454:	f7f3 f842 	bl	80004dc <__aeabi_i2d>
 800d458:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d45c:	f7f3 f8a8 	bl	80005b0 <__aeabi_dmul>
 800d460:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800d464:	460b      	mov	r3, r1
 800d466:	4602      	mov	r2, r0
 800d468:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d46c:	f7f2 fee8 	bl	8000240 <__aeabi_dsub>
 800d470:	f807 6b01 	strb.w	r6, [r7], #1
 800d474:	9e08      	ldr	r6, [sp, #32]
 800d476:	9b02      	ldr	r3, [sp, #8]
 800d478:	1bbe      	subs	r6, r7, r6
 800d47a:	42b3      	cmp	r3, r6
 800d47c:	d13a      	bne.n	800d4f4 <_dtoa_r+0x70c>
 800d47e:	4602      	mov	r2, r0
 800d480:	460b      	mov	r3, r1
 800d482:	f7f2 fedf 	bl	8000244 <__adddf3>
 800d486:	4602      	mov	r2, r0
 800d488:	460b      	mov	r3, r1
 800d48a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d48e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d492:	f7f3 fb1d 	bl	8000ad0 <__aeabi_dcmpgt>
 800d496:	bb58      	cbnz	r0, 800d4f0 <_dtoa_r+0x708>
 800d498:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d49c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4a0:	f7f3 faee 	bl	8000a80 <__aeabi_dcmpeq>
 800d4a4:	b108      	cbz	r0, 800d4aa <_dtoa_r+0x6c2>
 800d4a6:	07e1      	lsls	r1, r4, #31
 800d4a8:	d422      	bmi.n	800d4f0 <_dtoa_r+0x708>
 800d4aa:	4628      	mov	r0, r5
 800d4ac:	4651      	mov	r1, sl
 800d4ae:	f000 faf1 	bl	800da94 <_Bfree>
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	703b      	strb	r3, [r7, #0]
 800d4b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d4b8:	f109 0001 	add.w	r0, r9, #1
 800d4bc:	6018      	str	r0, [r3, #0]
 800d4be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	f43f acdf 	beq.w	800ce84 <_dtoa_r+0x9c>
 800d4c6:	601f      	str	r7, [r3, #0]
 800d4c8:	e4dc      	b.n	800ce84 <_dtoa_r+0x9c>
 800d4ca:	4627      	mov	r7, r4
 800d4cc:	463b      	mov	r3, r7
 800d4ce:	461f      	mov	r7, r3
 800d4d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4d4:	2a39      	cmp	r2, #57	; 0x39
 800d4d6:	d107      	bne.n	800d4e8 <_dtoa_r+0x700>
 800d4d8:	9a08      	ldr	r2, [sp, #32]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d1f7      	bne.n	800d4ce <_dtoa_r+0x6e6>
 800d4de:	2230      	movs	r2, #48	; 0x30
 800d4e0:	9908      	ldr	r1, [sp, #32]
 800d4e2:	f108 0801 	add.w	r8, r8, #1
 800d4e6:	700a      	strb	r2, [r1, #0]
 800d4e8:	781a      	ldrb	r2, [r3, #0]
 800d4ea:	3201      	adds	r2, #1
 800d4ec:	701a      	strb	r2, [r3, #0]
 800d4ee:	e79f      	b.n	800d430 <_dtoa_r+0x648>
 800d4f0:	46c8      	mov	r8, r9
 800d4f2:	e7eb      	b.n	800d4cc <_dtoa_r+0x6e4>
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	4b72      	ldr	r3, [pc, #456]	; (800d6c0 <_dtoa_r+0x8d8>)
 800d4f8:	f7f3 f85a 	bl	80005b0 <__aeabi_dmul>
 800d4fc:	4602      	mov	r2, r0
 800d4fe:	460b      	mov	r3, r1
 800d500:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d504:	2200      	movs	r2, #0
 800d506:	2300      	movs	r3, #0
 800d508:	f7f3 faba 	bl	8000a80 <__aeabi_dcmpeq>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d098      	beq.n	800d442 <_dtoa_r+0x65a>
 800d510:	e7cb      	b.n	800d4aa <_dtoa_r+0x6c2>
 800d512:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d514:	2a00      	cmp	r2, #0
 800d516:	f000 80cd 	beq.w	800d6b4 <_dtoa_r+0x8cc>
 800d51a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d51c:	2a01      	cmp	r2, #1
 800d51e:	f300 80af 	bgt.w	800d680 <_dtoa_r+0x898>
 800d522:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d524:	2a00      	cmp	r2, #0
 800d526:	f000 80a7 	beq.w	800d678 <_dtoa_r+0x890>
 800d52a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d52e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d530:	9f06      	ldr	r7, [sp, #24]
 800d532:	9a06      	ldr	r2, [sp, #24]
 800d534:	2101      	movs	r1, #1
 800d536:	441a      	add	r2, r3
 800d538:	9206      	str	r2, [sp, #24]
 800d53a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d53c:	4628      	mov	r0, r5
 800d53e:	441a      	add	r2, r3
 800d540:	9209      	str	r2, [sp, #36]	; 0x24
 800d542:	f000 fb61 	bl	800dc08 <__i2b>
 800d546:	4606      	mov	r6, r0
 800d548:	2f00      	cmp	r7, #0
 800d54a:	dd0c      	ble.n	800d566 <_dtoa_r+0x77e>
 800d54c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d54e:	2b00      	cmp	r3, #0
 800d550:	dd09      	ble.n	800d566 <_dtoa_r+0x77e>
 800d552:	42bb      	cmp	r3, r7
 800d554:	bfa8      	it	ge
 800d556:	463b      	movge	r3, r7
 800d558:	9a06      	ldr	r2, [sp, #24]
 800d55a:	1aff      	subs	r7, r7, r3
 800d55c:	1ad2      	subs	r2, r2, r3
 800d55e:	9206      	str	r2, [sp, #24]
 800d560:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d562:	1ad3      	subs	r3, r2, r3
 800d564:	9309      	str	r3, [sp, #36]	; 0x24
 800d566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d568:	b1f3      	cbz	r3, 800d5a8 <_dtoa_r+0x7c0>
 800d56a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f000 80a9 	beq.w	800d6c4 <_dtoa_r+0x8dc>
 800d572:	2c00      	cmp	r4, #0
 800d574:	dd10      	ble.n	800d598 <_dtoa_r+0x7b0>
 800d576:	4631      	mov	r1, r6
 800d578:	4622      	mov	r2, r4
 800d57a:	4628      	mov	r0, r5
 800d57c:	f000 fbfe 	bl	800dd7c <__pow5mult>
 800d580:	4652      	mov	r2, sl
 800d582:	4601      	mov	r1, r0
 800d584:	4606      	mov	r6, r0
 800d586:	4628      	mov	r0, r5
 800d588:	f000 fb54 	bl	800dc34 <__multiply>
 800d58c:	4680      	mov	r8, r0
 800d58e:	4651      	mov	r1, sl
 800d590:	4628      	mov	r0, r5
 800d592:	f000 fa7f 	bl	800da94 <_Bfree>
 800d596:	46c2      	mov	sl, r8
 800d598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d59a:	1b1a      	subs	r2, r3, r4
 800d59c:	d004      	beq.n	800d5a8 <_dtoa_r+0x7c0>
 800d59e:	4651      	mov	r1, sl
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	f000 fbeb 	bl	800dd7c <__pow5mult>
 800d5a6:	4682      	mov	sl, r0
 800d5a8:	2101      	movs	r1, #1
 800d5aa:	4628      	mov	r0, r5
 800d5ac:	f000 fb2c 	bl	800dc08 <__i2b>
 800d5b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5b2:	4604      	mov	r4, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f340 8087 	ble.w	800d6c8 <_dtoa_r+0x8e0>
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	4601      	mov	r1, r0
 800d5be:	4628      	mov	r0, r5
 800d5c0:	f000 fbdc 	bl	800dd7c <__pow5mult>
 800d5c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	f340 8080 	ble.w	800d6ce <_dtoa_r+0x8e6>
 800d5ce:	f04f 0800 	mov.w	r8, #0
 800d5d2:	6923      	ldr	r3, [r4, #16]
 800d5d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d5d8:	6918      	ldr	r0, [r3, #16]
 800d5da:	f000 fac7 	bl	800db6c <__hi0bits>
 800d5de:	f1c0 0020 	rsb	r0, r0, #32
 800d5e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5e4:	4418      	add	r0, r3
 800d5e6:	f010 001f 	ands.w	r0, r0, #31
 800d5ea:	f000 8092 	beq.w	800d712 <_dtoa_r+0x92a>
 800d5ee:	f1c0 0320 	rsb	r3, r0, #32
 800d5f2:	2b04      	cmp	r3, #4
 800d5f4:	f340 808a 	ble.w	800d70c <_dtoa_r+0x924>
 800d5f8:	f1c0 001c 	rsb	r0, r0, #28
 800d5fc:	9b06      	ldr	r3, [sp, #24]
 800d5fe:	4407      	add	r7, r0
 800d600:	4403      	add	r3, r0
 800d602:	9306      	str	r3, [sp, #24]
 800d604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d606:	4403      	add	r3, r0
 800d608:	9309      	str	r3, [sp, #36]	; 0x24
 800d60a:	9b06      	ldr	r3, [sp, #24]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	dd05      	ble.n	800d61c <_dtoa_r+0x834>
 800d610:	4651      	mov	r1, sl
 800d612:	461a      	mov	r2, r3
 800d614:	4628      	mov	r0, r5
 800d616:	f000 fc0b 	bl	800de30 <__lshift>
 800d61a:	4682      	mov	sl, r0
 800d61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d61e:	2b00      	cmp	r3, #0
 800d620:	dd05      	ble.n	800d62e <_dtoa_r+0x846>
 800d622:	4621      	mov	r1, r4
 800d624:	461a      	mov	r2, r3
 800d626:	4628      	mov	r0, r5
 800d628:	f000 fc02 	bl	800de30 <__lshift>
 800d62c:	4604      	mov	r4, r0
 800d62e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d630:	2b00      	cmp	r3, #0
 800d632:	d070      	beq.n	800d716 <_dtoa_r+0x92e>
 800d634:	4621      	mov	r1, r4
 800d636:	4650      	mov	r0, sl
 800d638:	f000 fc66 	bl	800df08 <__mcmp>
 800d63c:	2800      	cmp	r0, #0
 800d63e:	da6a      	bge.n	800d716 <_dtoa_r+0x92e>
 800d640:	2300      	movs	r3, #0
 800d642:	4651      	mov	r1, sl
 800d644:	220a      	movs	r2, #10
 800d646:	4628      	mov	r0, r5
 800d648:	f000 fa46 	bl	800dad8 <__multadd>
 800d64c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d64e:	4682      	mov	sl, r0
 800d650:	f109 39ff 	add.w	r9, r9, #4294967295
 800d654:	2b00      	cmp	r3, #0
 800d656:	f000 8193 	beq.w	800d980 <_dtoa_r+0xb98>
 800d65a:	4631      	mov	r1, r6
 800d65c:	2300      	movs	r3, #0
 800d65e:	220a      	movs	r2, #10
 800d660:	4628      	mov	r0, r5
 800d662:	f000 fa39 	bl	800dad8 <__multadd>
 800d666:	f1bb 0f00 	cmp.w	fp, #0
 800d66a:	4606      	mov	r6, r0
 800d66c:	f300 8093 	bgt.w	800d796 <_dtoa_r+0x9ae>
 800d670:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d672:	2b02      	cmp	r3, #2
 800d674:	dc57      	bgt.n	800d726 <_dtoa_r+0x93e>
 800d676:	e08e      	b.n	800d796 <_dtoa_r+0x9ae>
 800d678:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d67a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d67e:	e756      	b.n	800d52e <_dtoa_r+0x746>
 800d680:	9b02      	ldr	r3, [sp, #8]
 800d682:	1e5c      	subs	r4, r3, #1
 800d684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d686:	42a3      	cmp	r3, r4
 800d688:	bfb7      	itett	lt
 800d68a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d68c:	1b1c      	subge	r4, r3, r4
 800d68e:	1ae2      	sublt	r2, r4, r3
 800d690:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d692:	bfbe      	ittt	lt
 800d694:	940a      	strlt	r4, [sp, #40]	; 0x28
 800d696:	189b      	addlt	r3, r3, r2
 800d698:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d69a:	9b02      	ldr	r3, [sp, #8]
 800d69c:	bfb8      	it	lt
 800d69e:	2400      	movlt	r4, #0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	bfbb      	ittet	lt
 800d6a4:	9b06      	ldrlt	r3, [sp, #24]
 800d6a6:	9a02      	ldrlt	r2, [sp, #8]
 800d6a8:	9f06      	ldrge	r7, [sp, #24]
 800d6aa:	1a9f      	sublt	r7, r3, r2
 800d6ac:	bfac      	ite	ge
 800d6ae:	9b02      	ldrge	r3, [sp, #8]
 800d6b0:	2300      	movlt	r3, #0
 800d6b2:	e73e      	b.n	800d532 <_dtoa_r+0x74a>
 800d6b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d6b6:	9f06      	ldr	r7, [sp, #24]
 800d6b8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800d6ba:	e745      	b.n	800d548 <_dtoa_r+0x760>
 800d6bc:	3fe00000 	.word	0x3fe00000
 800d6c0:	40240000 	.word	0x40240000
 800d6c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6c6:	e76a      	b.n	800d59e <_dtoa_r+0x7b6>
 800d6c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d6ca:	2b01      	cmp	r3, #1
 800d6cc:	dc19      	bgt.n	800d702 <_dtoa_r+0x91a>
 800d6ce:	9b04      	ldr	r3, [sp, #16]
 800d6d0:	b9bb      	cbnz	r3, 800d702 <_dtoa_r+0x91a>
 800d6d2:	9b05      	ldr	r3, [sp, #20]
 800d6d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6d8:	b99b      	cbnz	r3, 800d702 <_dtoa_r+0x91a>
 800d6da:	9b05      	ldr	r3, [sp, #20]
 800d6dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6e0:	0d1b      	lsrs	r3, r3, #20
 800d6e2:	051b      	lsls	r3, r3, #20
 800d6e4:	b183      	cbz	r3, 800d708 <_dtoa_r+0x920>
 800d6e6:	f04f 0801 	mov.w	r8, #1
 800d6ea:	9b06      	ldr	r3, [sp, #24]
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	9306      	str	r3, [sp, #24]
 800d6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d6f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	f47f af6a 	bne.w	800d5d2 <_dtoa_r+0x7ea>
 800d6fe:	2001      	movs	r0, #1
 800d700:	e76f      	b.n	800d5e2 <_dtoa_r+0x7fa>
 800d702:	f04f 0800 	mov.w	r8, #0
 800d706:	e7f6      	b.n	800d6f6 <_dtoa_r+0x90e>
 800d708:	4698      	mov	r8, r3
 800d70a:	e7f4      	b.n	800d6f6 <_dtoa_r+0x90e>
 800d70c:	f43f af7d 	beq.w	800d60a <_dtoa_r+0x822>
 800d710:	4618      	mov	r0, r3
 800d712:	301c      	adds	r0, #28
 800d714:	e772      	b.n	800d5fc <_dtoa_r+0x814>
 800d716:	9b02      	ldr	r3, [sp, #8]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	dc36      	bgt.n	800d78a <_dtoa_r+0x9a2>
 800d71c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d71e:	2b02      	cmp	r3, #2
 800d720:	dd33      	ble.n	800d78a <_dtoa_r+0x9a2>
 800d722:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d726:	f1bb 0f00 	cmp.w	fp, #0
 800d72a:	d10d      	bne.n	800d748 <_dtoa_r+0x960>
 800d72c:	4621      	mov	r1, r4
 800d72e:	465b      	mov	r3, fp
 800d730:	2205      	movs	r2, #5
 800d732:	4628      	mov	r0, r5
 800d734:	f000 f9d0 	bl	800dad8 <__multadd>
 800d738:	4601      	mov	r1, r0
 800d73a:	4604      	mov	r4, r0
 800d73c:	4650      	mov	r0, sl
 800d73e:	f000 fbe3 	bl	800df08 <__mcmp>
 800d742:	2800      	cmp	r0, #0
 800d744:	f73f adb6 	bgt.w	800d2b4 <_dtoa_r+0x4cc>
 800d748:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d74a:	9f08      	ldr	r7, [sp, #32]
 800d74c:	ea6f 0903 	mvn.w	r9, r3
 800d750:	f04f 0800 	mov.w	r8, #0
 800d754:	4621      	mov	r1, r4
 800d756:	4628      	mov	r0, r5
 800d758:	f000 f99c 	bl	800da94 <_Bfree>
 800d75c:	2e00      	cmp	r6, #0
 800d75e:	f43f aea4 	beq.w	800d4aa <_dtoa_r+0x6c2>
 800d762:	f1b8 0f00 	cmp.w	r8, #0
 800d766:	d005      	beq.n	800d774 <_dtoa_r+0x98c>
 800d768:	45b0      	cmp	r8, r6
 800d76a:	d003      	beq.n	800d774 <_dtoa_r+0x98c>
 800d76c:	4641      	mov	r1, r8
 800d76e:	4628      	mov	r0, r5
 800d770:	f000 f990 	bl	800da94 <_Bfree>
 800d774:	4631      	mov	r1, r6
 800d776:	4628      	mov	r0, r5
 800d778:	f000 f98c 	bl	800da94 <_Bfree>
 800d77c:	e695      	b.n	800d4aa <_dtoa_r+0x6c2>
 800d77e:	2400      	movs	r4, #0
 800d780:	4626      	mov	r6, r4
 800d782:	e7e1      	b.n	800d748 <_dtoa_r+0x960>
 800d784:	46c1      	mov	r9, r8
 800d786:	4626      	mov	r6, r4
 800d788:	e594      	b.n	800d2b4 <_dtoa_r+0x4cc>
 800d78a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d78c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d790:	2b00      	cmp	r3, #0
 800d792:	f000 80fc 	beq.w	800d98e <_dtoa_r+0xba6>
 800d796:	2f00      	cmp	r7, #0
 800d798:	dd05      	ble.n	800d7a6 <_dtoa_r+0x9be>
 800d79a:	4631      	mov	r1, r6
 800d79c:	463a      	mov	r2, r7
 800d79e:	4628      	mov	r0, r5
 800d7a0:	f000 fb46 	bl	800de30 <__lshift>
 800d7a4:	4606      	mov	r6, r0
 800d7a6:	f1b8 0f00 	cmp.w	r8, #0
 800d7aa:	d05c      	beq.n	800d866 <_dtoa_r+0xa7e>
 800d7ac:	4628      	mov	r0, r5
 800d7ae:	6871      	ldr	r1, [r6, #4]
 800d7b0:	f000 f930 	bl	800da14 <_Balloc>
 800d7b4:	4607      	mov	r7, r0
 800d7b6:	b928      	cbnz	r0, 800d7c4 <_dtoa_r+0x9dc>
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d7be:	4b7e      	ldr	r3, [pc, #504]	; (800d9b8 <_dtoa_r+0xbd0>)
 800d7c0:	f7ff bb26 	b.w	800ce10 <_dtoa_r+0x28>
 800d7c4:	6932      	ldr	r2, [r6, #16]
 800d7c6:	f106 010c 	add.w	r1, r6, #12
 800d7ca:	3202      	adds	r2, #2
 800d7cc:	0092      	lsls	r2, r2, #2
 800d7ce:	300c      	adds	r0, #12
 800d7d0:	f000 f912 	bl	800d9f8 <memcpy>
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	4639      	mov	r1, r7
 800d7d8:	4628      	mov	r0, r5
 800d7da:	f000 fb29 	bl	800de30 <__lshift>
 800d7de:	46b0      	mov	r8, r6
 800d7e0:	4606      	mov	r6, r0
 800d7e2:	9b08      	ldr	r3, [sp, #32]
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	9302      	str	r3, [sp, #8]
 800d7e8:	9b08      	ldr	r3, [sp, #32]
 800d7ea:	445b      	add	r3, fp
 800d7ec:	930a      	str	r3, [sp, #40]	; 0x28
 800d7ee:	9b04      	ldr	r3, [sp, #16]
 800d7f0:	f003 0301 	and.w	r3, r3, #1
 800d7f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d7f6:	9b02      	ldr	r3, [sp, #8]
 800d7f8:	4621      	mov	r1, r4
 800d7fa:	4650      	mov	r0, sl
 800d7fc:	f103 3bff 	add.w	fp, r3, #4294967295
 800d800:	f7ff fa65 	bl	800ccce <quorem>
 800d804:	4603      	mov	r3, r0
 800d806:	4641      	mov	r1, r8
 800d808:	3330      	adds	r3, #48	; 0x30
 800d80a:	9004      	str	r0, [sp, #16]
 800d80c:	4650      	mov	r0, sl
 800d80e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d810:	f000 fb7a 	bl	800df08 <__mcmp>
 800d814:	4632      	mov	r2, r6
 800d816:	9006      	str	r0, [sp, #24]
 800d818:	4621      	mov	r1, r4
 800d81a:	4628      	mov	r0, r5
 800d81c:	f000 fb90 	bl	800df40 <__mdiff>
 800d820:	68c2      	ldr	r2, [r0, #12]
 800d822:	4607      	mov	r7, r0
 800d824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d826:	bb02      	cbnz	r2, 800d86a <_dtoa_r+0xa82>
 800d828:	4601      	mov	r1, r0
 800d82a:	4650      	mov	r0, sl
 800d82c:	f000 fb6c 	bl	800df08 <__mcmp>
 800d830:	4602      	mov	r2, r0
 800d832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d834:	4639      	mov	r1, r7
 800d836:	4628      	mov	r0, r5
 800d838:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800d83c:	f000 f92a 	bl	800da94 <_Bfree>
 800d840:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d842:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d844:	9f02      	ldr	r7, [sp, #8]
 800d846:	ea43 0102 	orr.w	r1, r3, r2
 800d84a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d84c:	430b      	orrs	r3, r1
 800d84e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d850:	d10d      	bne.n	800d86e <_dtoa_r+0xa86>
 800d852:	2b39      	cmp	r3, #57	; 0x39
 800d854:	d027      	beq.n	800d8a6 <_dtoa_r+0xabe>
 800d856:	9a06      	ldr	r2, [sp, #24]
 800d858:	2a00      	cmp	r2, #0
 800d85a:	dd01      	ble.n	800d860 <_dtoa_r+0xa78>
 800d85c:	9b04      	ldr	r3, [sp, #16]
 800d85e:	3331      	adds	r3, #49	; 0x31
 800d860:	f88b 3000 	strb.w	r3, [fp]
 800d864:	e776      	b.n	800d754 <_dtoa_r+0x96c>
 800d866:	4630      	mov	r0, r6
 800d868:	e7b9      	b.n	800d7de <_dtoa_r+0x9f6>
 800d86a:	2201      	movs	r2, #1
 800d86c:	e7e2      	b.n	800d834 <_dtoa_r+0xa4c>
 800d86e:	9906      	ldr	r1, [sp, #24]
 800d870:	2900      	cmp	r1, #0
 800d872:	db04      	blt.n	800d87e <_dtoa_r+0xa96>
 800d874:	9822      	ldr	r0, [sp, #136]	; 0x88
 800d876:	4301      	orrs	r1, r0
 800d878:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d87a:	4301      	orrs	r1, r0
 800d87c:	d120      	bne.n	800d8c0 <_dtoa_r+0xad8>
 800d87e:	2a00      	cmp	r2, #0
 800d880:	ddee      	ble.n	800d860 <_dtoa_r+0xa78>
 800d882:	4651      	mov	r1, sl
 800d884:	2201      	movs	r2, #1
 800d886:	4628      	mov	r0, r5
 800d888:	9302      	str	r3, [sp, #8]
 800d88a:	f000 fad1 	bl	800de30 <__lshift>
 800d88e:	4621      	mov	r1, r4
 800d890:	4682      	mov	sl, r0
 800d892:	f000 fb39 	bl	800df08 <__mcmp>
 800d896:	2800      	cmp	r0, #0
 800d898:	9b02      	ldr	r3, [sp, #8]
 800d89a:	dc02      	bgt.n	800d8a2 <_dtoa_r+0xaba>
 800d89c:	d1e0      	bne.n	800d860 <_dtoa_r+0xa78>
 800d89e:	07da      	lsls	r2, r3, #31
 800d8a0:	d5de      	bpl.n	800d860 <_dtoa_r+0xa78>
 800d8a2:	2b39      	cmp	r3, #57	; 0x39
 800d8a4:	d1da      	bne.n	800d85c <_dtoa_r+0xa74>
 800d8a6:	2339      	movs	r3, #57	; 0x39
 800d8a8:	f88b 3000 	strb.w	r3, [fp]
 800d8ac:	463b      	mov	r3, r7
 800d8ae:	461f      	mov	r7, r3
 800d8b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800d8b4:	3b01      	subs	r3, #1
 800d8b6:	2a39      	cmp	r2, #57	; 0x39
 800d8b8:	d050      	beq.n	800d95c <_dtoa_r+0xb74>
 800d8ba:	3201      	adds	r2, #1
 800d8bc:	701a      	strb	r2, [r3, #0]
 800d8be:	e749      	b.n	800d754 <_dtoa_r+0x96c>
 800d8c0:	2a00      	cmp	r2, #0
 800d8c2:	dd03      	ble.n	800d8cc <_dtoa_r+0xae4>
 800d8c4:	2b39      	cmp	r3, #57	; 0x39
 800d8c6:	d0ee      	beq.n	800d8a6 <_dtoa_r+0xabe>
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	e7c9      	b.n	800d860 <_dtoa_r+0xa78>
 800d8cc:	9a02      	ldr	r2, [sp, #8]
 800d8ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d8d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d8d4:	428a      	cmp	r2, r1
 800d8d6:	d02a      	beq.n	800d92e <_dtoa_r+0xb46>
 800d8d8:	4651      	mov	r1, sl
 800d8da:	2300      	movs	r3, #0
 800d8dc:	220a      	movs	r2, #10
 800d8de:	4628      	mov	r0, r5
 800d8e0:	f000 f8fa 	bl	800dad8 <__multadd>
 800d8e4:	45b0      	cmp	r8, r6
 800d8e6:	4682      	mov	sl, r0
 800d8e8:	f04f 0300 	mov.w	r3, #0
 800d8ec:	f04f 020a 	mov.w	r2, #10
 800d8f0:	4641      	mov	r1, r8
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	d107      	bne.n	800d906 <_dtoa_r+0xb1e>
 800d8f6:	f000 f8ef 	bl	800dad8 <__multadd>
 800d8fa:	4680      	mov	r8, r0
 800d8fc:	4606      	mov	r6, r0
 800d8fe:	9b02      	ldr	r3, [sp, #8]
 800d900:	3301      	adds	r3, #1
 800d902:	9302      	str	r3, [sp, #8]
 800d904:	e777      	b.n	800d7f6 <_dtoa_r+0xa0e>
 800d906:	f000 f8e7 	bl	800dad8 <__multadd>
 800d90a:	4631      	mov	r1, r6
 800d90c:	4680      	mov	r8, r0
 800d90e:	2300      	movs	r3, #0
 800d910:	220a      	movs	r2, #10
 800d912:	4628      	mov	r0, r5
 800d914:	f000 f8e0 	bl	800dad8 <__multadd>
 800d918:	4606      	mov	r6, r0
 800d91a:	e7f0      	b.n	800d8fe <_dtoa_r+0xb16>
 800d91c:	f1bb 0f00 	cmp.w	fp, #0
 800d920:	bfcc      	ite	gt
 800d922:	465f      	movgt	r7, fp
 800d924:	2701      	movle	r7, #1
 800d926:	f04f 0800 	mov.w	r8, #0
 800d92a:	9a08      	ldr	r2, [sp, #32]
 800d92c:	4417      	add	r7, r2
 800d92e:	4651      	mov	r1, sl
 800d930:	2201      	movs	r2, #1
 800d932:	4628      	mov	r0, r5
 800d934:	9302      	str	r3, [sp, #8]
 800d936:	f000 fa7b 	bl	800de30 <__lshift>
 800d93a:	4621      	mov	r1, r4
 800d93c:	4682      	mov	sl, r0
 800d93e:	f000 fae3 	bl	800df08 <__mcmp>
 800d942:	2800      	cmp	r0, #0
 800d944:	dcb2      	bgt.n	800d8ac <_dtoa_r+0xac4>
 800d946:	d102      	bne.n	800d94e <_dtoa_r+0xb66>
 800d948:	9b02      	ldr	r3, [sp, #8]
 800d94a:	07db      	lsls	r3, r3, #31
 800d94c:	d4ae      	bmi.n	800d8ac <_dtoa_r+0xac4>
 800d94e:	463b      	mov	r3, r7
 800d950:	461f      	mov	r7, r3
 800d952:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d956:	2a30      	cmp	r2, #48	; 0x30
 800d958:	d0fa      	beq.n	800d950 <_dtoa_r+0xb68>
 800d95a:	e6fb      	b.n	800d754 <_dtoa_r+0x96c>
 800d95c:	9a08      	ldr	r2, [sp, #32]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d1a5      	bne.n	800d8ae <_dtoa_r+0xac6>
 800d962:	2331      	movs	r3, #49	; 0x31
 800d964:	f109 0901 	add.w	r9, r9, #1
 800d968:	7013      	strb	r3, [r2, #0]
 800d96a:	e6f3      	b.n	800d754 <_dtoa_r+0x96c>
 800d96c:	4b13      	ldr	r3, [pc, #76]	; (800d9bc <_dtoa_r+0xbd4>)
 800d96e:	f7ff baa7 	b.w	800cec0 <_dtoa_r+0xd8>
 800d972:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d974:	2b00      	cmp	r3, #0
 800d976:	f47f aa80 	bne.w	800ce7a <_dtoa_r+0x92>
 800d97a:	4b11      	ldr	r3, [pc, #68]	; (800d9c0 <_dtoa_r+0xbd8>)
 800d97c:	f7ff baa0 	b.w	800cec0 <_dtoa_r+0xd8>
 800d980:	f1bb 0f00 	cmp.w	fp, #0
 800d984:	dc03      	bgt.n	800d98e <_dtoa_r+0xba6>
 800d986:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d988:	2b02      	cmp	r3, #2
 800d98a:	f73f aecc 	bgt.w	800d726 <_dtoa_r+0x93e>
 800d98e:	9f08      	ldr	r7, [sp, #32]
 800d990:	4621      	mov	r1, r4
 800d992:	4650      	mov	r0, sl
 800d994:	f7ff f99b 	bl	800ccce <quorem>
 800d998:	9a08      	ldr	r2, [sp, #32]
 800d99a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d99e:	f807 3b01 	strb.w	r3, [r7], #1
 800d9a2:	1aba      	subs	r2, r7, r2
 800d9a4:	4593      	cmp	fp, r2
 800d9a6:	ddb9      	ble.n	800d91c <_dtoa_r+0xb34>
 800d9a8:	4651      	mov	r1, sl
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	220a      	movs	r2, #10
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	f000 f892 	bl	800dad8 <__multadd>
 800d9b4:	4682      	mov	sl, r0
 800d9b6:	e7eb      	b.n	800d990 <_dtoa_r+0xba8>
 800d9b8:	080100df 	.word	0x080100df
 800d9bc:	08010038 	.word	0x08010038
 800d9c0:	0801005c 	.word	0x0801005c

0800d9c4 <_localeconv_r>:
 800d9c4:	4800      	ldr	r0, [pc, #0]	; (800d9c8 <_localeconv_r+0x4>)
 800d9c6:	4770      	bx	lr
 800d9c8:	20000188 	.word	0x20000188

0800d9cc <malloc>:
 800d9cc:	4b02      	ldr	r3, [pc, #8]	; (800d9d8 <malloc+0xc>)
 800d9ce:	4601      	mov	r1, r0
 800d9d0:	6818      	ldr	r0, [r3, #0]
 800d9d2:	f000 bbfb 	b.w	800e1cc <_malloc_r>
 800d9d6:	bf00      	nop
 800d9d8:	20000034 	.word	0x20000034

0800d9dc <memchr>:
 800d9dc:	4603      	mov	r3, r0
 800d9de:	b510      	push	{r4, lr}
 800d9e0:	b2c9      	uxtb	r1, r1
 800d9e2:	4402      	add	r2, r0
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	d101      	bne.n	800d9ee <memchr+0x12>
 800d9ea:	2000      	movs	r0, #0
 800d9ec:	e003      	b.n	800d9f6 <memchr+0x1a>
 800d9ee:	7804      	ldrb	r4, [r0, #0]
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	428c      	cmp	r4, r1
 800d9f4:	d1f6      	bne.n	800d9e4 <memchr+0x8>
 800d9f6:	bd10      	pop	{r4, pc}

0800d9f8 <memcpy>:
 800d9f8:	440a      	add	r2, r1
 800d9fa:	4291      	cmp	r1, r2
 800d9fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800da00:	d100      	bne.n	800da04 <memcpy+0xc>
 800da02:	4770      	bx	lr
 800da04:	b510      	push	{r4, lr}
 800da06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da0a:	4291      	cmp	r1, r2
 800da0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da10:	d1f9      	bne.n	800da06 <memcpy+0xe>
 800da12:	bd10      	pop	{r4, pc}

0800da14 <_Balloc>:
 800da14:	b570      	push	{r4, r5, r6, lr}
 800da16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800da18:	4604      	mov	r4, r0
 800da1a:	460d      	mov	r5, r1
 800da1c:	b976      	cbnz	r6, 800da3c <_Balloc+0x28>
 800da1e:	2010      	movs	r0, #16
 800da20:	f7ff ffd4 	bl	800d9cc <malloc>
 800da24:	4602      	mov	r2, r0
 800da26:	6260      	str	r0, [r4, #36]	; 0x24
 800da28:	b920      	cbnz	r0, 800da34 <_Balloc+0x20>
 800da2a:	2166      	movs	r1, #102	; 0x66
 800da2c:	4b17      	ldr	r3, [pc, #92]	; (800da8c <_Balloc+0x78>)
 800da2e:	4818      	ldr	r0, [pc, #96]	; (800da90 <_Balloc+0x7c>)
 800da30:	f000 fd92 	bl	800e558 <__assert_func>
 800da34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da38:	6006      	str	r6, [r0, #0]
 800da3a:	60c6      	str	r6, [r0, #12]
 800da3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800da3e:	68f3      	ldr	r3, [r6, #12]
 800da40:	b183      	cbz	r3, 800da64 <_Balloc+0x50>
 800da42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da44:	68db      	ldr	r3, [r3, #12]
 800da46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800da4a:	b9b8      	cbnz	r0, 800da7c <_Balloc+0x68>
 800da4c:	2101      	movs	r1, #1
 800da4e:	fa01 f605 	lsl.w	r6, r1, r5
 800da52:	1d72      	adds	r2, r6, #5
 800da54:	4620      	mov	r0, r4
 800da56:	0092      	lsls	r2, r2, #2
 800da58:	f000 fb5e 	bl	800e118 <_calloc_r>
 800da5c:	b160      	cbz	r0, 800da78 <_Balloc+0x64>
 800da5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da62:	e00e      	b.n	800da82 <_Balloc+0x6e>
 800da64:	2221      	movs	r2, #33	; 0x21
 800da66:	2104      	movs	r1, #4
 800da68:	4620      	mov	r0, r4
 800da6a:	f000 fb55 	bl	800e118 <_calloc_r>
 800da6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da70:	60f0      	str	r0, [r6, #12]
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d1e4      	bne.n	800da42 <_Balloc+0x2e>
 800da78:	2000      	movs	r0, #0
 800da7a:	bd70      	pop	{r4, r5, r6, pc}
 800da7c:	6802      	ldr	r2, [r0, #0]
 800da7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da82:	2300      	movs	r3, #0
 800da84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da88:	e7f7      	b.n	800da7a <_Balloc+0x66>
 800da8a:	bf00      	nop
 800da8c:	08010069 	.word	0x08010069
 800da90:	080100f0 	.word	0x080100f0

0800da94 <_Bfree>:
 800da94:	b570      	push	{r4, r5, r6, lr}
 800da96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800da98:	4605      	mov	r5, r0
 800da9a:	460c      	mov	r4, r1
 800da9c:	b976      	cbnz	r6, 800dabc <_Bfree+0x28>
 800da9e:	2010      	movs	r0, #16
 800daa0:	f7ff ff94 	bl	800d9cc <malloc>
 800daa4:	4602      	mov	r2, r0
 800daa6:	6268      	str	r0, [r5, #36]	; 0x24
 800daa8:	b920      	cbnz	r0, 800dab4 <_Bfree+0x20>
 800daaa:	218a      	movs	r1, #138	; 0x8a
 800daac:	4b08      	ldr	r3, [pc, #32]	; (800dad0 <_Bfree+0x3c>)
 800daae:	4809      	ldr	r0, [pc, #36]	; (800dad4 <_Bfree+0x40>)
 800dab0:	f000 fd52 	bl	800e558 <__assert_func>
 800dab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dab8:	6006      	str	r6, [r0, #0]
 800daba:	60c6      	str	r6, [r0, #12]
 800dabc:	b13c      	cbz	r4, 800dace <_Bfree+0x3a>
 800dabe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dac0:	6862      	ldr	r2, [r4, #4]
 800dac2:	68db      	ldr	r3, [r3, #12]
 800dac4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dac8:	6021      	str	r1, [r4, #0]
 800daca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dace:	bd70      	pop	{r4, r5, r6, pc}
 800dad0:	08010069 	.word	0x08010069
 800dad4:	080100f0 	.word	0x080100f0

0800dad8 <__multadd>:
 800dad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dadc:	4698      	mov	r8, r3
 800dade:	460c      	mov	r4, r1
 800dae0:	2300      	movs	r3, #0
 800dae2:	690e      	ldr	r6, [r1, #16]
 800dae4:	4607      	mov	r7, r0
 800dae6:	f101 0014 	add.w	r0, r1, #20
 800daea:	6805      	ldr	r5, [r0, #0]
 800daec:	3301      	adds	r3, #1
 800daee:	b2a9      	uxth	r1, r5
 800daf0:	fb02 8101 	mla	r1, r2, r1, r8
 800daf4:	0c2d      	lsrs	r5, r5, #16
 800daf6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800dafa:	fb02 c505 	mla	r5, r2, r5, ip
 800dafe:	b289      	uxth	r1, r1
 800db00:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800db04:	429e      	cmp	r6, r3
 800db06:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800db0a:	f840 1b04 	str.w	r1, [r0], #4
 800db0e:	dcec      	bgt.n	800daea <__multadd+0x12>
 800db10:	f1b8 0f00 	cmp.w	r8, #0
 800db14:	d022      	beq.n	800db5c <__multadd+0x84>
 800db16:	68a3      	ldr	r3, [r4, #8]
 800db18:	42b3      	cmp	r3, r6
 800db1a:	dc19      	bgt.n	800db50 <__multadd+0x78>
 800db1c:	6861      	ldr	r1, [r4, #4]
 800db1e:	4638      	mov	r0, r7
 800db20:	3101      	adds	r1, #1
 800db22:	f7ff ff77 	bl	800da14 <_Balloc>
 800db26:	4605      	mov	r5, r0
 800db28:	b928      	cbnz	r0, 800db36 <__multadd+0x5e>
 800db2a:	4602      	mov	r2, r0
 800db2c:	21b5      	movs	r1, #181	; 0xb5
 800db2e:	4b0d      	ldr	r3, [pc, #52]	; (800db64 <__multadd+0x8c>)
 800db30:	480d      	ldr	r0, [pc, #52]	; (800db68 <__multadd+0x90>)
 800db32:	f000 fd11 	bl	800e558 <__assert_func>
 800db36:	6922      	ldr	r2, [r4, #16]
 800db38:	f104 010c 	add.w	r1, r4, #12
 800db3c:	3202      	adds	r2, #2
 800db3e:	0092      	lsls	r2, r2, #2
 800db40:	300c      	adds	r0, #12
 800db42:	f7ff ff59 	bl	800d9f8 <memcpy>
 800db46:	4621      	mov	r1, r4
 800db48:	4638      	mov	r0, r7
 800db4a:	f7ff ffa3 	bl	800da94 <_Bfree>
 800db4e:	462c      	mov	r4, r5
 800db50:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800db54:	3601      	adds	r6, #1
 800db56:	f8c3 8014 	str.w	r8, [r3, #20]
 800db5a:	6126      	str	r6, [r4, #16]
 800db5c:	4620      	mov	r0, r4
 800db5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db62:	bf00      	nop
 800db64:	080100df 	.word	0x080100df
 800db68:	080100f0 	.word	0x080100f0

0800db6c <__hi0bits>:
 800db6c:	0c02      	lsrs	r2, r0, #16
 800db6e:	0412      	lsls	r2, r2, #16
 800db70:	4603      	mov	r3, r0
 800db72:	b9ca      	cbnz	r2, 800dba8 <__hi0bits+0x3c>
 800db74:	0403      	lsls	r3, r0, #16
 800db76:	2010      	movs	r0, #16
 800db78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800db7c:	bf04      	itt	eq
 800db7e:	021b      	lsleq	r3, r3, #8
 800db80:	3008      	addeq	r0, #8
 800db82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800db86:	bf04      	itt	eq
 800db88:	011b      	lsleq	r3, r3, #4
 800db8a:	3004      	addeq	r0, #4
 800db8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800db90:	bf04      	itt	eq
 800db92:	009b      	lsleq	r3, r3, #2
 800db94:	3002      	addeq	r0, #2
 800db96:	2b00      	cmp	r3, #0
 800db98:	db05      	blt.n	800dba6 <__hi0bits+0x3a>
 800db9a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800db9e:	f100 0001 	add.w	r0, r0, #1
 800dba2:	bf08      	it	eq
 800dba4:	2020      	moveq	r0, #32
 800dba6:	4770      	bx	lr
 800dba8:	2000      	movs	r0, #0
 800dbaa:	e7e5      	b.n	800db78 <__hi0bits+0xc>

0800dbac <__lo0bits>:
 800dbac:	6803      	ldr	r3, [r0, #0]
 800dbae:	4602      	mov	r2, r0
 800dbb0:	f013 0007 	ands.w	r0, r3, #7
 800dbb4:	d00b      	beq.n	800dbce <__lo0bits+0x22>
 800dbb6:	07d9      	lsls	r1, r3, #31
 800dbb8:	d422      	bmi.n	800dc00 <__lo0bits+0x54>
 800dbba:	0798      	lsls	r0, r3, #30
 800dbbc:	bf49      	itett	mi
 800dbbe:	085b      	lsrmi	r3, r3, #1
 800dbc0:	089b      	lsrpl	r3, r3, #2
 800dbc2:	2001      	movmi	r0, #1
 800dbc4:	6013      	strmi	r3, [r2, #0]
 800dbc6:	bf5c      	itt	pl
 800dbc8:	2002      	movpl	r0, #2
 800dbca:	6013      	strpl	r3, [r2, #0]
 800dbcc:	4770      	bx	lr
 800dbce:	b299      	uxth	r1, r3
 800dbd0:	b909      	cbnz	r1, 800dbd6 <__lo0bits+0x2a>
 800dbd2:	2010      	movs	r0, #16
 800dbd4:	0c1b      	lsrs	r3, r3, #16
 800dbd6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800dbda:	bf04      	itt	eq
 800dbdc:	0a1b      	lsreq	r3, r3, #8
 800dbde:	3008      	addeq	r0, #8
 800dbe0:	0719      	lsls	r1, r3, #28
 800dbe2:	bf04      	itt	eq
 800dbe4:	091b      	lsreq	r3, r3, #4
 800dbe6:	3004      	addeq	r0, #4
 800dbe8:	0799      	lsls	r1, r3, #30
 800dbea:	bf04      	itt	eq
 800dbec:	089b      	lsreq	r3, r3, #2
 800dbee:	3002      	addeq	r0, #2
 800dbf0:	07d9      	lsls	r1, r3, #31
 800dbf2:	d403      	bmi.n	800dbfc <__lo0bits+0x50>
 800dbf4:	085b      	lsrs	r3, r3, #1
 800dbf6:	f100 0001 	add.w	r0, r0, #1
 800dbfa:	d003      	beq.n	800dc04 <__lo0bits+0x58>
 800dbfc:	6013      	str	r3, [r2, #0]
 800dbfe:	4770      	bx	lr
 800dc00:	2000      	movs	r0, #0
 800dc02:	4770      	bx	lr
 800dc04:	2020      	movs	r0, #32
 800dc06:	4770      	bx	lr

0800dc08 <__i2b>:
 800dc08:	b510      	push	{r4, lr}
 800dc0a:	460c      	mov	r4, r1
 800dc0c:	2101      	movs	r1, #1
 800dc0e:	f7ff ff01 	bl	800da14 <_Balloc>
 800dc12:	4602      	mov	r2, r0
 800dc14:	b928      	cbnz	r0, 800dc22 <__i2b+0x1a>
 800dc16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dc1a:	4b04      	ldr	r3, [pc, #16]	; (800dc2c <__i2b+0x24>)
 800dc1c:	4804      	ldr	r0, [pc, #16]	; (800dc30 <__i2b+0x28>)
 800dc1e:	f000 fc9b 	bl	800e558 <__assert_func>
 800dc22:	2301      	movs	r3, #1
 800dc24:	6144      	str	r4, [r0, #20]
 800dc26:	6103      	str	r3, [r0, #16]
 800dc28:	bd10      	pop	{r4, pc}
 800dc2a:	bf00      	nop
 800dc2c:	080100df 	.word	0x080100df
 800dc30:	080100f0 	.word	0x080100f0

0800dc34 <__multiply>:
 800dc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc38:	4614      	mov	r4, r2
 800dc3a:	690a      	ldr	r2, [r1, #16]
 800dc3c:	6923      	ldr	r3, [r4, #16]
 800dc3e:	460d      	mov	r5, r1
 800dc40:	429a      	cmp	r2, r3
 800dc42:	bfbe      	ittt	lt
 800dc44:	460b      	movlt	r3, r1
 800dc46:	4625      	movlt	r5, r4
 800dc48:	461c      	movlt	r4, r3
 800dc4a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800dc4e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dc52:	68ab      	ldr	r3, [r5, #8]
 800dc54:	6869      	ldr	r1, [r5, #4]
 800dc56:	eb0a 0709 	add.w	r7, sl, r9
 800dc5a:	42bb      	cmp	r3, r7
 800dc5c:	b085      	sub	sp, #20
 800dc5e:	bfb8      	it	lt
 800dc60:	3101      	addlt	r1, #1
 800dc62:	f7ff fed7 	bl	800da14 <_Balloc>
 800dc66:	b930      	cbnz	r0, 800dc76 <__multiply+0x42>
 800dc68:	4602      	mov	r2, r0
 800dc6a:	f240 115d 	movw	r1, #349	; 0x15d
 800dc6e:	4b41      	ldr	r3, [pc, #260]	; (800dd74 <__multiply+0x140>)
 800dc70:	4841      	ldr	r0, [pc, #260]	; (800dd78 <__multiply+0x144>)
 800dc72:	f000 fc71 	bl	800e558 <__assert_func>
 800dc76:	f100 0614 	add.w	r6, r0, #20
 800dc7a:	4633      	mov	r3, r6
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800dc82:	4543      	cmp	r3, r8
 800dc84:	d31e      	bcc.n	800dcc4 <__multiply+0x90>
 800dc86:	f105 0c14 	add.w	ip, r5, #20
 800dc8a:	f104 0314 	add.w	r3, r4, #20
 800dc8e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800dc92:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800dc96:	9202      	str	r2, [sp, #8]
 800dc98:	ebac 0205 	sub.w	r2, ip, r5
 800dc9c:	3a15      	subs	r2, #21
 800dc9e:	f022 0203 	bic.w	r2, r2, #3
 800dca2:	3204      	adds	r2, #4
 800dca4:	f105 0115 	add.w	r1, r5, #21
 800dca8:	458c      	cmp	ip, r1
 800dcaa:	bf38      	it	cc
 800dcac:	2204      	movcc	r2, #4
 800dcae:	9201      	str	r2, [sp, #4]
 800dcb0:	9a02      	ldr	r2, [sp, #8]
 800dcb2:	9303      	str	r3, [sp, #12]
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d808      	bhi.n	800dcca <__multiply+0x96>
 800dcb8:	2f00      	cmp	r7, #0
 800dcba:	dc55      	bgt.n	800dd68 <__multiply+0x134>
 800dcbc:	6107      	str	r7, [r0, #16]
 800dcbe:	b005      	add	sp, #20
 800dcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc4:	f843 2b04 	str.w	r2, [r3], #4
 800dcc8:	e7db      	b.n	800dc82 <__multiply+0x4e>
 800dcca:	f8b3 a000 	ldrh.w	sl, [r3]
 800dcce:	f1ba 0f00 	cmp.w	sl, #0
 800dcd2:	d020      	beq.n	800dd16 <__multiply+0xe2>
 800dcd4:	46b1      	mov	r9, r6
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f105 0e14 	add.w	lr, r5, #20
 800dcdc:	f85e 4b04 	ldr.w	r4, [lr], #4
 800dce0:	f8d9 b000 	ldr.w	fp, [r9]
 800dce4:	b2a1      	uxth	r1, r4
 800dce6:	fa1f fb8b 	uxth.w	fp, fp
 800dcea:	fb0a b101 	mla	r1, sl, r1, fp
 800dcee:	4411      	add	r1, r2
 800dcf0:	f8d9 2000 	ldr.w	r2, [r9]
 800dcf4:	0c24      	lsrs	r4, r4, #16
 800dcf6:	0c12      	lsrs	r2, r2, #16
 800dcf8:	fb0a 2404 	mla	r4, sl, r4, r2
 800dcfc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800dd00:	b289      	uxth	r1, r1
 800dd02:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800dd06:	45f4      	cmp	ip, lr
 800dd08:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800dd0c:	f849 1b04 	str.w	r1, [r9], #4
 800dd10:	d8e4      	bhi.n	800dcdc <__multiply+0xa8>
 800dd12:	9901      	ldr	r1, [sp, #4]
 800dd14:	5072      	str	r2, [r6, r1]
 800dd16:	9a03      	ldr	r2, [sp, #12]
 800dd18:	3304      	adds	r3, #4
 800dd1a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dd1e:	f1b9 0f00 	cmp.w	r9, #0
 800dd22:	d01f      	beq.n	800dd64 <__multiply+0x130>
 800dd24:	46b6      	mov	lr, r6
 800dd26:	f04f 0a00 	mov.w	sl, #0
 800dd2a:	6834      	ldr	r4, [r6, #0]
 800dd2c:	f105 0114 	add.w	r1, r5, #20
 800dd30:	880a      	ldrh	r2, [r1, #0]
 800dd32:	f8be b002 	ldrh.w	fp, [lr, #2]
 800dd36:	b2a4      	uxth	r4, r4
 800dd38:	fb09 b202 	mla	r2, r9, r2, fp
 800dd3c:	4492      	add	sl, r2
 800dd3e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800dd42:	f84e 4b04 	str.w	r4, [lr], #4
 800dd46:	f851 4b04 	ldr.w	r4, [r1], #4
 800dd4a:	f8be 2000 	ldrh.w	r2, [lr]
 800dd4e:	0c24      	lsrs	r4, r4, #16
 800dd50:	fb09 2404 	mla	r4, r9, r4, r2
 800dd54:	458c      	cmp	ip, r1
 800dd56:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800dd5a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dd5e:	d8e7      	bhi.n	800dd30 <__multiply+0xfc>
 800dd60:	9a01      	ldr	r2, [sp, #4]
 800dd62:	50b4      	str	r4, [r6, r2]
 800dd64:	3604      	adds	r6, #4
 800dd66:	e7a3      	b.n	800dcb0 <__multiply+0x7c>
 800dd68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d1a5      	bne.n	800dcbc <__multiply+0x88>
 800dd70:	3f01      	subs	r7, #1
 800dd72:	e7a1      	b.n	800dcb8 <__multiply+0x84>
 800dd74:	080100df 	.word	0x080100df
 800dd78:	080100f0 	.word	0x080100f0

0800dd7c <__pow5mult>:
 800dd7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd80:	4615      	mov	r5, r2
 800dd82:	f012 0203 	ands.w	r2, r2, #3
 800dd86:	4606      	mov	r6, r0
 800dd88:	460f      	mov	r7, r1
 800dd8a:	d007      	beq.n	800dd9c <__pow5mult+0x20>
 800dd8c:	4c25      	ldr	r4, [pc, #148]	; (800de24 <__pow5mult+0xa8>)
 800dd8e:	3a01      	subs	r2, #1
 800dd90:	2300      	movs	r3, #0
 800dd92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd96:	f7ff fe9f 	bl	800dad8 <__multadd>
 800dd9a:	4607      	mov	r7, r0
 800dd9c:	10ad      	asrs	r5, r5, #2
 800dd9e:	d03d      	beq.n	800de1c <__pow5mult+0xa0>
 800dda0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dda2:	b97c      	cbnz	r4, 800ddc4 <__pow5mult+0x48>
 800dda4:	2010      	movs	r0, #16
 800dda6:	f7ff fe11 	bl	800d9cc <malloc>
 800ddaa:	4602      	mov	r2, r0
 800ddac:	6270      	str	r0, [r6, #36]	; 0x24
 800ddae:	b928      	cbnz	r0, 800ddbc <__pow5mult+0x40>
 800ddb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ddb4:	4b1c      	ldr	r3, [pc, #112]	; (800de28 <__pow5mult+0xac>)
 800ddb6:	481d      	ldr	r0, [pc, #116]	; (800de2c <__pow5mult+0xb0>)
 800ddb8:	f000 fbce 	bl	800e558 <__assert_func>
 800ddbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ddc0:	6004      	str	r4, [r0, #0]
 800ddc2:	60c4      	str	r4, [r0, #12]
 800ddc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ddc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ddcc:	b94c      	cbnz	r4, 800dde2 <__pow5mult+0x66>
 800ddce:	f240 2171 	movw	r1, #625	; 0x271
 800ddd2:	4630      	mov	r0, r6
 800ddd4:	f7ff ff18 	bl	800dc08 <__i2b>
 800ddd8:	2300      	movs	r3, #0
 800ddda:	4604      	mov	r4, r0
 800dddc:	f8c8 0008 	str.w	r0, [r8, #8]
 800dde0:	6003      	str	r3, [r0, #0]
 800dde2:	f04f 0900 	mov.w	r9, #0
 800dde6:	07eb      	lsls	r3, r5, #31
 800dde8:	d50a      	bpl.n	800de00 <__pow5mult+0x84>
 800ddea:	4639      	mov	r1, r7
 800ddec:	4622      	mov	r2, r4
 800ddee:	4630      	mov	r0, r6
 800ddf0:	f7ff ff20 	bl	800dc34 <__multiply>
 800ddf4:	4680      	mov	r8, r0
 800ddf6:	4639      	mov	r1, r7
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	f7ff fe4b 	bl	800da94 <_Bfree>
 800ddfe:	4647      	mov	r7, r8
 800de00:	106d      	asrs	r5, r5, #1
 800de02:	d00b      	beq.n	800de1c <__pow5mult+0xa0>
 800de04:	6820      	ldr	r0, [r4, #0]
 800de06:	b938      	cbnz	r0, 800de18 <__pow5mult+0x9c>
 800de08:	4622      	mov	r2, r4
 800de0a:	4621      	mov	r1, r4
 800de0c:	4630      	mov	r0, r6
 800de0e:	f7ff ff11 	bl	800dc34 <__multiply>
 800de12:	6020      	str	r0, [r4, #0]
 800de14:	f8c0 9000 	str.w	r9, [r0]
 800de18:	4604      	mov	r4, r0
 800de1a:	e7e4      	b.n	800dde6 <__pow5mult+0x6a>
 800de1c:	4638      	mov	r0, r7
 800de1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de22:	bf00      	nop
 800de24:	08010240 	.word	0x08010240
 800de28:	08010069 	.word	0x08010069
 800de2c:	080100f0 	.word	0x080100f0

0800de30 <__lshift>:
 800de30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de34:	460c      	mov	r4, r1
 800de36:	4607      	mov	r7, r0
 800de38:	4691      	mov	r9, r2
 800de3a:	6923      	ldr	r3, [r4, #16]
 800de3c:	6849      	ldr	r1, [r1, #4]
 800de3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de42:	68a3      	ldr	r3, [r4, #8]
 800de44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de48:	f108 0601 	add.w	r6, r8, #1
 800de4c:	42b3      	cmp	r3, r6
 800de4e:	db0b      	blt.n	800de68 <__lshift+0x38>
 800de50:	4638      	mov	r0, r7
 800de52:	f7ff fddf 	bl	800da14 <_Balloc>
 800de56:	4605      	mov	r5, r0
 800de58:	b948      	cbnz	r0, 800de6e <__lshift+0x3e>
 800de5a:	4602      	mov	r2, r0
 800de5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800de60:	4b27      	ldr	r3, [pc, #156]	; (800df00 <__lshift+0xd0>)
 800de62:	4828      	ldr	r0, [pc, #160]	; (800df04 <__lshift+0xd4>)
 800de64:	f000 fb78 	bl	800e558 <__assert_func>
 800de68:	3101      	adds	r1, #1
 800de6a:	005b      	lsls	r3, r3, #1
 800de6c:	e7ee      	b.n	800de4c <__lshift+0x1c>
 800de6e:	2300      	movs	r3, #0
 800de70:	f100 0114 	add.w	r1, r0, #20
 800de74:	f100 0210 	add.w	r2, r0, #16
 800de78:	4618      	mov	r0, r3
 800de7a:	4553      	cmp	r3, sl
 800de7c:	db33      	blt.n	800dee6 <__lshift+0xb6>
 800de7e:	6920      	ldr	r0, [r4, #16]
 800de80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de84:	f104 0314 	add.w	r3, r4, #20
 800de88:	f019 091f 	ands.w	r9, r9, #31
 800de8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de94:	d02b      	beq.n	800deee <__lshift+0xbe>
 800de96:	468a      	mov	sl, r1
 800de98:	2200      	movs	r2, #0
 800de9a:	f1c9 0e20 	rsb	lr, r9, #32
 800de9e:	6818      	ldr	r0, [r3, #0]
 800dea0:	fa00 f009 	lsl.w	r0, r0, r9
 800dea4:	4302      	orrs	r2, r0
 800dea6:	f84a 2b04 	str.w	r2, [sl], #4
 800deaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800deae:	459c      	cmp	ip, r3
 800deb0:	fa22 f20e 	lsr.w	r2, r2, lr
 800deb4:	d8f3      	bhi.n	800de9e <__lshift+0x6e>
 800deb6:	ebac 0304 	sub.w	r3, ip, r4
 800deba:	3b15      	subs	r3, #21
 800debc:	f023 0303 	bic.w	r3, r3, #3
 800dec0:	3304      	adds	r3, #4
 800dec2:	f104 0015 	add.w	r0, r4, #21
 800dec6:	4584      	cmp	ip, r0
 800dec8:	bf38      	it	cc
 800deca:	2304      	movcc	r3, #4
 800decc:	50ca      	str	r2, [r1, r3]
 800dece:	b10a      	cbz	r2, 800ded4 <__lshift+0xa4>
 800ded0:	f108 0602 	add.w	r6, r8, #2
 800ded4:	3e01      	subs	r6, #1
 800ded6:	4638      	mov	r0, r7
 800ded8:	4621      	mov	r1, r4
 800deda:	612e      	str	r6, [r5, #16]
 800dedc:	f7ff fdda 	bl	800da94 <_Bfree>
 800dee0:	4628      	mov	r0, r5
 800dee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dee6:	f842 0f04 	str.w	r0, [r2, #4]!
 800deea:	3301      	adds	r3, #1
 800deec:	e7c5      	b.n	800de7a <__lshift+0x4a>
 800deee:	3904      	subs	r1, #4
 800def0:	f853 2b04 	ldr.w	r2, [r3], #4
 800def4:	459c      	cmp	ip, r3
 800def6:	f841 2f04 	str.w	r2, [r1, #4]!
 800defa:	d8f9      	bhi.n	800def0 <__lshift+0xc0>
 800defc:	e7ea      	b.n	800ded4 <__lshift+0xa4>
 800defe:	bf00      	nop
 800df00:	080100df 	.word	0x080100df
 800df04:	080100f0 	.word	0x080100f0

0800df08 <__mcmp>:
 800df08:	4603      	mov	r3, r0
 800df0a:	690a      	ldr	r2, [r1, #16]
 800df0c:	6900      	ldr	r0, [r0, #16]
 800df0e:	b530      	push	{r4, r5, lr}
 800df10:	1a80      	subs	r0, r0, r2
 800df12:	d10d      	bne.n	800df30 <__mcmp+0x28>
 800df14:	3314      	adds	r3, #20
 800df16:	3114      	adds	r1, #20
 800df18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800df1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800df20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800df24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800df28:	4295      	cmp	r5, r2
 800df2a:	d002      	beq.n	800df32 <__mcmp+0x2a>
 800df2c:	d304      	bcc.n	800df38 <__mcmp+0x30>
 800df2e:	2001      	movs	r0, #1
 800df30:	bd30      	pop	{r4, r5, pc}
 800df32:	42a3      	cmp	r3, r4
 800df34:	d3f4      	bcc.n	800df20 <__mcmp+0x18>
 800df36:	e7fb      	b.n	800df30 <__mcmp+0x28>
 800df38:	f04f 30ff 	mov.w	r0, #4294967295
 800df3c:	e7f8      	b.n	800df30 <__mcmp+0x28>
	...

0800df40 <__mdiff>:
 800df40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df44:	460c      	mov	r4, r1
 800df46:	4606      	mov	r6, r0
 800df48:	4611      	mov	r1, r2
 800df4a:	4620      	mov	r0, r4
 800df4c:	4692      	mov	sl, r2
 800df4e:	f7ff ffdb 	bl	800df08 <__mcmp>
 800df52:	1e05      	subs	r5, r0, #0
 800df54:	d111      	bne.n	800df7a <__mdiff+0x3a>
 800df56:	4629      	mov	r1, r5
 800df58:	4630      	mov	r0, r6
 800df5a:	f7ff fd5b 	bl	800da14 <_Balloc>
 800df5e:	4602      	mov	r2, r0
 800df60:	b928      	cbnz	r0, 800df6e <__mdiff+0x2e>
 800df62:	f240 2132 	movw	r1, #562	; 0x232
 800df66:	4b3c      	ldr	r3, [pc, #240]	; (800e058 <__mdiff+0x118>)
 800df68:	483c      	ldr	r0, [pc, #240]	; (800e05c <__mdiff+0x11c>)
 800df6a:	f000 faf5 	bl	800e558 <__assert_func>
 800df6e:	2301      	movs	r3, #1
 800df70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df74:	4610      	mov	r0, r2
 800df76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df7a:	bfa4      	itt	ge
 800df7c:	4653      	movge	r3, sl
 800df7e:	46a2      	movge	sl, r4
 800df80:	4630      	mov	r0, r6
 800df82:	f8da 1004 	ldr.w	r1, [sl, #4]
 800df86:	bfa6      	itte	ge
 800df88:	461c      	movge	r4, r3
 800df8a:	2500      	movge	r5, #0
 800df8c:	2501      	movlt	r5, #1
 800df8e:	f7ff fd41 	bl	800da14 <_Balloc>
 800df92:	4602      	mov	r2, r0
 800df94:	b918      	cbnz	r0, 800df9e <__mdiff+0x5e>
 800df96:	f44f 7110 	mov.w	r1, #576	; 0x240
 800df9a:	4b2f      	ldr	r3, [pc, #188]	; (800e058 <__mdiff+0x118>)
 800df9c:	e7e4      	b.n	800df68 <__mdiff+0x28>
 800df9e:	f100 0814 	add.w	r8, r0, #20
 800dfa2:	f8da 7010 	ldr.w	r7, [sl, #16]
 800dfa6:	60c5      	str	r5, [r0, #12]
 800dfa8:	f04f 0c00 	mov.w	ip, #0
 800dfac:	f10a 0514 	add.w	r5, sl, #20
 800dfb0:	f10a 0010 	add.w	r0, sl, #16
 800dfb4:	46c2      	mov	sl, r8
 800dfb6:	6926      	ldr	r6, [r4, #16]
 800dfb8:	f104 0914 	add.w	r9, r4, #20
 800dfbc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800dfc0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dfc4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800dfc8:	f859 3b04 	ldr.w	r3, [r9], #4
 800dfcc:	fa1f f18b 	uxth.w	r1, fp
 800dfd0:	4461      	add	r1, ip
 800dfd2:	fa1f fc83 	uxth.w	ip, r3
 800dfd6:	0c1b      	lsrs	r3, r3, #16
 800dfd8:	eba1 010c 	sub.w	r1, r1, ip
 800dfdc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dfe0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800dfe4:	b289      	uxth	r1, r1
 800dfe6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800dfea:	454e      	cmp	r6, r9
 800dfec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800dff0:	f84a 3b04 	str.w	r3, [sl], #4
 800dff4:	d8e6      	bhi.n	800dfc4 <__mdiff+0x84>
 800dff6:	1b33      	subs	r3, r6, r4
 800dff8:	3b15      	subs	r3, #21
 800dffa:	f023 0303 	bic.w	r3, r3, #3
 800dffe:	3415      	adds	r4, #21
 800e000:	3304      	adds	r3, #4
 800e002:	42a6      	cmp	r6, r4
 800e004:	bf38      	it	cc
 800e006:	2304      	movcc	r3, #4
 800e008:	441d      	add	r5, r3
 800e00a:	4443      	add	r3, r8
 800e00c:	461e      	mov	r6, r3
 800e00e:	462c      	mov	r4, r5
 800e010:	4574      	cmp	r4, lr
 800e012:	d30e      	bcc.n	800e032 <__mdiff+0xf2>
 800e014:	f10e 0103 	add.w	r1, lr, #3
 800e018:	1b49      	subs	r1, r1, r5
 800e01a:	f021 0103 	bic.w	r1, r1, #3
 800e01e:	3d03      	subs	r5, #3
 800e020:	45ae      	cmp	lr, r5
 800e022:	bf38      	it	cc
 800e024:	2100      	movcc	r1, #0
 800e026:	4419      	add	r1, r3
 800e028:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800e02c:	b18b      	cbz	r3, 800e052 <__mdiff+0x112>
 800e02e:	6117      	str	r7, [r2, #16]
 800e030:	e7a0      	b.n	800df74 <__mdiff+0x34>
 800e032:	f854 8b04 	ldr.w	r8, [r4], #4
 800e036:	fa1f f188 	uxth.w	r1, r8
 800e03a:	4461      	add	r1, ip
 800e03c:	1408      	asrs	r0, r1, #16
 800e03e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800e042:	b289      	uxth	r1, r1
 800e044:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e048:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e04c:	f846 1b04 	str.w	r1, [r6], #4
 800e050:	e7de      	b.n	800e010 <__mdiff+0xd0>
 800e052:	3f01      	subs	r7, #1
 800e054:	e7e8      	b.n	800e028 <__mdiff+0xe8>
 800e056:	bf00      	nop
 800e058:	080100df 	.word	0x080100df
 800e05c:	080100f0 	.word	0x080100f0

0800e060 <__d2b>:
 800e060:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e064:	2101      	movs	r1, #1
 800e066:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800e06a:	4690      	mov	r8, r2
 800e06c:	461d      	mov	r5, r3
 800e06e:	f7ff fcd1 	bl	800da14 <_Balloc>
 800e072:	4604      	mov	r4, r0
 800e074:	b930      	cbnz	r0, 800e084 <__d2b+0x24>
 800e076:	4602      	mov	r2, r0
 800e078:	f240 310a 	movw	r1, #778	; 0x30a
 800e07c:	4b24      	ldr	r3, [pc, #144]	; (800e110 <__d2b+0xb0>)
 800e07e:	4825      	ldr	r0, [pc, #148]	; (800e114 <__d2b+0xb4>)
 800e080:	f000 fa6a 	bl	800e558 <__assert_func>
 800e084:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800e088:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800e08c:	bb2d      	cbnz	r5, 800e0da <__d2b+0x7a>
 800e08e:	9301      	str	r3, [sp, #4]
 800e090:	f1b8 0300 	subs.w	r3, r8, #0
 800e094:	d026      	beq.n	800e0e4 <__d2b+0x84>
 800e096:	4668      	mov	r0, sp
 800e098:	9300      	str	r3, [sp, #0]
 800e09a:	f7ff fd87 	bl	800dbac <__lo0bits>
 800e09e:	9900      	ldr	r1, [sp, #0]
 800e0a0:	b1f0      	cbz	r0, 800e0e0 <__d2b+0x80>
 800e0a2:	9a01      	ldr	r2, [sp, #4]
 800e0a4:	f1c0 0320 	rsb	r3, r0, #32
 800e0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800e0ac:	430b      	orrs	r3, r1
 800e0ae:	40c2      	lsrs	r2, r0
 800e0b0:	6163      	str	r3, [r4, #20]
 800e0b2:	9201      	str	r2, [sp, #4]
 800e0b4:	9b01      	ldr	r3, [sp, #4]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	bf14      	ite	ne
 800e0ba:	2102      	movne	r1, #2
 800e0bc:	2101      	moveq	r1, #1
 800e0be:	61a3      	str	r3, [r4, #24]
 800e0c0:	6121      	str	r1, [r4, #16]
 800e0c2:	b1c5      	cbz	r5, 800e0f6 <__d2b+0x96>
 800e0c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e0c8:	4405      	add	r5, r0
 800e0ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e0ce:	603d      	str	r5, [r7, #0]
 800e0d0:	6030      	str	r0, [r6, #0]
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	b002      	add	sp, #8
 800e0d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e0de:	e7d6      	b.n	800e08e <__d2b+0x2e>
 800e0e0:	6161      	str	r1, [r4, #20]
 800e0e2:	e7e7      	b.n	800e0b4 <__d2b+0x54>
 800e0e4:	a801      	add	r0, sp, #4
 800e0e6:	f7ff fd61 	bl	800dbac <__lo0bits>
 800e0ea:	2101      	movs	r1, #1
 800e0ec:	9b01      	ldr	r3, [sp, #4]
 800e0ee:	6121      	str	r1, [r4, #16]
 800e0f0:	6163      	str	r3, [r4, #20]
 800e0f2:	3020      	adds	r0, #32
 800e0f4:	e7e5      	b.n	800e0c2 <__d2b+0x62>
 800e0f6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800e0fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e0fe:	6038      	str	r0, [r7, #0]
 800e100:	6918      	ldr	r0, [r3, #16]
 800e102:	f7ff fd33 	bl	800db6c <__hi0bits>
 800e106:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800e10a:	6031      	str	r1, [r6, #0]
 800e10c:	e7e1      	b.n	800e0d2 <__d2b+0x72>
 800e10e:	bf00      	nop
 800e110:	080100df 	.word	0x080100df
 800e114:	080100f0 	.word	0x080100f0

0800e118 <_calloc_r>:
 800e118:	b538      	push	{r3, r4, r5, lr}
 800e11a:	fb02 f501 	mul.w	r5, r2, r1
 800e11e:	4629      	mov	r1, r5
 800e120:	f000 f854 	bl	800e1cc <_malloc_r>
 800e124:	4604      	mov	r4, r0
 800e126:	b118      	cbz	r0, 800e130 <_calloc_r+0x18>
 800e128:	462a      	mov	r2, r5
 800e12a:	2100      	movs	r1, #0
 800e12c:	f7fe f938 	bl	800c3a0 <memset>
 800e130:	4620      	mov	r0, r4
 800e132:	bd38      	pop	{r3, r4, r5, pc}

0800e134 <_free_r>:
 800e134:	b538      	push	{r3, r4, r5, lr}
 800e136:	4605      	mov	r5, r0
 800e138:	2900      	cmp	r1, #0
 800e13a:	d043      	beq.n	800e1c4 <_free_r+0x90>
 800e13c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e140:	1f0c      	subs	r4, r1, #4
 800e142:	2b00      	cmp	r3, #0
 800e144:	bfb8      	it	lt
 800e146:	18e4      	addlt	r4, r4, r3
 800e148:	f000 fa62 	bl	800e610 <__malloc_lock>
 800e14c:	4a1e      	ldr	r2, [pc, #120]	; (800e1c8 <_free_r+0x94>)
 800e14e:	6813      	ldr	r3, [r2, #0]
 800e150:	4610      	mov	r0, r2
 800e152:	b933      	cbnz	r3, 800e162 <_free_r+0x2e>
 800e154:	6063      	str	r3, [r4, #4]
 800e156:	6014      	str	r4, [r2, #0]
 800e158:	4628      	mov	r0, r5
 800e15a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e15e:	f000 ba5d 	b.w	800e61c <__malloc_unlock>
 800e162:	42a3      	cmp	r3, r4
 800e164:	d90a      	bls.n	800e17c <_free_r+0x48>
 800e166:	6821      	ldr	r1, [r4, #0]
 800e168:	1862      	adds	r2, r4, r1
 800e16a:	4293      	cmp	r3, r2
 800e16c:	bf01      	itttt	eq
 800e16e:	681a      	ldreq	r2, [r3, #0]
 800e170:	685b      	ldreq	r3, [r3, #4]
 800e172:	1852      	addeq	r2, r2, r1
 800e174:	6022      	streq	r2, [r4, #0]
 800e176:	6063      	str	r3, [r4, #4]
 800e178:	6004      	str	r4, [r0, #0]
 800e17a:	e7ed      	b.n	800e158 <_free_r+0x24>
 800e17c:	461a      	mov	r2, r3
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	b10b      	cbz	r3, 800e186 <_free_r+0x52>
 800e182:	42a3      	cmp	r3, r4
 800e184:	d9fa      	bls.n	800e17c <_free_r+0x48>
 800e186:	6811      	ldr	r1, [r2, #0]
 800e188:	1850      	adds	r0, r2, r1
 800e18a:	42a0      	cmp	r0, r4
 800e18c:	d10b      	bne.n	800e1a6 <_free_r+0x72>
 800e18e:	6820      	ldr	r0, [r4, #0]
 800e190:	4401      	add	r1, r0
 800e192:	1850      	adds	r0, r2, r1
 800e194:	4283      	cmp	r3, r0
 800e196:	6011      	str	r1, [r2, #0]
 800e198:	d1de      	bne.n	800e158 <_free_r+0x24>
 800e19a:	6818      	ldr	r0, [r3, #0]
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	4401      	add	r1, r0
 800e1a0:	6011      	str	r1, [r2, #0]
 800e1a2:	6053      	str	r3, [r2, #4]
 800e1a4:	e7d8      	b.n	800e158 <_free_r+0x24>
 800e1a6:	d902      	bls.n	800e1ae <_free_r+0x7a>
 800e1a8:	230c      	movs	r3, #12
 800e1aa:	602b      	str	r3, [r5, #0]
 800e1ac:	e7d4      	b.n	800e158 <_free_r+0x24>
 800e1ae:	6820      	ldr	r0, [r4, #0]
 800e1b0:	1821      	adds	r1, r4, r0
 800e1b2:	428b      	cmp	r3, r1
 800e1b4:	bf01      	itttt	eq
 800e1b6:	6819      	ldreq	r1, [r3, #0]
 800e1b8:	685b      	ldreq	r3, [r3, #4]
 800e1ba:	1809      	addeq	r1, r1, r0
 800e1bc:	6021      	streq	r1, [r4, #0]
 800e1be:	6063      	str	r3, [r4, #4]
 800e1c0:	6054      	str	r4, [r2, #4]
 800e1c2:	e7c9      	b.n	800e158 <_free_r+0x24>
 800e1c4:	bd38      	pop	{r3, r4, r5, pc}
 800e1c6:	bf00      	nop
 800e1c8:	20000454 	.word	0x20000454

0800e1cc <_malloc_r>:
 800e1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ce:	1ccd      	adds	r5, r1, #3
 800e1d0:	f025 0503 	bic.w	r5, r5, #3
 800e1d4:	3508      	adds	r5, #8
 800e1d6:	2d0c      	cmp	r5, #12
 800e1d8:	bf38      	it	cc
 800e1da:	250c      	movcc	r5, #12
 800e1dc:	2d00      	cmp	r5, #0
 800e1de:	4606      	mov	r6, r0
 800e1e0:	db01      	blt.n	800e1e6 <_malloc_r+0x1a>
 800e1e2:	42a9      	cmp	r1, r5
 800e1e4:	d903      	bls.n	800e1ee <_malloc_r+0x22>
 800e1e6:	230c      	movs	r3, #12
 800e1e8:	6033      	str	r3, [r6, #0]
 800e1ea:	2000      	movs	r0, #0
 800e1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1ee:	f000 fa0f 	bl	800e610 <__malloc_lock>
 800e1f2:	4921      	ldr	r1, [pc, #132]	; (800e278 <_malloc_r+0xac>)
 800e1f4:	680a      	ldr	r2, [r1, #0]
 800e1f6:	4614      	mov	r4, r2
 800e1f8:	b99c      	cbnz	r4, 800e222 <_malloc_r+0x56>
 800e1fa:	4f20      	ldr	r7, [pc, #128]	; (800e27c <_malloc_r+0xb0>)
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	b923      	cbnz	r3, 800e20a <_malloc_r+0x3e>
 800e200:	4621      	mov	r1, r4
 800e202:	4630      	mov	r0, r6
 800e204:	f000 f998 	bl	800e538 <_sbrk_r>
 800e208:	6038      	str	r0, [r7, #0]
 800e20a:	4629      	mov	r1, r5
 800e20c:	4630      	mov	r0, r6
 800e20e:	f000 f993 	bl	800e538 <_sbrk_r>
 800e212:	1c43      	adds	r3, r0, #1
 800e214:	d123      	bne.n	800e25e <_malloc_r+0x92>
 800e216:	230c      	movs	r3, #12
 800e218:	4630      	mov	r0, r6
 800e21a:	6033      	str	r3, [r6, #0]
 800e21c:	f000 f9fe 	bl	800e61c <__malloc_unlock>
 800e220:	e7e3      	b.n	800e1ea <_malloc_r+0x1e>
 800e222:	6823      	ldr	r3, [r4, #0]
 800e224:	1b5b      	subs	r3, r3, r5
 800e226:	d417      	bmi.n	800e258 <_malloc_r+0x8c>
 800e228:	2b0b      	cmp	r3, #11
 800e22a:	d903      	bls.n	800e234 <_malloc_r+0x68>
 800e22c:	6023      	str	r3, [r4, #0]
 800e22e:	441c      	add	r4, r3
 800e230:	6025      	str	r5, [r4, #0]
 800e232:	e004      	b.n	800e23e <_malloc_r+0x72>
 800e234:	6863      	ldr	r3, [r4, #4]
 800e236:	42a2      	cmp	r2, r4
 800e238:	bf0c      	ite	eq
 800e23a:	600b      	streq	r3, [r1, #0]
 800e23c:	6053      	strne	r3, [r2, #4]
 800e23e:	4630      	mov	r0, r6
 800e240:	f000 f9ec 	bl	800e61c <__malloc_unlock>
 800e244:	f104 000b 	add.w	r0, r4, #11
 800e248:	1d23      	adds	r3, r4, #4
 800e24a:	f020 0007 	bic.w	r0, r0, #7
 800e24e:	1ac2      	subs	r2, r0, r3
 800e250:	d0cc      	beq.n	800e1ec <_malloc_r+0x20>
 800e252:	1a1b      	subs	r3, r3, r0
 800e254:	50a3      	str	r3, [r4, r2]
 800e256:	e7c9      	b.n	800e1ec <_malloc_r+0x20>
 800e258:	4622      	mov	r2, r4
 800e25a:	6864      	ldr	r4, [r4, #4]
 800e25c:	e7cc      	b.n	800e1f8 <_malloc_r+0x2c>
 800e25e:	1cc4      	adds	r4, r0, #3
 800e260:	f024 0403 	bic.w	r4, r4, #3
 800e264:	42a0      	cmp	r0, r4
 800e266:	d0e3      	beq.n	800e230 <_malloc_r+0x64>
 800e268:	1a21      	subs	r1, r4, r0
 800e26a:	4630      	mov	r0, r6
 800e26c:	f000 f964 	bl	800e538 <_sbrk_r>
 800e270:	3001      	adds	r0, #1
 800e272:	d1dd      	bne.n	800e230 <_malloc_r+0x64>
 800e274:	e7cf      	b.n	800e216 <_malloc_r+0x4a>
 800e276:	bf00      	nop
 800e278:	20000454 	.word	0x20000454
 800e27c:	20000458 	.word	0x20000458

0800e280 <__ssputs_r>:
 800e280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e284:	688e      	ldr	r6, [r1, #8]
 800e286:	4682      	mov	sl, r0
 800e288:	429e      	cmp	r6, r3
 800e28a:	460c      	mov	r4, r1
 800e28c:	4690      	mov	r8, r2
 800e28e:	461f      	mov	r7, r3
 800e290:	d838      	bhi.n	800e304 <__ssputs_r+0x84>
 800e292:	898a      	ldrh	r2, [r1, #12]
 800e294:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e298:	d032      	beq.n	800e300 <__ssputs_r+0x80>
 800e29a:	6825      	ldr	r5, [r4, #0]
 800e29c:	6909      	ldr	r1, [r1, #16]
 800e29e:	3301      	adds	r3, #1
 800e2a0:	eba5 0901 	sub.w	r9, r5, r1
 800e2a4:	6965      	ldr	r5, [r4, #20]
 800e2a6:	444b      	add	r3, r9
 800e2a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e2b0:	106d      	asrs	r5, r5, #1
 800e2b2:	429d      	cmp	r5, r3
 800e2b4:	bf38      	it	cc
 800e2b6:	461d      	movcc	r5, r3
 800e2b8:	0553      	lsls	r3, r2, #21
 800e2ba:	d531      	bpl.n	800e320 <__ssputs_r+0xa0>
 800e2bc:	4629      	mov	r1, r5
 800e2be:	f7ff ff85 	bl	800e1cc <_malloc_r>
 800e2c2:	4606      	mov	r6, r0
 800e2c4:	b950      	cbnz	r0, 800e2dc <__ssputs_r+0x5c>
 800e2c6:	230c      	movs	r3, #12
 800e2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2cc:	f8ca 3000 	str.w	r3, [sl]
 800e2d0:	89a3      	ldrh	r3, [r4, #12]
 800e2d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2d6:	81a3      	strh	r3, [r4, #12]
 800e2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2dc:	464a      	mov	r2, r9
 800e2de:	6921      	ldr	r1, [r4, #16]
 800e2e0:	f7ff fb8a 	bl	800d9f8 <memcpy>
 800e2e4:	89a3      	ldrh	r3, [r4, #12]
 800e2e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e2ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2ee:	81a3      	strh	r3, [r4, #12]
 800e2f0:	6126      	str	r6, [r4, #16]
 800e2f2:	444e      	add	r6, r9
 800e2f4:	6026      	str	r6, [r4, #0]
 800e2f6:	463e      	mov	r6, r7
 800e2f8:	6165      	str	r5, [r4, #20]
 800e2fa:	eba5 0509 	sub.w	r5, r5, r9
 800e2fe:	60a5      	str	r5, [r4, #8]
 800e300:	42be      	cmp	r6, r7
 800e302:	d900      	bls.n	800e306 <__ssputs_r+0x86>
 800e304:	463e      	mov	r6, r7
 800e306:	4632      	mov	r2, r6
 800e308:	4641      	mov	r1, r8
 800e30a:	6820      	ldr	r0, [r4, #0]
 800e30c:	f000 f966 	bl	800e5dc <memmove>
 800e310:	68a3      	ldr	r3, [r4, #8]
 800e312:	6822      	ldr	r2, [r4, #0]
 800e314:	1b9b      	subs	r3, r3, r6
 800e316:	4432      	add	r2, r6
 800e318:	2000      	movs	r0, #0
 800e31a:	60a3      	str	r3, [r4, #8]
 800e31c:	6022      	str	r2, [r4, #0]
 800e31e:	e7db      	b.n	800e2d8 <__ssputs_r+0x58>
 800e320:	462a      	mov	r2, r5
 800e322:	f000 f981 	bl	800e628 <_realloc_r>
 800e326:	4606      	mov	r6, r0
 800e328:	2800      	cmp	r0, #0
 800e32a:	d1e1      	bne.n	800e2f0 <__ssputs_r+0x70>
 800e32c:	4650      	mov	r0, sl
 800e32e:	6921      	ldr	r1, [r4, #16]
 800e330:	f7ff ff00 	bl	800e134 <_free_r>
 800e334:	e7c7      	b.n	800e2c6 <__ssputs_r+0x46>
	...

0800e338 <_svfiprintf_r>:
 800e338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e33c:	4698      	mov	r8, r3
 800e33e:	898b      	ldrh	r3, [r1, #12]
 800e340:	4607      	mov	r7, r0
 800e342:	061b      	lsls	r3, r3, #24
 800e344:	460d      	mov	r5, r1
 800e346:	4614      	mov	r4, r2
 800e348:	b09d      	sub	sp, #116	; 0x74
 800e34a:	d50e      	bpl.n	800e36a <_svfiprintf_r+0x32>
 800e34c:	690b      	ldr	r3, [r1, #16]
 800e34e:	b963      	cbnz	r3, 800e36a <_svfiprintf_r+0x32>
 800e350:	2140      	movs	r1, #64	; 0x40
 800e352:	f7ff ff3b 	bl	800e1cc <_malloc_r>
 800e356:	6028      	str	r0, [r5, #0]
 800e358:	6128      	str	r0, [r5, #16]
 800e35a:	b920      	cbnz	r0, 800e366 <_svfiprintf_r+0x2e>
 800e35c:	230c      	movs	r3, #12
 800e35e:	603b      	str	r3, [r7, #0]
 800e360:	f04f 30ff 	mov.w	r0, #4294967295
 800e364:	e0d1      	b.n	800e50a <_svfiprintf_r+0x1d2>
 800e366:	2340      	movs	r3, #64	; 0x40
 800e368:	616b      	str	r3, [r5, #20]
 800e36a:	2300      	movs	r3, #0
 800e36c:	9309      	str	r3, [sp, #36]	; 0x24
 800e36e:	2320      	movs	r3, #32
 800e370:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e374:	2330      	movs	r3, #48	; 0x30
 800e376:	f04f 0901 	mov.w	r9, #1
 800e37a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e37e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e524 <_svfiprintf_r+0x1ec>
 800e382:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e386:	4623      	mov	r3, r4
 800e388:	469a      	mov	sl, r3
 800e38a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e38e:	b10a      	cbz	r2, 800e394 <_svfiprintf_r+0x5c>
 800e390:	2a25      	cmp	r2, #37	; 0x25
 800e392:	d1f9      	bne.n	800e388 <_svfiprintf_r+0x50>
 800e394:	ebba 0b04 	subs.w	fp, sl, r4
 800e398:	d00b      	beq.n	800e3b2 <_svfiprintf_r+0x7a>
 800e39a:	465b      	mov	r3, fp
 800e39c:	4622      	mov	r2, r4
 800e39e:	4629      	mov	r1, r5
 800e3a0:	4638      	mov	r0, r7
 800e3a2:	f7ff ff6d 	bl	800e280 <__ssputs_r>
 800e3a6:	3001      	adds	r0, #1
 800e3a8:	f000 80aa 	beq.w	800e500 <_svfiprintf_r+0x1c8>
 800e3ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3ae:	445a      	add	r2, fp
 800e3b0:	9209      	str	r2, [sp, #36]	; 0x24
 800e3b2:	f89a 3000 	ldrb.w	r3, [sl]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	f000 80a2 	beq.w	800e500 <_svfiprintf_r+0x1c8>
 800e3bc:	2300      	movs	r3, #0
 800e3be:	f04f 32ff 	mov.w	r2, #4294967295
 800e3c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3c6:	f10a 0a01 	add.w	sl, sl, #1
 800e3ca:	9304      	str	r3, [sp, #16]
 800e3cc:	9307      	str	r3, [sp, #28]
 800e3ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e3d2:	931a      	str	r3, [sp, #104]	; 0x68
 800e3d4:	4654      	mov	r4, sl
 800e3d6:	2205      	movs	r2, #5
 800e3d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3dc:	4851      	ldr	r0, [pc, #324]	; (800e524 <_svfiprintf_r+0x1ec>)
 800e3de:	f7ff fafd 	bl	800d9dc <memchr>
 800e3e2:	9a04      	ldr	r2, [sp, #16]
 800e3e4:	b9d8      	cbnz	r0, 800e41e <_svfiprintf_r+0xe6>
 800e3e6:	06d0      	lsls	r0, r2, #27
 800e3e8:	bf44      	itt	mi
 800e3ea:	2320      	movmi	r3, #32
 800e3ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3f0:	0711      	lsls	r1, r2, #28
 800e3f2:	bf44      	itt	mi
 800e3f4:	232b      	movmi	r3, #43	; 0x2b
 800e3f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3fa:	f89a 3000 	ldrb.w	r3, [sl]
 800e3fe:	2b2a      	cmp	r3, #42	; 0x2a
 800e400:	d015      	beq.n	800e42e <_svfiprintf_r+0xf6>
 800e402:	4654      	mov	r4, sl
 800e404:	2000      	movs	r0, #0
 800e406:	f04f 0c0a 	mov.w	ip, #10
 800e40a:	9a07      	ldr	r2, [sp, #28]
 800e40c:	4621      	mov	r1, r4
 800e40e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e412:	3b30      	subs	r3, #48	; 0x30
 800e414:	2b09      	cmp	r3, #9
 800e416:	d94e      	bls.n	800e4b6 <_svfiprintf_r+0x17e>
 800e418:	b1b0      	cbz	r0, 800e448 <_svfiprintf_r+0x110>
 800e41a:	9207      	str	r2, [sp, #28]
 800e41c:	e014      	b.n	800e448 <_svfiprintf_r+0x110>
 800e41e:	eba0 0308 	sub.w	r3, r0, r8
 800e422:	fa09 f303 	lsl.w	r3, r9, r3
 800e426:	4313      	orrs	r3, r2
 800e428:	46a2      	mov	sl, r4
 800e42a:	9304      	str	r3, [sp, #16]
 800e42c:	e7d2      	b.n	800e3d4 <_svfiprintf_r+0x9c>
 800e42e:	9b03      	ldr	r3, [sp, #12]
 800e430:	1d19      	adds	r1, r3, #4
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	9103      	str	r1, [sp, #12]
 800e436:	2b00      	cmp	r3, #0
 800e438:	bfbb      	ittet	lt
 800e43a:	425b      	neglt	r3, r3
 800e43c:	f042 0202 	orrlt.w	r2, r2, #2
 800e440:	9307      	strge	r3, [sp, #28]
 800e442:	9307      	strlt	r3, [sp, #28]
 800e444:	bfb8      	it	lt
 800e446:	9204      	strlt	r2, [sp, #16]
 800e448:	7823      	ldrb	r3, [r4, #0]
 800e44a:	2b2e      	cmp	r3, #46	; 0x2e
 800e44c:	d10c      	bne.n	800e468 <_svfiprintf_r+0x130>
 800e44e:	7863      	ldrb	r3, [r4, #1]
 800e450:	2b2a      	cmp	r3, #42	; 0x2a
 800e452:	d135      	bne.n	800e4c0 <_svfiprintf_r+0x188>
 800e454:	9b03      	ldr	r3, [sp, #12]
 800e456:	3402      	adds	r4, #2
 800e458:	1d1a      	adds	r2, r3, #4
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	9203      	str	r2, [sp, #12]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	bfb8      	it	lt
 800e462:	f04f 33ff 	movlt.w	r3, #4294967295
 800e466:	9305      	str	r3, [sp, #20]
 800e468:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e534 <_svfiprintf_r+0x1fc>
 800e46c:	2203      	movs	r2, #3
 800e46e:	4650      	mov	r0, sl
 800e470:	7821      	ldrb	r1, [r4, #0]
 800e472:	f7ff fab3 	bl	800d9dc <memchr>
 800e476:	b140      	cbz	r0, 800e48a <_svfiprintf_r+0x152>
 800e478:	2340      	movs	r3, #64	; 0x40
 800e47a:	eba0 000a 	sub.w	r0, r0, sl
 800e47e:	fa03 f000 	lsl.w	r0, r3, r0
 800e482:	9b04      	ldr	r3, [sp, #16]
 800e484:	3401      	adds	r4, #1
 800e486:	4303      	orrs	r3, r0
 800e488:	9304      	str	r3, [sp, #16]
 800e48a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e48e:	2206      	movs	r2, #6
 800e490:	4825      	ldr	r0, [pc, #148]	; (800e528 <_svfiprintf_r+0x1f0>)
 800e492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e496:	f7ff faa1 	bl	800d9dc <memchr>
 800e49a:	2800      	cmp	r0, #0
 800e49c:	d038      	beq.n	800e510 <_svfiprintf_r+0x1d8>
 800e49e:	4b23      	ldr	r3, [pc, #140]	; (800e52c <_svfiprintf_r+0x1f4>)
 800e4a0:	bb1b      	cbnz	r3, 800e4ea <_svfiprintf_r+0x1b2>
 800e4a2:	9b03      	ldr	r3, [sp, #12]
 800e4a4:	3307      	adds	r3, #7
 800e4a6:	f023 0307 	bic.w	r3, r3, #7
 800e4aa:	3308      	adds	r3, #8
 800e4ac:	9303      	str	r3, [sp, #12]
 800e4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4b0:	4433      	add	r3, r6
 800e4b2:	9309      	str	r3, [sp, #36]	; 0x24
 800e4b4:	e767      	b.n	800e386 <_svfiprintf_r+0x4e>
 800e4b6:	460c      	mov	r4, r1
 800e4b8:	2001      	movs	r0, #1
 800e4ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4be:	e7a5      	b.n	800e40c <_svfiprintf_r+0xd4>
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	f04f 0c0a 	mov.w	ip, #10
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	3401      	adds	r4, #1
 800e4ca:	9305      	str	r3, [sp, #20]
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4d2:	3a30      	subs	r2, #48	; 0x30
 800e4d4:	2a09      	cmp	r2, #9
 800e4d6:	d903      	bls.n	800e4e0 <_svfiprintf_r+0x1a8>
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d0c5      	beq.n	800e468 <_svfiprintf_r+0x130>
 800e4dc:	9105      	str	r1, [sp, #20]
 800e4de:	e7c3      	b.n	800e468 <_svfiprintf_r+0x130>
 800e4e0:	4604      	mov	r4, r0
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4e8:	e7f0      	b.n	800e4cc <_svfiprintf_r+0x194>
 800e4ea:	ab03      	add	r3, sp, #12
 800e4ec:	9300      	str	r3, [sp, #0]
 800e4ee:	462a      	mov	r2, r5
 800e4f0:	4638      	mov	r0, r7
 800e4f2:	4b0f      	ldr	r3, [pc, #60]	; (800e530 <_svfiprintf_r+0x1f8>)
 800e4f4:	a904      	add	r1, sp, #16
 800e4f6:	f7fd fff9 	bl	800c4ec <_printf_float>
 800e4fa:	1c42      	adds	r2, r0, #1
 800e4fc:	4606      	mov	r6, r0
 800e4fe:	d1d6      	bne.n	800e4ae <_svfiprintf_r+0x176>
 800e500:	89ab      	ldrh	r3, [r5, #12]
 800e502:	065b      	lsls	r3, r3, #25
 800e504:	f53f af2c 	bmi.w	800e360 <_svfiprintf_r+0x28>
 800e508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e50a:	b01d      	add	sp, #116	; 0x74
 800e50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e510:	ab03      	add	r3, sp, #12
 800e512:	9300      	str	r3, [sp, #0]
 800e514:	462a      	mov	r2, r5
 800e516:	4638      	mov	r0, r7
 800e518:	4b05      	ldr	r3, [pc, #20]	; (800e530 <_svfiprintf_r+0x1f8>)
 800e51a:	a904      	add	r1, sp, #16
 800e51c:	f7fe fa82 	bl	800ca24 <_printf_i>
 800e520:	e7eb      	b.n	800e4fa <_svfiprintf_r+0x1c2>
 800e522:	bf00      	nop
 800e524:	0801024c 	.word	0x0801024c
 800e528:	08010256 	.word	0x08010256
 800e52c:	0800c4ed 	.word	0x0800c4ed
 800e530:	0800e281 	.word	0x0800e281
 800e534:	08010252 	.word	0x08010252

0800e538 <_sbrk_r>:
 800e538:	b538      	push	{r3, r4, r5, lr}
 800e53a:	2300      	movs	r3, #0
 800e53c:	4d05      	ldr	r5, [pc, #20]	; (800e554 <_sbrk_r+0x1c>)
 800e53e:	4604      	mov	r4, r0
 800e540:	4608      	mov	r0, r1
 800e542:	602b      	str	r3, [r5, #0]
 800e544:	f7f6 f9c2 	bl	80048cc <_sbrk>
 800e548:	1c43      	adds	r3, r0, #1
 800e54a:	d102      	bne.n	800e552 <_sbrk_r+0x1a>
 800e54c:	682b      	ldr	r3, [r5, #0]
 800e54e:	b103      	cbz	r3, 800e552 <_sbrk_r+0x1a>
 800e550:	6023      	str	r3, [r4, #0]
 800e552:	bd38      	pop	{r3, r4, r5, pc}
 800e554:	20004848 	.word	0x20004848

0800e558 <__assert_func>:
 800e558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e55a:	4614      	mov	r4, r2
 800e55c:	461a      	mov	r2, r3
 800e55e:	4b09      	ldr	r3, [pc, #36]	; (800e584 <__assert_func+0x2c>)
 800e560:	4605      	mov	r5, r0
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	68d8      	ldr	r0, [r3, #12]
 800e566:	b14c      	cbz	r4, 800e57c <__assert_func+0x24>
 800e568:	4b07      	ldr	r3, [pc, #28]	; (800e588 <__assert_func+0x30>)
 800e56a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e56e:	9100      	str	r1, [sp, #0]
 800e570:	462b      	mov	r3, r5
 800e572:	4906      	ldr	r1, [pc, #24]	; (800e58c <__assert_func+0x34>)
 800e574:	f000 f80e 	bl	800e594 <fiprintf>
 800e578:	f000 faa2 	bl	800eac0 <abort>
 800e57c:	4b04      	ldr	r3, [pc, #16]	; (800e590 <__assert_func+0x38>)
 800e57e:	461c      	mov	r4, r3
 800e580:	e7f3      	b.n	800e56a <__assert_func+0x12>
 800e582:	bf00      	nop
 800e584:	20000034 	.word	0x20000034
 800e588:	0801025d 	.word	0x0801025d
 800e58c:	0801026a 	.word	0x0801026a
 800e590:	08010298 	.word	0x08010298

0800e594 <fiprintf>:
 800e594:	b40e      	push	{r1, r2, r3}
 800e596:	b503      	push	{r0, r1, lr}
 800e598:	4601      	mov	r1, r0
 800e59a:	ab03      	add	r3, sp, #12
 800e59c:	4805      	ldr	r0, [pc, #20]	; (800e5b4 <fiprintf+0x20>)
 800e59e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5a2:	6800      	ldr	r0, [r0, #0]
 800e5a4:	9301      	str	r3, [sp, #4]
 800e5a6:	f000 f88d 	bl	800e6c4 <_vfiprintf_r>
 800e5aa:	b002      	add	sp, #8
 800e5ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5b0:	b003      	add	sp, #12
 800e5b2:	4770      	bx	lr
 800e5b4:	20000034 	.word	0x20000034

0800e5b8 <__ascii_mbtowc>:
 800e5b8:	b082      	sub	sp, #8
 800e5ba:	b901      	cbnz	r1, 800e5be <__ascii_mbtowc+0x6>
 800e5bc:	a901      	add	r1, sp, #4
 800e5be:	b142      	cbz	r2, 800e5d2 <__ascii_mbtowc+0x1a>
 800e5c0:	b14b      	cbz	r3, 800e5d6 <__ascii_mbtowc+0x1e>
 800e5c2:	7813      	ldrb	r3, [r2, #0]
 800e5c4:	600b      	str	r3, [r1, #0]
 800e5c6:	7812      	ldrb	r2, [r2, #0]
 800e5c8:	1e10      	subs	r0, r2, #0
 800e5ca:	bf18      	it	ne
 800e5cc:	2001      	movne	r0, #1
 800e5ce:	b002      	add	sp, #8
 800e5d0:	4770      	bx	lr
 800e5d2:	4610      	mov	r0, r2
 800e5d4:	e7fb      	b.n	800e5ce <__ascii_mbtowc+0x16>
 800e5d6:	f06f 0001 	mvn.w	r0, #1
 800e5da:	e7f8      	b.n	800e5ce <__ascii_mbtowc+0x16>

0800e5dc <memmove>:
 800e5dc:	4288      	cmp	r0, r1
 800e5de:	b510      	push	{r4, lr}
 800e5e0:	eb01 0402 	add.w	r4, r1, r2
 800e5e4:	d902      	bls.n	800e5ec <memmove+0x10>
 800e5e6:	4284      	cmp	r4, r0
 800e5e8:	4623      	mov	r3, r4
 800e5ea:	d807      	bhi.n	800e5fc <memmove+0x20>
 800e5ec:	1e43      	subs	r3, r0, #1
 800e5ee:	42a1      	cmp	r1, r4
 800e5f0:	d008      	beq.n	800e604 <memmove+0x28>
 800e5f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e5fa:	e7f8      	b.n	800e5ee <memmove+0x12>
 800e5fc:	4601      	mov	r1, r0
 800e5fe:	4402      	add	r2, r0
 800e600:	428a      	cmp	r2, r1
 800e602:	d100      	bne.n	800e606 <memmove+0x2a>
 800e604:	bd10      	pop	{r4, pc}
 800e606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e60a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e60e:	e7f7      	b.n	800e600 <memmove+0x24>

0800e610 <__malloc_lock>:
 800e610:	4801      	ldr	r0, [pc, #4]	; (800e618 <__malloc_lock+0x8>)
 800e612:	f000 bc15 	b.w	800ee40 <__retarget_lock_acquire_recursive>
 800e616:	bf00      	nop
 800e618:	20004850 	.word	0x20004850

0800e61c <__malloc_unlock>:
 800e61c:	4801      	ldr	r0, [pc, #4]	; (800e624 <__malloc_unlock+0x8>)
 800e61e:	f000 bc10 	b.w	800ee42 <__retarget_lock_release_recursive>
 800e622:	bf00      	nop
 800e624:	20004850 	.word	0x20004850

0800e628 <_realloc_r>:
 800e628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e62a:	4607      	mov	r7, r0
 800e62c:	4614      	mov	r4, r2
 800e62e:	460e      	mov	r6, r1
 800e630:	b921      	cbnz	r1, 800e63c <_realloc_r+0x14>
 800e632:	4611      	mov	r1, r2
 800e634:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e638:	f7ff bdc8 	b.w	800e1cc <_malloc_r>
 800e63c:	b922      	cbnz	r2, 800e648 <_realloc_r+0x20>
 800e63e:	f7ff fd79 	bl	800e134 <_free_r>
 800e642:	4625      	mov	r5, r4
 800e644:	4628      	mov	r0, r5
 800e646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e648:	f000 fc60 	bl	800ef0c <_malloc_usable_size_r>
 800e64c:	42a0      	cmp	r0, r4
 800e64e:	d20f      	bcs.n	800e670 <_realloc_r+0x48>
 800e650:	4621      	mov	r1, r4
 800e652:	4638      	mov	r0, r7
 800e654:	f7ff fdba 	bl	800e1cc <_malloc_r>
 800e658:	4605      	mov	r5, r0
 800e65a:	2800      	cmp	r0, #0
 800e65c:	d0f2      	beq.n	800e644 <_realloc_r+0x1c>
 800e65e:	4631      	mov	r1, r6
 800e660:	4622      	mov	r2, r4
 800e662:	f7ff f9c9 	bl	800d9f8 <memcpy>
 800e666:	4631      	mov	r1, r6
 800e668:	4638      	mov	r0, r7
 800e66a:	f7ff fd63 	bl	800e134 <_free_r>
 800e66e:	e7e9      	b.n	800e644 <_realloc_r+0x1c>
 800e670:	4635      	mov	r5, r6
 800e672:	e7e7      	b.n	800e644 <_realloc_r+0x1c>

0800e674 <__sfputc_r>:
 800e674:	6893      	ldr	r3, [r2, #8]
 800e676:	b410      	push	{r4}
 800e678:	3b01      	subs	r3, #1
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	6093      	str	r3, [r2, #8]
 800e67e:	da07      	bge.n	800e690 <__sfputc_r+0x1c>
 800e680:	6994      	ldr	r4, [r2, #24]
 800e682:	42a3      	cmp	r3, r4
 800e684:	db01      	blt.n	800e68a <__sfputc_r+0x16>
 800e686:	290a      	cmp	r1, #10
 800e688:	d102      	bne.n	800e690 <__sfputc_r+0x1c>
 800e68a:	bc10      	pop	{r4}
 800e68c:	f000 b94a 	b.w	800e924 <__swbuf_r>
 800e690:	6813      	ldr	r3, [r2, #0]
 800e692:	1c58      	adds	r0, r3, #1
 800e694:	6010      	str	r0, [r2, #0]
 800e696:	7019      	strb	r1, [r3, #0]
 800e698:	4608      	mov	r0, r1
 800e69a:	bc10      	pop	{r4}
 800e69c:	4770      	bx	lr

0800e69e <__sfputs_r>:
 800e69e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6a0:	4606      	mov	r6, r0
 800e6a2:	460f      	mov	r7, r1
 800e6a4:	4614      	mov	r4, r2
 800e6a6:	18d5      	adds	r5, r2, r3
 800e6a8:	42ac      	cmp	r4, r5
 800e6aa:	d101      	bne.n	800e6b0 <__sfputs_r+0x12>
 800e6ac:	2000      	movs	r0, #0
 800e6ae:	e007      	b.n	800e6c0 <__sfputs_r+0x22>
 800e6b0:	463a      	mov	r2, r7
 800e6b2:	4630      	mov	r0, r6
 800e6b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6b8:	f7ff ffdc 	bl	800e674 <__sfputc_r>
 800e6bc:	1c43      	adds	r3, r0, #1
 800e6be:	d1f3      	bne.n	800e6a8 <__sfputs_r+0xa>
 800e6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e6c4 <_vfiprintf_r>:
 800e6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6c8:	460d      	mov	r5, r1
 800e6ca:	4614      	mov	r4, r2
 800e6cc:	4698      	mov	r8, r3
 800e6ce:	4606      	mov	r6, r0
 800e6d0:	b09d      	sub	sp, #116	; 0x74
 800e6d2:	b118      	cbz	r0, 800e6dc <_vfiprintf_r+0x18>
 800e6d4:	6983      	ldr	r3, [r0, #24]
 800e6d6:	b90b      	cbnz	r3, 800e6dc <_vfiprintf_r+0x18>
 800e6d8:	f000 fb14 	bl	800ed04 <__sinit>
 800e6dc:	4b89      	ldr	r3, [pc, #548]	; (800e904 <_vfiprintf_r+0x240>)
 800e6de:	429d      	cmp	r5, r3
 800e6e0:	d11b      	bne.n	800e71a <_vfiprintf_r+0x56>
 800e6e2:	6875      	ldr	r5, [r6, #4]
 800e6e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6e6:	07d9      	lsls	r1, r3, #31
 800e6e8:	d405      	bmi.n	800e6f6 <_vfiprintf_r+0x32>
 800e6ea:	89ab      	ldrh	r3, [r5, #12]
 800e6ec:	059a      	lsls	r2, r3, #22
 800e6ee:	d402      	bmi.n	800e6f6 <_vfiprintf_r+0x32>
 800e6f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6f2:	f000 fba5 	bl	800ee40 <__retarget_lock_acquire_recursive>
 800e6f6:	89ab      	ldrh	r3, [r5, #12]
 800e6f8:	071b      	lsls	r3, r3, #28
 800e6fa:	d501      	bpl.n	800e700 <_vfiprintf_r+0x3c>
 800e6fc:	692b      	ldr	r3, [r5, #16]
 800e6fe:	b9eb      	cbnz	r3, 800e73c <_vfiprintf_r+0x78>
 800e700:	4629      	mov	r1, r5
 800e702:	4630      	mov	r0, r6
 800e704:	f000 f96e 	bl	800e9e4 <__swsetup_r>
 800e708:	b1c0      	cbz	r0, 800e73c <_vfiprintf_r+0x78>
 800e70a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e70c:	07dc      	lsls	r4, r3, #31
 800e70e:	d50e      	bpl.n	800e72e <_vfiprintf_r+0x6a>
 800e710:	f04f 30ff 	mov.w	r0, #4294967295
 800e714:	b01d      	add	sp, #116	; 0x74
 800e716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e71a:	4b7b      	ldr	r3, [pc, #492]	; (800e908 <_vfiprintf_r+0x244>)
 800e71c:	429d      	cmp	r5, r3
 800e71e:	d101      	bne.n	800e724 <_vfiprintf_r+0x60>
 800e720:	68b5      	ldr	r5, [r6, #8]
 800e722:	e7df      	b.n	800e6e4 <_vfiprintf_r+0x20>
 800e724:	4b79      	ldr	r3, [pc, #484]	; (800e90c <_vfiprintf_r+0x248>)
 800e726:	429d      	cmp	r5, r3
 800e728:	bf08      	it	eq
 800e72a:	68f5      	ldreq	r5, [r6, #12]
 800e72c:	e7da      	b.n	800e6e4 <_vfiprintf_r+0x20>
 800e72e:	89ab      	ldrh	r3, [r5, #12]
 800e730:	0598      	lsls	r0, r3, #22
 800e732:	d4ed      	bmi.n	800e710 <_vfiprintf_r+0x4c>
 800e734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e736:	f000 fb84 	bl	800ee42 <__retarget_lock_release_recursive>
 800e73a:	e7e9      	b.n	800e710 <_vfiprintf_r+0x4c>
 800e73c:	2300      	movs	r3, #0
 800e73e:	9309      	str	r3, [sp, #36]	; 0x24
 800e740:	2320      	movs	r3, #32
 800e742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e746:	2330      	movs	r3, #48	; 0x30
 800e748:	f04f 0901 	mov.w	r9, #1
 800e74c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e750:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e910 <_vfiprintf_r+0x24c>
 800e754:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e758:	4623      	mov	r3, r4
 800e75a:	469a      	mov	sl, r3
 800e75c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e760:	b10a      	cbz	r2, 800e766 <_vfiprintf_r+0xa2>
 800e762:	2a25      	cmp	r2, #37	; 0x25
 800e764:	d1f9      	bne.n	800e75a <_vfiprintf_r+0x96>
 800e766:	ebba 0b04 	subs.w	fp, sl, r4
 800e76a:	d00b      	beq.n	800e784 <_vfiprintf_r+0xc0>
 800e76c:	465b      	mov	r3, fp
 800e76e:	4622      	mov	r2, r4
 800e770:	4629      	mov	r1, r5
 800e772:	4630      	mov	r0, r6
 800e774:	f7ff ff93 	bl	800e69e <__sfputs_r>
 800e778:	3001      	adds	r0, #1
 800e77a:	f000 80aa 	beq.w	800e8d2 <_vfiprintf_r+0x20e>
 800e77e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e780:	445a      	add	r2, fp
 800e782:	9209      	str	r2, [sp, #36]	; 0x24
 800e784:	f89a 3000 	ldrb.w	r3, [sl]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	f000 80a2 	beq.w	800e8d2 <_vfiprintf_r+0x20e>
 800e78e:	2300      	movs	r3, #0
 800e790:	f04f 32ff 	mov.w	r2, #4294967295
 800e794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e798:	f10a 0a01 	add.w	sl, sl, #1
 800e79c:	9304      	str	r3, [sp, #16]
 800e79e:	9307      	str	r3, [sp, #28]
 800e7a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7a4:	931a      	str	r3, [sp, #104]	; 0x68
 800e7a6:	4654      	mov	r4, sl
 800e7a8:	2205      	movs	r2, #5
 800e7aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ae:	4858      	ldr	r0, [pc, #352]	; (800e910 <_vfiprintf_r+0x24c>)
 800e7b0:	f7ff f914 	bl	800d9dc <memchr>
 800e7b4:	9a04      	ldr	r2, [sp, #16]
 800e7b6:	b9d8      	cbnz	r0, 800e7f0 <_vfiprintf_r+0x12c>
 800e7b8:	06d1      	lsls	r1, r2, #27
 800e7ba:	bf44      	itt	mi
 800e7bc:	2320      	movmi	r3, #32
 800e7be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7c2:	0713      	lsls	r3, r2, #28
 800e7c4:	bf44      	itt	mi
 800e7c6:	232b      	movmi	r3, #43	; 0x2b
 800e7c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7cc:	f89a 3000 	ldrb.w	r3, [sl]
 800e7d0:	2b2a      	cmp	r3, #42	; 0x2a
 800e7d2:	d015      	beq.n	800e800 <_vfiprintf_r+0x13c>
 800e7d4:	4654      	mov	r4, sl
 800e7d6:	2000      	movs	r0, #0
 800e7d8:	f04f 0c0a 	mov.w	ip, #10
 800e7dc:	9a07      	ldr	r2, [sp, #28]
 800e7de:	4621      	mov	r1, r4
 800e7e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7e4:	3b30      	subs	r3, #48	; 0x30
 800e7e6:	2b09      	cmp	r3, #9
 800e7e8:	d94e      	bls.n	800e888 <_vfiprintf_r+0x1c4>
 800e7ea:	b1b0      	cbz	r0, 800e81a <_vfiprintf_r+0x156>
 800e7ec:	9207      	str	r2, [sp, #28]
 800e7ee:	e014      	b.n	800e81a <_vfiprintf_r+0x156>
 800e7f0:	eba0 0308 	sub.w	r3, r0, r8
 800e7f4:	fa09 f303 	lsl.w	r3, r9, r3
 800e7f8:	4313      	orrs	r3, r2
 800e7fa:	46a2      	mov	sl, r4
 800e7fc:	9304      	str	r3, [sp, #16]
 800e7fe:	e7d2      	b.n	800e7a6 <_vfiprintf_r+0xe2>
 800e800:	9b03      	ldr	r3, [sp, #12]
 800e802:	1d19      	adds	r1, r3, #4
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	9103      	str	r1, [sp, #12]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	bfbb      	ittet	lt
 800e80c:	425b      	neglt	r3, r3
 800e80e:	f042 0202 	orrlt.w	r2, r2, #2
 800e812:	9307      	strge	r3, [sp, #28]
 800e814:	9307      	strlt	r3, [sp, #28]
 800e816:	bfb8      	it	lt
 800e818:	9204      	strlt	r2, [sp, #16]
 800e81a:	7823      	ldrb	r3, [r4, #0]
 800e81c:	2b2e      	cmp	r3, #46	; 0x2e
 800e81e:	d10c      	bne.n	800e83a <_vfiprintf_r+0x176>
 800e820:	7863      	ldrb	r3, [r4, #1]
 800e822:	2b2a      	cmp	r3, #42	; 0x2a
 800e824:	d135      	bne.n	800e892 <_vfiprintf_r+0x1ce>
 800e826:	9b03      	ldr	r3, [sp, #12]
 800e828:	3402      	adds	r4, #2
 800e82a:	1d1a      	adds	r2, r3, #4
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	9203      	str	r2, [sp, #12]
 800e830:	2b00      	cmp	r3, #0
 800e832:	bfb8      	it	lt
 800e834:	f04f 33ff 	movlt.w	r3, #4294967295
 800e838:	9305      	str	r3, [sp, #20]
 800e83a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e920 <_vfiprintf_r+0x25c>
 800e83e:	2203      	movs	r2, #3
 800e840:	4650      	mov	r0, sl
 800e842:	7821      	ldrb	r1, [r4, #0]
 800e844:	f7ff f8ca 	bl	800d9dc <memchr>
 800e848:	b140      	cbz	r0, 800e85c <_vfiprintf_r+0x198>
 800e84a:	2340      	movs	r3, #64	; 0x40
 800e84c:	eba0 000a 	sub.w	r0, r0, sl
 800e850:	fa03 f000 	lsl.w	r0, r3, r0
 800e854:	9b04      	ldr	r3, [sp, #16]
 800e856:	3401      	adds	r4, #1
 800e858:	4303      	orrs	r3, r0
 800e85a:	9304      	str	r3, [sp, #16]
 800e85c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e860:	2206      	movs	r2, #6
 800e862:	482c      	ldr	r0, [pc, #176]	; (800e914 <_vfiprintf_r+0x250>)
 800e864:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e868:	f7ff f8b8 	bl	800d9dc <memchr>
 800e86c:	2800      	cmp	r0, #0
 800e86e:	d03f      	beq.n	800e8f0 <_vfiprintf_r+0x22c>
 800e870:	4b29      	ldr	r3, [pc, #164]	; (800e918 <_vfiprintf_r+0x254>)
 800e872:	bb1b      	cbnz	r3, 800e8bc <_vfiprintf_r+0x1f8>
 800e874:	9b03      	ldr	r3, [sp, #12]
 800e876:	3307      	adds	r3, #7
 800e878:	f023 0307 	bic.w	r3, r3, #7
 800e87c:	3308      	adds	r3, #8
 800e87e:	9303      	str	r3, [sp, #12]
 800e880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e882:	443b      	add	r3, r7
 800e884:	9309      	str	r3, [sp, #36]	; 0x24
 800e886:	e767      	b.n	800e758 <_vfiprintf_r+0x94>
 800e888:	460c      	mov	r4, r1
 800e88a:	2001      	movs	r0, #1
 800e88c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e890:	e7a5      	b.n	800e7de <_vfiprintf_r+0x11a>
 800e892:	2300      	movs	r3, #0
 800e894:	f04f 0c0a 	mov.w	ip, #10
 800e898:	4619      	mov	r1, r3
 800e89a:	3401      	adds	r4, #1
 800e89c:	9305      	str	r3, [sp, #20]
 800e89e:	4620      	mov	r0, r4
 800e8a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8a4:	3a30      	subs	r2, #48	; 0x30
 800e8a6:	2a09      	cmp	r2, #9
 800e8a8:	d903      	bls.n	800e8b2 <_vfiprintf_r+0x1ee>
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d0c5      	beq.n	800e83a <_vfiprintf_r+0x176>
 800e8ae:	9105      	str	r1, [sp, #20]
 800e8b0:	e7c3      	b.n	800e83a <_vfiprintf_r+0x176>
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8ba:	e7f0      	b.n	800e89e <_vfiprintf_r+0x1da>
 800e8bc:	ab03      	add	r3, sp, #12
 800e8be:	9300      	str	r3, [sp, #0]
 800e8c0:	462a      	mov	r2, r5
 800e8c2:	4630      	mov	r0, r6
 800e8c4:	4b15      	ldr	r3, [pc, #84]	; (800e91c <_vfiprintf_r+0x258>)
 800e8c6:	a904      	add	r1, sp, #16
 800e8c8:	f7fd fe10 	bl	800c4ec <_printf_float>
 800e8cc:	4607      	mov	r7, r0
 800e8ce:	1c78      	adds	r0, r7, #1
 800e8d0:	d1d6      	bne.n	800e880 <_vfiprintf_r+0x1bc>
 800e8d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8d4:	07d9      	lsls	r1, r3, #31
 800e8d6:	d405      	bmi.n	800e8e4 <_vfiprintf_r+0x220>
 800e8d8:	89ab      	ldrh	r3, [r5, #12]
 800e8da:	059a      	lsls	r2, r3, #22
 800e8dc:	d402      	bmi.n	800e8e4 <_vfiprintf_r+0x220>
 800e8de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8e0:	f000 faaf 	bl	800ee42 <__retarget_lock_release_recursive>
 800e8e4:	89ab      	ldrh	r3, [r5, #12]
 800e8e6:	065b      	lsls	r3, r3, #25
 800e8e8:	f53f af12 	bmi.w	800e710 <_vfiprintf_r+0x4c>
 800e8ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8ee:	e711      	b.n	800e714 <_vfiprintf_r+0x50>
 800e8f0:	ab03      	add	r3, sp, #12
 800e8f2:	9300      	str	r3, [sp, #0]
 800e8f4:	462a      	mov	r2, r5
 800e8f6:	4630      	mov	r0, r6
 800e8f8:	4b08      	ldr	r3, [pc, #32]	; (800e91c <_vfiprintf_r+0x258>)
 800e8fa:	a904      	add	r1, sp, #16
 800e8fc:	f7fe f892 	bl	800ca24 <_printf_i>
 800e900:	e7e4      	b.n	800e8cc <_vfiprintf_r+0x208>
 800e902:	bf00      	nop
 800e904:	080103c4 	.word	0x080103c4
 800e908:	080103e4 	.word	0x080103e4
 800e90c:	080103a4 	.word	0x080103a4
 800e910:	0801024c 	.word	0x0801024c
 800e914:	08010256 	.word	0x08010256
 800e918:	0800c4ed 	.word	0x0800c4ed
 800e91c:	0800e69f 	.word	0x0800e69f
 800e920:	08010252 	.word	0x08010252

0800e924 <__swbuf_r>:
 800e924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e926:	460e      	mov	r6, r1
 800e928:	4614      	mov	r4, r2
 800e92a:	4605      	mov	r5, r0
 800e92c:	b118      	cbz	r0, 800e936 <__swbuf_r+0x12>
 800e92e:	6983      	ldr	r3, [r0, #24]
 800e930:	b90b      	cbnz	r3, 800e936 <__swbuf_r+0x12>
 800e932:	f000 f9e7 	bl	800ed04 <__sinit>
 800e936:	4b21      	ldr	r3, [pc, #132]	; (800e9bc <__swbuf_r+0x98>)
 800e938:	429c      	cmp	r4, r3
 800e93a:	d12b      	bne.n	800e994 <__swbuf_r+0x70>
 800e93c:	686c      	ldr	r4, [r5, #4]
 800e93e:	69a3      	ldr	r3, [r4, #24]
 800e940:	60a3      	str	r3, [r4, #8]
 800e942:	89a3      	ldrh	r3, [r4, #12]
 800e944:	071a      	lsls	r2, r3, #28
 800e946:	d52f      	bpl.n	800e9a8 <__swbuf_r+0x84>
 800e948:	6923      	ldr	r3, [r4, #16]
 800e94a:	b36b      	cbz	r3, 800e9a8 <__swbuf_r+0x84>
 800e94c:	6923      	ldr	r3, [r4, #16]
 800e94e:	6820      	ldr	r0, [r4, #0]
 800e950:	b2f6      	uxtb	r6, r6
 800e952:	1ac0      	subs	r0, r0, r3
 800e954:	6963      	ldr	r3, [r4, #20]
 800e956:	4637      	mov	r7, r6
 800e958:	4283      	cmp	r3, r0
 800e95a:	dc04      	bgt.n	800e966 <__swbuf_r+0x42>
 800e95c:	4621      	mov	r1, r4
 800e95e:	4628      	mov	r0, r5
 800e960:	f000 f93c 	bl	800ebdc <_fflush_r>
 800e964:	bb30      	cbnz	r0, 800e9b4 <__swbuf_r+0x90>
 800e966:	68a3      	ldr	r3, [r4, #8]
 800e968:	3001      	adds	r0, #1
 800e96a:	3b01      	subs	r3, #1
 800e96c:	60a3      	str	r3, [r4, #8]
 800e96e:	6823      	ldr	r3, [r4, #0]
 800e970:	1c5a      	adds	r2, r3, #1
 800e972:	6022      	str	r2, [r4, #0]
 800e974:	701e      	strb	r6, [r3, #0]
 800e976:	6963      	ldr	r3, [r4, #20]
 800e978:	4283      	cmp	r3, r0
 800e97a:	d004      	beq.n	800e986 <__swbuf_r+0x62>
 800e97c:	89a3      	ldrh	r3, [r4, #12]
 800e97e:	07db      	lsls	r3, r3, #31
 800e980:	d506      	bpl.n	800e990 <__swbuf_r+0x6c>
 800e982:	2e0a      	cmp	r6, #10
 800e984:	d104      	bne.n	800e990 <__swbuf_r+0x6c>
 800e986:	4621      	mov	r1, r4
 800e988:	4628      	mov	r0, r5
 800e98a:	f000 f927 	bl	800ebdc <_fflush_r>
 800e98e:	b988      	cbnz	r0, 800e9b4 <__swbuf_r+0x90>
 800e990:	4638      	mov	r0, r7
 800e992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e994:	4b0a      	ldr	r3, [pc, #40]	; (800e9c0 <__swbuf_r+0x9c>)
 800e996:	429c      	cmp	r4, r3
 800e998:	d101      	bne.n	800e99e <__swbuf_r+0x7a>
 800e99a:	68ac      	ldr	r4, [r5, #8]
 800e99c:	e7cf      	b.n	800e93e <__swbuf_r+0x1a>
 800e99e:	4b09      	ldr	r3, [pc, #36]	; (800e9c4 <__swbuf_r+0xa0>)
 800e9a0:	429c      	cmp	r4, r3
 800e9a2:	bf08      	it	eq
 800e9a4:	68ec      	ldreq	r4, [r5, #12]
 800e9a6:	e7ca      	b.n	800e93e <__swbuf_r+0x1a>
 800e9a8:	4621      	mov	r1, r4
 800e9aa:	4628      	mov	r0, r5
 800e9ac:	f000 f81a 	bl	800e9e4 <__swsetup_r>
 800e9b0:	2800      	cmp	r0, #0
 800e9b2:	d0cb      	beq.n	800e94c <__swbuf_r+0x28>
 800e9b4:	f04f 37ff 	mov.w	r7, #4294967295
 800e9b8:	e7ea      	b.n	800e990 <__swbuf_r+0x6c>
 800e9ba:	bf00      	nop
 800e9bc:	080103c4 	.word	0x080103c4
 800e9c0:	080103e4 	.word	0x080103e4
 800e9c4:	080103a4 	.word	0x080103a4

0800e9c8 <__ascii_wctomb>:
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	4608      	mov	r0, r1
 800e9cc:	b141      	cbz	r1, 800e9e0 <__ascii_wctomb+0x18>
 800e9ce:	2aff      	cmp	r2, #255	; 0xff
 800e9d0:	d904      	bls.n	800e9dc <__ascii_wctomb+0x14>
 800e9d2:	228a      	movs	r2, #138	; 0x8a
 800e9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9d8:	601a      	str	r2, [r3, #0]
 800e9da:	4770      	bx	lr
 800e9dc:	2001      	movs	r0, #1
 800e9de:	700a      	strb	r2, [r1, #0]
 800e9e0:	4770      	bx	lr
	...

0800e9e4 <__swsetup_r>:
 800e9e4:	4b32      	ldr	r3, [pc, #200]	; (800eab0 <__swsetup_r+0xcc>)
 800e9e6:	b570      	push	{r4, r5, r6, lr}
 800e9e8:	681d      	ldr	r5, [r3, #0]
 800e9ea:	4606      	mov	r6, r0
 800e9ec:	460c      	mov	r4, r1
 800e9ee:	b125      	cbz	r5, 800e9fa <__swsetup_r+0x16>
 800e9f0:	69ab      	ldr	r3, [r5, #24]
 800e9f2:	b913      	cbnz	r3, 800e9fa <__swsetup_r+0x16>
 800e9f4:	4628      	mov	r0, r5
 800e9f6:	f000 f985 	bl	800ed04 <__sinit>
 800e9fa:	4b2e      	ldr	r3, [pc, #184]	; (800eab4 <__swsetup_r+0xd0>)
 800e9fc:	429c      	cmp	r4, r3
 800e9fe:	d10f      	bne.n	800ea20 <__swsetup_r+0x3c>
 800ea00:	686c      	ldr	r4, [r5, #4]
 800ea02:	89a3      	ldrh	r3, [r4, #12]
 800ea04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea08:	0719      	lsls	r1, r3, #28
 800ea0a:	d42c      	bmi.n	800ea66 <__swsetup_r+0x82>
 800ea0c:	06dd      	lsls	r5, r3, #27
 800ea0e:	d411      	bmi.n	800ea34 <__swsetup_r+0x50>
 800ea10:	2309      	movs	r3, #9
 800ea12:	6033      	str	r3, [r6, #0]
 800ea14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ea18:	f04f 30ff 	mov.w	r0, #4294967295
 800ea1c:	81a3      	strh	r3, [r4, #12]
 800ea1e:	e03e      	b.n	800ea9e <__swsetup_r+0xba>
 800ea20:	4b25      	ldr	r3, [pc, #148]	; (800eab8 <__swsetup_r+0xd4>)
 800ea22:	429c      	cmp	r4, r3
 800ea24:	d101      	bne.n	800ea2a <__swsetup_r+0x46>
 800ea26:	68ac      	ldr	r4, [r5, #8]
 800ea28:	e7eb      	b.n	800ea02 <__swsetup_r+0x1e>
 800ea2a:	4b24      	ldr	r3, [pc, #144]	; (800eabc <__swsetup_r+0xd8>)
 800ea2c:	429c      	cmp	r4, r3
 800ea2e:	bf08      	it	eq
 800ea30:	68ec      	ldreq	r4, [r5, #12]
 800ea32:	e7e6      	b.n	800ea02 <__swsetup_r+0x1e>
 800ea34:	0758      	lsls	r0, r3, #29
 800ea36:	d512      	bpl.n	800ea5e <__swsetup_r+0x7a>
 800ea38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea3a:	b141      	cbz	r1, 800ea4e <__swsetup_r+0x6a>
 800ea3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea40:	4299      	cmp	r1, r3
 800ea42:	d002      	beq.n	800ea4a <__swsetup_r+0x66>
 800ea44:	4630      	mov	r0, r6
 800ea46:	f7ff fb75 	bl	800e134 <_free_r>
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	6363      	str	r3, [r4, #52]	; 0x34
 800ea4e:	89a3      	ldrh	r3, [r4, #12]
 800ea50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ea54:	81a3      	strh	r3, [r4, #12]
 800ea56:	2300      	movs	r3, #0
 800ea58:	6063      	str	r3, [r4, #4]
 800ea5a:	6923      	ldr	r3, [r4, #16]
 800ea5c:	6023      	str	r3, [r4, #0]
 800ea5e:	89a3      	ldrh	r3, [r4, #12]
 800ea60:	f043 0308 	orr.w	r3, r3, #8
 800ea64:	81a3      	strh	r3, [r4, #12]
 800ea66:	6923      	ldr	r3, [r4, #16]
 800ea68:	b94b      	cbnz	r3, 800ea7e <__swsetup_r+0x9a>
 800ea6a:	89a3      	ldrh	r3, [r4, #12]
 800ea6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea74:	d003      	beq.n	800ea7e <__swsetup_r+0x9a>
 800ea76:	4621      	mov	r1, r4
 800ea78:	4630      	mov	r0, r6
 800ea7a:	f000 fa07 	bl	800ee8c <__smakebuf_r>
 800ea7e:	89a0      	ldrh	r0, [r4, #12]
 800ea80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea84:	f010 0301 	ands.w	r3, r0, #1
 800ea88:	d00a      	beq.n	800eaa0 <__swsetup_r+0xbc>
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	60a3      	str	r3, [r4, #8]
 800ea8e:	6963      	ldr	r3, [r4, #20]
 800ea90:	425b      	negs	r3, r3
 800ea92:	61a3      	str	r3, [r4, #24]
 800ea94:	6923      	ldr	r3, [r4, #16]
 800ea96:	b943      	cbnz	r3, 800eaaa <__swsetup_r+0xc6>
 800ea98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ea9c:	d1ba      	bne.n	800ea14 <__swsetup_r+0x30>
 800ea9e:	bd70      	pop	{r4, r5, r6, pc}
 800eaa0:	0781      	lsls	r1, r0, #30
 800eaa2:	bf58      	it	pl
 800eaa4:	6963      	ldrpl	r3, [r4, #20]
 800eaa6:	60a3      	str	r3, [r4, #8]
 800eaa8:	e7f4      	b.n	800ea94 <__swsetup_r+0xb0>
 800eaaa:	2000      	movs	r0, #0
 800eaac:	e7f7      	b.n	800ea9e <__swsetup_r+0xba>
 800eaae:	bf00      	nop
 800eab0:	20000034 	.word	0x20000034
 800eab4:	080103c4 	.word	0x080103c4
 800eab8:	080103e4 	.word	0x080103e4
 800eabc:	080103a4 	.word	0x080103a4

0800eac0 <abort>:
 800eac0:	2006      	movs	r0, #6
 800eac2:	b508      	push	{r3, lr}
 800eac4:	f000 fa52 	bl	800ef6c <raise>
 800eac8:	2001      	movs	r0, #1
 800eaca:	f7f5 fe8c 	bl	80047e6 <_exit>
	...

0800ead0 <__sflush_r>:
 800ead0:	898a      	ldrh	r2, [r1, #12]
 800ead2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ead6:	4605      	mov	r5, r0
 800ead8:	0710      	lsls	r0, r2, #28
 800eada:	460c      	mov	r4, r1
 800eadc:	d458      	bmi.n	800eb90 <__sflush_r+0xc0>
 800eade:	684b      	ldr	r3, [r1, #4]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	dc05      	bgt.n	800eaf0 <__sflush_r+0x20>
 800eae4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	dc02      	bgt.n	800eaf0 <__sflush_r+0x20>
 800eaea:	2000      	movs	r0, #0
 800eaec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eaf2:	2e00      	cmp	r6, #0
 800eaf4:	d0f9      	beq.n	800eaea <__sflush_r+0x1a>
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eafc:	682f      	ldr	r7, [r5, #0]
 800eafe:	602b      	str	r3, [r5, #0]
 800eb00:	d032      	beq.n	800eb68 <__sflush_r+0x98>
 800eb02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb04:	89a3      	ldrh	r3, [r4, #12]
 800eb06:	075a      	lsls	r2, r3, #29
 800eb08:	d505      	bpl.n	800eb16 <__sflush_r+0x46>
 800eb0a:	6863      	ldr	r3, [r4, #4]
 800eb0c:	1ac0      	subs	r0, r0, r3
 800eb0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb10:	b10b      	cbz	r3, 800eb16 <__sflush_r+0x46>
 800eb12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb14:	1ac0      	subs	r0, r0, r3
 800eb16:	2300      	movs	r3, #0
 800eb18:	4602      	mov	r2, r0
 800eb1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb1c:	4628      	mov	r0, r5
 800eb1e:	6a21      	ldr	r1, [r4, #32]
 800eb20:	47b0      	blx	r6
 800eb22:	1c43      	adds	r3, r0, #1
 800eb24:	89a3      	ldrh	r3, [r4, #12]
 800eb26:	d106      	bne.n	800eb36 <__sflush_r+0x66>
 800eb28:	6829      	ldr	r1, [r5, #0]
 800eb2a:	291d      	cmp	r1, #29
 800eb2c:	d82c      	bhi.n	800eb88 <__sflush_r+0xb8>
 800eb2e:	4a2a      	ldr	r2, [pc, #168]	; (800ebd8 <__sflush_r+0x108>)
 800eb30:	40ca      	lsrs	r2, r1
 800eb32:	07d6      	lsls	r6, r2, #31
 800eb34:	d528      	bpl.n	800eb88 <__sflush_r+0xb8>
 800eb36:	2200      	movs	r2, #0
 800eb38:	6062      	str	r2, [r4, #4]
 800eb3a:	6922      	ldr	r2, [r4, #16]
 800eb3c:	04d9      	lsls	r1, r3, #19
 800eb3e:	6022      	str	r2, [r4, #0]
 800eb40:	d504      	bpl.n	800eb4c <__sflush_r+0x7c>
 800eb42:	1c42      	adds	r2, r0, #1
 800eb44:	d101      	bne.n	800eb4a <__sflush_r+0x7a>
 800eb46:	682b      	ldr	r3, [r5, #0]
 800eb48:	b903      	cbnz	r3, 800eb4c <__sflush_r+0x7c>
 800eb4a:	6560      	str	r0, [r4, #84]	; 0x54
 800eb4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb4e:	602f      	str	r7, [r5, #0]
 800eb50:	2900      	cmp	r1, #0
 800eb52:	d0ca      	beq.n	800eaea <__sflush_r+0x1a>
 800eb54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb58:	4299      	cmp	r1, r3
 800eb5a:	d002      	beq.n	800eb62 <__sflush_r+0x92>
 800eb5c:	4628      	mov	r0, r5
 800eb5e:	f7ff fae9 	bl	800e134 <_free_r>
 800eb62:	2000      	movs	r0, #0
 800eb64:	6360      	str	r0, [r4, #52]	; 0x34
 800eb66:	e7c1      	b.n	800eaec <__sflush_r+0x1c>
 800eb68:	6a21      	ldr	r1, [r4, #32]
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	47b0      	blx	r6
 800eb70:	1c41      	adds	r1, r0, #1
 800eb72:	d1c7      	bne.n	800eb04 <__sflush_r+0x34>
 800eb74:	682b      	ldr	r3, [r5, #0]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d0c4      	beq.n	800eb04 <__sflush_r+0x34>
 800eb7a:	2b1d      	cmp	r3, #29
 800eb7c:	d001      	beq.n	800eb82 <__sflush_r+0xb2>
 800eb7e:	2b16      	cmp	r3, #22
 800eb80:	d101      	bne.n	800eb86 <__sflush_r+0xb6>
 800eb82:	602f      	str	r7, [r5, #0]
 800eb84:	e7b1      	b.n	800eaea <__sflush_r+0x1a>
 800eb86:	89a3      	ldrh	r3, [r4, #12]
 800eb88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb8c:	81a3      	strh	r3, [r4, #12]
 800eb8e:	e7ad      	b.n	800eaec <__sflush_r+0x1c>
 800eb90:	690f      	ldr	r7, [r1, #16]
 800eb92:	2f00      	cmp	r7, #0
 800eb94:	d0a9      	beq.n	800eaea <__sflush_r+0x1a>
 800eb96:	0793      	lsls	r3, r2, #30
 800eb98:	bf18      	it	ne
 800eb9a:	2300      	movne	r3, #0
 800eb9c:	680e      	ldr	r6, [r1, #0]
 800eb9e:	bf08      	it	eq
 800eba0:	694b      	ldreq	r3, [r1, #20]
 800eba2:	eba6 0807 	sub.w	r8, r6, r7
 800eba6:	600f      	str	r7, [r1, #0]
 800eba8:	608b      	str	r3, [r1, #8]
 800ebaa:	f1b8 0f00 	cmp.w	r8, #0
 800ebae:	dd9c      	ble.n	800eaea <__sflush_r+0x1a>
 800ebb0:	4643      	mov	r3, r8
 800ebb2:	463a      	mov	r2, r7
 800ebb4:	4628      	mov	r0, r5
 800ebb6:	6a21      	ldr	r1, [r4, #32]
 800ebb8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ebba:	47b0      	blx	r6
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	dc06      	bgt.n	800ebce <__sflush_r+0xfe>
 800ebc0:	89a3      	ldrh	r3, [r4, #12]
 800ebc2:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebca:	81a3      	strh	r3, [r4, #12]
 800ebcc:	e78e      	b.n	800eaec <__sflush_r+0x1c>
 800ebce:	4407      	add	r7, r0
 800ebd0:	eba8 0800 	sub.w	r8, r8, r0
 800ebd4:	e7e9      	b.n	800ebaa <__sflush_r+0xda>
 800ebd6:	bf00      	nop
 800ebd8:	20400001 	.word	0x20400001

0800ebdc <_fflush_r>:
 800ebdc:	b538      	push	{r3, r4, r5, lr}
 800ebde:	690b      	ldr	r3, [r1, #16]
 800ebe0:	4605      	mov	r5, r0
 800ebe2:	460c      	mov	r4, r1
 800ebe4:	b913      	cbnz	r3, 800ebec <_fflush_r+0x10>
 800ebe6:	2500      	movs	r5, #0
 800ebe8:	4628      	mov	r0, r5
 800ebea:	bd38      	pop	{r3, r4, r5, pc}
 800ebec:	b118      	cbz	r0, 800ebf6 <_fflush_r+0x1a>
 800ebee:	6983      	ldr	r3, [r0, #24]
 800ebf0:	b90b      	cbnz	r3, 800ebf6 <_fflush_r+0x1a>
 800ebf2:	f000 f887 	bl	800ed04 <__sinit>
 800ebf6:	4b14      	ldr	r3, [pc, #80]	; (800ec48 <_fflush_r+0x6c>)
 800ebf8:	429c      	cmp	r4, r3
 800ebfa:	d11b      	bne.n	800ec34 <_fflush_r+0x58>
 800ebfc:	686c      	ldr	r4, [r5, #4]
 800ebfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d0ef      	beq.n	800ebe6 <_fflush_r+0xa>
 800ec06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec08:	07d0      	lsls	r0, r2, #31
 800ec0a:	d404      	bmi.n	800ec16 <_fflush_r+0x3a>
 800ec0c:	0599      	lsls	r1, r3, #22
 800ec0e:	d402      	bmi.n	800ec16 <_fflush_r+0x3a>
 800ec10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec12:	f000 f915 	bl	800ee40 <__retarget_lock_acquire_recursive>
 800ec16:	4628      	mov	r0, r5
 800ec18:	4621      	mov	r1, r4
 800ec1a:	f7ff ff59 	bl	800ead0 <__sflush_r>
 800ec1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec20:	4605      	mov	r5, r0
 800ec22:	07da      	lsls	r2, r3, #31
 800ec24:	d4e0      	bmi.n	800ebe8 <_fflush_r+0xc>
 800ec26:	89a3      	ldrh	r3, [r4, #12]
 800ec28:	059b      	lsls	r3, r3, #22
 800ec2a:	d4dd      	bmi.n	800ebe8 <_fflush_r+0xc>
 800ec2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec2e:	f000 f908 	bl	800ee42 <__retarget_lock_release_recursive>
 800ec32:	e7d9      	b.n	800ebe8 <_fflush_r+0xc>
 800ec34:	4b05      	ldr	r3, [pc, #20]	; (800ec4c <_fflush_r+0x70>)
 800ec36:	429c      	cmp	r4, r3
 800ec38:	d101      	bne.n	800ec3e <_fflush_r+0x62>
 800ec3a:	68ac      	ldr	r4, [r5, #8]
 800ec3c:	e7df      	b.n	800ebfe <_fflush_r+0x22>
 800ec3e:	4b04      	ldr	r3, [pc, #16]	; (800ec50 <_fflush_r+0x74>)
 800ec40:	429c      	cmp	r4, r3
 800ec42:	bf08      	it	eq
 800ec44:	68ec      	ldreq	r4, [r5, #12]
 800ec46:	e7da      	b.n	800ebfe <_fflush_r+0x22>
 800ec48:	080103c4 	.word	0x080103c4
 800ec4c:	080103e4 	.word	0x080103e4
 800ec50:	080103a4 	.word	0x080103a4

0800ec54 <std>:
 800ec54:	2300      	movs	r3, #0
 800ec56:	b510      	push	{r4, lr}
 800ec58:	4604      	mov	r4, r0
 800ec5a:	e9c0 3300 	strd	r3, r3, [r0]
 800ec5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec62:	6083      	str	r3, [r0, #8]
 800ec64:	8181      	strh	r1, [r0, #12]
 800ec66:	6643      	str	r3, [r0, #100]	; 0x64
 800ec68:	81c2      	strh	r2, [r0, #14]
 800ec6a:	6183      	str	r3, [r0, #24]
 800ec6c:	4619      	mov	r1, r3
 800ec6e:	2208      	movs	r2, #8
 800ec70:	305c      	adds	r0, #92	; 0x5c
 800ec72:	f7fd fb95 	bl	800c3a0 <memset>
 800ec76:	4b05      	ldr	r3, [pc, #20]	; (800ec8c <std+0x38>)
 800ec78:	6224      	str	r4, [r4, #32]
 800ec7a:	6263      	str	r3, [r4, #36]	; 0x24
 800ec7c:	4b04      	ldr	r3, [pc, #16]	; (800ec90 <std+0x3c>)
 800ec7e:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec80:	4b04      	ldr	r3, [pc, #16]	; (800ec94 <std+0x40>)
 800ec82:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec84:	4b04      	ldr	r3, [pc, #16]	; (800ec98 <std+0x44>)
 800ec86:	6323      	str	r3, [r4, #48]	; 0x30
 800ec88:	bd10      	pop	{r4, pc}
 800ec8a:	bf00      	nop
 800ec8c:	0800efa5 	.word	0x0800efa5
 800ec90:	0800efc7 	.word	0x0800efc7
 800ec94:	0800efff 	.word	0x0800efff
 800ec98:	0800f023 	.word	0x0800f023

0800ec9c <_cleanup_r>:
 800ec9c:	4901      	ldr	r1, [pc, #4]	; (800eca4 <_cleanup_r+0x8>)
 800ec9e:	f000 b8af 	b.w	800ee00 <_fwalk_reent>
 800eca2:	bf00      	nop
 800eca4:	0800ebdd 	.word	0x0800ebdd

0800eca8 <__sfmoreglue>:
 800eca8:	b570      	push	{r4, r5, r6, lr}
 800ecaa:	2568      	movs	r5, #104	; 0x68
 800ecac:	1e4a      	subs	r2, r1, #1
 800ecae:	4355      	muls	r5, r2
 800ecb0:	460e      	mov	r6, r1
 800ecb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ecb6:	f7ff fa89 	bl	800e1cc <_malloc_r>
 800ecba:	4604      	mov	r4, r0
 800ecbc:	b140      	cbz	r0, 800ecd0 <__sfmoreglue+0x28>
 800ecbe:	2100      	movs	r1, #0
 800ecc0:	e9c0 1600 	strd	r1, r6, [r0]
 800ecc4:	300c      	adds	r0, #12
 800ecc6:	60a0      	str	r0, [r4, #8]
 800ecc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eccc:	f7fd fb68 	bl	800c3a0 <memset>
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	bd70      	pop	{r4, r5, r6, pc}

0800ecd4 <__sfp_lock_acquire>:
 800ecd4:	4801      	ldr	r0, [pc, #4]	; (800ecdc <__sfp_lock_acquire+0x8>)
 800ecd6:	f000 b8b3 	b.w	800ee40 <__retarget_lock_acquire_recursive>
 800ecda:	bf00      	nop
 800ecdc:	20004854 	.word	0x20004854

0800ece0 <__sfp_lock_release>:
 800ece0:	4801      	ldr	r0, [pc, #4]	; (800ece8 <__sfp_lock_release+0x8>)
 800ece2:	f000 b8ae 	b.w	800ee42 <__retarget_lock_release_recursive>
 800ece6:	bf00      	nop
 800ece8:	20004854 	.word	0x20004854

0800ecec <__sinit_lock_acquire>:
 800ecec:	4801      	ldr	r0, [pc, #4]	; (800ecf4 <__sinit_lock_acquire+0x8>)
 800ecee:	f000 b8a7 	b.w	800ee40 <__retarget_lock_acquire_recursive>
 800ecf2:	bf00      	nop
 800ecf4:	2000484f 	.word	0x2000484f

0800ecf8 <__sinit_lock_release>:
 800ecf8:	4801      	ldr	r0, [pc, #4]	; (800ed00 <__sinit_lock_release+0x8>)
 800ecfa:	f000 b8a2 	b.w	800ee42 <__retarget_lock_release_recursive>
 800ecfe:	bf00      	nop
 800ed00:	2000484f 	.word	0x2000484f

0800ed04 <__sinit>:
 800ed04:	b510      	push	{r4, lr}
 800ed06:	4604      	mov	r4, r0
 800ed08:	f7ff fff0 	bl	800ecec <__sinit_lock_acquire>
 800ed0c:	69a3      	ldr	r3, [r4, #24]
 800ed0e:	b11b      	cbz	r3, 800ed18 <__sinit+0x14>
 800ed10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed14:	f7ff bff0 	b.w	800ecf8 <__sinit_lock_release>
 800ed18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ed1c:	6523      	str	r3, [r4, #80]	; 0x50
 800ed1e:	4b13      	ldr	r3, [pc, #76]	; (800ed6c <__sinit+0x68>)
 800ed20:	4a13      	ldr	r2, [pc, #76]	; (800ed70 <__sinit+0x6c>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	62a2      	str	r2, [r4, #40]	; 0x28
 800ed26:	42a3      	cmp	r3, r4
 800ed28:	bf08      	it	eq
 800ed2a:	2301      	moveq	r3, #1
 800ed2c:	4620      	mov	r0, r4
 800ed2e:	bf08      	it	eq
 800ed30:	61a3      	streq	r3, [r4, #24]
 800ed32:	f000 f81f 	bl	800ed74 <__sfp>
 800ed36:	6060      	str	r0, [r4, #4]
 800ed38:	4620      	mov	r0, r4
 800ed3a:	f000 f81b 	bl	800ed74 <__sfp>
 800ed3e:	60a0      	str	r0, [r4, #8]
 800ed40:	4620      	mov	r0, r4
 800ed42:	f000 f817 	bl	800ed74 <__sfp>
 800ed46:	2200      	movs	r2, #0
 800ed48:	2104      	movs	r1, #4
 800ed4a:	60e0      	str	r0, [r4, #12]
 800ed4c:	6860      	ldr	r0, [r4, #4]
 800ed4e:	f7ff ff81 	bl	800ec54 <std>
 800ed52:	2201      	movs	r2, #1
 800ed54:	2109      	movs	r1, #9
 800ed56:	68a0      	ldr	r0, [r4, #8]
 800ed58:	f7ff ff7c 	bl	800ec54 <std>
 800ed5c:	2202      	movs	r2, #2
 800ed5e:	2112      	movs	r1, #18
 800ed60:	68e0      	ldr	r0, [r4, #12]
 800ed62:	f7ff ff77 	bl	800ec54 <std>
 800ed66:	2301      	movs	r3, #1
 800ed68:	61a3      	str	r3, [r4, #24]
 800ed6a:	e7d1      	b.n	800ed10 <__sinit+0xc>
 800ed6c:	08010024 	.word	0x08010024
 800ed70:	0800ec9d 	.word	0x0800ec9d

0800ed74 <__sfp>:
 800ed74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed76:	4607      	mov	r7, r0
 800ed78:	f7ff ffac 	bl	800ecd4 <__sfp_lock_acquire>
 800ed7c:	4b1e      	ldr	r3, [pc, #120]	; (800edf8 <__sfp+0x84>)
 800ed7e:	681e      	ldr	r6, [r3, #0]
 800ed80:	69b3      	ldr	r3, [r6, #24]
 800ed82:	b913      	cbnz	r3, 800ed8a <__sfp+0x16>
 800ed84:	4630      	mov	r0, r6
 800ed86:	f7ff ffbd 	bl	800ed04 <__sinit>
 800ed8a:	3648      	adds	r6, #72	; 0x48
 800ed8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ed90:	3b01      	subs	r3, #1
 800ed92:	d503      	bpl.n	800ed9c <__sfp+0x28>
 800ed94:	6833      	ldr	r3, [r6, #0]
 800ed96:	b30b      	cbz	r3, 800eddc <__sfp+0x68>
 800ed98:	6836      	ldr	r6, [r6, #0]
 800ed9a:	e7f7      	b.n	800ed8c <__sfp+0x18>
 800ed9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eda0:	b9d5      	cbnz	r5, 800edd8 <__sfp+0x64>
 800eda2:	4b16      	ldr	r3, [pc, #88]	; (800edfc <__sfp+0x88>)
 800eda4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eda8:	60e3      	str	r3, [r4, #12]
 800edaa:	6665      	str	r5, [r4, #100]	; 0x64
 800edac:	f000 f847 	bl	800ee3e <__retarget_lock_init_recursive>
 800edb0:	f7ff ff96 	bl	800ece0 <__sfp_lock_release>
 800edb4:	2208      	movs	r2, #8
 800edb6:	4629      	mov	r1, r5
 800edb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800edbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800edc0:	6025      	str	r5, [r4, #0]
 800edc2:	61a5      	str	r5, [r4, #24]
 800edc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800edc8:	f7fd faea 	bl	800c3a0 <memset>
 800edcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800edd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800edd4:	4620      	mov	r0, r4
 800edd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edd8:	3468      	adds	r4, #104	; 0x68
 800edda:	e7d9      	b.n	800ed90 <__sfp+0x1c>
 800eddc:	2104      	movs	r1, #4
 800edde:	4638      	mov	r0, r7
 800ede0:	f7ff ff62 	bl	800eca8 <__sfmoreglue>
 800ede4:	4604      	mov	r4, r0
 800ede6:	6030      	str	r0, [r6, #0]
 800ede8:	2800      	cmp	r0, #0
 800edea:	d1d5      	bne.n	800ed98 <__sfp+0x24>
 800edec:	f7ff ff78 	bl	800ece0 <__sfp_lock_release>
 800edf0:	230c      	movs	r3, #12
 800edf2:	603b      	str	r3, [r7, #0]
 800edf4:	e7ee      	b.n	800edd4 <__sfp+0x60>
 800edf6:	bf00      	nop
 800edf8:	08010024 	.word	0x08010024
 800edfc:	ffff0001 	.word	0xffff0001

0800ee00 <_fwalk_reent>:
 800ee00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee04:	4606      	mov	r6, r0
 800ee06:	4688      	mov	r8, r1
 800ee08:	2700      	movs	r7, #0
 800ee0a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ee0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee12:	f1b9 0901 	subs.w	r9, r9, #1
 800ee16:	d505      	bpl.n	800ee24 <_fwalk_reent+0x24>
 800ee18:	6824      	ldr	r4, [r4, #0]
 800ee1a:	2c00      	cmp	r4, #0
 800ee1c:	d1f7      	bne.n	800ee0e <_fwalk_reent+0xe>
 800ee1e:	4638      	mov	r0, r7
 800ee20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee24:	89ab      	ldrh	r3, [r5, #12]
 800ee26:	2b01      	cmp	r3, #1
 800ee28:	d907      	bls.n	800ee3a <_fwalk_reent+0x3a>
 800ee2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee2e:	3301      	adds	r3, #1
 800ee30:	d003      	beq.n	800ee3a <_fwalk_reent+0x3a>
 800ee32:	4629      	mov	r1, r5
 800ee34:	4630      	mov	r0, r6
 800ee36:	47c0      	blx	r8
 800ee38:	4307      	orrs	r7, r0
 800ee3a:	3568      	adds	r5, #104	; 0x68
 800ee3c:	e7e9      	b.n	800ee12 <_fwalk_reent+0x12>

0800ee3e <__retarget_lock_init_recursive>:
 800ee3e:	4770      	bx	lr

0800ee40 <__retarget_lock_acquire_recursive>:
 800ee40:	4770      	bx	lr

0800ee42 <__retarget_lock_release_recursive>:
 800ee42:	4770      	bx	lr

0800ee44 <__swhatbuf_r>:
 800ee44:	b570      	push	{r4, r5, r6, lr}
 800ee46:	460e      	mov	r6, r1
 800ee48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee4c:	4614      	mov	r4, r2
 800ee4e:	2900      	cmp	r1, #0
 800ee50:	461d      	mov	r5, r3
 800ee52:	b096      	sub	sp, #88	; 0x58
 800ee54:	da07      	bge.n	800ee66 <__swhatbuf_r+0x22>
 800ee56:	2300      	movs	r3, #0
 800ee58:	602b      	str	r3, [r5, #0]
 800ee5a:	89b3      	ldrh	r3, [r6, #12]
 800ee5c:	061a      	lsls	r2, r3, #24
 800ee5e:	d410      	bmi.n	800ee82 <__swhatbuf_r+0x3e>
 800ee60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee64:	e00e      	b.n	800ee84 <__swhatbuf_r+0x40>
 800ee66:	466a      	mov	r2, sp
 800ee68:	f000 f902 	bl	800f070 <_fstat_r>
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	dbf2      	blt.n	800ee56 <__swhatbuf_r+0x12>
 800ee70:	9a01      	ldr	r2, [sp, #4]
 800ee72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ee76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ee7a:	425a      	negs	r2, r3
 800ee7c:	415a      	adcs	r2, r3
 800ee7e:	602a      	str	r2, [r5, #0]
 800ee80:	e7ee      	b.n	800ee60 <__swhatbuf_r+0x1c>
 800ee82:	2340      	movs	r3, #64	; 0x40
 800ee84:	2000      	movs	r0, #0
 800ee86:	6023      	str	r3, [r4, #0]
 800ee88:	b016      	add	sp, #88	; 0x58
 800ee8a:	bd70      	pop	{r4, r5, r6, pc}

0800ee8c <__smakebuf_r>:
 800ee8c:	898b      	ldrh	r3, [r1, #12]
 800ee8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ee90:	079d      	lsls	r5, r3, #30
 800ee92:	4606      	mov	r6, r0
 800ee94:	460c      	mov	r4, r1
 800ee96:	d507      	bpl.n	800eea8 <__smakebuf_r+0x1c>
 800ee98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ee9c:	6023      	str	r3, [r4, #0]
 800ee9e:	6123      	str	r3, [r4, #16]
 800eea0:	2301      	movs	r3, #1
 800eea2:	6163      	str	r3, [r4, #20]
 800eea4:	b002      	add	sp, #8
 800eea6:	bd70      	pop	{r4, r5, r6, pc}
 800eea8:	466a      	mov	r2, sp
 800eeaa:	ab01      	add	r3, sp, #4
 800eeac:	f7ff ffca 	bl	800ee44 <__swhatbuf_r>
 800eeb0:	9900      	ldr	r1, [sp, #0]
 800eeb2:	4605      	mov	r5, r0
 800eeb4:	4630      	mov	r0, r6
 800eeb6:	f7ff f989 	bl	800e1cc <_malloc_r>
 800eeba:	b948      	cbnz	r0, 800eed0 <__smakebuf_r+0x44>
 800eebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eec0:	059a      	lsls	r2, r3, #22
 800eec2:	d4ef      	bmi.n	800eea4 <__smakebuf_r+0x18>
 800eec4:	f023 0303 	bic.w	r3, r3, #3
 800eec8:	f043 0302 	orr.w	r3, r3, #2
 800eecc:	81a3      	strh	r3, [r4, #12]
 800eece:	e7e3      	b.n	800ee98 <__smakebuf_r+0xc>
 800eed0:	4b0d      	ldr	r3, [pc, #52]	; (800ef08 <__smakebuf_r+0x7c>)
 800eed2:	62b3      	str	r3, [r6, #40]	; 0x28
 800eed4:	89a3      	ldrh	r3, [r4, #12]
 800eed6:	6020      	str	r0, [r4, #0]
 800eed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eedc:	81a3      	strh	r3, [r4, #12]
 800eede:	9b00      	ldr	r3, [sp, #0]
 800eee0:	6120      	str	r0, [r4, #16]
 800eee2:	6163      	str	r3, [r4, #20]
 800eee4:	9b01      	ldr	r3, [sp, #4]
 800eee6:	b15b      	cbz	r3, 800ef00 <__smakebuf_r+0x74>
 800eee8:	4630      	mov	r0, r6
 800eeea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eeee:	f000 f8d1 	bl	800f094 <_isatty_r>
 800eef2:	b128      	cbz	r0, 800ef00 <__smakebuf_r+0x74>
 800eef4:	89a3      	ldrh	r3, [r4, #12]
 800eef6:	f023 0303 	bic.w	r3, r3, #3
 800eefa:	f043 0301 	orr.w	r3, r3, #1
 800eefe:	81a3      	strh	r3, [r4, #12]
 800ef00:	89a0      	ldrh	r0, [r4, #12]
 800ef02:	4305      	orrs	r5, r0
 800ef04:	81a5      	strh	r5, [r4, #12]
 800ef06:	e7cd      	b.n	800eea4 <__smakebuf_r+0x18>
 800ef08:	0800ec9d 	.word	0x0800ec9d

0800ef0c <_malloc_usable_size_r>:
 800ef0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef10:	1f18      	subs	r0, r3, #4
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	bfbc      	itt	lt
 800ef16:	580b      	ldrlt	r3, [r1, r0]
 800ef18:	18c0      	addlt	r0, r0, r3
 800ef1a:	4770      	bx	lr

0800ef1c <_raise_r>:
 800ef1c:	291f      	cmp	r1, #31
 800ef1e:	b538      	push	{r3, r4, r5, lr}
 800ef20:	4604      	mov	r4, r0
 800ef22:	460d      	mov	r5, r1
 800ef24:	d904      	bls.n	800ef30 <_raise_r+0x14>
 800ef26:	2316      	movs	r3, #22
 800ef28:	6003      	str	r3, [r0, #0]
 800ef2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef2e:	bd38      	pop	{r3, r4, r5, pc}
 800ef30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ef32:	b112      	cbz	r2, 800ef3a <_raise_r+0x1e>
 800ef34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef38:	b94b      	cbnz	r3, 800ef4e <_raise_r+0x32>
 800ef3a:	4620      	mov	r0, r4
 800ef3c:	f000 f830 	bl	800efa0 <_getpid_r>
 800ef40:	462a      	mov	r2, r5
 800ef42:	4601      	mov	r1, r0
 800ef44:	4620      	mov	r0, r4
 800ef46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef4a:	f000 b817 	b.w	800ef7c <_kill_r>
 800ef4e:	2b01      	cmp	r3, #1
 800ef50:	d00a      	beq.n	800ef68 <_raise_r+0x4c>
 800ef52:	1c59      	adds	r1, r3, #1
 800ef54:	d103      	bne.n	800ef5e <_raise_r+0x42>
 800ef56:	2316      	movs	r3, #22
 800ef58:	6003      	str	r3, [r0, #0]
 800ef5a:	2001      	movs	r0, #1
 800ef5c:	e7e7      	b.n	800ef2e <_raise_r+0x12>
 800ef5e:	2400      	movs	r4, #0
 800ef60:	4628      	mov	r0, r5
 800ef62:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef66:	4798      	blx	r3
 800ef68:	2000      	movs	r0, #0
 800ef6a:	e7e0      	b.n	800ef2e <_raise_r+0x12>

0800ef6c <raise>:
 800ef6c:	4b02      	ldr	r3, [pc, #8]	; (800ef78 <raise+0xc>)
 800ef6e:	4601      	mov	r1, r0
 800ef70:	6818      	ldr	r0, [r3, #0]
 800ef72:	f7ff bfd3 	b.w	800ef1c <_raise_r>
 800ef76:	bf00      	nop
 800ef78:	20000034 	.word	0x20000034

0800ef7c <_kill_r>:
 800ef7c:	b538      	push	{r3, r4, r5, lr}
 800ef7e:	2300      	movs	r3, #0
 800ef80:	4d06      	ldr	r5, [pc, #24]	; (800ef9c <_kill_r+0x20>)
 800ef82:	4604      	mov	r4, r0
 800ef84:	4608      	mov	r0, r1
 800ef86:	4611      	mov	r1, r2
 800ef88:	602b      	str	r3, [r5, #0]
 800ef8a:	f7f5 fc1c 	bl	80047c6 <_kill>
 800ef8e:	1c43      	adds	r3, r0, #1
 800ef90:	d102      	bne.n	800ef98 <_kill_r+0x1c>
 800ef92:	682b      	ldr	r3, [r5, #0]
 800ef94:	b103      	cbz	r3, 800ef98 <_kill_r+0x1c>
 800ef96:	6023      	str	r3, [r4, #0]
 800ef98:	bd38      	pop	{r3, r4, r5, pc}
 800ef9a:	bf00      	nop
 800ef9c:	20004848 	.word	0x20004848

0800efa0 <_getpid_r>:
 800efa0:	f7f5 bc0a 	b.w	80047b8 <_getpid>

0800efa4 <__sread>:
 800efa4:	b510      	push	{r4, lr}
 800efa6:	460c      	mov	r4, r1
 800efa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efac:	f000 f894 	bl	800f0d8 <_read_r>
 800efb0:	2800      	cmp	r0, #0
 800efb2:	bfab      	itete	ge
 800efb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800efb6:	89a3      	ldrhlt	r3, [r4, #12]
 800efb8:	181b      	addge	r3, r3, r0
 800efba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800efbe:	bfac      	ite	ge
 800efc0:	6563      	strge	r3, [r4, #84]	; 0x54
 800efc2:	81a3      	strhlt	r3, [r4, #12]
 800efc4:	bd10      	pop	{r4, pc}

0800efc6 <__swrite>:
 800efc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efca:	461f      	mov	r7, r3
 800efcc:	898b      	ldrh	r3, [r1, #12]
 800efce:	4605      	mov	r5, r0
 800efd0:	05db      	lsls	r3, r3, #23
 800efd2:	460c      	mov	r4, r1
 800efd4:	4616      	mov	r6, r2
 800efd6:	d505      	bpl.n	800efe4 <__swrite+0x1e>
 800efd8:	2302      	movs	r3, #2
 800efda:	2200      	movs	r2, #0
 800efdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efe0:	f000 f868 	bl	800f0b4 <_lseek_r>
 800efe4:	89a3      	ldrh	r3, [r4, #12]
 800efe6:	4632      	mov	r2, r6
 800efe8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800efec:	81a3      	strh	r3, [r4, #12]
 800efee:	4628      	mov	r0, r5
 800eff0:	463b      	mov	r3, r7
 800eff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800effa:	f000 b817 	b.w	800f02c <_write_r>

0800effe <__sseek>:
 800effe:	b510      	push	{r4, lr}
 800f000:	460c      	mov	r4, r1
 800f002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f006:	f000 f855 	bl	800f0b4 <_lseek_r>
 800f00a:	1c43      	adds	r3, r0, #1
 800f00c:	89a3      	ldrh	r3, [r4, #12]
 800f00e:	bf15      	itete	ne
 800f010:	6560      	strne	r0, [r4, #84]	; 0x54
 800f012:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f016:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f01a:	81a3      	strheq	r3, [r4, #12]
 800f01c:	bf18      	it	ne
 800f01e:	81a3      	strhne	r3, [r4, #12]
 800f020:	bd10      	pop	{r4, pc}

0800f022 <__sclose>:
 800f022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f026:	f000 b813 	b.w	800f050 <_close_r>
	...

0800f02c <_write_r>:
 800f02c:	b538      	push	{r3, r4, r5, lr}
 800f02e:	4604      	mov	r4, r0
 800f030:	4608      	mov	r0, r1
 800f032:	4611      	mov	r1, r2
 800f034:	2200      	movs	r2, #0
 800f036:	4d05      	ldr	r5, [pc, #20]	; (800f04c <_write_r+0x20>)
 800f038:	602a      	str	r2, [r5, #0]
 800f03a:	461a      	mov	r2, r3
 800f03c:	f7f5 fbfa 	bl	8004834 <_write>
 800f040:	1c43      	adds	r3, r0, #1
 800f042:	d102      	bne.n	800f04a <_write_r+0x1e>
 800f044:	682b      	ldr	r3, [r5, #0]
 800f046:	b103      	cbz	r3, 800f04a <_write_r+0x1e>
 800f048:	6023      	str	r3, [r4, #0]
 800f04a:	bd38      	pop	{r3, r4, r5, pc}
 800f04c:	20004848 	.word	0x20004848

0800f050 <_close_r>:
 800f050:	b538      	push	{r3, r4, r5, lr}
 800f052:	2300      	movs	r3, #0
 800f054:	4d05      	ldr	r5, [pc, #20]	; (800f06c <_close_r+0x1c>)
 800f056:	4604      	mov	r4, r0
 800f058:	4608      	mov	r0, r1
 800f05a:	602b      	str	r3, [r5, #0]
 800f05c:	f7f5 fc06 	bl	800486c <_close>
 800f060:	1c43      	adds	r3, r0, #1
 800f062:	d102      	bne.n	800f06a <_close_r+0x1a>
 800f064:	682b      	ldr	r3, [r5, #0]
 800f066:	b103      	cbz	r3, 800f06a <_close_r+0x1a>
 800f068:	6023      	str	r3, [r4, #0]
 800f06a:	bd38      	pop	{r3, r4, r5, pc}
 800f06c:	20004848 	.word	0x20004848

0800f070 <_fstat_r>:
 800f070:	b538      	push	{r3, r4, r5, lr}
 800f072:	2300      	movs	r3, #0
 800f074:	4d06      	ldr	r5, [pc, #24]	; (800f090 <_fstat_r+0x20>)
 800f076:	4604      	mov	r4, r0
 800f078:	4608      	mov	r0, r1
 800f07a:	4611      	mov	r1, r2
 800f07c:	602b      	str	r3, [r5, #0]
 800f07e:	f7f5 fc00 	bl	8004882 <_fstat>
 800f082:	1c43      	adds	r3, r0, #1
 800f084:	d102      	bne.n	800f08c <_fstat_r+0x1c>
 800f086:	682b      	ldr	r3, [r5, #0]
 800f088:	b103      	cbz	r3, 800f08c <_fstat_r+0x1c>
 800f08a:	6023      	str	r3, [r4, #0]
 800f08c:	bd38      	pop	{r3, r4, r5, pc}
 800f08e:	bf00      	nop
 800f090:	20004848 	.word	0x20004848

0800f094 <_isatty_r>:
 800f094:	b538      	push	{r3, r4, r5, lr}
 800f096:	2300      	movs	r3, #0
 800f098:	4d05      	ldr	r5, [pc, #20]	; (800f0b0 <_isatty_r+0x1c>)
 800f09a:	4604      	mov	r4, r0
 800f09c:	4608      	mov	r0, r1
 800f09e:	602b      	str	r3, [r5, #0]
 800f0a0:	f7f5 fbfe 	bl	80048a0 <_isatty>
 800f0a4:	1c43      	adds	r3, r0, #1
 800f0a6:	d102      	bne.n	800f0ae <_isatty_r+0x1a>
 800f0a8:	682b      	ldr	r3, [r5, #0]
 800f0aa:	b103      	cbz	r3, 800f0ae <_isatty_r+0x1a>
 800f0ac:	6023      	str	r3, [r4, #0]
 800f0ae:	bd38      	pop	{r3, r4, r5, pc}
 800f0b0:	20004848 	.word	0x20004848

0800f0b4 <_lseek_r>:
 800f0b4:	b538      	push	{r3, r4, r5, lr}
 800f0b6:	4604      	mov	r4, r0
 800f0b8:	4608      	mov	r0, r1
 800f0ba:	4611      	mov	r1, r2
 800f0bc:	2200      	movs	r2, #0
 800f0be:	4d05      	ldr	r5, [pc, #20]	; (800f0d4 <_lseek_r+0x20>)
 800f0c0:	602a      	str	r2, [r5, #0]
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	f7f5 fbf6 	bl	80048b4 <_lseek>
 800f0c8:	1c43      	adds	r3, r0, #1
 800f0ca:	d102      	bne.n	800f0d2 <_lseek_r+0x1e>
 800f0cc:	682b      	ldr	r3, [r5, #0]
 800f0ce:	b103      	cbz	r3, 800f0d2 <_lseek_r+0x1e>
 800f0d0:	6023      	str	r3, [r4, #0]
 800f0d2:	bd38      	pop	{r3, r4, r5, pc}
 800f0d4:	20004848 	.word	0x20004848

0800f0d8 <_read_r>:
 800f0d8:	b538      	push	{r3, r4, r5, lr}
 800f0da:	4604      	mov	r4, r0
 800f0dc:	4608      	mov	r0, r1
 800f0de:	4611      	mov	r1, r2
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	4d05      	ldr	r5, [pc, #20]	; (800f0f8 <_read_r+0x20>)
 800f0e4:	602a      	str	r2, [r5, #0]
 800f0e6:	461a      	mov	r2, r3
 800f0e8:	f7f5 fb87 	bl	80047fa <_read>
 800f0ec:	1c43      	adds	r3, r0, #1
 800f0ee:	d102      	bne.n	800f0f6 <_read_r+0x1e>
 800f0f0:	682b      	ldr	r3, [r5, #0]
 800f0f2:	b103      	cbz	r3, 800f0f6 <_read_r+0x1e>
 800f0f4:	6023      	str	r3, [r4, #0]
 800f0f6:	bd38      	pop	{r3, r4, r5, pc}
 800f0f8:	20004848 	.word	0x20004848

0800f0fc <_init>:
 800f0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0fe:	bf00      	nop
 800f100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f102:	bc08      	pop	{r3}
 800f104:	469e      	mov	lr, r3
 800f106:	4770      	bx	lr

0800f108 <_fini>:
 800f108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f10a:	bf00      	nop
 800f10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f10e:	bc08      	pop	{r3}
 800f110:	469e      	mov	lr, r3
 800f112:	4770      	bx	lr
