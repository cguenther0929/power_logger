
power_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009868  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d94  08009a50  08009a50  00019a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7e4  0800a7e4  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7e4  0800a7e4  0001a7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7ec  0800a7ec  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7ec  0800a7ec  0001a7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7f0  0800a7f0  0001a7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800a7f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004438  20000204  0800a9f8  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000463c  0800a9f8  0002463c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020201  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003962  00000000  00000000  0004042e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  00043d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00023328  00000000  00000000  00045270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00019a88  00000000  00000000  00068598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c0087  00000000  00000000  00082020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001420a7  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001398  00000000  00000000  00142100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069b8  00000000  00000000  00143498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000204 	.word	0x20000204
 8000204:	00000000 	.word	0x00000000
 8000208:	08009a38 	.word	0x08009a38

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000208 	.word	0x20000208
 8000224:	08009a38 	.word	0x08009a38

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_uldivmod>:
 8000b60:	b953      	cbnz	r3, 8000b78 <__aeabi_uldivmod+0x18>
 8000b62:	b94a      	cbnz	r2, 8000b78 <__aeabi_uldivmod+0x18>
 8000b64:	2900      	cmp	r1, #0
 8000b66:	bf08      	it	eq
 8000b68:	2800      	cmpeq	r0, #0
 8000b6a:	bf1c      	itt	ne
 8000b6c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b70:	f04f 30ff 	movne.w	r0, #4294967295
 8000b74:	f000 b96e 	b.w	8000e54 <__aeabi_idiv0>
 8000b78:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b80:	f000 f806 	bl	8000b90 <__udivmoddi4>
 8000b84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b8c:	b004      	add	sp, #16
 8000b8e:	4770      	bx	lr

08000b90 <__udivmoddi4>:
 8000b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b94:	9e08      	ldr	r6, [sp, #32]
 8000b96:	460d      	mov	r5, r1
 8000b98:	4604      	mov	r4, r0
 8000b9a:	468e      	mov	lr, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f040 8083 	bne.w	8000ca8 <__udivmoddi4+0x118>
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	4617      	mov	r7, r2
 8000ba6:	d947      	bls.n	8000c38 <__udivmoddi4+0xa8>
 8000ba8:	fab2 f382 	clz	r3, r2
 8000bac:	b14b      	cbz	r3, 8000bc2 <__udivmoddi4+0x32>
 8000bae:	f1c3 0120 	rsb	r1, r3, #32
 8000bb2:	fa05 fe03 	lsl.w	lr, r5, r3
 8000bb6:	fa20 f101 	lsr.w	r1, r0, r1
 8000bba:	409f      	lsls	r7, r3
 8000bbc:	ea41 0e0e 	orr.w	lr, r1, lr
 8000bc0:	409c      	lsls	r4, r3
 8000bc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc6:	fbbe fcf8 	udiv	ip, lr, r8
 8000bca:	fa1f f987 	uxth.w	r9, r7
 8000bce:	fb08 e21c 	mls	r2, r8, ip, lr
 8000bd2:	fb0c f009 	mul.w	r0, ip, r9
 8000bd6:	0c21      	lsrs	r1, r4, #16
 8000bd8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000bdc:	4290      	cmp	r0, r2
 8000bde:	d90a      	bls.n	8000bf6 <__udivmoddi4+0x66>
 8000be0:	18ba      	adds	r2, r7, r2
 8000be2:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000be6:	f080 8118 	bcs.w	8000e1a <__udivmoddi4+0x28a>
 8000bea:	4290      	cmp	r0, r2
 8000bec:	f240 8115 	bls.w	8000e1a <__udivmoddi4+0x28a>
 8000bf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bf4:	443a      	add	r2, r7
 8000bf6:	1a12      	subs	r2, r2, r0
 8000bf8:	fbb2 f0f8 	udiv	r0, r2, r8
 8000bfc:	fb08 2210 	mls	r2, r8, r0, r2
 8000c00:	fb00 f109 	mul.w	r1, r0, r9
 8000c04:	b2a4      	uxth	r4, r4
 8000c06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c0a:	42a1      	cmp	r1, r4
 8000c0c:	d909      	bls.n	8000c22 <__udivmoddi4+0x92>
 8000c0e:	193c      	adds	r4, r7, r4
 8000c10:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c14:	f080 8103 	bcs.w	8000e1e <__udivmoddi4+0x28e>
 8000c18:	42a1      	cmp	r1, r4
 8000c1a:	f240 8100 	bls.w	8000e1e <__udivmoddi4+0x28e>
 8000c1e:	3802      	subs	r0, #2
 8000c20:	443c      	add	r4, r7
 8000c22:	1a64      	subs	r4, r4, r1
 8000c24:	2100      	movs	r1, #0
 8000c26:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c2a:	b11e      	cbz	r6, 8000c34 <__udivmoddi4+0xa4>
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	40dc      	lsrs	r4, r3
 8000c30:	e9c6 4200 	strd	r4, r2, [r6]
 8000c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c38:	b902      	cbnz	r2, 8000c3c <__udivmoddi4+0xac>
 8000c3a:	deff      	udf	#255	; 0xff
 8000c3c:	fab2 f382 	clz	r3, r2
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14f      	bne.n	8000ce4 <__udivmoddi4+0x154>
 8000c44:	1a8d      	subs	r5, r1, r2
 8000c46:	2101      	movs	r1, #1
 8000c48:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000c4c:	fa1f f882 	uxth.w	r8, r2
 8000c50:	fbb5 fcfe 	udiv	ip, r5, lr
 8000c54:	fb0e 551c 	mls	r5, lr, ip, r5
 8000c58:	fb08 f00c 	mul.w	r0, r8, ip
 8000c5c:	0c22      	lsrs	r2, r4, #16
 8000c5e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000c62:	42a8      	cmp	r0, r5
 8000c64:	d907      	bls.n	8000c76 <__udivmoddi4+0xe6>
 8000c66:	197d      	adds	r5, r7, r5
 8000c68:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000c6c:	d202      	bcs.n	8000c74 <__udivmoddi4+0xe4>
 8000c6e:	42a8      	cmp	r0, r5
 8000c70:	f200 80e9 	bhi.w	8000e46 <__udivmoddi4+0x2b6>
 8000c74:	4694      	mov	ip, r2
 8000c76:	1a2d      	subs	r5, r5, r0
 8000c78:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c7c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	b2a4      	uxth	r4, r4
 8000c86:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c8a:	45a0      	cmp	r8, r4
 8000c8c:	d907      	bls.n	8000c9e <__udivmoddi4+0x10e>
 8000c8e:	193c      	adds	r4, r7, r4
 8000c90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c94:	d202      	bcs.n	8000c9c <__udivmoddi4+0x10c>
 8000c96:	45a0      	cmp	r8, r4
 8000c98:	f200 80d9 	bhi.w	8000e4e <__udivmoddi4+0x2be>
 8000c9c:	4610      	mov	r0, r2
 8000c9e:	eba4 0408 	sub.w	r4, r4, r8
 8000ca2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca6:	e7c0      	b.n	8000c2a <__udivmoddi4+0x9a>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x12e>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	f000 80b1 	beq.w	8000e14 <__udivmoddi4+0x284>
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb8:	4608      	mov	r0, r1
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	fab3 f183 	clz	r1, r3
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0x1ce>
 8000cc6:	42ab      	cmp	r3, r5
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0x140>
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	f200 80b9 	bhi.w	8000e42 <__udivmoddi4+0x2b2>
 8000cd0:	1a84      	subs	r4, r0, r2
 8000cd2:	eb65 0303 	sbc.w	r3, r5, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	469e      	mov	lr, r3
 8000cda:	2e00      	cmp	r6, #0
 8000cdc:	d0aa      	beq.n	8000c34 <__udivmoddi4+0xa4>
 8000cde:	e9c6 4e00 	strd	r4, lr, [r6]
 8000ce2:	e7a7      	b.n	8000c34 <__udivmoddi4+0xa4>
 8000ce4:	409f      	lsls	r7, r3
 8000ce6:	f1c3 0220 	rsb	r2, r3, #32
 8000cea:	40d1      	lsrs	r1, r2
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fa1f f887 	uxth.w	r8, r7
 8000cf8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cfc:	fa24 f202 	lsr.w	r2, r4, r2
 8000d00:	409d      	lsls	r5, r3
 8000d02:	fb00 fc08 	mul.w	ip, r0, r8
 8000d06:	432a      	orrs	r2, r5
 8000d08:	0c15      	lsrs	r5, r2, #16
 8000d0a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000d0e:	45ac      	cmp	ip, r5
 8000d10:	fa04 f403 	lsl.w	r4, r4, r3
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0x19a>
 8000d16:	197d      	adds	r5, r7, r5
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	f080 808f 	bcs.w	8000e3e <__udivmoddi4+0x2ae>
 8000d20:	45ac      	cmp	ip, r5
 8000d22:	f240 808c 	bls.w	8000e3e <__udivmoddi4+0x2ae>
 8000d26:	3802      	subs	r0, #2
 8000d28:	443d      	add	r5, r7
 8000d2a:	eba5 050c 	sub.w	r5, r5, ip
 8000d2e:	fbb5 f1fe 	udiv	r1, r5, lr
 8000d32:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000d36:	fb01 f908 	mul.w	r9, r1, r8
 8000d3a:	b295      	uxth	r5, r2
 8000d3c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d40:	45a9      	cmp	r9, r5
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0x1c4>
 8000d44:	197d      	adds	r5, r7, r5
 8000d46:	f101 32ff 	add.w	r2, r1, #4294967295
 8000d4a:	d274      	bcs.n	8000e36 <__udivmoddi4+0x2a6>
 8000d4c:	45a9      	cmp	r9, r5
 8000d4e:	d972      	bls.n	8000e36 <__udivmoddi4+0x2a6>
 8000d50:	3902      	subs	r1, #2
 8000d52:	443d      	add	r5, r7
 8000d54:	eba5 0509 	sub.w	r5, r5, r9
 8000d58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d5c:	e778      	b.n	8000c50 <__udivmoddi4+0xc0>
 8000d5e:	f1c1 0720 	rsb	r7, r1, #32
 8000d62:	408b      	lsls	r3, r1
 8000d64:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d68:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6c:	fa25 f407 	lsr.w	r4, r5, r7
 8000d70:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d74:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d78:	fa1f f88c 	uxth.w	r8, ip
 8000d7c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d80:	fa20 f307 	lsr.w	r3, r0, r7
 8000d84:	fb09 fa08 	mul.w	sl, r9, r8
 8000d88:	408d      	lsls	r5, r1
 8000d8a:	431d      	orrs	r5, r3
 8000d8c:	0c2b      	lsrs	r3, r5, #16
 8000d8e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d92:	45a2      	cmp	sl, r4
 8000d94:	fa02 f201 	lsl.w	r2, r2, r1
 8000d98:	fa00 f301 	lsl.w	r3, r0, r1
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x222>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da6:	d248      	bcs.n	8000e3a <__udivmoddi4+0x2aa>
 8000da8:	45a2      	cmp	sl, r4
 8000daa:	d946      	bls.n	8000e3a <__udivmoddi4+0x2aa>
 8000dac:	f1a9 0902 	sub.w	r9, r9, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	eba4 040a 	sub.w	r4, r4, sl
 8000db6:	fbb4 f0fe 	udiv	r0, r4, lr
 8000dba:	fb0e 4410 	mls	r4, lr, r0, r4
 8000dbe:	fb00 fa08 	mul.w	sl, r0, r8
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	45a2      	cmp	sl, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x24e>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dd4:	d22d      	bcs.n	8000e32 <__udivmoddi4+0x2a2>
 8000dd6:	45a2      	cmp	sl, r4
 8000dd8:	d92b      	bls.n	8000e32 <__udivmoddi4+0x2a2>
 8000dda:	3802      	subs	r0, #2
 8000ddc:	4464      	add	r4, ip
 8000dde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de2:	fba0 8902 	umull	r8, r9, r0, r2
 8000de6:	eba4 040a 	sub.w	r4, r4, sl
 8000dea:	454c      	cmp	r4, r9
 8000dec:	46c6      	mov	lr, r8
 8000dee:	464d      	mov	r5, r9
 8000df0:	d319      	bcc.n	8000e26 <__udivmoddi4+0x296>
 8000df2:	d016      	beq.n	8000e22 <__udivmoddi4+0x292>
 8000df4:	b15e      	cbz	r6, 8000e0e <__udivmoddi4+0x27e>
 8000df6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dfa:	eb64 0405 	sbc.w	r4, r4, r5
 8000dfe:	fa04 f707 	lsl.w	r7, r4, r7
 8000e02:	fa22 f301 	lsr.w	r3, r2, r1
 8000e06:	431f      	orrs	r7, r3
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	e9c6 7400 	strd	r7, r4, [r6]
 8000e0e:	2100      	movs	r1, #0
 8000e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e14:	4631      	mov	r1, r6
 8000e16:	4630      	mov	r0, r6
 8000e18:	e70c      	b.n	8000c34 <__udivmoddi4+0xa4>
 8000e1a:	468c      	mov	ip, r1
 8000e1c:	e6eb      	b.n	8000bf6 <__udivmoddi4+0x66>
 8000e1e:	4610      	mov	r0, r2
 8000e20:	e6ff      	b.n	8000c22 <__udivmoddi4+0x92>
 8000e22:	4543      	cmp	r3, r8
 8000e24:	d2e6      	bcs.n	8000df4 <__udivmoddi4+0x264>
 8000e26:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e2a:	eb69 050c 	sbc.w	r5, r9, ip
 8000e2e:	3801      	subs	r0, #1
 8000e30:	e7e0      	b.n	8000df4 <__udivmoddi4+0x264>
 8000e32:	4628      	mov	r0, r5
 8000e34:	e7d3      	b.n	8000dde <__udivmoddi4+0x24e>
 8000e36:	4611      	mov	r1, r2
 8000e38:	e78c      	b.n	8000d54 <__udivmoddi4+0x1c4>
 8000e3a:	4681      	mov	r9, r0
 8000e3c:	e7b9      	b.n	8000db2 <__udivmoddi4+0x222>
 8000e3e:	4608      	mov	r0, r1
 8000e40:	e773      	b.n	8000d2a <__udivmoddi4+0x19a>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e749      	b.n	8000cda <__udivmoddi4+0x14a>
 8000e46:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e4a:	443d      	add	r5, r7
 8000e4c:	e713      	b.n	8000c76 <__udivmoddi4+0xe6>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	443c      	add	r4, r7
 8000e52:	e724      	b.n	8000c9e <__udivmoddi4+0x10e>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <init_ad4681>:

// struct accel_data accel;    //TODO may need to define this
// struct ad4681Data a2d;


void init_ad4681 (ad4681Data * a2d) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
     * 
     * All reads and writes to device 
     * registers must consist of two 
     * bytes (16 clock cycles)
     */
    uint16_t data_buffer[1] = {0x00};
 8000e60:	2300      	movs	r3, #0
 8000e62:	81bb      	strh	r3, [r7, #12]
    
    uint8_t spi_data[2] = {0x00};       //Define the SPI data buffer (index 0 to 15)
 8000e64:	2300      	movs	r3, #0
 8000e66:	813b      	strh	r3, [r7, #8]

    data_buffer[0] |= (uint16_t)((AD4681_WRITE_BIT << AD4681_WR_BIT_OFFSET) |
 8000e68:	89ba      	ldrh	r2, [r7, #12]
 8000e6a:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <init_ad4681+0xb8>)
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	81bb      	strh	r3, [r7, #12]
                                    (AD4681_CONFIG2_REG_ADDR << AD4681_ADDR_BIT_OFFSET) |
                                    (OUTPUT_ON_SDOA_ONLY << CONVERSION_MODE_BIT_OFFSET)

    );    

    spi_data[0] = (uint8_t)((data_buffer[0] >> 8) & 0xFF);
 8000e72:	89bb      	ldrh	r3, [r7, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	723b      	strb	r3, [r7, #8]
    spi_data[1] = (uint8_t)(data_buffer[0] & 0xFF);
 8000e7c:	89bb      	ldrh	r3, [r7, #12]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	727b      	strb	r3, [r7, #9]

    HAL_GPIO_WritePin(ADC_SPI1_CSn_GPIO_Port, ADC_SPI1_CSn_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2110      	movs	r1, #16
 8000e86:	4823      	ldr	r0, [pc, #140]	; (8000f14 <init_ad4681+0xbc>)
 8000e88:	f002 ff28 	bl	8003cdc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f002 fa5d 	bl	800334c <HAL_Delay>

    ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)spi_data, (uint16_t) 2, (uint32_t) 200);     // Timeout in us
 8000e92:	f107 0108 	add.w	r1, r7, #8
 8000e96:	23c8      	movs	r3, #200	; 0xc8
 8000e98:	2202      	movs	r2, #2
 8000e9a:	481f      	ldr	r0, [pc, #124]	; (8000f18 <init_ad4681+0xc0>)
 8000e9c:	f004 fa86 	bl	80053ac <HAL_SPI_Transmit>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	73fb      	strb	r3, [r7, #15]
    if(ret != HAL_OK){
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <init_ad4681+0x5a>
        print_string("SPI Transmit Error",LF);
 8000eaa:	2101      	movs	r1, #1
 8000eac:	481b      	ldr	r0, [pc, #108]	; (8000f1c <init_ad4681+0xc4>)
 8000eae:	f002 f983 	bl	80031b8 <print_string>
    }

    HAL_GPIO_WritePin(ADC_SPI1_CSn_GPIO_Port, ADC_SPI1_CSn_Pin, GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2110      	movs	r1, #16
 8000eb6:	4817      	ldr	r0, [pc, #92]	; (8000f14 <init_ad4681+0xbc>)
 8000eb8:	f002 ff10 	bl	8003cdc <HAL_GPIO_WritePin>

    /**
     * Initializations related to
     * the A2D interface
   */
    a2d -> sense_resistors[0] = 0.022f;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a18      	ldr	r2, [pc, #96]	; (8000f20 <init_ad4681+0xc8>)
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24
    a2d -> sense_resistors[1] = 0.091f;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a17      	ldr	r2, [pc, #92]	; (8000f24 <init_ad4681+0xcc>)
 8000ec6:	629a      	str	r2, [r3, #40]	; 0x28
    a2d -> sense_resistors[1] = 0.82f;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a17      	ldr	r2, [pc, #92]	; (8000f28 <init_ad4681+0xd0>)
 8000ecc:	629a      	str	r2, [r3, #40]	; 0x28
    a2d -> cs_res_index = 0;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	771a      	strb	r2, [r3, #28]
    a2d -> cs_res_f = a2d -> sense_resistors[a2d -> cs_res_index];        // Set this to a default value
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7f1b      	ldrb	r3, [r3, #28]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	3308      	adds	r3, #8
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	621a      	str	r2, [r3, #32]
    a2d -> first_sample = false;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
    a2d -> logging_status = false;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	705a      	strb	r2, [r3, #1]

    a2d -> run_time_hr = 0.0f;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	631a      	str	r2, [r3, #48]	; 0x30
    a2d -> run_time_min = 0.0f;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	635a      	str	r2, [r3, #52]	; 0x34
    a2d -> time_us_elapsed = 0;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	809a      	strh	r2, [r3, #4]

}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	ffffa100 	.word	0xffffa100
 8000f14:	40010800 	.word	0x40010800
 8000f18:	20001484 	.word	0x20001484
 8000f1c:	08009a50 	.word	0x08009a50
 8000f20:	3cb43958 	.word	0x3cb43958
 8000f24:	3dba5e35 	.word	0x3dba5e35
 8000f28:	3f51eb85 	.word	0x3f51eb85

08000f2c <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin       GPIO_PIN_12

/* SPI Chip Select */
static void SELECT(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f36:	4802      	ldr	r0, [pc, #8]	; (8000f40 <SELECT+0x14>)
 8000f38:	f002 fed0 	bl	8003cdc <HAL_GPIO_WritePin>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40010c00 	.word	0x40010c00

08000f44 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f4e:	4802      	ldr	r0, [pc, #8]	; (8000f58 <DESELECT+0x14>)
 8000f50:	f002 fec4 	bl	8003cdc <HAL_GPIO_WritePin>
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40010c00 	.word	0x40010c00

08000f5c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8000f66:	bf00      	nop
 8000f68:	4808      	ldr	r0, [pc, #32]	; (8000f8c <SPI_TxByte+0x30>)
 8000f6a:	f004 fcfd 	bl	8005968 <HAL_SPI_GetState>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d1f9      	bne.n	8000f68 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8000f74:	1df9      	adds	r1, r7, #7
 8000f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <SPI_TxByte+0x30>)
 8000f7e:	f004 fa15 	bl	80053ac <HAL_SPI_Transmit>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000254 	.word	0x20000254

08000f90 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000f96:	23ff      	movs	r3, #255	; 0xff
 8000f98:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8000f9e:	bf00      	nop
 8000fa0:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <SPI_RxByte+0x38>)
 8000fa2:	f004 fce1 	bl	8005968 <HAL_SPI_GetState>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d1f9      	bne.n	8000fa0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8000fac:	1dba      	adds	r2, r7, #6
 8000fae:	1df9      	adds	r1, r7, #7
 8000fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <SPI_RxByte+0x38>)
 8000fba:	f004 fb33 	bl	8005624 <HAL_SPI_TransmitReceive>
  
  return data;
 8000fbe:	79bb      	ldrb	r3, [r7, #6]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000254 	.word	0x20000254

08000fcc <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000fd4:	f7ff ffdc 	bl	8000f90 <SPI_RxByte>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	701a      	strb	r2, [r3, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void) 
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <SD_ReadyWait+0x34>)
 8000ff0:	2232      	movs	r2, #50	; 0x32
 8000ff2:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000ff4:	f7ff ffcc 	bl	8000f90 <SPI_RxByte>
  
  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000ff8:	f7ff ffca 	bl	8000f90 <SPI_RxByte>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	2bff      	cmp	r3, #255	; 0xff
 8001004:	d004      	beq.n	8001010 <SD_ReadyWait+0x28>
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <SD_ReadyWait+0x34>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f3      	bne.n	8000ff8 <SD_ReadyWait+0x10>
  
  return res;
 8001010:	79fb      	ldrb	r3, [r7, #7]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200025c1 	.word	0x200025c1

08001020 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001026:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800102a:	617b      	str	r3, [r7, #20]
  
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800102c:	f7ff ff8a 	bl	8000f44 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	e005      	b.n	8001042 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001036:	20ff      	movs	r0, #255	; 0xff
 8001038:	f7ff ff90 	bl	8000f5c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	3301      	adds	r3, #1
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	2b09      	cmp	r3, #9
 8001046:	ddf6      	ble.n	8001036 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8001048:	f7ff ff70 	bl	8000f2c <SELECT>
  
  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 800104c:	2340      	movs	r3, #64	; 0x40
 800104e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001060:	2395      	movs	r3, #149	; 0x95
 8001062:	727b      	strb	r3, [r7, #9]
  
  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	e009      	b.n	800107e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800106a:	1d3a      	adds	r2, r7, #4
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff72 	bl	8000f5c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3301      	adds	r3, #1
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2b05      	cmp	r3, #5
 8001082:	ddf2      	ble.n	800106a <SD_PowerOn+0x4a>
  }
  
  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001084:	e002      	b.n	800108c <SD_PowerOn+0x6c>
  {
    Count--;
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	3b01      	subs	r3, #1
 800108a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800108c:	f7ff ff80 	bl	8000f90 <SPI_RxByte>
 8001090:	4603      	mov	r3, r0
 8001092:	2b01      	cmp	r3, #1
 8001094:	d002      	beq.n	800109c <SD_PowerOn+0x7c>
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1f4      	bne.n	8001086 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 800109c:	f7ff ff52 	bl	8000f44 <DESELECT>
  SPI_TxByte(0XFF);
 80010a0:	20ff      	movs	r0, #255	; 0xff
 80010a2:	f7ff ff5b 	bl	8000f5c <SPI_TxByte>
  
  PowerFlag = 1;
 80010a6:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <SD_PowerOn+0x94>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]
}
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000221 	.word	0x20000221

080010b8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <SD_PowerOff+0x14>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000221 	.word	0x20000221

080010d0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80010d4:	4b02      	ldr	r3, [pc, #8]	; (80010e0 <SD_CheckPower+0x10>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	20000221 	.word	0x20000221

080010e4 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <SD_RxDataBlock+0x68>)
 80010f0:	220a      	movs	r2, #10
 80010f2:	701a      	strb	r2, [r3, #0]
  
  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 80010f4:	f7ff ff4c 	bl	8000f90 <SPI_RxByte>
 80010f8:	4603      	mov	r3, r0
 80010fa:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2bff      	cmp	r3, #255	; 0xff
 8001100:	d104      	bne.n	800110c <SD_RxDataBlock+0x28>
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <SD_RxDataBlock+0x68>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	2bfe      	cmp	r3, #254	; 0xfe
 8001110:	d001      	beq.n	8001116 <SD_RxDataBlock+0x32>
    return FALSE;
 8001112:	2300      	movs	r3, #0
 8001114:	e016      	b.n	8001144 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff55 	bl	8000fcc <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff4f 	bl	8000fcc <SPI_RxBytePtr>
  } while(btr -= 2);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	3b02      	subs	r3, #2
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1ed      	bne.n	8001116 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 800113a:	f7ff ff29 	bl	8000f90 <SPI_RxByte>
  SPI_RxByte();
 800113e:	f7ff ff27 	bl	8000f90 <SPI_RxByte>
  
  return TRUE;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200025c2 	.word	0x200025c2

08001150 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001160:	f7ff ff42 	bl	8000fe8 <SD_ReadyWait>
 8001164:	4603      	mov	r3, r0
 8001166:	2bff      	cmp	r3, #255	; 0xff
 8001168:	d001      	beq.n	800116e <SD_TxDataBlock+0x1e>
    return FALSE;
 800116a:	2300      	movs	r3, #0
 800116c:	e040      	b.n	80011f0 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fef3 	bl	8000f5c <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	2bfd      	cmp	r3, #253	; 0xfd
 800117a:	d031      	beq.n	80011e0 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fee7 	bl	8000f5c <SPI_TxByte>
      SPI_TxByte(*buff++);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fee0 	bl	8000f5c <SPI_TxByte>
    } while (--wc);
 800119c:	7bbb      	ldrb	r3, [r7, #14]
 800119e:	3b01      	subs	r3, #1
 80011a0:	73bb      	strb	r3, [r7, #14]
 80011a2:	7bbb      	ldrb	r3, [r7, #14]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1eb      	bne.n	8001180 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80011a8:	f7ff fef2 	bl	8000f90 <SPI_RxByte>
    SPI_RxByte();
 80011ac:	f7ff fef0 	bl	8000f90 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80011b0:	e00b      	b.n	80011ca <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80011b2:	f7ff feed 	bl	8000f90 <SPI_RxByte>
 80011b6:	4603      	mov	r3, r0
 80011b8:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	f003 031f 	and.w	r3, r3, #31
 80011c0:	2b05      	cmp	r3, #5
 80011c2:	d006      	beq.n	80011d2 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 80011c4:	7b7b      	ldrb	r3, [r7, #13]
 80011c6:	3301      	adds	r3, #1
 80011c8:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 80011ca:	7b7b      	ldrb	r3, [r7, #13]
 80011cc:	2b40      	cmp	r3, #64	; 0x40
 80011ce:	d9f0      	bls.n	80011b2 <SD_TxDataBlock+0x62>
 80011d0:	e000      	b.n	80011d4 <SD_TxDataBlock+0x84>
        break;
 80011d2:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80011d4:	bf00      	nop
 80011d6:	f7ff fedb 	bl	8000f90 <SPI_RxByte>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0fa      	beq.n	80011d6 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	f003 031f 	and.w	r3, r3, #31
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d101      	bne.n	80011ee <SD_TxDataBlock+0x9e>
    return TRUE;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001204:	f7ff fef0 	bl	8000fe8 <SD_ReadyWait>
 8001208:	4603      	mov	r3, r0
 800120a:	2bff      	cmp	r3, #255	; 0xff
 800120c:	d001      	beq.n	8001212 <SD_SendCmd+0x1a>
    return 0xFF;
 800120e:	23ff      	movs	r3, #255	; 0xff
 8001210:	e040      	b.n	8001294 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fea1 	bl	8000f5c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	0e1b      	lsrs	r3, r3, #24
 800121e:	b2db      	uxtb	r3, r3
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fe9b 	bl	8000f5c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	0c1b      	lsrs	r3, r3, #16
 800122a:	b2db      	uxtb	r3, r3
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fe95 	bl	8000f5c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	b2db      	uxtb	r3, r3
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fe8f 	bl	8000f5c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fe8a 	bl	8000f5c <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	2b40      	cmp	r3, #64	; 0x40
 8001250:	d101      	bne.n	8001256 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001252:	2395      	movs	r3, #149	; 0x95
 8001254:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b48      	cmp	r3, #72	; 0x48
 800125a:	d101      	bne.n	8001260 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800125c:	2387      	movs	r3, #135	; 0x87
 800125e:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fe7a 	bl	8000f5c <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	2b4c      	cmp	r3, #76	; 0x4c
 800126c:	d101      	bne.n	8001272 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800126e:	f7ff fe8f 	bl	8000f90 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8001272:	230a      	movs	r3, #10
 8001274:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001276:	f7ff fe8b 	bl	8000f90 <SPI_RxByte>
 800127a:	4603      	mov	r3, r0
 800127c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800127e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001282:	2b00      	cmp	r3, #0
 8001284:	da05      	bge.n	8001292 <SD_SendCmd+0x9a>
 8001286:	7bbb      	ldrb	r3, [r7, #14]
 8001288:	3b01      	subs	r3, #1
 800128a:	73bb      	strb	r3, [r7, #14]
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f1      	bne.n	8001276 <SD_SendCmd+0x7e>
  
  return res;
 8001292:	7b7b      	ldrb	r3, [r7, #13]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80012ac:	2301      	movs	r3, #1
 80012ae:	e0d5      	b.n	800145c <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80012b0:	4b6c      	ldr	r3, [pc, #432]	; (8001464 <SD_disk_initialize+0x1c8>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <SD_disk_initialize+0x2a>
    return Stat;        
 80012be:	4b69      	ldr	r3, [pc, #420]	; (8001464 <SD_disk_initialize+0x1c8>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	e0ca      	b.n	800145c <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 80012c6:	f7ff feab 	bl	8001020 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 80012ca:	f7ff fe2f 	bl	8000f2c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 80012d2:	2100      	movs	r1, #0
 80012d4:	2040      	movs	r0, #64	; 0x40
 80012d6:	f7ff ff8f 	bl	80011f8 <SD_SendCmd>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b01      	cmp	r3, #1
 80012de:	f040 80a5 	bne.w	800142c <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80012e2:	4b61      	ldr	r3, [pc, #388]	; (8001468 <SD_disk_initialize+0x1cc>)
 80012e4:	2264      	movs	r2, #100	; 0x64
 80012e6:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 80012e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80012ec:	2048      	movs	r0, #72	; 0x48
 80012ee:	f7ff ff83 	bl	80011f8 <SD_SendCmd>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d158      	bne.n	80013aa <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	e00c      	b.n	8001318 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80012fe:	7bfc      	ldrb	r4, [r7, #15]
 8001300:	f7ff fe46 	bl	8000f90 <SPI_RxByte>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4423      	add	r3, r4
 800130e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	3301      	adds	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d9ef      	bls.n	80012fe <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 800131e:	7abb      	ldrb	r3, [r7, #10]
 8001320:	2b01      	cmp	r3, #1
 8001322:	f040 8083 	bne.w	800142c <SD_disk_initialize+0x190>
 8001326:	7afb      	ldrb	r3, [r7, #11]
 8001328:	2baa      	cmp	r3, #170	; 0xaa
 800132a:	d17f      	bne.n	800142c <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800132c:	2100      	movs	r1, #0
 800132e:	2077      	movs	r0, #119	; 0x77
 8001330:	f7ff ff62 	bl	80011f8 <SD_SendCmd>
 8001334:	4603      	mov	r3, r0
 8001336:	2b01      	cmp	r3, #1
 8001338:	d807      	bhi.n	800134a <SD_disk_initialize+0xae>
 800133a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800133e:	2069      	movs	r0, #105	; 0x69
 8001340:	f7ff ff5a 	bl	80011f8 <SD_SendCmd>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d005      	beq.n	8001356 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800134a:	4b47      	ldr	r3, [pc, #284]	; (8001468 <SD_disk_initialize+0x1cc>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1eb      	bne.n	800132c <SD_disk_initialize+0x90>
 8001354:	e000      	b.n	8001358 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001356:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001358:	4b43      	ldr	r3, [pc, #268]	; (8001468 <SD_disk_initialize+0x1cc>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d064      	beq.n	800142c <SD_disk_initialize+0x190>
 8001362:	2100      	movs	r1, #0
 8001364:	207a      	movs	r0, #122	; 0x7a
 8001366:	f7ff ff47 	bl	80011f8 <SD_SendCmd>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d15d      	bne.n	800142c <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	e00c      	b.n	8001390 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001376:	7bfc      	ldrb	r4, [r7, #15]
 8001378:	f7ff fe0a 	bl	8000f90 <SPI_RxByte>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	4423      	add	r3, r4
 8001386:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	3301      	adds	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	2b03      	cmp	r3, #3
 8001394:	d9ef      	bls.n	8001376 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001396:	7a3b      	ldrb	r3, [r7, #8]
 8001398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SD_disk_initialize+0x108>
 80013a0:	2306      	movs	r3, #6
 80013a2:	e000      	b.n	80013a6 <SD_disk_initialize+0x10a>
 80013a4:	2302      	movs	r3, #2
 80013a6:	73bb      	strb	r3, [r7, #14]
 80013a8:	e040      	b.n	800142c <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80013aa:	2100      	movs	r1, #0
 80013ac:	2077      	movs	r0, #119	; 0x77
 80013ae:	f7ff ff23 	bl	80011f8 <SD_SendCmd>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d808      	bhi.n	80013ca <SD_disk_initialize+0x12e>
 80013b8:	2100      	movs	r1, #0
 80013ba:	2069      	movs	r0, #105	; 0x69
 80013bc:	f7ff ff1c 	bl	80011f8 <SD_SendCmd>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d801      	bhi.n	80013ca <SD_disk_initialize+0x12e>
 80013c6:	2302      	movs	r3, #2
 80013c8:	e000      	b.n	80013cc <SD_disk_initialize+0x130>
 80013ca:	2301      	movs	r3, #1
 80013cc:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d10e      	bne.n	80013f2 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80013d4:	2100      	movs	r1, #0
 80013d6:	2077      	movs	r0, #119	; 0x77
 80013d8:	f7ff ff0e 	bl	80011f8 <SD_SendCmd>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d80e      	bhi.n	8001400 <SD_disk_initialize+0x164>
 80013e2:	2100      	movs	r1, #0
 80013e4:	2069      	movs	r0, #105	; 0x69
 80013e6:	f7ff ff07 	bl	80011f8 <SD_SendCmd>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d107      	bne.n	8001400 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80013f0:	e00d      	b.n	800140e <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80013f2:	2100      	movs	r1, #0
 80013f4:	2041      	movs	r0, #65	; 0x41
 80013f6:	f7ff feff 	bl	80011f8 <SD_SendCmd>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <SD_disk_initialize+0x1cc>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1e1      	bne.n	80013ce <SD_disk_initialize+0x132>
 800140a:	e000      	b.n	800140e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800140c:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <SD_disk_initialize+0x1cc>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d007      	beq.n	8001428 <SD_disk_initialize+0x18c>
 8001418:	f44f 7100 	mov.w	r1, #512	; 0x200
 800141c:	2050      	movs	r0, #80	; 0x50
 800141e:	f7ff feeb 	bl	80011f8 <SD_SendCmd>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 800142c:	4a0f      	ldr	r2, [pc, #60]	; (800146c <SD_disk_initialize+0x1d0>)
 800142e:	7bbb      	ldrb	r3, [r7, #14]
 8001430:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8001432:	f7ff fd87 	bl	8000f44 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001436:	f7ff fdab 	bl	8000f90 <SPI_RxByte>
  
  if (type) 
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d008      	beq.n	8001452 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <SD_disk_initialize+0x1c8>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	f023 0301 	bic.w	r3, r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <SD_disk_initialize+0x1c8>)
 800144e:	701a      	strb	r2, [r3, #0]
 8001450:	e001      	b.n	8001456 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001452:	f7ff fe31 	bl	80010b8 <SD_PowerOff>
  }
  
  return Stat;
 8001456:	4b03      	ldr	r3, [pc, #12]	; (8001464 <SD_disk_initialize+0x1c8>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b2db      	uxtb	r3, r3
}
 800145c:	4618      	mov	r0, r3
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	bd90      	pop	{r4, r7, pc}
 8001464:	20000010 	.word	0x20000010
 8001468:	200025c2 	.word	0x200025c2
 800146c:	20000220 	.word	0x20000220

08001470 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001480:	2301      	movs	r3, #1
 8001482:	e002      	b.n	800148a <SD_disk_status+0x1a>
  
  return Stat;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <SD_disk_status+0x24>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b2db      	uxtb	r3, r3
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	20000010 	.word	0x20000010

08001498 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	4603      	mov	r3, r0
 80014a6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <SD_disk_read+0x1c>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <SD_disk_read+0x20>
    return RES_PARERR;
 80014b4:	2304      	movs	r3, #4
 80014b6:	e051      	b.n	800155c <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 80014b8:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <SD_disk_read+0xcc>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SD_disk_read+0x32>
    return RES_NOTRDY;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e048      	b.n	800155c <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <SD_disk_read+0xd0>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	025b      	lsls	r3, r3, #9
 80014da:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80014dc:	f7ff fd26 	bl	8000f2c <SELECT>
  
  if (count == 1) 
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d111      	bne.n	800150a <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	2051      	movs	r0, #81	; 0x51
 80014ea:	f7ff fe85 	bl	80011f8 <SD_SendCmd>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d129      	bne.n	8001548 <SD_disk_read+0xb0>
 80014f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f8:	68b8      	ldr	r0, [r7, #8]
 80014fa:	f7ff fdf3 	bl	80010e4 <SD_RxDataBlock>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d021      	beq.n	8001548 <SD_disk_read+0xb0>
      count = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	e01e      	b.n	8001548 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	2052      	movs	r0, #82	; 0x52
 800150e:	f7ff fe73 	bl	80011f8 <SD_SendCmd>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d117      	bne.n	8001548 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151c:	68b8      	ldr	r0, [r7, #8]
 800151e:	f7ff fde1 	bl	80010e4 <SD_RxDataBlock>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00a      	beq.n	800153e <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800152e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	3b01      	subs	r3, #1
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1ed      	bne.n	8001518 <SD_disk_read+0x80>
 800153c:	e000      	b.n	8001540 <SD_disk_read+0xa8>
          break;
 800153e:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001540:	2100      	movs	r1, #0
 8001542:	204c      	movs	r0, #76	; 0x4c
 8001544:	f7ff fe58 	bl	80011f8 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001548:	f7ff fcfc 	bl	8000f44 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 800154c:	f7ff fd20 	bl	8000f90 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	bf14      	ite	ne
 8001556:	2301      	movne	r3, #1
 8001558:	2300      	moveq	r3, #0
 800155a:	b2db      	uxtb	r3, r3
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000010 	.word	0x20000010
 8001568:	20000220 	.word	0x20000220

0800156c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <SD_disk_write+0x1c>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <SD_disk_write+0x20>
    return RES_PARERR;
 8001588:	2304      	movs	r3, #4
 800158a:	e06b      	b.n	8001664 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 800158c:	4b37      	ldr	r3, [pc, #220]	; (800166c <SD_disk_write+0x100>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SD_disk_write+0x32>
    return RES_NOTRDY;
 800159a:	2303      	movs	r3, #3
 800159c:	e062      	b.n	8001664 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 800159e:	4b33      	ldr	r3, [pc, #204]	; (800166c <SD_disk_write+0x100>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <SD_disk_write+0x44>
    return RES_WRPRT;
 80015ac:	2302      	movs	r3, #2
 80015ae:	e059      	b.n	8001664 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 80015b0:	4b2f      	ldr	r3, [pc, #188]	; (8001670 <SD_disk_write+0x104>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	025b      	lsls	r3, r3, #9
 80015c0:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80015c2:	f7ff fcb3 	bl	8000f2c <SELECT>
  
  if (count == 1) 
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d110      	bne.n	80015ee <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	2058      	movs	r0, #88	; 0x58
 80015d0:	f7ff fe12 	bl	80011f8 <SD_SendCmd>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d13a      	bne.n	8001650 <SD_disk_write+0xe4>
 80015da:	21fe      	movs	r1, #254	; 0xfe
 80015dc:	68b8      	ldr	r0, [r7, #8]
 80015de:	f7ff fdb7 	bl	8001150 <SD_TxDataBlock>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d033      	beq.n	8001650 <SD_disk_write+0xe4>
      count = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	e030      	b.n	8001650 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <SD_disk_write+0x104>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d007      	beq.n	800160a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80015fa:	2100      	movs	r1, #0
 80015fc:	2077      	movs	r0, #119	; 0x77
 80015fe:	f7ff fdfb 	bl	80011f8 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001602:	6839      	ldr	r1, [r7, #0]
 8001604:	2057      	movs	r0, #87	; 0x57
 8001606:	f7ff fdf7 	bl	80011f8 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	2059      	movs	r0, #89	; 0x59
 800160e:	f7ff fdf3 	bl	80011f8 <SD_SendCmd>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d11b      	bne.n	8001650 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001618:	21fc      	movs	r1, #252	; 0xfc
 800161a:	68b8      	ldr	r0, [r7, #8]
 800161c:	f7ff fd98 	bl	8001150 <SD_TxDataBlock>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00a      	beq.n	800163c <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800162c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	3b01      	subs	r3, #1
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1ee      	bne.n	8001618 <SD_disk_write+0xac>
 800163a:	e000      	b.n	800163e <SD_disk_write+0xd2>
          break;
 800163c:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 800163e:	21fd      	movs	r1, #253	; 0xfd
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff fd85 	bl	8001150 <SD_TxDataBlock>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <SD_disk_write+0xe4>
      {        
        count = 1;
 800164c:	2301      	movs	r3, #1
 800164e:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001650:	f7ff fc78 	bl	8000f44 <DESELECT>
  SPI_RxByte();
 8001654:	f7ff fc9c 	bl	8000f90 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	bf14      	ite	ne
 800165e:	2301      	movne	r3, #1
 8001660:	2300      	moveq	r3, #0
 8001662:	b2db      	uxtb	r3, r3
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000010 	.word	0x20000010
 8001670:	20000220 	.word	0x20000220

08001674 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b08b      	sub	sp, #44	; 0x2c
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	603a      	str	r2, [r7, #0]
 800167e:	71fb      	strb	r3, [r7, #7]
 8001680:	460b      	mov	r3, r1
 8001682:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800168e:	2304      	movs	r3, #4
 8001690:	e11b      	b.n	80018ca <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	2b05      	cmp	r3, #5
 800169c:	d129      	bne.n	80016f2 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 800169e:	6a3b      	ldr	r3, [r7, #32]
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d017      	beq.n	80016d6 <SD_disk_ioctl+0x62>
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	dc1f      	bgt.n	80016ea <SD_disk_ioctl+0x76>
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <SD_disk_ioctl+0x40>
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d00b      	beq.n	80016ca <SD_disk_ioctl+0x56>
 80016b2:	e01a      	b.n	80016ea <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80016b4:	f7ff fd0c 	bl	80010d0 <SD_CheckPower>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 80016be:	f7ff fcfb 	bl	80010b8 <SD_PowerOff>
      res = RES_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80016c8:	e0fd      	b.n	80018c6 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 80016ca:	f7ff fca9 	bl	8001020 <SD_PowerOn>
      res = RES_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80016d4:	e0f7      	b.n	80018c6 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	1c5c      	adds	r4, r3, #1
 80016da:	f7ff fcf9 	bl	80010d0 <SD_CheckPower>
 80016de:	4603      	mov	r3, r0
 80016e0:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80016e2:	2300      	movs	r3, #0
 80016e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80016e8:	e0ed      	b.n	80018c6 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 80016ea:	2304      	movs	r3, #4
 80016ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016f0:	e0e9      	b.n	80018c6 <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 80016f2:	4b78      	ldr	r3, [pc, #480]	; (80018d4 <SD_disk_ioctl+0x260>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001700:	2303      	movs	r3, #3
 8001702:	e0e2      	b.n	80018ca <SD_disk_ioctl+0x256>
    
    SELECT();
 8001704:	f7ff fc12 	bl	8000f2c <SELECT>
    
    switch (ctrl) 
 8001708:	79bb      	ldrb	r3, [r7, #6]
 800170a:	2b0d      	cmp	r3, #13
 800170c:	f200 80cc 	bhi.w	80018a8 <SD_disk_ioctl+0x234>
 8001710:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <SD_disk_ioctl+0xa4>)
 8001712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001716:	bf00      	nop
 8001718:	08001813 	.word	0x08001813
 800171c:	08001751 	.word	0x08001751
 8001720:	08001803 	.word	0x08001803
 8001724:	080018a9 	.word	0x080018a9
 8001728:	080018a9 	.word	0x080018a9
 800172c:	080018a9 	.word	0x080018a9
 8001730:	080018a9 	.word	0x080018a9
 8001734:	080018a9 	.word	0x080018a9
 8001738:	080018a9 	.word	0x080018a9
 800173c:	080018a9 	.word	0x080018a9
 8001740:	080018a9 	.word	0x080018a9
 8001744:	08001825 	.word	0x08001825
 8001748:	08001849 	.word	0x08001849
 800174c:	0800186d 	.word	0x0800186d
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001750:	2100      	movs	r1, #0
 8001752:	2049      	movs	r0, #73	; 0x49
 8001754:	f7ff fd50 	bl	80011f8 <SD_SendCmd>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	f040 80a8 	bne.w	80018b0 <SD_disk_ioctl+0x23c>
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2110      	movs	r1, #16
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fcbc 	bl	80010e4 <SD_RxDataBlock>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 809e 	beq.w	80018b0 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8001774:	7b3b      	ldrb	r3, [r7, #12]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b01      	cmp	r3, #1
 800177c:	d10e      	bne.n	800179c <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800177e:	7d7b      	ldrb	r3, [r7, #21]
 8001780:	b29a      	uxth	r2, r3
 8001782:	7d3b      	ldrb	r3, [r7, #20]
 8001784:	b29b      	uxth	r3, r3
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	b29b      	uxth	r3, r3
 800178a:	4413      	add	r3, r2
 800178c:	b29b      	uxth	r3, r3
 800178e:	3301      	adds	r3, #1
 8001790:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001792:	8bfb      	ldrh	r3, [r7, #30]
 8001794:	029a      	lsls	r2, r3, #10
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e02e      	b.n	80017fa <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800179c:	7c7b      	ldrb	r3, [r7, #17]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	7dbb      	ldrb	r3, [r7, #22]
 80017a6:	09db      	lsrs	r3, r3, #7
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	7d7b      	ldrb	r3, [r7, #21]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f003 0306 	and.w	r3, r3, #6
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	3302      	adds	r3, #2
 80017c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80017c4:	7d3b      	ldrb	r3, [r7, #20]
 80017c6:	099b      	lsrs	r3, r3, #6
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	7cfb      	ldrb	r3, [r7, #19]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	7cbb      	ldrb	r3, [r7, #18]
 80017da:	029b      	lsls	r3, r3, #10
 80017dc:	b29b      	uxth	r3, r3
 80017de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	3301      	adds	r3, #1
 80017ea:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80017ec:	8bfa      	ldrh	r2, [r7, #30]
 80017ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017f2:	3b09      	subs	r3, #9
 80017f4:	409a      	lsls	r2, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001800:	e056      	b.n	80018b0 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001808:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001810:	e055      	b.n	80018be <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001812:	f7ff fbe9 	bl	8000fe8 <SD_ReadyWait>
 8001816:	4603      	mov	r3, r0
 8001818:	2bff      	cmp	r3, #255	; 0xff
 800181a:	d14b      	bne.n	80018b4 <SD_disk_ioctl+0x240>
        res = RES_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001822:	e047      	b.n	80018b4 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001824:	2100      	movs	r1, #0
 8001826:	2049      	movs	r0, #73	; 0x49
 8001828:	f7ff fce6 	bl	80011f8 <SD_SendCmd>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d142      	bne.n	80018b8 <SD_disk_ioctl+0x244>
 8001832:	2110      	movs	r1, #16
 8001834:	6a38      	ldr	r0, [r7, #32]
 8001836:	f7ff fc55 	bl	80010e4 <SD_RxDataBlock>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d03b      	beq.n	80018b8 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001846:	e037      	b.n	80018b8 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001848:	2100      	movs	r1, #0
 800184a:	204a      	movs	r0, #74	; 0x4a
 800184c:	f7ff fcd4 	bl	80011f8 <SD_SendCmd>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d132      	bne.n	80018bc <SD_disk_ioctl+0x248>
 8001856:	2110      	movs	r1, #16
 8001858:	6a38      	ldr	r0, [r7, #32]
 800185a:	f7ff fc43 	bl	80010e4 <SD_RxDataBlock>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d02b      	beq.n	80018bc <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800186a:	e027      	b.n	80018bc <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 800186c:	2100      	movs	r1, #0
 800186e:	207a      	movs	r0, #122	; 0x7a
 8001870:	f7ff fcc2 	bl	80011f8 <SD_SendCmd>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d116      	bne.n	80018a8 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 800187a:	2300      	movs	r3, #0
 800187c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001880:	e00b      	b.n	800189a <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001882:	6a3c      	ldr	r4, [r7, #32]
 8001884:	1c63      	adds	r3, r4, #1
 8001886:	623b      	str	r3, [r7, #32]
 8001888:	f7ff fb82 	bl	8000f90 <SPI_RxByte>
 800188c:	4603      	mov	r3, r0
 800188e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001890:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001894:	3301      	adds	r3, #1
 8001896:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800189a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d9ef      	bls.n	8001882 <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 80018a8:	2304      	movs	r3, #4
 80018aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018ae:	e006      	b.n	80018be <SD_disk_ioctl+0x24a>
      break;
 80018b0:	bf00      	nop
 80018b2:	e004      	b.n	80018be <SD_disk_ioctl+0x24a>
      break;
 80018b4:	bf00      	nop
 80018b6:	e002      	b.n	80018be <SD_disk_ioctl+0x24a>
      break;
 80018b8:	bf00      	nop
 80018ba:	e000      	b.n	80018be <SD_disk_ioctl+0x24a>
      break;
 80018bc:	bf00      	nop
    }
    
    DESELECT();
 80018be:	f7ff fb41 	bl	8000f44 <DESELECT>
    SPI_RxByte();
 80018c2:	f7ff fb65 	bl	8000f90 <SPI_RxByte>
  }
  
  return res;
 80018c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	372c      	adds	r7, #44	; 0x2c
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd90      	pop	{r4, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000010 	.word	0x20000010

080018d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80018e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d013      	beq.n	8001918 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80018f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80018f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00b      	beq.n	8001918 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001900:	e000      	b.n	8001904 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001902:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001904:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f9      	beq.n	8001902 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800190e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001918:	687b      	ldr	r3, [r7, #4]
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <_write>:
 *              to be printed 
 *              to the screen 
 * @param len -- character passed in 
 */
int _write(int file, char *ptr, int len)
 {
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
	 int DataIdx;
	 for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e009      	b.n	800194a <_write+0x26>
	 {
		 ITM_SendChar(*ptr++);
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	60ba      	str	r2, [r7, #8]
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ffca 	bl	80018d8 <ITM_SendChar>
	 for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	3301      	adds	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	dbf1      	blt.n	8001936 <_write+0x12>
	 }
	 return len;
 8001952:	687b      	ldr	r3, [r7, #4]
 }
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001960:	f001 fc92 	bl	8003288 <HAL_Init>
  /* USER CODE BEGIN Init */



  /* Configure time keeping flags */
  time.led_fast_blink = false;
 8001964:	4b3c      	ldr	r3, [pc, #240]	; (8001a58 <main+0xfc>)
 8001966:	2200      	movs	r2, #0
 8001968:	719a      	strb	r2, [r3, #6]
  time.flag_10ms_tick = false;
 800196a:	4b3b      	ldr	r3, [pc, #236]	; (8001a58 <main+0xfc>)
 800196c:	2200      	movs	r2, #0
 800196e:	70da      	strb	r2, [r3, #3]
  time.flag_100ms_tick = false;
 8001970:	4b39      	ldr	r3, [pc, #228]	; (8001a58 <main+0xfc>)
 8001972:	2200      	movs	r2, #0
 8001974:	711a      	strb	r2, [r3, #4]
  time.flag_500ms_tick = false;
 8001976:	4b38      	ldr	r3, [pc, #224]	; (8001a58 <main+0xfc>)
 8001978:	2200      	movs	r2, #0
 800197a:	715a      	strb	r2, [r3, #5]
  
  /* Configure button-related flags */
  btn.up_btn_press_ctr = 0;   
 800197c:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <main+0x100>)
 800197e:	2200      	movs	r2, #0
 8001980:	705a      	strb	r2, [r3, #1]
  btn.rt_btn_press_ctr = 0;   
 8001982:	4b36      	ldr	r3, [pc, #216]	; (8001a5c <main+0x100>)
 8001984:	2200      	movs	r2, #0
 8001986:	709a      	strb	r2, [r3, #2]
  btn.dn_btn_press_ctr = 0;   
 8001988:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <main+0x100>)
 800198a:	2200      	movs	r2, #0
 800198c:	70da      	strb	r2, [r3, #3]
  btn.lt_btn_press_ctr = 0;
 800198e:	4b33      	ldr	r3, [pc, #204]	; (8001a5c <main+0x100>)
 8001990:	2200      	movs	r2, #0
 8001992:	711a      	strb	r2, [r3, #4]

  btn.button_press_status = NO_BTN_PUSHED;   
 8001994:	4b31      	ldr	r3, [pc, #196]	; (8001a5c <main+0x100>)
 8001996:	2204      	movs	r2, #4
 8001998:	701a      	strb	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199a:	f000 f871 	bl	8001a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199e:	f000 fad3 	bl	8001f48 <MX_GPIO_Init>
  MX_ADC1_Init();
 80019a2:	f000 f8d1 	bl	8001b48 <MX_ADC1_Init>
  MX_I2C2_Init();
 80019a6:	f000 f90d 	bl	8001bc4 <MX_I2C2_Init>
  MX_FATFS_Init();
 80019aa:	f005 f88d 	bl	8006ac8 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 80019ae:	f000 faa1 	bl	8001ef4 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80019b2:	f000 f935 	bl	8001c20 <MX_SPI1_Init>
  MX_TIM2_Init();
 80019b6:	f000 f99f 	bl	8001cf8 <MX_TIM2_Init>
  MX_SPI2_Init();
 80019ba:	f000 f967 	bl	8001c8c <MX_SPI2_Init>
  MX_TIM3_Init();
 80019be:	f000 fa0d 	bl	8001ddc <MX_TIM3_Init>
  MX_TIM6_Init();
 80019c2:	f000 fa61 	bl	8001e88 <MX_TIM6_Init>
  // print_string("Chip Reset.",LF);
  // print_16b_binary_rep(255,LF);
  // print_float(3.14159,LF);

//  HAL_TIM_Base_Start(&htim2);			// Start timer #2 for us delay timer
  HAL_TIM_Base_Start_IT(&htim6);
 80019c6:	4826      	ldr	r0, [pc, #152]	; (8001a60 <main+0x104>)
 80019c8:	f004 f8d2 	bl	8005b70 <HAL_TIM_Base_Start_IT>

  //TODO ABOVE IS TEST CODE
  
  
  //TODO Display test code 
  setFont(&FreeSans9pt7b);
 80019cc:	4825      	ldr	r0, [pc, #148]	; (8001a64 <main+0x108>)
 80019ce:	f000 ffa9 	bl	8002924 <setFont>
  setTextSize(1,1);             // 21 characters per line
 80019d2:	2101      	movs	r1, #1
 80019d4:	2001      	movs	r0, #1
 80019d6:	f000 fcd1 	bl	800237c <setTextSize>
  display_oled_init(SSD1306_SWITCHCAPVCC, SCREEN_WIDTH, SCREEN_HEIGHT);
 80019da:	2240      	movs	r2, #64	; 0x40
 80019dc:	2180      	movs	r1, #128	; 0x80
 80019de:	2002      	movs	r0, #2
 80019e0:	f000 fc28 	bl	8002234 <display_oled_init>
  updateDisplay();
 80019e4:	f001 f8a4 	bl	8002b30 <updateDisplay>
  // writeOledString("Hello Awesome\n", SSD1306_WHITE);
  // writeOledString("World!", SSD1306_WHITE);
  // updateDisplay();

  // HAL_Delay(2500);
  oled_clear_buffer();
 80019e8:	f000 fce8 	bl	80023bc <oled_clear_buffer>
  setCursor(0,15);
 80019ec:	210f      	movs	r1, #15
 80019ee:	2000      	movs	r0, #0
 80019f0:	f000 fe0a 	bl	8002608 <setCursor>
  writeOledString("Let's Go\n", SSD1306_WHITE);
 80019f4:	2101      	movs	r1, #1
 80019f6:	481c      	ldr	r0, [pc, #112]	; (8001a68 <main+0x10c>)
 80019f8:	f000 fe1c 	bl	8002634 <writeOledString>
  writeOledString("Brandon!!", SSD1306_WHITE);
 80019fc:	2101      	movs	r1, #1
 80019fe:	481b      	ldr	r0, [pc, #108]	; (8001a6c <main+0x110>)
 8001a00:	f000 fe18 	bl	8002634 <writeOledString>
  updateDisplay();
 8001a04:	f001 f894 	bl	8002b30 <updateDisplay>
  //TODO START A2D Test Code
  /** 
   * Initialization for the 
   * A2D IC 
  */ 
  HAL_GPIO_WritePin(ADC_SPI1_CSn_GPIO_Port, ADC_SPI1_CSn_Pin, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	2110      	movs	r1, #16
 8001a0c:	4818      	ldr	r0, [pc, #96]	; (8001a70 <main+0x114>)
 8001a0e:	f002 f965 	bl	8003cdc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001a12:	2001      	movs	r0, #1
 8001a14:	f001 fc9a 	bl	800334c <HAL_Delay>
  init_ad4681(&a2d);
 8001a18:	4816      	ldr	r0, [pc, #88]	; (8001a74 <main+0x118>)
 8001a1a:	f7ff fa1d 	bl	8000e58 <init_ad4681>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    
    if(time.flag_10ms_tick) {
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <main+0xfc>)
 8001a20:	78db      	ldrb	r3, [r3, #3]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <main+0xd0>
      time.flag_10ms_tick = false;
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <main+0xfc>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	70da      	strb	r2, [r3, #3]
      // evaluate_button_inputs();


    }

    if(time.flag_100ms_tick) {
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <main+0xfc>)
 8001a2e:	791b      	ldrb	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <main+0xde>
      time.flag_100ms_tick = false;
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <main+0xfc>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	711a      	strb	r2, [r3, #4]
      
      /* Update Display */
      // update_screen();
    }

    if(time.flag_500ms_tick) {
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <main+0xfc>)
 8001a3c:	795b      	ldrb	r3, [r3, #5]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0ed      	beq.n	8001a1e <main+0xc2>
      time.flag_500ms_tick = false;
 8001a42:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <main+0xfc>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	715a      	strb	r2, [r3, #5]
      HAL_GPIO_TogglePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin);
 8001a48:	2102      	movs	r1, #2
 8001a4a:	480b      	ldr	r0, [pc, #44]	; (8001a78 <main+0x11c>)
 8001a4c:	f002 f95e 	bl	8003d0c <HAL_GPIO_TogglePin>
      printf("Hello World!");
 8001a50:	480a      	ldr	r0, [pc, #40]	; (8001a7c <main+0x120>)
 8001a52:	f005 fe3f 	bl	80076d4 <iprintf>
    if(time.flag_10ms_tick) {
 8001a56:	e7e2      	b.n	8001a1e <main+0xc2>
 8001a58:	2000143c 	.word	0x2000143c
 8001a5c:	200025bc 	.word	0x200025bc
 8001a60:	200013f4 	.word	0x200013f4
 8001a64:	20000000 	.word	0x20000000
 8001a68:	08009a7c 	.word	0x08009a7c
 8001a6c:	08009a88 	.word	0x08009a88
 8001a70:	40010800 	.word	0x40010800
 8001a74:	20001444 	.word	0x20001444
 8001a78:	40011800 	.word	0x40011800
 8001a7c:	08009a94 	.word	0x08009a94

08001a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b09c      	sub	sp, #112	; 0x70
 8001a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a8a:	2238      	movs	r2, #56	; 0x38
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f005 f912 	bl	8006cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f005 f904 	bl	8006cb8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ab4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ab8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001aba:	2301      	movs	r3, #1
 8001abc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ace:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ad0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ad4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ada:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 fd78 	bl	80045d4 <HAL_RCC_OscConfig>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001aea:	f000 fb37 	bl	800215c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aee:	230f      	movs	r3, #15
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001af2:	2302      	movs	r3, #2
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af6:	2300      	movs	r3, #0
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001afe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b00:	2300      	movs	r3, #0
 8001b02:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b08:	2102      	movs	r1, #2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f003 f878 	bl	8004c00 <HAL_RCC_ClockConfig>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b16:	f000 fb21 	bl	800215c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b22:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fa8a 	bl	8005040 <HAL_RCCEx_PeriphCLKConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001b32:	f000 fb13 	bl	800215c <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001b36:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <SystemClock_Config+0xc4>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
}
 8001b3c:	bf00      	nop
 8001b3e:	3770      	adds	r7, #112	; 0x70
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	42420070 	.word	0x42420070

08001b48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <MX_ADC1_Init+0x74>)
 8001b5a:	4a19      	ldr	r2, [pc, #100]	; (8001bc0 <MX_ADC1_Init+0x78>)
 8001b5c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <MX_ADC1_Init+0x74>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b64:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <MX_ADC1_Init+0x74>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <MX_ADC1_Init+0x74>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <MX_ADC1_Init+0x74>)
 8001b72:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b76:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b78:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <MX_ADC1_Init+0x74>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <MX_ADC1_Init+0x74>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b84:	480d      	ldr	r0, [pc, #52]	; (8001bbc <MX_ADC1_Init+0x74>)
 8001b86:	f001 fc05 	bl	8003394 <HAL_ADC_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001b90:	f000 fae4 	bl	800215c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001b94:	230a      	movs	r3, #10
 8001b96:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4805      	ldr	r0, [pc, #20]	; (8001bbc <MX_ADC1_Init+0x74>)
 8001ba6:	f001 fccd 	bl	8003544 <HAL_ADC_ConfigChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001bb0:	f000 fad4 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	2000137c 	.word	0x2000137c
 8001bc0:	40012400 	.word	0x40012400

08001bc4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <MX_I2C2_Init+0x50>)
 8001bca:	4a13      	ldr	r2, [pc, #76]	; (8001c18 <MX_I2C2_Init+0x54>)
 8001bcc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_I2C2_Init+0x50>)
 8001bd0:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <MX_I2C2_Init+0x58>)
 8001bd2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <MX_I2C2_Init+0x50>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_I2C2_Init+0x50>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_I2C2_Init+0x50>)
 8001be2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001be6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <MX_I2C2_Init+0x50>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_I2C2_Init+0x50>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bf4:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <MX_I2C2_Init+0x50>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_I2C2_Init+0x50>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c00:	4804      	ldr	r0, [pc, #16]	; (8001c14 <MX_I2C2_Init+0x50>)
 8001c02:	f002 f89d 	bl	8003d40 <HAL_I2C_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c0c:	f000 faa6 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	200012dc 	.word	0x200012dc
 8001c18:	40005800 	.word	0x40005800
 8001c1c:	000186a0 	.word	0x000186a0

08001c20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c26:	4a18      	ldr	r2, [pc, #96]	; (8001c88 <MX_SPI1_Init+0x68>)
 8001c28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c2a:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c54:	2238      	movs	r2, #56	; 0x38
 8001c56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c64:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c6c:	220a      	movs	r2, #10
 8001c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c70:	4804      	ldr	r0, [pc, #16]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c72:	f003 fb17 	bl	80052a4 <HAL_SPI_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c7c:	f000 fa6e 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20001484 	.word	0x20001484
 8001c88:	40013000 	.word	0x40013000

08001c8c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c90:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <MX_SPI2_Init+0x64>)
 8001c92:	4a18      	ldr	r2, [pc, #96]	; (8001cf4 <MX_SPI2_Init+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <MX_SPI2_Init+0x64>)
 8001c98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <MX_SPI2_Init+0x64>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <MX_SPI2_Init+0x64>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001caa:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <MX_SPI2_Init+0x64>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <MX_SPI2_Init+0x64>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <MX_SPI2_Init+0x64>)
 8001cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cbc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_SPI2_Init+0x64>)
 8001cc0:	2208      	movs	r2, #8
 8001cc2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <MX_SPI2_Init+0x64>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_SPI2_Init+0x64>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <MX_SPI2_Init+0x64>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_SPI2_Init+0x64>)
 8001cd8:	220a      	movs	r2, #10
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cdc:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <MX_SPI2_Init+0x64>)
 8001cde:	f003 fae1 	bl	80052a4 <HAL_SPI_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ce8:	f000 fa38 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000254 	.word	0x20000254
 8001cf4:	40003800 	.word	0x40003800

08001cf8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08e      	sub	sp, #56	; 0x38
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d0c:	f107 0320 	add.w	r3, r7, #32
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
 8001d24:	615a      	str	r2, [r3, #20]
 8001d26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d28:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <MX_TIM2_Init+0xe0>)
 8001d2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001d30:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <MX_TIM2_Init+0xe0>)
 8001d32:	2247      	movs	r2, #71	; 0x47
 8001d34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d36:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <MX_TIM2_Init+0xe0>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d3c:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <MX_TIM2_Init+0xe0>)
 8001d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <MX_TIM2_Init+0xe0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4a:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <MX_TIM2_Init+0xe0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d50:	4821      	ldr	r0, [pc, #132]	; (8001dd8 <MX_TIM2_Init+0xe0>)
 8001d52:	f003 febd 	bl	8005ad0 <HAL_TIM_Base_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001d5c:	f000 f9fe 	bl	800215c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	481a      	ldr	r0, [pc, #104]	; (8001dd8 <MX_TIM2_Init+0xe0>)
 8001d6e:	f004 f909 	bl	8005f84 <HAL_TIM_ConfigClockSource>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001d78:	f000 f9f0 	bl	800215c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001d7c:	4816      	ldr	r0, [pc, #88]	; (8001dd8 <MX_TIM2_Init+0xe0>)
 8001d7e:	f003 ff51 	bl	8005c24 <HAL_TIM_OC_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001d88:	f000 f9e8 	bl	800215c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d94:	f107 0320 	add.w	r3, r7, #32
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480f      	ldr	r0, [pc, #60]	; (8001dd8 <MX_TIM2_Init+0xe0>)
 8001d9c:	f004 fc64 	bl	8006668 <HAL_TIMEx_MasterConfigSynchronization>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001da6:	f000 f9d9 	bl	800215c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <MX_TIM2_Init+0xe0>)
 8001dc2:	f004 f887 	bl	8005ed4 <HAL_TIM_OC_ConfigChannel>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001dcc:	f000 f9c6 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dd0:	bf00      	nop
 8001dd2:	3738      	adds	r7, #56	; 0x38
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	200014dc 	.word	0x200014dc

08001ddc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de2:	f107 0320 	add.w	r3, r7, #32
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
 8001df8:	611a      	str	r2, [r3, #16]
 8001dfa:	615a      	str	r2, [r3, #20]
 8001dfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <MX_TIM3_Init+0xa4>)
 8001e00:	4a20      	ldr	r2, [pc, #128]	; (8001e84 <MX_TIM3_Init+0xa8>)
 8001e02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001e04:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <MX_TIM3_Init+0xa4>)
 8001e06:	2247      	movs	r2, #71	; 0x47
 8001e08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <MX_TIM3_Init+0xa4>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <MX_TIM3_Init+0xa4>)
 8001e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <MX_TIM3_Init+0xa4>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <MX_TIM3_Init+0xa4>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001e24:	4816      	ldr	r0, [pc, #88]	; (8001e80 <MX_TIM3_Init+0xa4>)
 8001e26:	f003 fefd 	bl	8005c24 <HAL_TIM_OC_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001e30:	f000 f994 	bl	800215c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e3c:	f107 0320 	add.w	r3, r7, #32
 8001e40:	4619      	mov	r1, r3
 8001e42:	480f      	ldr	r0, [pc, #60]	; (8001e80 <MX_TIM3_Init+0xa4>)
 8001e44:	f004 fc10 	bl	8006668 <HAL_TIMEx_MasterConfigSynchronization>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001e4e:	f000 f985 	bl	800215c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	2200      	movs	r2, #0
 8001e66:	4619      	mov	r1, r3
 8001e68:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_TIM3_Init+0xa4>)
 8001e6a:	f004 f833 	bl	8005ed4 <HAL_TIM_OC_ConfigChannel>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001e74:	f000 f972 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	3728      	adds	r7, #40	; 0x28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20001334 	.word	0x20001334
 8001e84:	40000400 	.word	0x40000400

08001e88 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8e:	463b      	mov	r3, r7
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <MX_TIM6_Init+0x64>)
 8001e98:	4a15      	ldr	r2, [pc, #84]	; (8001ef0 <MX_TIM6_Init+0x68>)
 8001e9a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000-1;
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <MX_TIM6_Init+0x64>)
 8001e9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ea2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <MX_TIM6_Init+0x64>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 720-1;
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <MX_TIM6_Init+0x64>)
 8001eac:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001eb0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <MX_TIM6_Init+0x64>)
 8001eb4:	2280      	movs	r2, #128	; 0x80
 8001eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001eb8:	480c      	ldr	r0, [pc, #48]	; (8001eec <MX_TIM6_Init+0x64>)
 8001eba:	f003 fe09 	bl	8005ad0 <HAL_TIM_Base_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001ec4:	f000 f94a 	bl	800215c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ed0:	463b      	mov	r3, r7
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4805      	ldr	r0, [pc, #20]	; (8001eec <MX_TIM6_Init+0x64>)
 8001ed6:	f004 fbc7 	bl	8006668 <HAL_TIMEx_MasterConfigSynchronization>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001ee0:	f000 f93c 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	200013f4 	.word	0x200013f4
 8001ef0:	40001000 	.word	0x40001000

08001ef4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <MX_USART1_UART_Init+0x4c>)
 8001efa:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <MX_USART1_UART_Init+0x50>)
 8001efc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <MX_USART1_UART_Init+0x4c>)
 8001f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <MX_USART1_UART_Init+0x4c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <MX_USART1_UART_Init+0x4c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <MX_USART1_UART_Init+0x4c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <MX_USART1_UART_Init+0x4c>)
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <MX_USART1_UART_Init+0x4c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <MX_USART1_UART_Init+0x4c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <MX_USART1_UART_Init+0x4c>)
 8001f2c:	f004 fc14 	bl	8006758 <HAL_UART_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f36:	f000 f911 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200013b0 	.word	0x200013b0
 8001f44:	40013800 	.word	0x40013800

08001f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	; 0x28
 8001f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4e:	f107 0318 	add.w	r3, r7, #24
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f5c:	4b57      	ldr	r3, [pc, #348]	; (80020bc <MX_GPIO_Init+0x174>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	4a56      	ldr	r2, [pc, #344]	; (80020bc <MX_GPIO_Init+0x174>)
 8001f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f66:	6193      	str	r3, [r2, #24]
 8001f68:	4b54      	ldr	r3, [pc, #336]	; (80020bc <MX_GPIO_Init+0x174>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f74:	4b51      	ldr	r3, [pc, #324]	; (80020bc <MX_GPIO_Init+0x174>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	4a50      	ldr	r2, [pc, #320]	; (80020bc <MX_GPIO_Init+0x174>)
 8001f7a:	f043 0308 	orr.w	r3, r3, #8
 8001f7e:	6193      	str	r3, [r2, #24]
 8001f80:	4b4e      	ldr	r3, [pc, #312]	; (80020bc <MX_GPIO_Init+0x174>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8c:	4b4b      	ldr	r3, [pc, #300]	; (80020bc <MX_GPIO_Init+0x174>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	4a4a      	ldr	r2, [pc, #296]	; (80020bc <MX_GPIO_Init+0x174>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6193      	str	r3, [r2, #24]
 8001f98:	4b48      	ldr	r3, [pc, #288]	; (80020bc <MX_GPIO_Init+0x174>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa4:	4b45      	ldr	r3, [pc, #276]	; (80020bc <MX_GPIO_Init+0x174>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	4a44      	ldr	r2, [pc, #272]	; (80020bc <MX_GPIO_Init+0x174>)
 8001faa:	f043 0310 	orr.w	r3, r3, #16
 8001fae:	6193      	str	r3, [r2, #24]
 8001fb0:	4b42      	ldr	r3, [pc, #264]	; (80020bc <MX_GPIO_Init+0x174>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fbc:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <MX_GPIO_Init+0x174>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4a3e      	ldr	r2, [pc, #248]	; (80020bc <MX_GPIO_Init+0x174>)
 8001fc2:	f043 0320 	orr.w	r3, r3, #32
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b3c      	ldr	r3, [pc, #240]	; (80020bc <MX_GPIO_Init+0x174>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_DUT_PWR_Pin|HLTH_LED_Pin|LED4_Pin|LED1_Pin
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f240 7186 	movw	r1, #1926	; 0x786
 8001fda:	4839      	ldr	r0, [pc, #228]	; (80020c0 <MX_GPIO_Init+0x178>)
 8001fdc:	f001 fe7e 	bl	8003cdc <HAL_GPIO_WritePin>
                          |LED2_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SWO_Pin|SD_SPI2_CSn_Pin, GPIO_PIN_RESET);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8001fe6:	4837      	ldr	r0, [pc, #220]	; (80020c4 <MX_GPIO_Init+0x17c>)
 8001fe8:	f001 fe78 	bl	8003cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_SPI1_CSn_GPIO_Port, ADC_SPI1_CSn_Pin, GPIO_PIN_RESET);
 8001fec:	2200      	movs	r2, #0
 8001fee:	2110      	movs	r1, #16
 8001ff0:	4835      	ldr	r0, [pc, #212]	; (80020c8 <MX_GPIO_Init+0x180>)
 8001ff2:	f001 fe73 	bl	8003cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_DUT_PWR_Pin LED4_Pin LED1_Pin LED2_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = EN_DUT_PWR_Pin|LED4_Pin|LED1_Pin|LED2_Pin
 8001ff6:	f240 7384 	movw	r3, #1924	; 0x784
 8001ffa:	61bb      	str	r3, [r7, #24]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2302      	movs	r3, #2
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002008:	f107 0318 	add.w	r3, r7, #24
 800200c:	4619      	mov	r1, r3
 800200e:	482c      	ldr	r0, [pc, #176]	; (80020c0 <MX_GPIO_Init+0x178>)
 8002010:	f001 fce0 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWO_Pin SD_SPI2_CSn_Pin */
  GPIO_InitStruct.Pin = SWO_Pin|SD_SPI2_CSn_Pin;
 8002014:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8002018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201a:	2301      	movs	r3, #1
 800201c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2302      	movs	r3, #2
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	f107 0318 	add.w	r3, r7, #24
 800202a:	4619      	mov	r1, r3
 800202c:	4825      	ldr	r0, [pc, #148]	; (80020c4 <MX_GPIO_Init+0x17c>)
 800202e:	f001 fcd1 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1_n_Pin PB2_n_Pin PB3_n_Pin PB4_n_Pin */
  GPIO_InitStruct.Pin = PB1_n_Pin|PB2_n_Pin|PB3_n_Pin|PB4_n_Pin;
 8002032:	2378      	movs	r3, #120	; 0x78
 8002034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800203e:	f107 0318 	add.w	r3, r7, #24
 8002042:	4619      	mov	r1, r3
 8002044:	481e      	ldr	r0, [pc, #120]	; (80020c0 <MX_GPIO_Init+0x178>)
 8002046:	f001 fcc5 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HLTH_LED_Pin */
  GPIO_InitStruct.Pin = HLTH_LED_Pin;
 800204a:	2302      	movs	r3, #2
 800204c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800204e:	2311      	movs	r3, #17
 8002050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2302      	movs	r3, #2
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HLTH_LED_GPIO_Port, &GPIO_InitStruct);
 800205a:	f107 0318 	add.w	r3, r7, #24
 800205e:	4619      	mov	r1, r3
 8002060:	4817      	ldr	r0, [pc, #92]	; (80020c0 <MX_GPIO_Init+0x178>)
 8002062:	f001 fcb7 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_SPI1_CSn_Pin */
  GPIO_InitStruct.Pin = ADC_SPI1_CSn_Pin;
 8002066:	2310      	movs	r3, #16
 8002068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206a:	2301      	movs	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2302      	movs	r3, #2
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ADC_SPI1_CSn_GPIO_Port, &GPIO_InitStruct);
 8002076:	f107 0318 	add.w	r3, r7, #24
 800207a:	4619      	mov	r1, r3
 800207c:	4812      	ldr	r0, [pc, #72]	; (80020c8 <MX_GPIO_Init+0x180>)
 800207e:	f001 fca9 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : REV_2_Pin REV_1_Pin REV_0_Pin */
  GPIO_InitStruct.Pin = REV_2_Pin|REV_1_Pin|REV_0_Pin;
 8002082:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002090:	f107 0318 	add.w	r3, r7, #24
 8002094:	4619      	mov	r1, r3
 8002096:	480d      	ldr	r0, [pc, #52]	; (80020cc <MX_GPIO_Init+0x184>)
 8002098:	f001 fc9c 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_ALRTn_Pin */
  GPIO_InitStruct.Pin = ADC_ALRTn_Pin;
 800209c:	2308      	movs	r3, #8
 800209e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <MX_GPIO_Init+0x188>)
 80020a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADC_ALRTn_GPIO_Port, &GPIO_InitStruct);
 80020a8:	f107 0318 	add.w	r3, r7, #24
 80020ac:	4619      	mov	r1, r3
 80020ae:	4806      	ldr	r0, [pc, #24]	; (80020c8 <MX_GPIO_Init+0x180>)
 80020b0:	f001 fc90 	bl	80039d4 <HAL_GPIO_Init>

}
 80020b4:	bf00      	nop
 80020b6:	3728      	adds	r7, #40	; 0x28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40011800 	.word	0x40011800
 80020c4:	40010c00 	.word	0x40010c00
 80020c8:	40010800 	.word	0x40010800
 80020cc:	40011400 	.word	0x40011400
 80020d0:	10210000 	.word	0x10210000

080020d4 <HAL_TIM_PeriodElapsedCallback>:
  /* Button processing is complete, so reset button status*/
  btn.button_press_status = NO_BTN_PUSHED;

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a1d      	ldr	r2, [pc, #116]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d132      	bne.n	800214a <HAL_TIM_PeriodElapsedCallback+0x76>
	 	time.flag_10ms_tick = true;
 80020e4:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	70da      	strb	r2, [r3, #3]

     if(time.ticks10ms == 9) {
 80020ea:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b09      	cmp	r3, #9
 80020f0:	d125      	bne.n	800213e <HAL_TIM_PeriodElapsedCallback+0x6a>
       time.ticks10ms = 0;
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
       time.flag_100ms_tick = true;
 80020f8:	4b17      	ldr	r3, [pc, #92]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	711a      	strb	r2, [r3, #4]

       if(time.ticks100ms == 4) {
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002100:	785b      	ldrb	r3, [r3, #1]
 8002102:	2b04      	cmp	r3, #4
 8002104:	d114      	bne.n	8002130 <HAL_TIM_PeriodElapsedCallback+0x5c>
         time.ticks100ms = 0;
 8002106:	4b14      	ldr	r3, [pc, #80]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002108:	2200      	movs	r2, #0
 800210a:	705a      	strb	r2, [r3, #1]
         time.flag_500ms_tick = true;
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800210e:	2201      	movs	r2, #1
 8002110:	715a      	strb	r2, [r3, #5]

         if(time.ticks500ms == 119)										// One minute worth of half seconds
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002114:	789b      	ldrb	r3, [r3, #2]
 8002116:	2b77      	cmp	r3, #119	; 0x77
 8002118:	d103      	bne.n	8002122 <HAL_TIM_PeriodElapsedCallback+0x4e>
           time.ticks500ms = 0;
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800211c:	2200      	movs	r2, #0
 800211e:	709a      	strb	r2, [r3, #2]
     else {
       time.ticks10ms += 1;
     }

	}
}
 8002120:	e013      	b.n	800214a <HAL_TIM_PeriodElapsedCallback+0x76>
           time.ticks500ms += 1;
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002124:	789b      	ldrb	r3, [r3, #2]
 8002126:	3301      	adds	r3, #1
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800212c:	709a      	strb	r2, [r3, #2]
}
 800212e:	e00c      	b.n	800214a <HAL_TIM_PeriodElapsedCallback+0x76>
           time.ticks100ms += 1;
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002132:	785b      	ldrb	r3, [r3, #1]
 8002134:	3301      	adds	r3, #1
 8002136:	b2da      	uxtb	r2, r3
 8002138:	4b07      	ldr	r3, [pc, #28]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800213a:	705a      	strb	r2, [r3, #1]
}
 800213c:	e005      	b.n	800214a <HAL_TIM_PeriodElapsedCallback+0x76>
       time.ticks10ms += 1;
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	3301      	adds	r3, #1
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4b04      	ldr	r3, [pc, #16]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002148:	701a      	strb	r2, [r3, #0]
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr
 8002154:	200013f4 	.word	0x200013f4
 8002158:	2000143c 	.word	0x2000143c

0800215c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b08b      	sub	sp, #44	; 0x2c
 8002160:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002162:	b672      	cpsid	i
}
 8002164:	bf00      	nop

  char temp_string[32];        //Define the array that will hold the ASCII values
  char temp_number[8];        //Define the array that will hold the ASCII values

  /* Clear memory arrays */
  memset(temp_string, '\0', 32);                  // Destination, Source, Size
 8002166:	f107 0308 	add.w	r3, r7, #8
 800216a:	2220      	movs	r2, #32
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f004 fda2 	bl	8006cb8 <memset>
  memset(temp_number, '\0', 8);                   
 8002174:	463b      	mov	r3, r7
 8002176:	2208      	movs	r2, #8
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f004 fd9c 	bl	8006cb8 <memset>
  
  /* Clear Display */
  oled_clear_buffer();
 8002180:	f000 f91c 	bl	80023bc <oled_clear_buffer>

  /* Set Larger Text Size for title */
  setTextSize(2,2);
 8002184:	2102      	movs	r1, #2
 8002186:	2002      	movs	r0, #2
 8002188:	f000 f8f8 	bl	800237c <setTextSize>

  /* Write Title Line and Underscore */
  writeOledString("  ERROR \n", SSD1306_WHITE);
 800218c:	2101      	movs	r1, #1
 800218e:	4823      	ldr	r0, [pc, #140]	; (800221c <Error_Handler+0xc0>)
 8002190:	f000 fa50 	bl	8002634 <writeOledString>

  /* Smaller text size for underline */
  setTextSize(1,1);
 8002194:	2101      	movs	r1, #1
 8002196:	2001      	movs	r0, #1
 8002198:	f000 f8f0 	bl	800237c <setTextSize>
  writeOledString("--------------------\n", SSD1306_WHITE);
 800219c:	2101      	movs	r1, #1
 800219e:	4820      	ldr	r0, [pc, #128]	; (8002220 <Error_Handler+0xc4>)
 80021a0:	f000 fa48 	bl	8002634 <writeOledString>

  /* Print the error code */
  strcat(temp_string, "ERROR CODE: ");              
 80021a4:	f107 0308 	add.w	r3, r7, #8
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f83d 	bl	8000228 <strlen>
 80021ae:	4603      	mov	r3, r0
 80021b0:	461a      	mov	r2, r3
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	4413      	add	r3, r2
 80021b8:	4a1a      	ldr	r2, [pc, #104]	; (8002224 <Error_Handler+0xc8>)
 80021ba:	461c      	mov	r4, r3
 80021bc:	4613      	mov	r3, r2
 80021be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80021c0:	6020      	str	r0, [r4, #0]
 80021c2:	6061      	str	r1, [r4, #4]
 80021c4:	60a2      	str	r2, [r4, #8]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	7323      	strb	r3, [r4, #12]

  sprintf((char *)temp_number, "%u", err_p -> error_code);   // %u indicates unsigned decimal
 80021ca:	4b17      	ldr	r3, [pc, #92]	; (8002228 <Error_Handler+0xcc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	463b      	mov	r3, r7
 80021d4:	4915      	ldr	r1, [pc, #84]	; (800222c <Error_Handler+0xd0>)
 80021d6:	4618      	mov	r0, r3
 80021d8:	f005 faa4 	bl	8007724 <siprintf>

  strcat(temp_string, temp_number);
 80021dc:	463a      	mov	r2, r7
 80021de:	f107 0308 	add.w	r3, r7, #8
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f005 fabd 	bl	8007764 <strcat>
  strcat(temp_string, "\n");
 80021ea:	f107 0308 	add.w	r3, r7, #8
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe f81a 	bl	8000228 <strlen>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	f107 0308 	add.w	r3, r7, #8
 80021fc:	4413      	add	r3, r2
 80021fe:	490c      	ldr	r1, [pc, #48]	; (8002230 <Error_Handler+0xd4>)
 8002200:	461a      	mov	r2, r3
 8002202:	460b      	mov	r3, r1
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	8013      	strh	r3, [r2, #0]
  writeOledString(temp_string, SSD1306_WHITE);
 8002208:	f107 0308 	add.w	r3, r7, #8
 800220c:	2101      	movs	r1, #1
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fa10 	bl	8002634 <writeOledString>
  /**
   * Call function that pushes
   * local data buffer into RAM
   * of display
   */
  updateDisplay();
 8002214:	f000 fc8c 	bl	8002b30 <updateDisplay>

  while (1)
 8002218:	e7fe      	b.n	8002218 <Error_Handler+0xbc>
 800221a:	bf00      	nop
 800221c:	08009bbc 	.word	0x08009bbc
 8002220:	08009ab0 	.word	0x08009ab0
 8002224:	08009bc8 	.word	0x08009bc8
 8002228:	20001330 	.word	0x20001330
 800222c:	08009bb8 	.word	0x08009bb8
 8002230:	08009adc 	.word	0x08009adc

08002234 <display_oled_init>:
 * @note This code was borrowed from
 * Adafruit_SSD1306::begin, which can 
 * be found on line463 of Adafruit_SSD1306.cpp
 *      
 */
bool display_oled_init ( uint8_t voltage_state, uint8_t w, uint8_t h ) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
 800223e:	460b      	mov	r3, r1
 8002240:	71bb      	strb	r3, [r7, #6]
 8002242:	4613      	mov	r3, r2
 8002244:	717b      	strb	r3, [r7, #5]

    oled.screen_width = w;
 8002246:	4a48      	ldr	r2, [pc, #288]	; (8002368 <display_oled_init+0x134>)
 8002248:	79bb      	ldrb	r3, [r7, #6]
 800224a:	7053      	strb	r3, [r2, #1]
    oled.screen_height = h;
 800224c:	4a46      	ldr	r2, [pc, #280]	; (8002368 <display_oled_init+0x134>)
 800224e:	797b      	ldrb	r3, [r7, #5]
 8002250:	7093      	strb	r3, [r2, #2]

    oled.wrap_text = true;
 8002252:	4b45      	ldr	r3, [pc, #276]	; (8002368 <display_oled_init+0x134>)
 8002254:	2201      	movs	r2, #1
 8002256:	715a      	strb	r2, [r3, #5]

    /**
     * Allocate memory for the buffer
     * 
     */
    oled.screen_buffer = (uint8_t *)malloc(oled.screen_width * ((oled.screen_height + 7) / 8));
 8002258:	4b43      	ldr	r3, [pc, #268]	; (8002368 <display_oled_init+0x134>)
 800225a:	785b      	ldrb	r3, [r3, #1]
 800225c:	461a      	mov	r2, r3
 800225e:	4b42      	ldr	r3, [pc, #264]	; (8002368 <display_oled_init+0x134>)
 8002260:	789b      	ldrb	r3, [r3, #2]
 8002262:	3307      	adds	r3, #7
 8002264:	2b00      	cmp	r3, #0
 8002266:	da00      	bge.n	800226a <display_oled_init+0x36>
 8002268:	3307      	adds	r3, #7
 800226a:	10db      	asrs	r3, r3, #3
 800226c:	fb03 f302 	mul.w	r3, r3, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f004 fd19 	bl	8006ca8 <malloc>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <display_oled_init+0x134>)
 800227c:	611a      	str	r2, [r3, #16]
    /**
     * Call function to clear the local
     * buffer that eventually gets written 
     * to the display
     */
    oled_clear_buffer();
 800227e:	f000 f89d 	bl	80023bc <oled_clear_buffer>
                                        SSD1306_DISPLAYOFF,             // 0xAE
                                        SSD1306_SETDISPLAYCLOCKDIV,     // 0xD5
                                        0x80,                           // The suggest ratio is 0x80
                                        SSD1306_SETMULTIPLEX};          // 0xA8

    ssd1306_commandList(init1, sizeof(init1));	
 8002282:	2105      	movs	r1, #5
 8002284:	4839      	ldr	r0, [pc, #228]	; (800236c <display_oled_init+0x138>)
 8002286:	f000 f979 	bl	800257c <ssd1306_commandList>
    
	ssd1306_command1((uint8_t)(oled.screen_height - 1));
 800228a:	4b37      	ldr	r3, [pc, #220]	; (8002368 <display_oled_init+0x134>)
 800228c:	789b      	ldrb	r3, [r3, #2]
 800228e:	3b01      	subs	r3, #1
 8002290:	b2db      	uxtb	r3, r3
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f994 	bl	80025c0 <ssd1306_command1>
                                        SSD1306_SETDISPLAYOFFSET,       //0xD3
                                        0x00,                           //no offset
                                        SSD1306_SETSTARTLINE | 0x00,    //line #0
                                        SSD1306_CHARGEPUMP};            //0x8D
	
    ssd1306_commandList(init2, sizeof(init2));
 8002298:	2105      	movs	r1, #5
 800229a:	4835      	ldr	r0, [pc, #212]	; (8002370 <display_oled_init+0x13c>)
 800229c:	f000 f96e 	bl	800257c <ssd1306_commandList>
	
    ssd1306_command1((uint8_t)(voltage_state == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <display_oled_init+0x76>
 80022a6:	2310      	movs	r3, #16
 80022a8:	e000      	b.n	80022ac <display_oled_init+0x78>
 80022aa:	2314      	movs	r3, #20
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 f987 	bl	80025c0 <ssd1306_command1>
                                        0x00,                           //Set Co and D/C to zero
                                        SSD1306_MEMORYMODE,             // 0x20
                                        0x00,                           // 0x0 act like ks0108
                                        SSD1306_SEGREMAP | 0x01,
                                        SSD1306_COMSCANDEC};
	ssd1306_commandList(init3, sizeof(init3));
 80022b2:	2105      	movs	r1, #5
 80022b4:	482f      	ldr	r0, [pc, #188]	; (8002374 <display_oled_init+0x140>)
 80022b6:	f000 f961 	bl	800257c <ssd1306_commandList>

	uint8_t comPins = 0x02;
 80022ba:	2302      	movs	r3, #2
 80022bc:	73fb      	strb	r3, [r7, #15]
	uint8_t contrast = 0x8F;
 80022be:	238f      	movs	r3, #143	; 0x8f
 80022c0:	73bb      	strb	r3, [r7, #14]

	if ((oled.screen_width == 128) && (oled.screen_height == 32)) {
 80022c2:	4b29      	ldr	r3, [pc, #164]	; (8002368 <display_oled_init+0x134>)
 80022c4:	785b      	ldrb	r3, [r3, #1]
 80022c6:	2b80      	cmp	r3, #128	; 0x80
 80022c8:	d108      	bne.n	80022dc <display_oled_init+0xa8>
 80022ca:	4b27      	ldr	r3, [pc, #156]	; (8002368 <display_oled_init+0x134>)
 80022cc:	789b      	ldrb	r3, [r3, #2]
 80022ce:	2b20      	cmp	r3, #32
 80022d0:	d104      	bne.n	80022dc <display_oled_init+0xa8>
	  comPins = 0x02;
 80022d2:	2302      	movs	r3, #2
 80022d4:	73fb      	strb	r3, [r7, #15]
	  contrast = 0x8F;
 80022d6:	238f      	movs	r3, #143	; 0x8f
 80022d8:	73bb      	strb	r3, [r7, #14]
 80022da:	e022      	b.n	8002322 <display_oled_init+0xee>
	} 
    else if ((oled.screen_width == 128) && (oled.screen_height == 64)) {
 80022dc:	4b22      	ldr	r3, [pc, #136]	; (8002368 <display_oled_init+0x134>)
 80022de:	785b      	ldrb	r3, [r3, #1]
 80022e0:	2b80      	cmp	r3, #128	; 0x80
 80022e2:	d10d      	bne.n	8002300 <display_oled_init+0xcc>
 80022e4:	4b20      	ldr	r3, [pc, #128]	; (8002368 <display_oled_init+0x134>)
 80022e6:	789b      	ldrb	r3, [r3, #2]
 80022e8:	2b40      	cmp	r3, #64	; 0x40
 80022ea:	d109      	bne.n	8002300 <display_oled_init+0xcc>
	  comPins = 0x12;
 80022ec:	2312      	movs	r3, #18
 80022ee:	73fb      	strb	r3, [r7, #15]
	  contrast = (voltage_state == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <display_oled_init+0xc6>
 80022f6:	239f      	movs	r3, #159	; 0x9f
 80022f8:	e000      	b.n	80022fc <display_oled_init+0xc8>
 80022fa:	23cf      	movs	r3, #207	; 0xcf
 80022fc:	73bb      	strb	r3, [r7, #14]
 80022fe:	e010      	b.n	8002322 <display_oled_init+0xee>
	} 
    else if ((oled.screen_width == 96) && (oled.screen_height == 16)) {
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <display_oled_init+0x134>)
 8002302:	785b      	ldrb	r3, [r3, #1]
 8002304:	2b60      	cmp	r3, #96	; 0x60
 8002306:	d10c      	bne.n	8002322 <display_oled_init+0xee>
 8002308:	4b17      	ldr	r3, [pc, #92]	; (8002368 <display_oled_init+0x134>)
 800230a:	789b      	ldrb	r3, [r3, #2]
 800230c:	2b10      	cmp	r3, #16
 800230e:	d108      	bne.n	8002322 <display_oled_init+0xee>
	  comPins = 0x2; // ada x12
 8002310:	2302      	movs	r3, #2
 8002312:	73fb      	strb	r3, [r7, #15]
	  contrast = (voltage_state == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <display_oled_init+0xea>
 800231a:	2310      	movs	r3, #16
 800231c:	e000      	b.n	8002320 <display_oled_init+0xec>
 800231e:	23af      	movs	r3, #175	; 0xaf
 8002320:	73bb      	strb	r3, [r7, #14]
	} 
    else {
        // Other screen varieties -- TBD
	}

    ssd1306_command1(SSD1306_SETCOMPINS);
 8002322:	20da      	movs	r0, #218	; 0xda
 8002324:	f000 f94c 	bl	80025c0 <ssd1306_command1>
    ssd1306_command1(comPins);
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f948 	bl	80025c0 <ssd1306_command1>
    ssd1306_command1(SSD1306_SETCONTRAST);
 8002330:	2081      	movs	r0, #129	; 0x81
 8002332:	f000 f945 	bl	80025c0 <ssd1306_command1>
    ssd1306_command1(contrast);
 8002336:	7bbb      	ldrb	r3, [r7, #14]
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f941 	bl	80025c0 <ssd1306_command1>

    ssd1306_command1(SSD1306_SETPRECHARGE); // 0xD9
 800233e:	20d9      	movs	r0, #217	; 0xd9
 8002340:	f000 f93e 	bl	80025c0 <ssd1306_command1>
    ssd1306_command1((voltage_state == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <display_oled_init+0x11a>
 800234a:	2322      	movs	r3, #34	; 0x22
 800234c:	e000      	b.n	8002350 <display_oled_init+0x11c>
 800234e:	23f1      	movs	r3, #241	; 0xf1
 8002350:	4618      	mov	r0, r3
 8002352:	f000 f935 	bl	80025c0 <ssd1306_command1>
                                        0x40,
                                        SSD1306_DISPLAYALLON_RESUME,    // 0xA4
                                        SSD1306_NORMALDISPLAY,          // 0xA6
                                        SSD1306_DEACTIVATE_SCROLL,
                                        SSD1306_DISPLAYON};             // Main screen turn on
    ssd1306_commandList(init5, sizeof(init5));
 8002356:	2107      	movs	r1, #7
 8002358:	4807      	ldr	r0, [pc, #28]	; (8002378 <display_oled_init+0x144>)
 800235a:	f000 f90f 	bl	800257c <ssd1306_commandList>

    return(true);
 800235e:	2301      	movs	r3, #1
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000240 	.word	0x20000240
 800236c:	0800a3c0 	.word	0x0800a3c0
 8002370:	0800a3c8 	.word	0x0800a3c8
 8002374:	0800a3d0 	.word	0x0800a3d0
 8002378:	0800a3d8 	.word	0x0800a3d8

0800237c <setTextSize>:

//TODO::: The following comment is for reference only
//TODO::: see Adafruit_GFX.cpp line 1305
void setTextSize (uint8_t s_x, uint8_t s_y) {
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	460a      	mov	r2, r1
 8002386:	71fb      	strb	r3, [r7, #7]
 8002388:	4613      	mov	r3, r2
 800238a:	71bb      	strb	r3, [r7, #6]
    oled.textsize_x = (s_x > 0) ? s_x : 1;
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <setTextSize+0x1a>
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	e000      	b.n	8002398 <setTextSize+0x1c>
 8002396:	2301      	movs	r3, #1
 8002398:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <setTextSize+0x3c>)
 800239a:	70d3      	strb	r3, [r2, #3]
    oled.textsize_y = (s_y > 0) ? s_y : 1;
 800239c:	79bb      	ldrb	r3, [r7, #6]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <setTextSize+0x2a>
 80023a2:	79bb      	ldrb	r3, [r7, #6]
 80023a4:	e000      	b.n	80023a8 <setTextSize+0x2c>
 80023a6:	2301      	movs	r3, #1
 80023a8:	4a03      	ldr	r2, [pc, #12]	; (80023b8 <setTextSize+0x3c>)
 80023aa:	7113      	strb	r3, [r2, #4]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000240 	.word	0x20000240

080023bc <oled_clear_buffer>:
 * @note    Changes buffer contents only, no immediate effect on display.
 *          Follow up with a call to display(), or with other graphics
 *          commands as needed by one's own application.  Borrowed from 
 *          clearDisplay function of Adafruit_SSD1306.ccp (line 646)
*/
void oled_clear_buffer(void) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
    memset(oled.screen_buffer, 0x00, (oled.screen_width * ((oled.screen_height + 7) / 8)));
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <oled_clear_buffer+0x2c>)
 80023c2:	6918      	ldr	r0, [r3, #16]
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <oled_clear_buffer+0x2c>)
 80023c6:	785b      	ldrb	r3, [r3, #1]
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <oled_clear_buffer+0x2c>)
 80023cc:	789b      	ldrb	r3, [r3, #2]
 80023ce:	3307      	adds	r3, #7
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	da00      	bge.n	80023d6 <oled_clear_buffer+0x1a>
 80023d4:	3307      	adds	r3, #7
 80023d6:	10db      	asrs	r3, r3, #3
 80023d8:	fb03 f302 	mul.w	r3, r3, r2
 80023dc:	461a      	mov	r2, r3
 80023de:	2100      	movs	r1, #0
 80023e0:	f004 fc6a 	bl	8006cb8 <memset>
}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000240 	.word	0x20000240

080023ec <drawPixel>:
        }
    }
}


bool drawPixel(int16_t x, int16_t y, uint8_t color) {
 80023ec:	b490      	push	{r4, r7}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	80fb      	strh	r3, [r7, #6]
 80023f6:	460b      	mov	r3, r1
 80023f8:	80bb      	strh	r3, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	70fb      	strb	r3, [r7, #3]
    
    if ((x >= 0) && (x < oled.screen_width) && (y >= 0) && (y < oled.screen_height)) {
 80023fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002402:	2b00      	cmp	r3, #0
 8002404:	f2c0 80b1 	blt.w	800256a <drawPixel+0x17e>
 8002408:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800240c:	4a5a      	ldr	r2, [pc, #360]	; (8002578 <drawPixel+0x18c>)
 800240e:	7852      	ldrb	r2, [r2, #1]
 8002410:	4293      	cmp	r3, r2
 8002412:	f280 80aa 	bge.w	800256a <drawPixel+0x17e>
 8002416:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	f2c0 80a5 	blt.w	800256a <drawPixel+0x17e>
 8002420:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002424:	4a54      	ldr	r2, [pc, #336]	; (8002578 <drawPixel+0x18c>)
 8002426:	7892      	ldrb	r2, [r2, #2]
 8002428:	4293      	cmp	r3, r2
 800242a:	f280 809e 	bge.w	800256a <drawPixel+0x17e>
            // case 1:
            // ssd1306_swap(x, y);
            // x = oled.screen_width - x - 1;
            // break;
            // case 2:
        x = oled.screen_width - x - 1;
 800242e:	4b52      	ldr	r3, [pc, #328]	; (8002578 <drawPixel+0x18c>)
 8002430:	785b      	ldrb	r3, [r3, #1]
 8002432:	b29a      	uxth	r2, r3
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	b29b      	uxth	r3, r3
 800243a:	3b01      	subs	r3, #1
 800243c:	b29b      	uxth	r3, r3
 800243e:	80fb      	strh	r3, [r7, #6]
        y = oled.screen_height - y - 1;
 8002440:	4b4d      	ldr	r3, [pc, #308]	; (8002578 <drawPixel+0x18c>)
 8002442:	789b      	ldrb	r3, [r3, #2]
 8002444:	b29a      	uxth	r2, r3
 8002446:	88bb      	ldrh	r3, [r7, #4]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	b29b      	uxth	r3, r3
 800244c:	3b01      	subs	r3, #1
 800244e:	b29b      	uxth	r3, r3
 8002450:	80bb      	strh	r3, [r7, #4]
            // case 3:
            // ssd1306_swap(x, y);
            // y = oled.screen_height - y - 1;
            // break;
        
        switch (color) {
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d05c      	beq.n	8002512 <drawPixel+0x126>
 8002458:	2b02      	cmp	r3, #2
 800245a:	f300 8084 	bgt.w	8002566 <drawPixel+0x17a>
 800245e:	2b00      	cmp	r3, #0
 8002460:	d02b      	beq.n	80024ba <drawPixel+0xce>
 8002462:	2b01      	cmp	r3, #1
 8002464:	d17f      	bne.n	8002566 <drawPixel+0x17a>
            case SSD1306_WHITE:
                oled.screen_buffer[x + (y / 8) * oled.screen_width] |= (1 << (y & 7));
 8002466:	4b44      	ldr	r3, [pc, #272]	; (8002578 <drawPixel+0x18c>)
 8002468:	691a      	ldr	r2, [r3, #16]
 800246a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800246e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	da00      	bge.n	8002478 <drawPixel+0x8c>
 8002476:	3307      	adds	r3, #7
 8002478:	10db      	asrs	r3, r3, #3
 800247a:	b218      	sxth	r0, r3
 800247c:	4604      	mov	r4, r0
 800247e:	4b3e      	ldr	r3, [pc, #248]	; (8002578 <drawPixel+0x18c>)
 8002480:	785b      	ldrb	r3, [r3, #1]
 8002482:	fb03 f304 	mul.w	r3, r3, r4
 8002486:	440b      	add	r3, r1
 8002488:	4413      	add	r3, r2
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	b25a      	sxtb	r2, r3
 800248e:	88bb      	ldrh	r3, [r7, #4]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	2101      	movs	r1, #1
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	b25b      	sxtb	r3, r3
 800249c:	4313      	orrs	r3, r2
 800249e:	b25c      	sxtb	r4, r3
 80024a0:	4b35      	ldr	r3, [pc, #212]	; (8002578 <drawPixel+0x18c>)
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80024a8:	4a33      	ldr	r2, [pc, #204]	; (8002578 <drawPixel+0x18c>)
 80024aa:	7852      	ldrb	r2, [r2, #1]
 80024ac:	fb02 f200 	mul.w	r2, r2, r0
 80024b0:	440a      	add	r2, r1
 80024b2:	4413      	add	r3, r2
 80024b4:	b2e2      	uxtb	r2, r4
 80024b6:	701a      	strb	r2, [r3, #0]
            break;
 80024b8:	e055      	b.n	8002566 <drawPixel+0x17a>
            
            case SSD1306_BLACK:
                oled.screen_buffer[x + (y / 8) * oled.screen_width] &= ~(1 << (y & 7));
 80024ba:	4b2f      	ldr	r3, [pc, #188]	; (8002578 <drawPixel+0x18c>)
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80024c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	da00      	bge.n	80024cc <drawPixel+0xe0>
 80024ca:	3307      	adds	r3, #7
 80024cc:	10db      	asrs	r3, r3, #3
 80024ce:	b218      	sxth	r0, r3
 80024d0:	4604      	mov	r4, r0
 80024d2:	4b29      	ldr	r3, [pc, #164]	; (8002578 <drawPixel+0x18c>)
 80024d4:	785b      	ldrb	r3, [r3, #1]
 80024d6:	fb03 f304 	mul.w	r3, r3, r4
 80024da:	440b      	add	r3, r1
 80024dc:	4413      	add	r3, r2
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	b25a      	sxtb	r2, r3
 80024e2:	88bb      	ldrh	r3, [r7, #4]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	2101      	movs	r1, #1
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	b25b      	sxtb	r3, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	b25b      	sxtb	r3, r3
 80024f4:	4013      	ands	r3, r2
 80024f6:	b25c      	sxtb	r4, r3
 80024f8:	4b1f      	ldr	r3, [pc, #124]	; (8002578 <drawPixel+0x18c>)
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002500:	4a1d      	ldr	r2, [pc, #116]	; (8002578 <drawPixel+0x18c>)
 8002502:	7852      	ldrb	r2, [r2, #1]
 8002504:	fb02 f200 	mul.w	r2, r2, r0
 8002508:	440a      	add	r2, r1
 800250a:	4413      	add	r3, r2
 800250c:	b2e2      	uxtb	r2, r4
 800250e:	701a      	strb	r2, [r3, #0]
            break;
 8002510:	e029      	b.n	8002566 <drawPixel+0x17a>
            
            case SSD1306_INVERSE:
                oled.screen_buffer[x + (y / 8) * oled.screen_width] ^= (1 << (y & 7));
 8002512:	4b19      	ldr	r3, [pc, #100]	; (8002578 <drawPixel+0x18c>)
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800251a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	da00      	bge.n	8002524 <drawPixel+0x138>
 8002522:	3307      	adds	r3, #7
 8002524:	10db      	asrs	r3, r3, #3
 8002526:	b218      	sxth	r0, r3
 8002528:	4604      	mov	r4, r0
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <drawPixel+0x18c>)
 800252c:	785b      	ldrb	r3, [r3, #1]
 800252e:	fb03 f304 	mul.w	r3, r3, r4
 8002532:	440b      	add	r3, r1
 8002534:	4413      	add	r3, r2
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	b25a      	sxtb	r2, r3
 800253a:	88bb      	ldrh	r3, [r7, #4]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	2101      	movs	r1, #1
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	b25b      	sxtb	r3, r3
 8002548:	4053      	eors	r3, r2
 800254a:	b25c      	sxtb	r4, r3
 800254c:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <drawPixel+0x18c>)
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002554:	4a08      	ldr	r2, [pc, #32]	; (8002578 <drawPixel+0x18c>)
 8002556:	7852      	ldrb	r2, [r2, #1]
 8002558:	fb02 f200 	mul.w	r2, r2, r0
 800255c:	440a      	add	r2, r1
 800255e:	4413      	add	r3, r2
 8002560:	b2e2      	uxtb	r2, r4
 8002562:	701a      	strb	r2, [r3, #0]
            break;
 8002564:	bf00      	nop
        }
        return true;
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <drawPixel+0x180>
    }
    else {
        return false;
 800256a:	2300      	movs	r3, #0
    }
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bc90      	pop	{r4, r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000240 	.word	0x20000240

0800257c <ssd1306_commandList>:
 *                          transmit
 * @note This function was borrowed from
 * ssd1306_commandList, which can be found 
 * on line 387 of Adafruit_SSD1306.cpp
 */
void ssd1306_commandList(const uint8_t * command_pointer, uint8_t bytes_to_transmit) {
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af02      	add	r7, sp, #8
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	70fb      	strb	r3, [r7, #3]


    /**
     * Send the list of commands 
     */
    ret = HAL_I2C_Master_Transmit(&hi2c2, OLED_SCREEN_ADDRESS, (uint8_t *) command_pointer, bytes_to_transmit, HAL_MAX_DELAY);
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	b29b      	uxth	r3, r3
 800258c:	f04f 32ff 	mov.w	r2, #4294967295
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	2178      	movs	r1, #120	; 0x78
 8002596:	4808      	ldr	r0, [pc, #32]	; (80025b8 <ssd1306_commandList+0x3c>)
 8002598:	f001 fd16 	bl	8003fc8 <HAL_I2C_Master_Transmit>
 800259c:	4603      	mov	r3, r0
 800259e:	73fb      	strb	r3, [r7, #15]
    if(ret != HAL_OK){
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <ssd1306_commandList+0x32>
        print_string("I2C Transmit Error 2",LF);
 80025a6:	2101      	movs	r1, #1
 80025a8:	4804      	ldr	r0, [pc, #16]	; (80025bc <ssd1306_commandList+0x40>)
 80025aa:	f000 fe05 	bl	80031b8 <print_string>
    }
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200012dc 	.word	0x200012dc
 80025bc:	08009bd8 	.word	0x08009bd8

080025c0 <ssd1306_command1>:
 * @note This function borrowed from 
 * routine ssd1306_command1(uint8_t c), 
 * which can be found on line 373
 * of Adafruit_SSD1306.cpp
 */
void ssd1306_command1(uint8_t command) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
  
    HAL_StatusTypeDef ret;
    uint8_t init1[] = {
 80025ca:	2300      	movs	r3, #0
 80025cc:	733b      	strb	r3, [r7, #12]
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	737b      	strb	r3, [r7, #13]
                                    0x00, //Needed to set Co and D/C to 0
                                    command};
                                    
    ret = HAL_I2C_Master_Transmit(&hi2c2, OLED_SCREEN_ADDRESS, (uint8_t *)init1, 2, HAL_MAX_DELAY);
 80025d2:	f107 020c 	add.w	r2, r7, #12
 80025d6:	f04f 33ff 	mov.w	r3, #4294967295
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2302      	movs	r3, #2
 80025de:	2178      	movs	r1, #120	; 0x78
 80025e0:	4807      	ldr	r0, [pc, #28]	; (8002600 <ssd1306_command1+0x40>)
 80025e2:	f001 fcf1 	bl	8003fc8 <HAL_I2C_Master_Transmit>
 80025e6:	4603      	mov	r3, r0
 80025e8:	73fb      	strb	r3, [r7, #15]
    if(ret != HAL_OK){
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <ssd1306_command1+0x38>
        print_string("I2C Transmit Error 255",LF);
 80025f0:	2101      	movs	r1, #1
 80025f2:	4804      	ldr	r0, [pc, #16]	; (8002604 <ssd1306_command1+0x44>)
 80025f4:	f000 fde0 	bl	80031b8 <print_string>
    }
}
 80025f8:	bf00      	nop
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	200012dc 	.word	0x200012dc
 8002604:	08009bf0 	.word	0x08009bf0

08002608 <setCursor>:
 * 
 * @note This code was borrowed from
 * Adafruit_SSD1306::setCursor, which can 
 * be found on line 128 of Adafruit_SSD1306.cpp
 */
void setCursor(uint16_t x, uint16_t y) {
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	460a      	mov	r2, r1
 8002612:	80fb      	strh	r3, [r7, #6]
 8002614:	4613      	mov	r3, r2
 8002616:	80bb      	strh	r3, [r7, #4]
    oled.cursor_x = x;
 8002618:	4a05      	ldr	r2, [pc, #20]	; (8002630 <setCursor+0x28>)
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	8113      	strh	r3, [r2, #8]
    oled.cursor_y = y;
 800261e:	4a04      	ldr	r2, [pc, #16]	; (8002630 <setCursor+0x28>)
 8002620:	88bb      	ldrh	r3, [r7, #4]
 8002622:	80d3      	strh	r3, [r2, #6]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	20000240 	.word	0x20000240

08002634 <writeOledString>:

void writeOledString(const char * c, uint8_t color) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	70fb      	strb	r3, [r7, #3]
    while(*c != '\0'){
 8002640:	e009      	b.n	8002656 <writeOledString+0x22>
        writeStringHelper((uint8_t) *c,color);                    //Load the U1 TX buffer with the current character
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	78fa      	ldrb	r2, [r7, #3]
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f80c 	bl	8002668 <writeStringHelper>
        c++;                           //Increment the pointer memory address
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3301      	adds	r3, #1
 8002654:	607b      	str	r3, [r7, #4]
    while(*c != '\0'){
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f1      	bne.n	8002642 <writeOledString+0xe>
    }
}
 800265e:	bf00      	nop
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <writeStringHelper>:

//TODO::: The following is for reference only and can be deleted
//TODO::: For this function, reference Adafruit_GFX.cpp  line 1243
//TODO::: See line 143 in this file, but color options are 
//TODO:::  SSD1306_WHITE, SSD1306_BLACK, SSD1306_INVERSE
void writeStringHelper(uint8_t c, uint8_t color) {
 8002668:	b5b0      	push	{r4, r5, r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af02      	add	r7, sp, #8
 800266e:	4603      	mov	r3, r0
 8002670:	460a      	mov	r2, r1
 8002672:	71fb      	strb	r3, [r7, #7]
 8002674:	4613      	mov	r3, r2
 8002676:	71bb      	strb	r3, [r7, #6]

//   } 
  
//   else { // Custom font

    if (c == '\n') {
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	2b0a      	cmp	r3, #10
 800267c:	d113      	bne.n	80026a6 <writeStringHelper+0x3e>
        oled.cursor_x = 0;
 800267e:	4b46      	ldr	r3, [pc, #280]	; (8002798 <writeStringHelper+0x130>)
 8002680:	2200      	movs	r2, #0
 8002682:	811a      	strh	r2, [r3, #8]
        oled.cursor_y += (int16_t)oled.textsize_y * (uint8_t)(oled.oled_font -> yAdvance);
 8002684:	4b44      	ldr	r3, [pc, #272]	; (8002798 <writeStringHelper+0x130>)
 8002686:	88da      	ldrh	r2, [r3, #6]
 8002688:	4b43      	ldr	r3, [pc, #268]	; (8002798 <writeStringHelper+0x130>)
 800268a:	791b      	ldrb	r3, [r3, #4]
 800268c:	b29b      	uxth	r3, r3
 800268e:	4942      	ldr	r1, [pc, #264]	; (8002798 <writeStringHelper+0x130>)
 8002690:	68c9      	ldr	r1, [r1, #12]
 8002692:	7b09      	ldrb	r1, [r1, #12]
 8002694:	b289      	uxth	r1, r1
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	b29b      	uxth	r3, r3
 800269c:	4413      	add	r3, r2
 800269e:	b29a      	uxth	r2, r3
 80026a0:	4b3d      	ldr	r3, [pc, #244]	; (8002798 <writeStringHelper+0x130>)
 80026a2:	80da      	strh	r2, [r3, #6]
                        oled.textsize_x, oled.textsize_y);
            }
            oled.cursor_x += (uint8_t)(glyph -> xAdvance) * (int16_t)oled.textsize_x;
        }
    }
}
 80026a4:	e074      	b.n	8002790 <writeStringHelper+0x128>
    else if (c != '\r') {       //Ignore carriage returns
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	2b0d      	cmp	r3, #13
 80026aa:	d071      	beq.n	8002790 <writeStringHelper+0x128>
        uint8_t first = oled.oled_font -> first;
 80026ac:	4b3a      	ldr	r3, [pc, #232]	; (8002798 <writeStringHelper+0x130>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	891b      	ldrh	r3, [r3, #8]
 80026b2:	75fb      	strb	r3, [r7, #23]
        if ((c >= first) && (c <= (uint8_t)(oled.oled_font->last))) {
 80026b4:	79fa      	ldrb	r2, [r7, #7]
 80026b6:	7dfb      	ldrb	r3, [r7, #23]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d369      	bcc.n	8002790 <writeStringHelper+0x128>
 80026bc:	4b36      	ldr	r3, [pc, #216]	; (8002798 <writeStringHelper+0x130>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	895b      	ldrh	r3, [r3, #10]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	79fa      	ldrb	r2, [r7, #7]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d862      	bhi.n	8002790 <writeStringHelper+0x128>
            GFXglyph *glyph = oled.oled_font -> glyph + (c - first);
 80026ca:	4b33      	ldr	r3, [pc, #204]	; (8002798 <writeStringHelper+0x130>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	79f9      	ldrb	r1, [r7, #7]
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
 80026d4:	1acb      	subs	r3, r1, r3
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
            uint8_t w = (uint8_t)(glyph -> width);     //TODO start at line 1243 in Adafruit_GFX.cpp
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	789b      	ldrb	r3, [r3, #2]
 80026e0:	73fb      	strb	r3, [r7, #15]
            uint8_t h = (uint8_t)(glyph -> height);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	78db      	ldrb	r3, [r3, #3]
 80026e6:	73bb      	strb	r3, [r7, #14]
            if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d041      	beq.n	8002772 <writeStringHelper+0x10a>
 80026ee:	7bbb      	ldrb	r3, [r7, #14]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d03e      	beq.n	8002772 <writeStringHelper+0x10a>
                int16_t xo = (int8_t)(glyph->xOffset); 
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80026fa:	81bb      	strh	r3, [r7, #12]
                if (oled.wrap_text && ((oled.cursor_x + oled.textsize_x * (xo + w)) > oled.screen_width)) {
 80026fc:	4b26      	ldr	r3, [pc, #152]	; (8002798 <writeStringHelper+0x130>)
 80026fe:	795b      	ldrb	r3, [r3, #5]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d023      	beq.n	800274c <writeStringHelper+0xe4>
 8002704:	4b24      	ldr	r3, [pc, #144]	; (8002798 <writeStringHelper+0x130>)
 8002706:	891b      	ldrh	r3, [r3, #8]
 8002708:	4619      	mov	r1, r3
 800270a:	4b23      	ldr	r3, [pc, #140]	; (8002798 <writeStringHelper+0x130>)
 800270c:	78db      	ldrb	r3, [r3, #3]
 800270e:	4618      	mov	r0, r3
 8002710:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	4413      	add	r3, r2
 8002718:	fb03 f300 	mul.w	r3, r3, r0
 800271c:	440b      	add	r3, r1
 800271e:	4a1e      	ldr	r2, [pc, #120]	; (8002798 <writeStringHelper+0x130>)
 8002720:	7852      	ldrb	r2, [r2, #1]
 8002722:	4293      	cmp	r3, r2
 8002724:	dd12      	ble.n	800274c <writeStringHelper+0xe4>
                    oled.cursor_x = 0;
 8002726:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <writeStringHelper+0x130>)
 8002728:	2200      	movs	r2, #0
 800272a:	811a      	strh	r2, [r3, #8]
                    oled.cursor_y += (int16_t)oled.textsize_y * (uint8_t)(oled.oled_font -> yAdvance);
 800272c:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <writeStringHelper+0x130>)
 800272e:	88da      	ldrh	r2, [r3, #6]
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <writeStringHelper+0x130>)
 8002732:	791b      	ldrb	r3, [r3, #4]
 8002734:	b29b      	uxth	r3, r3
 8002736:	4918      	ldr	r1, [pc, #96]	; (8002798 <writeStringHelper+0x130>)
 8002738:	68c9      	ldr	r1, [r1, #12]
 800273a:	7b09      	ldrb	r1, [r1, #12]
 800273c:	b289      	uxth	r1, r1
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	b29b      	uxth	r3, r3
 8002744:	4413      	add	r3, r2
 8002746:	b29a      	uxth	r2, r3
 8002748:	4b13      	ldr	r3, [pc, #76]	; (8002798 <writeStringHelper+0x130>)
 800274a:	80da      	strh	r2, [r3, #6]
                drawChar(oled.cursor_x, oled.cursor_y, c, color, 
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <writeStringHelper+0x130>)
 800274e:	891b      	ldrh	r3, [r3, #8]
 8002750:	b218      	sxth	r0, r3
 8002752:	4b11      	ldr	r3, [pc, #68]	; (8002798 <writeStringHelper+0x130>)
 8002754:	88db      	ldrh	r3, [r3, #6]
 8002756:	b219      	sxth	r1, r3
 8002758:	79bb      	ldrb	r3, [r7, #6]
 800275a:	b29d      	uxth	r5, r3
 800275c:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <writeStringHelper+0x130>)
 800275e:	78db      	ldrb	r3, [r3, #3]
 8002760:	4a0d      	ldr	r2, [pc, #52]	; (8002798 <writeStringHelper+0x130>)
 8002762:	7912      	ldrb	r2, [r2, #4]
 8002764:	79fc      	ldrb	r4, [r7, #7]
 8002766:	9201      	str	r2, [sp, #4]
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	462b      	mov	r3, r5
 800276c:	4622      	mov	r2, r4
 800276e:	f000 f815 	bl	800279c <drawChar>
            oled.cursor_x += (uint8_t)(glyph -> xAdvance) * (int16_t)oled.textsize_x;
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <writeStringHelper+0x130>)
 8002774:	891a      	ldrh	r2, [r3, #8]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	791b      	ldrb	r3, [r3, #4]
 800277a:	b29b      	uxth	r3, r3
 800277c:	4906      	ldr	r1, [pc, #24]	; (8002798 <writeStringHelper+0x130>)
 800277e:	78c9      	ldrb	r1, [r1, #3]
 8002780:	b289      	uxth	r1, r1
 8002782:	fb01 f303 	mul.w	r3, r1, r3
 8002786:	b29b      	uxth	r3, r3
 8002788:	4413      	add	r3, r2
 800278a:	b29a      	uxth	r2, r3
 800278c:	4b02      	ldr	r3, [pc, #8]	; (8002798 <writeStringHelper+0x130>)
 800278e:	811a      	strh	r2, [r3, #8]
}
 8002790:	bf00      	nop
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bdb0      	pop	{r4, r5, r7, pc}
 8002798:	20000240 	.word	0x20000240

0800279c <drawChar>:

//TODO::: The following line is for reference only
//TODO::: see Adafruit_GFX.cpp line 1134
void drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint8_t size_x,
                            uint8_t size_y) {
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b08b      	sub	sp, #44	; 0x2c
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	4604      	mov	r4, r0
 80027a4:	4608      	mov	r0, r1
 80027a6:	4611      	mov	r1, r2
 80027a8:	461a      	mov	r2, r3
 80027aa:	4623      	mov	r3, r4
 80027ac:	80fb      	strh	r3, [r7, #6]
 80027ae:	4603      	mov	r3, r0
 80027b0:	80bb      	strh	r3, [r7, #4]
 80027b2:	460b      	mov	r3, r1
 80027b4:	70fb      	strb	r3, [r7, #3]
 80027b6:	4613      	mov	r3, r2
 80027b8:	803b      	strh	r3, [r7, #0]
     * newlines, returns, non-printable characters, etc.  Calling
     * drawChar() directly with 'bad' characters of font may cause mayhem!
     * 
    */

    c -= (uint8_t)(oled.oled_font -> first);
 80027ba:	4b59      	ldr	r3, [pc, #356]	; (8002920 <drawChar+0x184>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	891b      	ldrh	r3, [r3, #8]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	70fb      	strb	r3, [r7, #3]
    
    GFXglyph *glyph = oled.oled_font -> glyph + c;
 80027c8:	4b55      	ldr	r3, [pc, #340]	; (8002920 <drawChar+0x184>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4413      	add	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]

    // uint8_t *bitmap = pgm_read_bitmap_ptr(oled.oled_font);  //TODO can remove this line
    uint8_t *bitmap = oled.oled_font -> bitmap;
 80027d6:	4b52      	ldr	r3, [pc, #328]	; (8002920 <drawChar+0x184>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]

    uint16_t bo = (uint16_t)(glyph->bitmapOffset);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	83fb      	strh	r3, [r7, #30]

    uint8_t w = (uint8_t)(glyph -> width),
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	789b      	ldrb	r3, [r3, #2]
 80027e8:	72fb      	strb	r3, [r7, #11]
            h = (uint8_t)(glyph -> height);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	78db      	ldrb	r3, [r3, #3]
 80027ee:	72bb      	strb	r3, [r7, #10]

    int8_t xo = (int8_t)(glyph -> xOffset),
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	795b      	ldrb	r3, [r3, #5]
 80027f4:	727b      	strb	r3, [r7, #9]
           yo = (int8_t)(glyph -> yOffset);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	799b      	ldrb	r3, [r3, #6]
 80027fa:	723b      	strb	r3, [r7, #8]
    
    uint8_t xx, yy, bits = 0, bit = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	76fb      	strb	r3, [r7, #27]
 8002800:	2300      	movs	r3, #0
 8002802:	76bb      	strb	r3, [r7, #26]
    
    int16_t xo16 = 0, yo16 = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	833b      	strh	r3, [r7, #24]
 8002808:	2300      	movs	r3, #0
 800280a:	82fb      	strh	r3, [r7, #22]

    if (size_x > 1 || size_y > 1) {
 800280c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002810:	2b01      	cmp	r3, #1
 8002812:	d803      	bhi.n	800281c <drawChar+0x80>
 8002814:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002818:	2b01      	cmp	r3, #1
 800281a:	d905      	bls.n	8002828 <drawChar+0x8c>
      xo16 = xo;
 800281c:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002820:	833b      	strh	r3, [r7, #24]
      yo16 = yo;
 8002822:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002826:	82fb      	strh	r3, [r7, #22]
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    // startWrite();
    for (yy = 0; yy < h; yy++) {
 8002828:	2300      	movs	r3, #0
 800282a:	773b      	strb	r3, [r7, #28]
 800282c:	e06f      	b.n	800290e <drawChar+0x172>
      for (xx = 0; xx < w; xx++) {
 800282e:	2300      	movs	r3, #0
 8002830:	777b      	strb	r3, [r7, #29]
 8002832:	e065      	b.n	8002900 <drawChar+0x164>
        if (!(bit++ & 7)) {
 8002834:	7ebb      	ldrb	r3, [r7, #26]
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	76ba      	strb	r2, [r7, #26]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	2b00      	cmp	r3, #0
 8002840:	d107      	bne.n	8002852 <drawChar+0xb6>
          bits = (uint8_t)(bitmap[bo++]);
 8002842:	8bfb      	ldrh	r3, [r7, #30]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	83fa      	strh	r2, [r7, #30]
 8002848:	461a      	mov	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4413      	add	r3, r2
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	76fb      	strb	r3, [r7, #27]
        }
        if (bits & 0x80) {
 8002852:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002856:	2b00      	cmp	r3, #0
 8002858:	da4c      	bge.n	80028f4 <drawChar+0x158>
          if (size_x == 1 && size_y == 1) {
 800285a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800285e:	2b01      	cmp	r3, #1
 8002860:	d11f      	bne.n	80028a2 <drawChar+0x106>
 8002862:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002866:	2b01      	cmp	r3, #1
 8002868:	d11b      	bne.n	80028a2 <drawChar+0x106>
            drawPixel(x + xo + xx, y + yo + yy, color);
 800286a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800286e:	b29a      	uxth	r2, r3
 8002870:	88fb      	ldrh	r3, [r7, #6]
 8002872:	4413      	add	r3, r2
 8002874:	b29a      	uxth	r2, r3
 8002876:	7f7b      	ldrb	r3, [r7, #29]
 8002878:	b29b      	uxth	r3, r3
 800287a:	4413      	add	r3, r2
 800287c:	b29b      	uxth	r3, r3
 800287e:	b218      	sxth	r0, r3
 8002880:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002884:	b29a      	uxth	r2, r3
 8002886:	88bb      	ldrh	r3, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	b29a      	uxth	r2, r3
 800288c:	7f3b      	ldrb	r3, [r7, #28]
 800288e:	b29b      	uxth	r3, r3
 8002890:	4413      	add	r3, r2
 8002892:	b29b      	uxth	r3, r3
 8002894:	b21b      	sxth	r3, r3
 8002896:	883a      	ldrh	r2, [r7, #0]
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	4619      	mov	r1, r3
 800289c:	f7ff fda6 	bl	80023ec <drawPixel>
 80028a0:	e028      	b.n	80028f4 <drawChar+0x158>
          } else {
            fillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 80028a2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80028a6:	7f7b      	ldrb	r3, [r7, #29]
 80028a8:	4413      	add	r3, r2
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80028b0:	b292      	uxth	r2, r2
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	88fb      	ldrh	r3, [r7, #6]
 80028ba:	4413      	add	r3, r2
 80028bc:	b29b      	uxth	r3, r3
 80028be:	b218      	sxth	r0, r3
 80028c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80028c4:	7f3b      	ldrb	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80028ce:	b292      	uxth	r2, r2
 80028d0:	fb02 f303 	mul.w	r3, r2, r3
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	88bb      	ldrh	r3, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	b29b      	uxth	r3, r3
 80028dc:	b219      	sxth	r1, r3
 80028de:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80028e2:	b21a      	sxth	r2, r3
 80028e4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80028e8:	b21c      	sxth	r4, r3
 80028ea:	883b      	ldrh	r3, [r7, #0]
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	4623      	mov	r3, r4
 80028f0:	f000 f826 	bl	8002940 <fillRect>
                          size_x, size_y, color);
          }
        }
        bits <<= 1;
 80028f4:	7efb      	ldrb	r3, [r7, #27]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	76fb      	strb	r3, [r7, #27]
      for (xx = 0; xx < w; xx++) {
 80028fa:	7f7b      	ldrb	r3, [r7, #29]
 80028fc:	3301      	adds	r3, #1
 80028fe:	777b      	strb	r3, [r7, #29]
 8002900:	7f7a      	ldrb	r2, [r7, #29]
 8002902:	7afb      	ldrb	r3, [r7, #11]
 8002904:	429a      	cmp	r2, r3
 8002906:	d395      	bcc.n	8002834 <drawChar+0x98>
    for (yy = 0; yy < h; yy++) {
 8002908:	7f3b      	ldrb	r3, [r7, #28]
 800290a:	3301      	adds	r3, #1
 800290c:	773b      	strb	r3, [r7, #28]
 800290e:	7f3a      	ldrb	r2, [r7, #28]
 8002910:	7abb      	ldrb	r3, [r7, #10]
 8002912:	429a      	cmp	r2, r3
 8002914:	d38b      	bcc.n	800282e <drawChar+0x92>
      }
    }
    // endWrite();


}
 8002916:	bf00      	nop
 8002918:	bf00      	nop
 800291a:	3724      	adds	r7, #36	; 0x24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd90      	pop	{r4, r7, pc}
 8002920:	20000240 	.word	0x20000240

08002924 <setFont>:

//TODO::: clean up stale code in the following
//TODO::: reference Adafruti_GFX.cpp line 1338
void setFont(GFXfont *f) {
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
    // Switching from new to classic (5x7) font behavior.
    // Move cursor pos up 6 pixels so it's at top-left of char.
    // TODO The following was removed, as it shouldn't be needed
    // oled.cursor_y -= 6;
//   }
    oled.oled_font = f;
 800292c:	4a03      	ldr	r2, [pc, #12]	; (800293c <setFont+0x18>)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	60d3      	str	r3, [r2, #12]
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	20000240 	.word	0x20000240

08002940 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 8002940:	b590      	push	{r4, r7, lr}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	4604      	mov	r4, r0
 8002948:	4608      	mov	r0, r1
 800294a:	4611      	mov	r1, r2
 800294c:	461a      	mov	r2, r3
 800294e:	4623      	mov	r3, r4
 8002950:	80fb      	strh	r3, [r7, #6]
 8002952:	4603      	mov	r3, r0
 8002954:	80bb      	strh	r3, [r7, #4]
 8002956:	460b      	mov	r3, r1
 8002958:	807b      	strh	r3, [r7, #2]
 800295a:	4613      	mov	r3, r2
 800295c:	803b      	strh	r3, [r7, #0]
  for (int16_t i = x; i < x + w; i++) {
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	81fb      	strh	r3, [r7, #14]
 8002962:	e00e      	b.n	8002982 <fillRect+0x42>
    drawFastVLine(i, y, h, color);
 8002964:	8c3b      	ldrh	r3, [r7, #32]
 8002966:	f9b7 2000 	ldrsh.w	r2, [r7]
 800296a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800296e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002972:	f000 f814 	bl	800299e <drawFastVLine>
  for (int16_t i = x; i < x + w; i++) {
 8002976:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800297a:	b29b      	uxth	r3, r3
 800297c:	3301      	adds	r3, #1
 800297e:	b29b      	uxth	r3, r3
 8002980:	81fb      	strh	r3, [r7, #14]
 8002982:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002986:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800298a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800298e:	440b      	add	r3, r1
 8002990:	429a      	cmp	r2, r3
 8002992:	dbe7      	blt.n	8002964 <fillRect+0x24>
  }
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	bd90      	pop	{r4, r7, pc}

0800299e <drawFastVLine>:

//TODO::: The following line is for reference only
//TODO::: see Adafruit_GFX.cpp line 132

void drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
 800299e:	b590      	push	{r4, r7, lr}
 80029a0:	b085      	sub	sp, #20
 80029a2:	af02      	add	r7, sp, #8
 80029a4:	4604      	mov	r4, r0
 80029a6:	4608      	mov	r0, r1
 80029a8:	4611      	mov	r1, r2
 80029aa:	461a      	mov	r2, r3
 80029ac:	4623      	mov	r3, r4
 80029ae:	80fb      	strh	r3, [r7, #6]
 80029b0:	4603      	mov	r3, r0
 80029b2:	80bb      	strh	r3, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
 80029b8:	4613      	mov	r3, r2
 80029ba:	803b      	strh	r3, [r7, #0]
    drawLine(x, y, x, y + h - 1, color);
 80029bc:	88ba      	ldrh	r2, [r7, #4]
 80029be:	887b      	ldrh	r3, [r7, #2]
 80029c0:	4413      	add	r3, r2
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	b21c      	sxth	r4, r3
 80029ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029ce:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80029d2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80029d6:	883b      	ldrh	r3, [r7, #0]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	4623      	mov	r3, r4
 80029dc:	f000 f804 	bl	80029e8 <drawLine>
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd90      	pop	{r4, r7, pc}

080029e8 <drawLine>:
void fillScreen(uint16_t color) {
  fillRect(0, 0, oled.screen_width, oled.screen_height, color);
}

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b089      	sub	sp, #36	; 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4604      	mov	r4, r0
 80029f0:	4608      	mov	r0, r1
 80029f2:	4611      	mov	r1, r2
 80029f4:	461a      	mov	r2, r3
 80029f6:	4623      	mov	r3, r4
 80029f8:	80fb      	strh	r3, [r7, #6]
 80029fa:	4603      	mov	r3, r0
 80029fc:	80bb      	strh	r3, [r7, #4]
 80029fe:	460b      	mov	r3, r1
 8002a00:	807b      	strh	r3, [r7, #2]
 8002a02:	4613      	mov	r3, r2
 8002a04:	803b      	strh	r3, [r7, #0]
  
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8002a06:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002a0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002a14:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002a18:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002a1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a20:	1acb      	subs	r3, r1, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	bfb8      	it	lt
 8002a26:	425b      	neglt	r3, r3
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	bfcc      	ite	gt
 8002a2c:	2301      	movgt	r3, #1
 8002a2e:	2300      	movle	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	837b      	strh	r3, [r7, #26]
    if (steep) {
 8002a34:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00b      	beq.n	8002a54 <drawLine+0x6c>
        _swap_int16_t(x0, y0);
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	833b      	strh	r3, [r7, #24]
 8002a40:	88bb      	ldrh	r3, [r7, #4]
 8002a42:	80fb      	strh	r3, [r7, #6]
 8002a44:	8b3b      	ldrh	r3, [r7, #24]
 8002a46:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8002a48:	887b      	ldrh	r3, [r7, #2]
 8002a4a:	82fb      	strh	r3, [r7, #22]
 8002a4c:	883b      	ldrh	r3, [r7, #0]
 8002a4e:	807b      	strh	r3, [r7, #2]
 8002a50:	8afb      	ldrh	r3, [r7, #22]
 8002a52:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8002a54:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	dd0b      	ble.n	8002a78 <drawLine+0x90>
        _swap_int16_t(x0, x1);
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	82bb      	strh	r3, [r7, #20]
 8002a64:	887b      	ldrh	r3, [r7, #2]
 8002a66:	80fb      	strh	r3, [r7, #6]
 8002a68:	8abb      	ldrh	r3, [r7, #20]
 8002a6a:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8002a6c:	88bb      	ldrh	r3, [r7, #4]
 8002a6e:	827b      	strh	r3, [r7, #18]
 8002a70:	883b      	ldrh	r3, [r7, #0]
 8002a72:	80bb      	strh	r3, [r7, #4]
 8002a74:	8a7b      	ldrh	r3, [r7, #18]
 8002a76:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8002a78:	887a      	ldrh	r2, [r7, #2]
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 8002a82:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002a86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bfb8      	it	lt
 8002a90:	425b      	neglt	r3, r3
 8002a92:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 8002a94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a98:	0fda      	lsrs	r2, r3, #31
 8002a9a:	4413      	add	r3, r2
 8002a9c:	105b      	asrs	r3, r3, #1
 8002a9e:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 8002aa0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002aa4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	da02      	bge.n	8002ab2 <drawLine+0xca>
        ystep = 1;
 8002aac:	2301      	movs	r3, #1
 8002aae:	83bb      	strh	r3, [r7, #28]
 8002ab0:	e033      	b.n	8002b1a <drawLine+0x132>
    } 
    else {
        ystep = -1;
 8002ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ab6:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0 <= x1; x0++) {
 8002ab8:	e02f      	b.n	8002b1a <drawLine+0x132>
        if (steep) {
 8002aba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <drawLine+0xee>
            drawPixel(y0, x0, color);
 8002ac2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002aca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fc8c 	bl	80023ec <drawPixel>
 8002ad4:	e008      	b.n	8002ae8 <drawLine+0x100>
        } 
        else {
            drawPixel(x0, y0, color);
 8002ad6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fc82 	bl	80023ec <drawPixel>
        }
        err -= dy;
 8002ae8:	8bfa      	ldrh	r2, [r7, #30]
 8002aea:	89fb      	ldrh	r3, [r7, #14]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 8002af2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	da09      	bge.n	8002b0e <drawLine+0x126>
            y0 += ystep;
 8002afa:	88ba      	ldrh	r2, [r7, #4]
 8002afc:	8bbb      	ldrh	r3, [r7, #28]
 8002afe:	4413      	add	r3, r2
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8002b04:	8bfa      	ldrh	r2, [r7, #30]
 8002b06:	8a3b      	ldrh	r3, [r7, #16]
 8002b08:	4413      	add	r3, r2
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	83fb      	strh	r3, [r7, #30]
    for (; x0 <= x1; x0++) {
 8002b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3301      	adds	r3, #1
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	80fb      	strh	r3, [r7, #6]
 8002b1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	ddc9      	ble.n	8002aba <drawLine+0xd2>
        }
    }
}
 8002b26:	bf00      	nop
 8002b28:	bf00      	nop
 8002b2a:	3724      	adds	r7, #36	; 0x24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd90      	pop	{r4, r7, pc}

08002b30 <updateDisplay>:

/**
 * @brief For reference information
 * see line 926 in file Adafruit_SSD1306.cpp
 */
void updateDisplay(void) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef ret;
    uint16_t i = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	81fb      	strh	r3, [r7, #14]
                                        0x00,                       // Set Co and D/C bits to zero
                                        SSD1306_PAGEADDR,           // 0x22
                                        0x00,                       // Page start address
                                        0xFF,                       // Page end (not really, but works here)
                                        SSD1306_COLUMNADDR, 0x00};  // Column start address
    ssd1306_commandList(dlist1, sizeof(dlist1));
 8002b3a:	2106      	movs	r1, #6
 8002b3c:	4826      	ldr	r0, [pc, #152]	; (8002bd8 <updateDisplay+0xa8>)
 8002b3e:	f7ff fd1d 	bl	800257c <ssd1306_commandList>
    
    ssd1306_command1((uint8_t)(oled.screen_width - 1)); // Column end address
 8002b42:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <updateDisplay+0xac>)
 8002b44:	785b      	ldrb	r3, [r3, #1]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fd38 	bl	80025c0 <ssd1306_command1>

    uint16_t count = (oled.screen_width * ((oled.screen_height + 7) / 8));   //Add a byte for 0x40 -- which much we transmitted first
 8002b50:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <updateDisplay+0xac>)
 8002b52:	785b      	ldrb	r3, [r3, #1]
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <updateDisplay+0xac>)
 8002b58:	789b      	ldrb	r3, [r3, #2]
 8002b5a:	3307      	adds	r3, #7
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	da00      	bge.n	8002b62 <updateDisplay+0x32>
 8002b60:	3307      	adds	r3, #7
 8002b62:	10db      	asrs	r3, r3, #3
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	fb03 f302 	mul.w	r3, r3, r2
 8002b6a:	81bb      	strh	r3, [r7, #12]
    
    uint8_t *transmit_buffer;
    transmit_buffer = (uint8_t *)malloc((count + 1));   // Need room for 0x40 at beginning of buffer
 8002b6c:	89bb      	ldrh	r3, [r7, #12]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	4618      	mov	r0, r3
 8002b72:	f004 f899 	bl	8006ca8 <malloc>
 8002b76:	4603      	mov	r3, r0
 8002b78:	60bb      	str	r3, [r7, #8]

    transmit_buffer[0] = 0x40;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2240      	movs	r2, #64	; 0x40
 8002b7e:	701a      	strb	r2, [r3, #0]
    for(i=1; i<(count+1); i++){
 8002b80:	2301      	movs	r3, #1
 8002b82:	81fb      	strh	r3, [r7, #14]
 8002b84:	e00c      	b.n	8002ba0 <updateDisplay+0x70>
        transmit_buffer[i] = oled.screen_buffer[i-1];
 8002b86:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <updateDisplay+0xac>)
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	89fb      	ldrh	r3, [r7, #14]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	441a      	add	r2, r3
 8002b90:	89fb      	ldrh	r3, [r7, #14]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	440b      	add	r3, r1
 8002b96:	7812      	ldrb	r2, [r2, #0]
 8002b98:	701a      	strb	r2, [r3, #0]
    for(i=1; i<(count+1); i++){
 8002b9a:	89fb      	ldrh	r3, [r7, #14]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	81fb      	strh	r3, [r7, #14]
 8002ba0:	89ba      	ldrh	r2, [r7, #12]
 8002ba2:	89fb      	ldrh	r3, [r7, #14]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d2ee      	bcs.n	8002b86 <updateDisplay+0x56>
    }

    
    ret = HAL_I2C_Master_Transmit(&hi2c2, OLED_SCREEN_ADDRESS, (uint8_t *) transmit_buffer, (count + 1), HAL_MAX_DELAY);
 8002ba8:	89bb      	ldrh	r3, [r7, #12]
 8002baa:	3301      	adds	r3, #1
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb2:	9200      	str	r2, [sp, #0]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	2178      	movs	r1, #120	; 0x78
 8002bb8:	4809      	ldr	r0, [pc, #36]	; (8002be0 <updateDisplay+0xb0>)
 8002bba:	f001 fa05 	bl	8003fc8 <HAL_I2C_Master_Transmit>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	71fb      	strb	r3, [r7, #7]
    if(ret != HAL_OK){
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <updateDisplay+0xa0>
        print_string("I2C Transmit Error 518",LF);
 8002bc8:	2101      	movs	r1, #1
 8002bca:	4806      	ldr	r0, [pc, #24]	; (8002be4 <updateDisplay+0xb4>)
 8002bcc:	f000 faf4 	bl	80031b8 <print_string>
    }
}
 8002bd0:	bf00      	nop
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	0800a3e0 	.word	0x0800a3e0
 8002bdc:	20000240 	.word	0x20000240
 8002be0:	200012dc 	.word	0x200012dc
 8002be4:	08009c10 	.word	0x08009c10

08002be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002bee:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <HAL_MspInit+0x5c>)
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <HAL_MspInit+0x5c>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6193      	str	r3, [r2, #24]
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <HAL_MspInit+0x5c>)
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c06:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <HAL_MspInit+0x5c>)
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	4a0e      	ldr	r2, [pc, #56]	; (8002c44 <HAL_MspInit+0x5c>)
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c10:	61d3      	str	r3, [r2, #28]
 8002c12:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <HAL_MspInit+0x5c>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <HAL_MspInit+0x60>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <HAL_MspInit+0x60>)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40010000 	.word	0x40010000

08002c4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c54:	f107 0310 	add.w	r3, r7, #16
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <HAL_ADC_MspInit+0x6c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d121      	bne.n	8002cb0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c6c:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <HAL_ADC_MspInit+0x70>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <HAL_ADC_MspInit+0x70>)
 8002c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c76:	6193      	str	r3, [r2, #24]
 8002c78:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <HAL_ADC_MspInit+0x70>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c84:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <HAL_ADC_MspInit+0x70>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	4a0c      	ldr	r2, [pc, #48]	; (8002cbc <HAL_ADC_MspInit+0x70>)
 8002c8a:	f043 0310 	orr.w	r3, r3, #16
 8002c8e:	6193      	str	r3, [r2, #24]
 8002c90:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <HAL_ADC_MspInit+0x70>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IN_FD_V_Pin;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(IN_FD_V_GPIO_Port, &GPIO_InitStruct);
 8002ca4:	f107 0310 	add.w	r3, r7, #16
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4805      	ldr	r0, [pc, #20]	; (8002cc0 <HAL_ADC_MspInit+0x74>)
 8002cac:	f000 fe92 	bl	80039d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002cb0:	bf00      	nop
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40012400 	.word	0x40012400
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40011000 	.word	0x40011000

08002cc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0310 	add.w	r3, r7, #16
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a16      	ldr	r2, [pc, #88]	; (8002d38 <HAL_I2C_MspInit+0x74>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d124      	bne.n	8002d2e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce4:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <HAL_I2C_MspInit+0x78>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <HAL_I2C_MspInit+0x78>)
 8002cea:	f043 0308 	orr.w	r3, r3, #8
 8002cee:	6193      	str	r3, [r2, #24]
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_I2C_MspInit+0x78>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = DISP_I2C2_SCL_Pin|DISP_I2C2_SDA_Pin;
 8002cfc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d02:	2312      	movs	r3, #18
 8002d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d06:	2303      	movs	r3, #3
 8002d08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0a:	f107 0310 	add.w	r3, r7, #16
 8002d0e:	4619      	mov	r1, r3
 8002d10:	480b      	ldr	r0, [pc, #44]	; (8002d40 <HAL_I2C_MspInit+0x7c>)
 8002d12:	f000 fe5f 	bl	80039d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_I2C_MspInit+0x78>)
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	4a08      	ldr	r2, [pc, #32]	; (8002d3c <HAL_I2C_MspInit+0x78>)
 8002d1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d20:	61d3      	str	r3, [r2, #28]
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_I2C_MspInit+0x78>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d2e:	bf00      	nop
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40005800 	.word	0x40005800
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40010c00 	.word	0x40010c00

08002d44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4c:	f107 0318 	add.w	r3, r7, #24
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a37      	ldr	r2, [pc, #220]	; (8002e3c <HAL_SPI_MspInit+0xf8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d130      	bne.n	8002dc6 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d64:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <HAL_SPI_MspInit+0xfc>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	4a35      	ldr	r2, [pc, #212]	; (8002e40 <HAL_SPI_MspInit+0xfc>)
 8002d6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d6e:	6193      	str	r3, [r2, #24]
 8002d70:	4b33      	ldr	r3, [pc, #204]	; (8002e40 <HAL_SPI_MspInit+0xfc>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7c:	4b30      	ldr	r3, [pc, #192]	; (8002e40 <HAL_SPI_MspInit+0xfc>)
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	4a2f      	ldr	r2, [pc, #188]	; (8002e40 <HAL_SPI_MspInit+0xfc>)
 8002d82:	f043 0304 	orr.w	r3, r3, #4
 8002d86:	6193      	str	r3, [r2, #24]
 8002d88:	4b2d      	ldr	r3, [pc, #180]	; (8002e40 <HAL_SPI_MspInit+0xfc>)
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ADC_SPI1_CLK_Pin|ADC_SPI1_MOSI_Pin;
 8002d94:	23a0      	movs	r3, #160	; 0xa0
 8002d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da0:	f107 0318 	add.w	r3, r7, #24
 8002da4:	4619      	mov	r1, r3
 8002da6:	4827      	ldr	r0, [pc, #156]	; (8002e44 <HAL_SPI_MspInit+0x100>)
 8002da8:	f000 fe14 	bl	80039d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_SPI1_MISO_Pin;
 8002dac:	2340      	movs	r3, #64	; 0x40
 8002dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ADC_SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8002db8:	f107 0318 	add.w	r3, r7, #24
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4821      	ldr	r0, [pc, #132]	; (8002e44 <HAL_SPI_MspInit+0x100>)
 8002dc0:	f000 fe08 	bl	80039d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002dc4:	e036      	b.n	8002e34 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <HAL_SPI_MspInit+0x104>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d131      	bne.n	8002e34 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <HAL_SPI_MspInit+0xfc>)
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	4a1a      	ldr	r2, [pc, #104]	; (8002e40 <HAL_SPI_MspInit+0xfc>)
 8002dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dda:	61d3      	str	r3, [r2, #28]
 8002ddc:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <HAL_SPI_MspInit+0xfc>)
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de8:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <HAL_SPI_MspInit+0xfc>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	4a14      	ldr	r2, [pc, #80]	; (8002e40 <HAL_SPI_MspInit+0xfc>)
 8002dee:	f043 0308 	orr.w	r3, r3, #8
 8002df2:	6193      	str	r3, [r2, #24]
 8002df4:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <HAL_SPI_MspInit+0xfc>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SD_SPI2_MOSI_Pin|SD_SPI2_CLK_Pin;
 8002e00:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e0e:	f107 0318 	add.w	r3, r7, #24
 8002e12:	4619      	mov	r1, r3
 8002e14:	480d      	ldr	r0, [pc, #52]	; (8002e4c <HAL_SPI_MspInit+0x108>)
 8002e16:	f000 fddd 	bl	80039d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_SPI2_MISO_Pin;
 8002e1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SD_SPI2_MISO_GPIO_Port, &GPIO_InitStruct);
 8002e28:	f107 0318 	add.w	r3, r7, #24
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4807      	ldr	r0, [pc, #28]	; (8002e4c <HAL_SPI_MspInit+0x108>)
 8002e30:	f000 fdd0 	bl	80039d4 <HAL_GPIO_Init>
}
 8002e34:	bf00      	nop
 8002e36:	3728      	adds	r7, #40	; 0x28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40013000 	.word	0x40013000
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40010800 	.word	0x40010800
 8002e48:	40003800 	.word	0x40003800
 8002e4c:	40010c00 	.word	0x40010c00

08002e50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e60:	d10c      	bne.n	8002e7c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <HAL_TIM_Base_MspInit+0x68>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	4a14      	ldr	r2, [pc, #80]	; (8002eb8 <HAL_TIM_Base_MspInit+0x68>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	61d3      	str	r3, [r2, #28]
 8002e6e:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <HAL_TIM_Base_MspInit+0x68>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002e7a:	e018      	b.n	8002eae <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0e      	ldr	r2, [pc, #56]	; (8002ebc <HAL_TIM_Base_MspInit+0x6c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d113      	bne.n	8002eae <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e86:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <HAL_TIM_Base_MspInit+0x68>)
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	4a0b      	ldr	r2, [pc, #44]	; (8002eb8 <HAL_TIM_Base_MspInit+0x68>)
 8002e8c:	f043 0310 	orr.w	r3, r3, #16
 8002e90:	61d3      	str	r3, [r2, #28]
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_TIM_Base_MspInit+0x68>)
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	2036      	movs	r0, #54	; 0x36
 8002ea4:	f000 fd5f 	bl	8003966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002ea8:	2036      	movs	r0, #54	; 0x36
 8002eaa:	f000 fd78 	bl	800399e <HAL_NVIC_EnableIRQ>
}
 8002eae:	bf00      	nop
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40001000 	.word	0x40001000

08002ec0 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a09      	ldr	r2, [pc, #36]	; (8002ef4 <HAL_TIM_OC_MspInit+0x34>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d10b      	bne.n	8002eea <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_TIM_OC_MspInit+0x38>)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <HAL_TIM_OC_MspInit+0x38>)
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	61d3      	str	r3, [r2, #28]
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_TIM_OC_MspInit+0x38>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002eea:	bf00      	nop
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr
 8002ef4:	40000400 	.word	0x40000400
 8002ef8:	40021000 	.word	0x40021000

08002efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	f107 0310 	add.w	r3, r7, #16
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <HAL_UART_MspInit+0x8c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d131      	bne.n	8002f80 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f1c:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <HAL_UART_MspInit+0x90>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	4a1a      	ldr	r2, [pc, #104]	; (8002f8c <HAL_UART_MspInit+0x90>)
 8002f22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f26:	6193      	str	r3, [r2, #24]
 8002f28:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <HAL_UART_MspInit+0x90>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f34:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <HAL_UART_MspInit+0x90>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	4a14      	ldr	r2, [pc, #80]	; (8002f8c <HAL_UART_MspInit+0x90>)
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	6193      	str	r3, [r2, #24]
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_UART_MspInit+0x90>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CONSOLE_TX_Pin;
 8002f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f52:	2302      	movs	r3, #2
 8002f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f56:	2303      	movs	r3, #3
 8002f58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CONSOLE_TX_GPIO_Port, &GPIO_InitStruct);
 8002f5a:	f107 0310 	add.w	r3, r7, #16
 8002f5e:	4619      	mov	r1, r3
 8002f60:	480b      	ldr	r0, [pc, #44]	; (8002f90 <HAL_UART_MspInit+0x94>)
 8002f62:	f000 fd37 	bl	80039d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CONSOLE_RXD_Pin;
 8002f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(CONSOLE_RXD_GPIO_Port, &GPIO_InitStruct);
 8002f74:	f107 0310 	add.w	r3, r7, #16
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4805      	ldr	r0, [pc, #20]	; (8002f90 <HAL_UART_MspInit+0x94>)
 8002f7c:	f000 fd2a 	bl	80039d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f80:	bf00      	nop
 8002f82:	3720      	adds	r7, #32
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40013800 	.word	0x40013800
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40010800 	.word	0x40010800

08002f94 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler( void ) {
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
	if(Timer1 > 0){
 8002f98:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <SDTimer_Handler+0x3c>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d006      	beq.n	8002fb0 <SDTimer_Handler+0x1c>
		Timer1--;
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <SDTimer_Handler+0x3c>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <SDTimer_Handler+0x3c>)
 8002fae:	701a      	strb	r2, [r3, #0]
	}
	if (Timer2 > 0){
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <SDTimer_Handler+0x40>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d006      	beq.n	8002fc8 <SDTimer_Handler+0x34>
		Timer2--;
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <SDTimer_Handler+0x40>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <SDTimer_Handler+0x40>)
 8002fc6:	701a      	strb	r2, [r3, #0]
	}
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	200025c2 	.word	0x200025c2
 8002fd4:	200025c1 	.word	0x200025c1

08002fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fdc:	e7fe      	b.n	8002fdc <NMI_Handler+0x4>

08002fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fe2:	e7fe      	b.n	8002fe2 <HardFault_Handler+0x4>

08002fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fe8:	e7fe      	b.n	8002fe8 <MemManage_Handler+0x4>

08002fea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fee:	e7fe      	b.n	8002fee <BusFault_Handler+0x4>

08002ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ff4:	e7fe      	b.n	8002ff4 <UsageFault_Handler+0x4>

08002ff6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr

0800300e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
	...

0800301c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt ++;
 8003020:	4b0a      	ldr	r3, [pc, #40]	; (800304c <SysTick_Handler+0x30>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	3301      	adds	r3, #1
 8003028:	b2da      	uxtb	r2, r3
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <SysTick_Handler+0x30>)
 800302c:	701a      	strb	r2, [r3, #0]
	if ( FatFsCnt >=  10 )
 800302e:	4b07      	ldr	r3, [pc, #28]	; (800304c <SysTick_Handler+0x30>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b09      	cmp	r3, #9
 8003036:	d904      	bls.n	8003042 <SysTick_Handler+0x26>
	{
		FatFsCnt =  0 ;
 8003038:	4b04      	ldr	r3, [pc, #16]	; (800304c <SysTick_Handler+0x30>)
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler ( ) ;
 800303e:	f7ff ffa9 	bl	8002f94 <SDTimer_Handler>
	}



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003042:	f000 f967 	bl	8003314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000222 	.word	0x20000222

08003050 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003054:	4802      	ldr	r0, [pc, #8]	; (8003060 <TIM6_IRQHandler+0x10>)
 8003056:	f002 fe34 	bl	8005cc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	200013f4 	.word	0x200013f4

08003064 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
	return 1;
 8003068:	2301      	movs	r3, #1
}
 800306a:	4618      	mov	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr

08003072 <_kill>:

int _kill(int pid, int sig)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800307c:	f003 fdea 	bl	8006c54 <__errno>
 8003080:	4603      	mov	r3, r0
 8003082:	2216      	movs	r2, #22
 8003084:	601a      	str	r2, [r3, #0]
	return -1;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <_exit>:

void _exit (int status)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800309a:	f04f 31ff 	mov.w	r1, #4294967295
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff ffe7 	bl	8003072 <_kill>
	while (1) {}		/* Make sure we hang here */
 80030a4:	e7fe      	b.n	80030a4 <_exit+0x12>

080030a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b086      	sub	sp, #24
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	e00a      	b.n	80030ce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030b8:	f3af 8000 	nop.w
 80030bc:	4601      	mov	r1, r0
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	60ba      	str	r2, [r7, #8]
 80030c4:	b2ca      	uxtb	r2, r1
 80030c6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	3301      	adds	r3, #1
 80030cc:	617b      	str	r3, [r7, #20]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	dbf0      	blt.n	80030b8 <_read+0x12>
	}

return len;
 80030d6:	687b      	ldr	r3, [r7, #4]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <_close>:
	}
	return len;
}

int _close(int file)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	return -1;
 80030e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr

080030f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003106:	605a      	str	r2, [r3, #4]
	return 0;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <_isatty>:

int _isatty(int file)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
	return 1;
 800311c:	2301      	movs	r3, #1
}
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
	return 0;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr

08003140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003148:	4a14      	ldr	r2, [pc, #80]	; (800319c <_sbrk+0x5c>)
 800314a:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <_sbrk+0x60>)
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003154:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <_sbrk+0x64>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d102      	bne.n	8003162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <_sbrk+0x64>)
 800315e:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <_sbrk+0x68>)
 8003160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <_sbrk+0x64>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	429a      	cmp	r2, r3
 800316e:	d207      	bcs.n	8003180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003170:	f003 fd70 	bl	8006c54 <__errno>
 8003174:	4603      	mov	r3, r0
 8003176:	220c      	movs	r2, #12
 8003178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800317a:	f04f 33ff 	mov.w	r3, #4294967295
 800317e:	e009      	b.n	8003194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003180:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <_sbrk+0x64>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003186:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <_sbrk+0x64>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	4a05      	ldr	r2, [pc, #20]	; (80031a4 <_sbrk+0x64>)
 8003190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003192:	68fb      	ldr	r3, [r7, #12]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20010000 	.word	0x20010000
 80031a0:	00000400 	.word	0x00000400
 80031a4:	20000224 	.word	0x20000224
 80031a8:	20004640 	.word	0x20004640

080031ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <print_string>:
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}

void print_string(const char * s, uint8_t action) {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	70fb      	strb	r3, [r7, #3]
    char c = '\0';
 80031c4:	2300      	movs	r3, #0
 80031c6:	73fb      	strb	r3, [r7, #15]

    while(*s != '\0') {
 80031c8:	e009      	b.n	80031de <print_string+0x26>
        HAL_UART_Transmit(&huart1, (uint8_t *) s, (uint16_t) 0x01, HAL_MAX_DELAY);
 80031ca:	f04f 33ff 	mov.w	r3, #4294967295
 80031ce:	2201      	movs	r2, #1
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4819      	ldr	r0, [pc, #100]	; (8003238 <print_string+0x80>)
 80031d4:	f003 fb0d 	bl	80067f2 <HAL_UART_Transmit>
        s++;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3301      	adds	r3, #1
 80031dc:	607b      	str	r3, [r7, #4]
    while(*s != '\0') {
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f1      	bne.n	80031ca <print_string+0x12>
    }

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d114      	bne.n	8003216 <print_string+0x5e>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80031ec:	230d      	movs	r3, #13
 80031ee:	73fb      	strb	r3, [r7, #15]
 80031f0:	f107 010f 	add.w	r1, r7, #15
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295
 80031f8:	2201      	movs	r2, #1
 80031fa:	480f      	ldr	r0, [pc, #60]	; (8003238 <print_string+0x80>)
 80031fc:	f003 faf9 	bl	80067f2 <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8003200:	230a      	movs	r3, #10
 8003202:	73fb      	strb	r3, [r7, #15]
 8003204:	f107 010f 	add.w	r1, r7, #15
 8003208:	f04f 33ff 	mov.w	r3, #4294967295
 800320c:	2201      	movs	r2, #1
 800320e:	480a      	ldr	r0, [pc, #40]	; (8003238 <print_string+0x80>)
 8003210:	f003 faef 	bl	80067f2 <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }

}
 8003214:	e00c      	b.n	8003230 <print_string+0x78>
    else if(action == CR) {
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	2b02      	cmp	r3, #2
 800321a:	d109      	bne.n	8003230 <print_string+0x78>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 800321c:	230d      	movs	r3, #13
 800321e:	73fb      	strb	r3, [r7, #15]
 8003220:	f107 010f 	add.w	r1, r7, #15
 8003224:	f04f 33ff 	mov.w	r3, #4294967295
 8003228:	2201      	movs	r2, #1
 800322a:	4803      	ldr	r0, [pc, #12]	; (8003238 <print_string+0x80>)
 800322c:	f003 fae1 	bl	80067f2 <HAL_UART_Transmit>
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	200013b0 	.word	0x200013b0

0800323c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800323c:	480c      	ldr	r0, [pc, #48]	; (8003270 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800323e:	490d      	ldr	r1, [pc, #52]	; (8003274 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003240:	4a0d      	ldr	r2, [pc, #52]	; (8003278 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003244:	e002      	b.n	800324c <LoopCopyDataInit>

08003246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800324a:	3304      	adds	r3, #4

0800324c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800324c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800324e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003250:	d3f9      	bcc.n	8003246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003252:	4a0a      	ldr	r2, [pc, #40]	; (800327c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003254:	4c0a      	ldr	r4, [pc, #40]	; (8003280 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003258:	e001      	b.n	800325e <LoopFillZerobss>

0800325a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800325a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800325c:	3204      	adds	r2, #4

0800325e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800325e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003260:	d3fb      	bcc.n	800325a <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003262:	f7ff ffa3 	bl	80031ac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003266:	f003 fcfb 	bl	8006c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800326a:	f7fe fb77 	bl	800195c <main>
  bx lr
 800326e:	4770      	bx	lr
  ldr r0, =_sdata
 8003270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003274:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8003278:	0800a7f4 	.word	0x0800a7f4
  ldr r2, =_sbss
 800327c:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8003280:	2000463c 	.word	0x2000463c

08003284 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003284:	e7fe      	b.n	8003284 <ADC1_2_IRQHandler>
	...

08003288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800328c:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_Init+0x28>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a07      	ldr	r2, [pc, #28]	; (80032b0 <HAL_Init+0x28>)
 8003292:	f043 0310 	orr.w	r3, r3, #16
 8003296:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003298:	2003      	movs	r0, #3
 800329a:	f000 fb59 	bl	8003950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800329e:	2000      	movs	r0, #0
 80032a0:	f000 f808 	bl	80032b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032a4:	f7ff fca0 	bl	8002be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40022000 	.word	0x40022000

080032b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032bc:	4b12      	ldr	r3, [pc, #72]	; (8003308 <HAL_InitTick+0x54>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_InitTick+0x58>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	4619      	mov	r1, r3
 80032c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fb71 	bl	80039ba <HAL_SYSTICK_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e00e      	b.n	8003300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b0f      	cmp	r3, #15
 80032e6:	d80a      	bhi.n	80032fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032e8:	2200      	movs	r2, #0
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295
 80032f0:	f000 fb39 	bl	8003966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032f4:	4a06      	ldr	r2, [pc, #24]	; (8003310 <HAL_InitTick+0x5c>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e000      	b.n	8003300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000014 	.word	0x20000014
 800330c:	2000001c 	.word	0x2000001c
 8003310:	20000018 	.word	0x20000018

08003314 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_IncTick+0x1c>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_IncTick+0x20>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4413      	add	r3, r2
 8003324:	4a03      	ldr	r2, [pc, #12]	; (8003334 <HAL_IncTick+0x20>)
 8003326:	6013      	str	r3, [r2, #0]
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	2000001c 	.word	0x2000001c
 8003334:	200025c4 	.word	0x200025c4

08003338 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return uwTick;
 800333c:	4b02      	ldr	r3, [pc, #8]	; (8003348 <HAL_GetTick+0x10>)
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr
 8003348:	200025c4 	.word	0x200025c4

0800334c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003354:	f7ff fff0 	bl	8003338 <HAL_GetTick>
 8003358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d005      	beq.n	8003372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <HAL_Delay+0x44>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003372:	bf00      	nop
 8003374:	f7ff ffe0 	bl	8003338 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	429a      	cmp	r2, r3
 8003382:	d8f7      	bhi.n	8003374 <HAL_Delay+0x28>
  {
  }
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	2000001c 	.word	0x2000001c

08003394 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e0be      	b.n	8003534 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff fc3a 	bl	8002c4c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f9ab 	bl	8003734 <ADC_ConversionStop_Disable>
 80033de:	4603      	mov	r3, r0
 80033e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f040 8099 	bne.w	8003522 <HAL_ADC_Init+0x18e>
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 8095 	bne.w	8003522 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003400:	f023 0302 	bic.w	r3, r3, #2
 8003404:	f043 0202 	orr.w	r2, r3, #2
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003414:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	7b1b      	ldrb	r3, [r3, #12]
 800341a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800341c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	4313      	orrs	r3, r2
 8003422:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800342c:	d003      	beq.n	8003436 <HAL_ADC_Init+0xa2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d102      	bne.n	800343c <HAL_ADC_Init+0xa8>
 8003436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800343a:	e000      	b.n	800343e <HAL_ADC_Init+0xaa>
 800343c:	2300      	movs	r3, #0
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7d1b      	ldrb	r3, [r3, #20]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d119      	bne.n	8003480 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	7b1b      	ldrb	r3, [r3, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d109      	bne.n	8003468 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	3b01      	subs	r3, #1
 800345a:	035a      	lsls	r2, r3, #13
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	e00b      	b.n	8003480 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	f043 0220 	orr.w	r2, r3, #32
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	f043 0201 	orr.w	r2, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	430a      	orrs	r2, r1
 8003492:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	4b28      	ldr	r3, [pc, #160]	; (800353c <HAL_ADC_Init+0x1a8>)
 800349c:	4013      	ands	r3, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	68b9      	ldr	r1, [r7, #8]
 80034a4:	430b      	orrs	r3, r1
 80034a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b0:	d003      	beq.n	80034ba <HAL_ADC_Init+0x126>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d104      	bne.n	80034c4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	3b01      	subs	r3, #1
 80034c0:	051b      	lsls	r3, r3, #20
 80034c2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	4b18      	ldr	r3, [pc, #96]	; (8003540 <HAL_ADC_Init+0x1ac>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d10b      	bne.n	8003500 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	f023 0303 	bic.w	r3, r3, #3
 80034f6:	f043 0201 	orr.w	r2, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034fe:	e018      	b.n	8003532 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	f023 0312 	bic.w	r3, r3, #18
 8003508:	f043 0210 	orr.w	r2, r3, #16
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	f043 0201 	orr.w	r2, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003520:	e007      	b.n	8003532 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	f043 0210 	orr.w	r2, r3, #16
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003532:	7dfb      	ldrb	r3, [r7, #23]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	ffe1f7fd 	.word	0xffe1f7fd
 8003540:	ff1f0efe 	.word	0xff1f0efe

08003544 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x20>
 8003560:	2302      	movs	r3, #2
 8003562:	e0dc      	b.n	800371e <HAL_ADC_ConfigChannel+0x1da>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b06      	cmp	r3, #6
 8003572:	d81c      	bhi.n	80035ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	3b05      	subs	r3, #5
 8003586:	221f      	movs	r2, #31
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	4019      	ands	r1, r3
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	3b05      	subs	r3, #5
 80035a0:	fa00 f203 	lsl.w	r2, r0, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	635a      	str	r2, [r3, #52]	; 0x34
 80035ac:	e03c      	b.n	8003628 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b0c      	cmp	r3, #12
 80035b4:	d81c      	bhi.n	80035f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	3b23      	subs	r3, #35	; 0x23
 80035c8:	221f      	movs	r2, #31
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	4019      	ands	r1, r3
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	3b23      	subs	r3, #35	; 0x23
 80035e2:	fa00 f203 	lsl.w	r2, r0, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
 80035ee:	e01b      	b.n	8003628 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	3b41      	subs	r3, #65	; 0x41
 8003602:	221f      	movs	r2, #31
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	4019      	ands	r1, r3
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	3b41      	subs	r3, #65	; 0x41
 800361c:	fa00 f203 	lsl.w	r2, r0, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b09      	cmp	r3, #9
 800362e:	d91c      	bls.n	800366a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68d9      	ldr	r1, [r3, #12]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4613      	mov	r3, r2
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	4413      	add	r3, r2
 8003640:	3b1e      	subs	r3, #30
 8003642:	2207      	movs	r2, #7
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	4019      	ands	r1, r3
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	6898      	ldr	r0, [r3, #8]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4613      	mov	r3, r2
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	4413      	add	r3, r2
 800365a:	3b1e      	subs	r3, #30
 800365c:	fa00 f203 	lsl.w	r2, r0, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	60da      	str	r2, [r3, #12]
 8003668:	e019      	b.n	800369e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6919      	ldr	r1, [r3, #16]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4613      	mov	r3, r2
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	4413      	add	r3, r2
 800367a:	2207      	movs	r2, #7
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	4019      	ands	r1, r3
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	6898      	ldr	r0, [r3, #8]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4413      	add	r3, r2
 8003692:	fa00 f203 	lsl.w	r2, r0, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d003      	beq.n	80036ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80036aa:	2b11      	cmp	r3, #17
 80036ac:	d132      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1d      	ldr	r2, [pc, #116]	; (8003728 <HAL_ADC_ConfigChannel+0x1e4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d125      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d126      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80036d4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b10      	cmp	r3, #16
 80036dc:	d11a      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036de:	4b13      	ldr	r3, [pc, #76]	; (800372c <HAL_ADC_ConfigChannel+0x1e8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a13      	ldr	r2, [pc, #76]	; (8003730 <HAL_ADC_ConfigChannel+0x1ec>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	0c9a      	lsrs	r2, r3, #18
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036f4:	e002      	b.n	80036fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	3b01      	subs	r3, #1
 80036fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f9      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x1b2>
 8003702:	e007      	b.n	8003714 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	f043 0220 	orr.w	r2, r3, #32
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800371c:	7bfb      	ldrb	r3, [r7, #15]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr
 8003728:	40012400 	.word	0x40012400
 800372c:	20000014 	.word	0x20000014
 8003730:	431bde83 	.word	0x431bde83

08003734 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b01      	cmp	r3, #1
 800374c:	d12e      	bne.n	80037ac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0201 	bic.w	r2, r2, #1
 800375c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800375e:	f7ff fdeb 	bl	8003338 <HAL_GetTick>
 8003762:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003764:	e01b      	b.n	800379e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003766:	f7ff fde7 	bl	8003338 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d914      	bls.n	800379e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d10d      	bne.n	800379e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003786:	f043 0210 	orr.w	r2, r3, #16
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	f043 0201 	orr.w	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e007      	b.n	80037ae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d0dc      	beq.n	8003766 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <__NVIC_SetPriorityGrouping>:
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <__NVIC_SetPriorityGrouping+0x44>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037d4:	4013      	ands	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ea:	4a04      	ldr	r2, [pc, #16]	; (80037fc <__NVIC_SetPriorityGrouping+0x44>)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	60d3      	str	r3, [r2, #12]
}
 80037f0:	bf00      	nop
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <__NVIC_GetPriorityGrouping>:
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <__NVIC_GetPriorityGrouping+0x18>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	0a1b      	lsrs	r3, r3, #8
 800380a:	f003 0307 	and.w	r3, r3, #7
}
 800380e:	4618      	mov	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <__NVIC_EnableIRQ>:
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	2b00      	cmp	r3, #0
 800382c:	db0b      	blt.n	8003846 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	f003 021f 	and.w	r2, r3, #31
 8003834:	4906      	ldr	r1, [pc, #24]	; (8003850 <__NVIC_EnableIRQ+0x34>)
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2001      	movs	r0, #1
 800383e:	fa00 f202 	lsl.w	r2, r0, r2
 8003842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr
 8003850:	e000e100 	.word	0xe000e100

08003854 <__NVIC_SetPriority>:
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	6039      	str	r1, [r7, #0]
 800385e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003864:	2b00      	cmp	r3, #0
 8003866:	db0a      	blt.n	800387e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	b2da      	uxtb	r2, r3
 800386c:	490c      	ldr	r1, [pc, #48]	; (80038a0 <__NVIC_SetPriority+0x4c>)
 800386e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003872:	0112      	lsls	r2, r2, #4
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	440b      	add	r3, r1
 8003878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800387c:	e00a      	b.n	8003894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	b2da      	uxtb	r2, r3
 8003882:	4908      	ldr	r1, [pc, #32]	; (80038a4 <__NVIC_SetPriority+0x50>)
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	3b04      	subs	r3, #4
 800388c:	0112      	lsls	r2, r2, #4
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	440b      	add	r3, r1
 8003892:	761a      	strb	r2, [r3, #24]
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	e000e100 	.word	0xe000e100
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <NVIC_EncodePriority>:
{
 80038a8:	b480      	push	{r7}
 80038aa:	b089      	sub	sp, #36	; 0x24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f1c3 0307 	rsb	r3, r3, #7
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	bf28      	it	cs
 80038c6:	2304      	movcs	r3, #4
 80038c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	3304      	adds	r3, #4
 80038ce:	2b06      	cmp	r3, #6
 80038d0:	d902      	bls.n	80038d8 <NVIC_EncodePriority+0x30>
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	3b03      	subs	r3, #3
 80038d6:	e000      	b.n	80038da <NVIC_EncodePriority+0x32>
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038dc:	f04f 32ff 	mov.w	r2, #4294967295
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43da      	mvns	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	401a      	ands	r2, r3
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f0:	f04f 31ff 	mov.w	r1, #4294967295
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	fa01 f303 	lsl.w	r3, r1, r3
 80038fa:	43d9      	mvns	r1, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003900:	4313      	orrs	r3, r2
}
 8003902:	4618      	mov	r0, r3
 8003904:	3724      	adds	r7, #36	; 0x24
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr

0800390c <SysTick_Config>:
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3b01      	subs	r3, #1
 8003918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800391c:	d301      	bcc.n	8003922 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800391e:	2301      	movs	r3, #1
 8003920:	e00f      	b.n	8003942 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003922:	4a0a      	ldr	r2, [pc, #40]	; (800394c <SysTick_Config+0x40>)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3b01      	subs	r3, #1
 8003928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800392a:	210f      	movs	r1, #15
 800392c:	f04f 30ff 	mov.w	r0, #4294967295
 8003930:	f7ff ff90 	bl	8003854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <SysTick_Config+0x40>)
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800393a:	4b04      	ldr	r3, [pc, #16]	; (800394c <SysTick_Config+0x40>)
 800393c:	2207      	movs	r2, #7
 800393e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	e000e010 	.word	0xe000e010

08003950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff ff2d 	bl	80037b8 <__NVIC_SetPriorityGrouping>
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003966:	b580      	push	{r7, lr}
 8003968:	b086      	sub	sp, #24
 800396a:	af00      	add	r7, sp, #0
 800396c:	4603      	mov	r3, r0
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003978:	f7ff ff42 	bl	8003800 <__NVIC_GetPriorityGrouping>
 800397c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	6978      	ldr	r0, [r7, #20]
 8003984:	f7ff ff90 	bl	80038a8 <NVIC_EncodePriority>
 8003988:	4602      	mov	r2, r0
 800398a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800398e:	4611      	mov	r1, r2
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff ff5f 	bl	8003854 <__NVIC_SetPriority>
}
 8003996:	bf00      	nop
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	4603      	mov	r3, r0
 80039a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff35 	bl	800381c <__NVIC_EnableIRQ>
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff ffa2 	bl	800390c <SysTick_Config>
 80039c8:	4603      	mov	r3, r0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b08b      	sub	sp, #44	; 0x2c
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039de:	2300      	movs	r3, #0
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039e2:	2300      	movs	r3, #0
 80039e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039e6:	e169      	b.n	8003cbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039e8:	2201      	movs	r2, #1
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	f040 8158 	bne.w	8003cb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4a9a      	ldr	r2, [pc, #616]	; (8003c74 <HAL_GPIO_Init+0x2a0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d05e      	beq.n	8003ace <HAL_GPIO_Init+0xfa>
 8003a10:	4a98      	ldr	r2, [pc, #608]	; (8003c74 <HAL_GPIO_Init+0x2a0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d875      	bhi.n	8003b02 <HAL_GPIO_Init+0x12e>
 8003a16:	4a98      	ldr	r2, [pc, #608]	; (8003c78 <HAL_GPIO_Init+0x2a4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d058      	beq.n	8003ace <HAL_GPIO_Init+0xfa>
 8003a1c:	4a96      	ldr	r2, [pc, #600]	; (8003c78 <HAL_GPIO_Init+0x2a4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d86f      	bhi.n	8003b02 <HAL_GPIO_Init+0x12e>
 8003a22:	4a96      	ldr	r2, [pc, #600]	; (8003c7c <HAL_GPIO_Init+0x2a8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d052      	beq.n	8003ace <HAL_GPIO_Init+0xfa>
 8003a28:	4a94      	ldr	r2, [pc, #592]	; (8003c7c <HAL_GPIO_Init+0x2a8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d869      	bhi.n	8003b02 <HAL_GPIO_Init+0x12e>
 8003a2e:	4a94      	ldr	r2, [pc, #592]	; (8003c80 <HAL_GPIO_Init+0x2ac>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d04c      	beq.n	8003ace <HAL_GPIO_Init+0xfa>
 8003a34:	4a92      	ldr	r2, [pc, #584]	; (8003c80 <HAL_GPIO_Init+0x2ac>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d863      	bhi.n	8003b02 <HAL_GPIO_Init+0x12e>
 8003a3a:	4a92      	ldr	r2, [pc, #584]	; (8003c84 <HAL_GPIO_Init+0x2b0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d046      	beq.n	8003ace <HAL_GPIO_Init+0xfa>
 8003a40:	4a90      	ldr	r2, [pc, #576]	; (8003c84 <HAL_GPIO_Init+0x2b0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d85d      	bhi.n	8003b02 <HAL_GPIO_Init+0x12e>
 8003a46:	2b12      	cmp	r3, #18
 8003a48:	d82a      	bhi.n	8003aa0 <HAL_GPIO_Init+0xcc>
 8003a4a:	2b12      	cmp	r3, #18
 8003a4c:	d859      	bhi.n	8003b02 <HAL_GPIO_Init+0x12e>
 8003a4e:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <HAL_GPIO_Init+0x80>)
 8003a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a54:	08003acf 	.word	0x08003acf
 8003a58:	08003aa9 	.word	0x08003aa9
 8003a5c:	08003abb 	.word	0x08003abb
 8003a60:	08003afd 	.word	0x08003afd
 8003a64:	08003b03 	.word	0x08003b03
 8003a68:	08003b03 	.word	0x08003b03
 8003a6c:	08003b03 	.word	0x08003b03
 8003a70:	08003b03 	.word	0x08003b03
 8003a74:	08003b03 	.word	0x08003b03
 8003a78:	08003b03 	.word	0x08003b03
 8003a7c:	08003b03 	.word	0x08003b03
 8003a80:	08003b03 	.word	0x08003b03
 8003a84:	08003b03 	.word	0x08003b03
 8003a88:	08003b03 	.word	0x08003b03
 8003a8c:	08003b03 	.word	0x08003b03
 8003a90:	08003b03 	.word	0x08003b03
 8003a94:	08003b03 	.word	0x08003b03
 8003a98:	08003ab1 	.word	0x08003ab1
 8003a9c:	08003ac5 	.word	0x08003ac5
 8003aa0:	4a79      	ldr	r2, [pc, #484]	; (8003c88 <HAL_GPIO_Init+0x2b4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003aa6:	e02c      	b.n	8003b02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	623b      	str	r3, [r7, #32]
          break;
 8003aae:	e029      	b.n	8003b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	623b      	str	r3, [r7, #32]
          break;
 8003ab8:	e024      	b.n	8003b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	3308      	adds	r3, #8
 8003ac0:	623b      	str	r3, [r7, #32]
          break;
 8003ac2:	e01f      	b.n	8003b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	623b      	str	r3, [r7, #32]
          break;
 8003acc:	e01a      	b.n	8003b04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d102      	bne.n	8003adc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ad6:	2304      	movs	r3, #4
 8003ad8:	623b      	str	r3, [r7, #32]
          break;
 8003ada:	e013      	b.n	8003b04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d105      	bne.n	8003af0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	611a      	str	r2, [r3, #16]
          break;
 8003aee:	e009      	b.n	8003b04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003af0:	2308      	movs	r3, #8
 8003af2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	615a      	str	r2, [r3, #20]
          break;
 8003afa:	e003      	b.n	8003b04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003afc:	2300      	movs	r3, #0
 8003afe:	623b      	str	r3, [r7, #32]
          break;
 8003b00:	e000      	b.n	8003b04 <HAL_GPIO_Init+0x130>
          break;
 8003b02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2bff      	cmp	r3, #255	; 0xff
 8003b08:	d801      	bhi.n	8003b0e <HAL_GPIO_Init+0x13a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	e001      	b.n	8003b12 <HAL_GPIO_Init+0x13e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3304      	adds	r3, #4
 8003b12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2bff      	cmp	r3, #255	; 0xff
 8003b18:	d802      	bhi.n	8003b20 <HAL_GPIO_Init+0x14c>
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	e002      	b.n	8003b26 <HAL_GPIO_Init+0x152>
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	3b08      	subs	r3, #8
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	210f      	movs	r1, #15
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	fa01 f303 	lsl.w	r3, r1, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	401a      	ands	r2, r3
 8003b38:	6a39      	ldr	r1, [r7, #32]
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b40:	431a      	orrs	r2, r3
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 80b1 	beq.w	8003cb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b54:	4b4d      	ldr	r3, [pc, #308]	; (8003c8c <HAL_GPIO_Init+0x2b8>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	4a4c      	ldr	r2, [pc, #304]	; (8003c8c <HAL_GPIO_Init+0x2b8>)
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	6193      	str	r3, [r2, #24]
 8003b60:	4b4a      	ldr	r3, [pc, #296]	; (8003c8c <HAL_GPIO_Init+0x2b8>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b6c:	4a48      	ldr	r2, [pc, #288]	; (8003c90 <HAL_GPIO_Init+0x2bc>)
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	089b      	lsrs	r3, r3, #2
 8003b72:	3302      	adds	r3, #2
 8003b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	220f      	movs	r2, #15
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a40      	ldr	r2, [pc, #256]	; (8003c94 <HAL_GPIO_Init+0x2c0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d013      	beq.n	8003bc0 <HAL_GPIO_Init+0x1ec>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a3f      	ldr	r2, [pc, #252]	; (8003c98 <HAL_GPIO_Init+0x2c4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00d      	beq.n	8003bbc <HAL_GPIO_Init+0x1e8>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a3e      	ldr	r2, [pc, #248]	; (8003c9c <HAL_GPIO_Init+0x2c8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d007      	beq.n	8003bb8 <HAL_GPIO_Init+0x1e4>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a3d      	ldr	r2, [pc, #244]	; (8003ca0 <HAL_GPIO_Init+0x2cc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d101      	bne.n	8003bb4 <HAL_GPIO_Init+0x1e0>
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e006      	b.n	8003bc2 <HAL_GPIO_Init+0x1ee>
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	e004      	b.n	8003bc2 <HAL_GPIO_Init+0x1ee>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e002      	b.n	8003bc2 <HAL_GPIO_Init+0x1ee>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <HAL_GPIO_Init+0x1ee>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc4:	f002 0203 	and.w	r2, r2, #3
 8003bc8:	0092      	lsls	r2, r2, #2
 8003bca:	4093      	lsls	r3, r2
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003bd2:	492f      	ldr	r1, [pc, #188]	; (8003c90 <HAL_GPIO_Init+0x2bc>)
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	089b      	lsrs	r3, r3, #2
 8003bd8:	3302      	adds	r3, #2
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d006      	beq.n	8003bfa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003bec:	4b2d      	ldr	r3, [pc, #180]	; (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	492c      	ldr	r1, [pc, #176]	; (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	600b      	str	r3, [r1, #0]
 8003bf8:	e006      	b.n	8003c08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003bfa:	4b2a      	ldr	r3, [pc, #168]	; (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	43db      	mvns	r3, r3
 8003c02:	4928      	ldr	r1, [pc, #160]	; (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d006      	beq.n	8003c22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c14:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	4922      	ldr	r1, [pc, #136]	; (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	604b      	str	r3, [r1, #4]
 8003c20:	e006      	b.n	8003c30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c22:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	491e      	ldr	r1, [pc, #120]	; (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d006      	beq.n	8003c4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c3c:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	4918      	ldr	r1, [pc, #96]	; (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	608b      	str	r3, [r1, #8]
 8003c48:	e006      	b.n	8003c58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c4a:	4b16      	ldr	r3, [pc, #88]	; (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	43db      	mvns	r3, r3
 8003c52:	4914      	ldr	r1, [pc, #80]	; (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d021      	beq.n	8003ca8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c64:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	490e      	ldr	r1, [pc, #56]	; (8003ca4 <HAL_GPIO_Init+0x2d0>)
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60cb      	str	r3, [r1, #12]
 8003c70:	e021      	b.n	8003cb6 <HAL_GPIO_Init+0x2e2>
 8003c72:	bf00      	nop
 8003c74:	10320000 	.word	0x10320000
 8003c78:	10310000 	.word	0x10310000
 8003c7c:	10220000 	.word	0x10220000
 8003c80:	10210000 	.word	0x10210000
 8003c84:	10120000 	.word	0x10120000
 8003c88:	10110000 	.word	0x10110000
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40010000 	.word	0x40010000
 8003c94:	40010800 	.word	0x40010800
 8003c98:	40010c00 	.word	0x40010c00
 8003c9c:	40011000 	.word	0x40011000
 8003ca0:	40011400 	.word	0x40011400
 8003ca4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_GPIO_Init+0x304>)
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	4909      	ldr	r1, [pc, #36]	; (8003cd8 <HAL_GPIO_Init+0x304>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	3301      	adds	r3, #1
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f47f ae8e 	bne.w	80039e8 <HAL_GPIO_Init+0x14>
  }
}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	372c      	adds	r7, #44	; 0x2c
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr
 8003cd8:	40010400 	.word	0x40010400

08003cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	807b      	strh	r3, [r7, #2]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cec:	787b      	ldrb	r3, [r7, #1]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cf2:	887a      	ldrh	r2, [r7, #2]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003cf8:	e003      	b.n	8003d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003cfa:	887b      	ldrh	r3, [r7, #2]
 8003cfc:	041a      	lsls	r2, r3, #16
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	611a      	str	r2, [r3, #16]
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d1e:	887a      	ldrh	r2, [r7, #2]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4013      	ands	r3, r2
 8003d24:	041a      	lsls	r2, r3, #16
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	43d9      	mvns	r1, r3
 8003d2a:	887b      	ldrh	r3, [r7, #2]
 8003d2c:	400b      	ands	r3, r1
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	611a      	str	r2, [r3, #16]
}
 8003d34:	bf00      	nop
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr
	...

08003d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e12b      	b.n	8003faa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fe ffac 	bl	8002cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2224      	movs	r2, #36	; 0x24
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0201 	bic.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003da4:	f001 f906 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 8003da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	4a81      	ldr	r2, [pc, #516]	; (8003fb4 <HAL_I2C_Init+0x274>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d807      	bhi.n	8003dc4 <HAL_I2C_Init+0x84>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4a80      	ldr	r2, [pc, #512]	; (8003fb8 <HAL_I2C_Init+0x278>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	bf94      	ite	ls
 8003dbc:	2301      	movls	r3, #1
 8003dbe:	2300      	movhi	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	e006      	b.n	8003dd2 <HAL_I2C_Init+0x92>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4a7d      	ldr	r2, [pc, #500]	; (8003fbc <HAL_I2C_Init+0x27c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	bf94      	ite	ls
 8003dcc:	2301      	movls	r3, #1
 8003dce:	2300      	movhi	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e0e7      	b.n	8003faa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a78      	ldr	r2, [pc, #480]	; (8003fc0 <HAL_I2C_Init+0x280>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	0c9b      	lsrs	r3, r3, #18
 8003de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4a6a      	ldr	r2, [pc, #424]	; (8003fb4 <HAL_I2C_Init+0x274>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d802      	bhi.n	8003e14 <HAL_I2C_Init+0xd4>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	3301      	adds	r3, #1
 8003e12:	e009      	b.n	8003e28 <HAL_I2C_Init+0xe8>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	4a69      	ldr	r2, [pc, #420]	; (8003fc4 <HAL_I2C_Init+0x284>)
 8003e20:	fba2 2303 	umull	r2, r3, r2, r3
 8003e24:	099b      	lsrs	r3, r3, #6
 8003e26:	3301      	adds	r3, #1
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	495c      	ldr	r1, [pc, #368]	; (8003fb4 <HAL_I2C_Init+0x274>)
 8003e44:	428b      	cmp	r3, r1
 8003e46:	d819      	bhi.n	8003e7c <HAL_I2C_Init+0x13c>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1e59      	subs	r1, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e56:	1c59      	adds	r1, r3, #1
 8003e58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e5c:	400b      	ands	r3, r1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_I2C_Init+0x138>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1e59      	subs	r1, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e70:	3301      	adds	r3, #1
 8003e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e76:	e051      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	e04f      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d111      	bne.n	8003ea8 <HAL_I2C_Init+0x168>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1e58      	subs	r0, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	440b      	add	r3, r1
 8003e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e96:	3301      	adds	r3, #1
 8003e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	bf0c      	ite	eq
 8003ea0:	2301      	moveq	r3, #1
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	e012      	b.n	8003ece <HAL_I2C_Init+0x18e>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1e58      	subs	r0, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	0099      	lsls	r1, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf0c      	ite	eq
 8003ec8:	2301      	moveq	r3, #1
 8003eca:	2300      	movne	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_I2C_Init+0x196>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e022      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10e      	bne.n	8003efc <HAL_I2C_Init+0x1bc>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1e58      	subs	r0, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	440b      	add	r3, r1
 8003eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efa:	e00f      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1e58      	subs	r0, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6859      	ldr	r1, [r3, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	0099      	lsls	r1, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f12:	3301      	adds	r3, #1
 8003f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	6809      	ldr	r1, [r1, #0]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69da      	ldr	r2, [r3, #28]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6911      	ldr	r1, [r2, #16]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68d2      	ldr	r2, [r2, #12]
 8003f56:	4311      	orrs	r1, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	000186a0 	.word	0x000186a0
 8003fb8:	001e847f 	.word	0x001e847f
 8003fbc:	003d08ff 	.word	0x003d08ff
 8003fc0:	431bde83 	.word	0x431bde83
 8003fc4:	10624dd3 	.word	0x10624dd3

08003fc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	607a      	str	r2, [r7, #4]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	817b      	strh	r3, [r7, #10]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fdc:	f7ff f9ac 	bl	8003338 <HAL_GetTick>
 8003fe0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	f040 80e0 	bne.w	80041b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	2319      	movs	r3, #25
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	4970      	ldr	r1, [pc, #448]	; (80041bc <HAL_I2C_Master_Transmit+0x1f4>)
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f964 	bl	80042c8 <I2C_WaitOnFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004006:	2302      	movs	r3, #2
 8004008:	e0d3      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_I2C_Master_Transmit+0x50>
 8004014:	2302      	movs	r3, #2
 8004016:	e0cc      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b01      	cmp	r3, #1
 800402c:	d007      	beq.n	800403e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800404c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2221      	movs	r2, #33	; 0x21
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2210      	movs	r2, #16
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	893a      	ldrh	r2, [r7, #8]
 800406e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4a50      	ldr	r2, [pc, #320]	; (80041c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800407e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004080:	8979      	ldrh	r1, [r7, #10]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	6a3a      	ldr	r2, [r7, #32]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 f89c 	bl	80041c4 <I2C_MasterRequestWrite>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e08d      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004096:	2300      	movs	r3, #0
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040ac:	e066      	b.n	800417c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	6a39      	ldr	r1, [r7, #32]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f9de 	bl	8004474 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00d      	beq.n	80040da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d107      	bne.n	80040d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e06b      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	781a      	ldrb	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b04      	cmp	r3, #4
 8004116:	d11b      	bne.n	8004150 <HAL_I2C_Master_Transmit+0x188>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411c:	2b00      	cmp	r3, #0
 800411e:	d017      	beq.n	8004150 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	6a39      	ldr	r1, [r7, #32]
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f9ce 	bl	80044f6 <I2C_WaitOnBTFFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00d      	beq.n	800417c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	2b04      	cmp	r3, #4
 8004166:	d107      	bne.n	8004178 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004176:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e01a      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004180:	2b00      	cmp	r3, #0
 8004182:	d194      	bne.n	80040ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	e000      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041b0:	2302      	movs	r3, #2
  }
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	00100002 	.word	0x00100002
 80041c0:	ffff0000 	.word	0xffff0000

080041c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	607a      	str	r2, [r7, #4]
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	460b      	mov	r3, r1
 80041d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d006      	beq.n	80041ee <I2C_MasterRequestWrite+0x2a>
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d003      	beq.n	80041ee <I2C_MasterRequestWrite+0x2a>
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041ec:	d108      	bne.n	8004200 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	e00b      	b.n	8004218 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	2b12      	cmp	r3, #18
 8004206:	d107      	bne.n	8004218 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004216:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f84f 	bl	80042c8 <I2C_WaitOnFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00d      	beq.n	800424c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800423e:	d103      	bne.n	8004248 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004246:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e035      	b.n	80042b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004254:	d108      	bne.n	8004268 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004256:	897b      	ldrh	r3, [r7, #10]
 8004258:	b2db      	uxtb	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004264:	611a      	str	r2, [r3, #16]
 8004266:	e01b      	b.n	80042a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004268:	897b      	ldrh	r3, [r7, #10]
 800426a:	11db      	asrs	r3, r3, #7
 800426c:	b2db      	uxtb	r3, r3
 800426e:	f003 0306 	and.w	r3, r3, #6
 8004272:	b2db      	uxtb	r3, r3
 8004274:	f063 030f 	orn	r3, r3, #15
 8004278:	b2da      	uxtb	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	490e      	ldr	r1, [pc, #56]	; (80042c0 <I2C_MasterRequestWrite+0xfc>)
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 f875 	bl	8004376 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e010      	b.n	80042b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004296:	897b      	ldrh	r3, [r7, #10]
 8004298:	b2da      	uxtb	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4907      	ldr	r1, [pc, #28]	; (80042c4 <I2C_MasterRequestWrite+0x100>)
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f865 	bl	8004376 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	00010008 	.word	0x00010008
 80042c4:	00010002 	.word	0x00010002

080042c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	4613      	mov	r3, r2
 80042d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042d8:	e025      	b.n	8004326 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e0:	d021      	beq.n	8004326 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e2:	f7ff f829 	bl	8003338 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d302      	bcc.n	80042f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d116      	bne.n	8004326 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f043 0220 	orr.w	r2, r3, #32
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e023      	b.n	800436e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	0c1b      	lsrs	r3, r3, #16
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b01      	cmp	r3, #1
 800432e:	d10d      	bne.n	800434c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	43da      	mvns	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4013      	ands	r3, r2
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	bf0c      	ite	eq
 8004342:	2301      	moveq	r3, #1
 8004344:	2300      	movne	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	e00c      	b.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	43da      	mvns	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4013      	ands	r3, r2
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	bf0c      	ite	eq
 800435e:	2301      	moveq	r3, #1
 8004360:	2300      	movne	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	429a      	cmp	r2, r3
 800436a:	d0b6      	beq.n	80042da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b084      	sub	sp, #16
 800437a:	af00      	add	r7, sp, #0
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	607a      	str	r2, [r7, #4]
 8004382:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004384:	e051      	b.n	800442a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004394:	d123      	bne.n	80043de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f043 0204 	orr.w	r2, r3, #4
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e046      	b.n	800446c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d021      	beq.n	800442a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e6:	f7fe ffa7 	bl	8003338 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d302      	bcc.n	80043fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d116      	bne.n	800442a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f043 0220 	orr.w	r2, r3, #32
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e020      	b.n	800446c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	0c1b      	lsrs	r3, r3, #16
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	d10c      	bne.n	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	43da      	mvns	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4013      	ands	r3, r2
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	bf14      	ite	ne
 8004446:	2301      	movne	r3, #1
 8004448:	2300      	moveq	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	e00b      	b.n	8004466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	43da      	mvns	r2, r3
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	4013      	ands	r3, r2
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	bf14      	ite	ne
 8004460:	2301      	movne	r3, #1
 8004462:	2300      	moveq	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d18d      	bne.n	8004386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004480:	e02d      	b.n	80044de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f878 	bl	8004578 <I2C_IsAcknowledgeFailed>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e02d      	b.n	80044ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004498:	d021      	beq.n	80044de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449a:	f7fe ff4d 	bl	8003338 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d302      	bcc.n	80044b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d116      	bne.n	80044de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f043 0220 	orr.w	r2, r3, #32
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e007      	b.n	80044ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e8:	2b80      	cmp	r3, #128	; 0x80
 80044ea:	d1ca      	bne.n	8004482 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004502:	e02d      	b.n	8004560 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 f837 	bl	8004578 <I2C_IsAcknowledgeFailed>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e02d      	b.n	8004570 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451a:	d021      	beq.n	8004560 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451c:	f7fe ff0c 	bl	8003338 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	429a      	cmp	r2, r3
 800452a:	d302      	bcc.n	8004532 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d116      	bne.n	8004560 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	f043 0220 	orr.w	r2, r3, #32
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e007      	b.n	8004570 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b04      	cmp	r3, #4
 800456c:	d1ca      	bne.n	8004504 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800458e:	d11b      	bne.n	80045c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004598:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	f043 0204 	orr.w	r2, r3, #4
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e000      	b.n	80045ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr

080045d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e304      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 8087 	beq.w	8004702 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045f4:	4b92      	ldr	r3, [pc, #584]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d00c      	beq.n	800461a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004600:	4b8f      	ldr	r3, [pc, #572]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 030c 	and.w	r3, r3, #12
 8004608:	2b08      	cmp	r3, #8
 800460a:	d112      	bne.n	8004632 <HAL_RCC_OscConfig+0x5e>
 800460c:	4b8c      	ldr	r3, [pc, #560]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004618:	d10b      	bne.n	8004632 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800461a:	4b89      	ldr	r3, [pc, #548]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d06c      	beq.n	8004700 <HAL_RCC_OscConfig+0x12c>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d168      	bne.n	8004700 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e2de      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800463a:	d106      	bne.n	800464a <HAL_RCC_OscConfig+0x76>
 800463c:	4b80      	ldr	r3, [pc, #512]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a7f      	ldr	r2, [pc, #508]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	e02e      	b.n	80046a8 <HAL_RCC_OscConfig+0xd4>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10c      	bne.n	800466c <HAL_RCC_OscConfig+0x98>
 8004652:	4b7b      	ldr	r3, [pc, #492]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a7a      	ldr	r2, [pc, #488]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	4b78      	ldr	r3, [pc, #480]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a77      	ldr	r2, [pc, #476]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004664:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	e01d      	b.n	80046a8 <HAL_RCC_OscConfig+0xd4>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004674:	d10c      	bne.n	8004690 <HAL_RCC_OscConfig+0xbc>
 8004676:	4b72      	ldr	r3, [pc, #456]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a71      	ldr	r2, [pc, #452]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 800467c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	4b6f      	ldr	r3, [pc, #444]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a6e      	ldr	r2, [pc, #440]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e00b      	b.n	80046a8 <HAL_RCC_OscConfig+0xd4>
 8004690:	4b6b      	ldr	r3, [pc, #428]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a6a      	ldr	r2, [pc, #424]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	4b68      	ldr	r3, [pc, #416]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a67      	ldr	r2, [pc, #412]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 80046a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d013      	beq.n	80046d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fe fe42 	bl	8003338 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fe fe3e 	bl	8003338 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	; 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e292      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ca:	4b5d      	ldr	r3, [pc, #372]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0xe4>
 80046d6:	e014      	b.n	8004702 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d8:	f7fe fe2e 	bl	8003338 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046e0:	f7fe fe2a 	bl	8003338 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b64      	cmp	r3, #100	; 0x64
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e27e      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f2:	4b53      	ldr	r3, [pc, #332]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x10c>
 80046fe:	e000      	b.n	8004702 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d063      	beq.n	80047d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800470e:	4b4c      	ldr	r3, [pc, #304]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00b      	beq.n	8004732 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800471a:	4b49      	ldr	r3, [pc, #292]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f003 030c 	and.w	r3, r3, #12
 8004722:	2b08      	cmp	r3, #8
 8004724:	d11c      	bne.n	8004760 <HAL_RCC_OscConfig+0x18c>
 8004726:	4b46      	ldr	r3, [pc, #280]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d116      	bne.n	8004760 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004732:	4b43      	ldr	r3, [pc, #268]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <HAL_RCC_OscConfig+0x176>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d001      	beq.n	800474a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e252      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474a:	4b3d      	ldr	r3, [pc, #244]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	4939      	ldr	r1, [pc, #228]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800475e:	e03a      	b.n	80047d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d020      	beq.n	80047aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004768:	4b36      	ldr	r3, [pc, #216]	; (8004844 <HAL_RCC_OscConfig+0x270>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476e:	f7fe fde3 	bl	8003338 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004776:	f7fe fddf 	bl	8003338 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e233      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004788:	4b2d      	ldr	r3, [pc, #180]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004794:	4b2a      	ldr	r3, [pc, #168]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	4927      	ldr	r1, [pc, #156]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	600b      	str	r3, [r1, #0]
 80047a8:	e015      	b.n	80047d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047aa:	4b26      	ldr	r3, [pc, #152]	; (8004844 <HAL_RCC_OscConfig+0x270>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b0:	f7fe fdc2 	bl	8003338 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047b8:	f7fe fdbe 	bl	8003338 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e212      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ca:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d03a      	beq.n	8004858 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d019      	beq.n	800481e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ea:	4b17      	ldr	r3, [pc, #92]	; (8004848 <HAL_RCC_OscConfig+0x274>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f0:	f7fe fda2 	bl	8003338 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047f8:	f7fe fd9e 	bl	8003338 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e1f2      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480a:	4b0d      	ldr	r3, [pc, #52]	; (8004840 <HAL_RCC_OscConfig+0x26c>)
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004816:	2001      	movs	r0, #1
 8004818:	f000 fbf4 	bl	8005004 <RCC_Delay>
 800481c:	e01c      	b.n	8004858 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800481e:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <HAL_RCC_OscConfig+0x274>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004824:	f7fe fd88 	bl	8003338 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800482a:	e00f      	b.n	800484c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800482c:	f7fe fd84 	bl	8003338 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d908      	bls.n	800484c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e1d8      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
 800483e:	bf00      	nop
 8004840:	40021000 	.word	0x40021000
 8004844:	42420000 	.word	0x42420000
 8004848:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800484c:	4b9b      	ldr	r3, [pc, #620]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1e9      	bne.n	800482c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 80a6 	beq.w	80049b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004866:	2300      	movs	r3, #0
 8004868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800486a:	4b94      	ldr	r3, [pc, #592]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10d      	bne.n	8004892 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004876:	4b91      	ldr	r3, [pc, #580]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	4a90      	ldr	r2, [pc, #576]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 800487c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004880:	61d3      	str	r3, [r2, #28]
 8004882:	4b8e      	ldr	r3, [pc, #568]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488a:	60bb      	str	r3, [r7, #8]
 800488c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800488e:	2301      	movs	r3, #1
 8004890:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004892:	4b8b      	ldr	r3, [pc, #556]	; (8004ac0 <HAL_RCC_OscConfig+0x4ec>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d118      	bne.n	80048d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800489e:	4b88      	ldr	r3, [pc, #544]	; (8004ac0 <HAL_RCC_OscConfig+0x4ec>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a87      	ldr	r2, [pc, #540]	; (8004ac0 <HAL_RCC_OscConfig+0x4ec>)
 80048a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048aa:	f7fe fd45 	bl	8003338 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b2:	f7fe fd41 	bl	8003338 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b64      	cmp	r3, #100	; 0x64
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e195      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c4:	4b7e      	ldr	r3, [pc, #504]	; (8004ac0 <HAL_RCC_OscConfig+0x4ec>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d106      	bne.n	80048e6 <HAL_RCC_OscConfig+0x312>
 80048d8:	4b78      	ldr	r3, [pc, #480]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	4a77      	ldr	r2, [pc, #476]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	6213      	str	r3, [r2, #32]
 80048e4:	e02d      	b.n	8004942 <HAL_RCC_OscConfig+0x36e>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10c      	bne.n	8004908 <HAL_RCC_OscConfig+0x334>
 80048ee:	4b73      	ldr	r3, [pc, #460]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	4a72      	ldr	r2, [pc, #456]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 80048f4:	f023 0301 	bic.w	r3, r3, #1
 80048f8:	6213      	str	r3, [r2, #32]
 80048fa:	4b70      	ldr	r3, [pc, #448]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	4a6f      	ldr	r2, [pc, #444]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 8004900:	f023 0304 	bic.w	r3, r3, #4
 8004904:	6213      	str	r3, [r2, #32]
 8004906:	e01c      	b.n	8004942 <HAL_RCC_OscConfig+0x36e>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	2b05      	cmp	r3, #5
 800490e:	d10c      	bne.n	800492a <HAL_RCC_OscConfig+0x356>
 8004910:	4b6a      	ldr	r3, [pc, #424]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	4a69      	ldr	r2, [pc, #420]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 8004916:	f043 0304 	orr.w	r3, r3, #4
 800491a:	6213      	str	r3, [r2, #32]
 800491c:	4b67      	ldr	r3, [pc, #412]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	4a66      	ldr	r2, [pc, #408]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	6213      	str	r3, [r2, #32]
 8004928:	e00b      	b.n	8004942 <HAL_RCC_OscConfig+0x36e>
 800492a:	4b64      	ldr	r3, [pc, #400]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	4a63      	ldr	r2, [pc, #396]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 8004930:	f023 0301 	bic.w	r3, r3, #1
 8004934:	6213      	str	r3, [r2, #32]
 8004936:	4b61      	ldr	r3, [pc, #388]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	4a60      	ldr	r2, [pc, #384]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 800493c:	f023 0304 	bic.w	r3, r3, #4
 8004940:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d015      	beq.n	8004976 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494a:	f7fe fcf5 	bl	8003338 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004950:	e00a      	b.n	8004968 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004952:	f7fe fcf1 	bl	8003338 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004960:	4293      	cmp	r3, r2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e143      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004968:	4b54      	ldr	r3, [pc, #336]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0ee      	beq.n	8004952 <HAL_RCC_OscConfig+0x37e>
 8004974:	e014      	b.n	80049a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004976:	f7fe fcdf 	bl	8003338 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800497c:	e00a      	b.n	8004994 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800497e:	f7fe fcdb 	bl	8003338 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	f241 3288 	movw	r2, #5000	; 0x1388
 800498c:	4293      	cmp	r3, r2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e12d      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004994:	4b49      	ldr	r3, [pc, #292]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1ee      	bne.n	800497e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049a0:	7dfb      	ldrb	r3, [r7, #23]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d105      	bne.n	80049b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a6:	4b45      	ldr	r3, [pc, #276]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	4a44      	ldr	r2, [pc, #272]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 80049ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b0:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 808c 	beq.w	8004ad4 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80049bc:	4b3f      	ldr	r3, [pc, #252]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c8:	d10e      	bne.n	80049e8 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80049ca:	4b3c      	ldr	r3, [pc, #240]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d108      	bne.n	80049e8 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80049d6:	4b39      	ldr	r3, [pc, #228]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80049de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e2:	d101      	bne.n	80049e8 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e103      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d14e      	bne.n	8004a8e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80049f0:	4b32      	ldr	r3, [pc, #200]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d009      	beq.n	8004a10 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80049fc:	4b2f      	ldr	r3, [pc, #188]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d001      	beq.n	8004a10 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e0ef      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004a10:	4b2c      	ldr	r3, [pc, #176]	; (8004ac4 <HAL_RCC_OscConfig+0x4f0>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a16:	f7fe fc8f 	bl	8003338 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a1e:	f7fe fc8b 	bl	8003338 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b64      	cmp	r3, #100	; 0x64
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e0df      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004a30:	4b22      	ldr	r3, [pc, #136]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1f0      	bne.n	8004a1e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8004a3c:	4b1f      	ldr	r3, [pc, #124]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a48:	491c      	ldr	r1, [pc, #112]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8004a4e:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	4918      	ldr	r1, [pc, #96]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8004a60:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <HAL_RCC_OscConfig+0x4f0>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a66:	f7fe fc67 	bl	8003338 <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004a6c:	e008      	b.n	8004a80 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a6e:	f7fe fc63 	bl	8003338 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b64      	cmp	r3, #100	; 0x64
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e0b7      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004a80:	4b0e      	ldr	r3, [pc, #56]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0f0      	beq.n	8004a6e <HAL_RCC_OscConfig+0x49a>
 8004a8c:	e022      	b.n	8004ad4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8004a8e:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 8004a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a92:	4a0a      	ldr	r2, [pc, #40]	; (8004abc <HAL_RCC_OscConfig+0x4e8>)
 8004a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <HAL_RCC_OscConfig+0x4f0>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa0:	f7fe fc4a 	bl	8003338 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004aa6:	e00f      	b.n	8004ac8 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004aa8:	f7fe fc46 	bl	8003338 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b64      	cmp	r3, #100	; 0x64
 8004ab4:	d908      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e09a      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
 8004aba:	bf00      	nop
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	40007000 	.word	0x40007000
 8004ac4:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004ac8:	4b4b      	ldr	r3, [pc, #300]	; (8004bf8 <HAL_RCC_OscConfig+0x624>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e9      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 8088 	beq.w	8004bee <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ade:	4b46      	ldr	r3, [pc, #280]	; (8004bf8 <HAL_RCC_OscConfig+0x624>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f003 030c 	and.w	r3, r3, #12
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d068      	beq.n	8004bbc <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d14d      	bne.n	8004b8e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af2:	4b42      	ldr	r3, [pc, #264]	; (8004bfc <HAL_RCC_OscConfig+0x628>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af8:	f7fe fc1e 	bl	8003338 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b00:	f7fe fc1a 	bl	8003338 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e06e      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b12:	4b39      	ldr	r3, [pc, #228]	; (8004bf8 <HAL_RCC_OscConfig+0x624>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1f0      	bne.n	8004b00 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b26:	d10f      	bne.n	8004b48 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8004b28:	4b33      	ldr	r3, [pc, #204]	; (8004bf8 <HAL_RCC_OscConfig+0x624>)
 8004b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	4931      	ldr	r1, [pc, #196]	; (8004bf8 <HAL_RCC_OscConfig+0x624>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b36:	4b30      	ldr	r3, [pc, #192]	; (8004bf8 <HAL_RCC_OscConfig+0x624>)
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	f023 020f 	bic.w	r2, r3, #15
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	492d      	ldr	r1, [pc, #180]	; (8004bf8 <HAL_RCC_OscConfig+0x624>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b48:	4b2b      	ldr	r3, [pc, #172]	; (8004bf8 <HAL_RCC_OscConfig+0x624>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	4927      	ldr	r1, [pc, #156]	; (8004bf8 <HAL_RCC_OscConfig+0x624>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b60:	4b26      	ldr	r3, [pc, #152]	; (8004bfc <HAL_RCC_OscConfig+0x628>)
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b66:	f7fe fbe7 	bl	8003338 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6e:	f7fe fbe3 	bl	8003338 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e037      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b80:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <HAL_RCC_OscConfig+0x624>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0f0      	beq.n	8004b6e <HAL_RCC_OscConfig+0x59a>
 8004b8c:	e02f      	b.n	8004bee <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8e:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <HAL_RCC_OscConfig+0x628>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b94:	f7fe fbd0 	bl	8003338 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9c:	f7fe fbcc 	bl	8003338 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e020      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bae:	4b12      	ldr	r3, [pc, #72]	; (8004bf8 <HAL_RCC_OscConfig+0x624>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0x5c8>
 8004bba:	e018      	b.n	8004bee <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d101      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e013      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_RCC_OscConfig+0x624>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d106      	bne.n	8004bea <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d001      	beq.n	8004bee <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	42420060 	.word	0x42420060

08004c00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e0d0      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c14:	4b6a      	ldr	r3, [pc, #424]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d910      	bls.n	8004c44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c22:	4b67      	ldr	r3, [pc, #412]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 0207 	bic.w	r2, r3, #7
 8004c2a:	4965      	ldr	r1, [pc, #404]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c32:	4b63      	ldr	r3, [pc, #396]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0b8      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d020      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c5c:	4b59      	ldr	r3, [pc, #356]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	4a58      	ldr	r2, [pc, #352]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c74:	4b53      	ldr	r3, [pc, #332]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	4a52      	ldr	r2, [pc, #328]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c80:	4b50      	ldr	r3, [pc, #320]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	494d      	ldr	r1, [pc, #308]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d040      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d107      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca6:	4b47      	ldr	r3, [pc, #284]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d115      	bne.n	8004cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e07f      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d107      	bne.n	8004cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cbe:	4b41      	ldr	r3, [pc, #260]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d109      	bne.n	8004cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e073      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cce:	4b3d      	ldr	r3, [pc, #244]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e06b      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cde:	4b39      	ldr	r3, [pc, #228]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f023 0203 	bic.w	r2, r3, #3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4936      	ldr	r1, [pc, #216]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cf0:	f7fe fb22 	bl	8003338 <HAL_GetTick>
 8004cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf6:	e00a      	b.n	8004d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cf8:	f7fe fb1e 	bl	8003338 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e053      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d0e:	4b2d      	ldr	r3, [pc, #180]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f003 020c 	and.w	r2, r3, #12
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d1eb      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d20:	4b27      	ldr	r3, [pc, #156]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d210      	bcs.n	8004d50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2e:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f023 0207 	bic.w	r2, r3, #7
 8004d36:	4922      	ldr	r1, [pc, #136]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3e:	4b20      	ldr	r3, [pc, #128]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e032      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d008      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d5c:	4b19      	ldr	r3, [pc, #100]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4916      	ldr	r1, [pc, #88]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d7a:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	490e      	ldr	r1, [pc, #56]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d8e:	f000 f821 	bl	8004dd4 <HAL_RCC_GetSysClockFreq>
 8004d92:	4602      	mov	r2, r0
 8004d94:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	490a      	ldr	r1, [pc, #40]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004da0:	5ccb      	ldrb	r3, [r1, r3]
 8004da2:	fa22 f303 	lsr.w	r3, r2, r3
 8004da6:	4a09      	ldr	r2, [pc, #36]	; (8004dcc <HAL_RCC_ClockConfig+0x1cc>)
 8004da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004daa:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <HAL_RCC_ClockConfig+0x1d0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe fa80 	bl	80032b4 <HAL_InitTick>

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40022000 	.word	0x40022000
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	0800a3e8 	.word	0x0800a3e8
 8004dcc:	20000014 	.word	0x20000014
 8004dd0:	20000018 	.word	0x20000018

08004dd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004dd8:	b091      	sub	sp, #68	; 0x44
 8004dda:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8004ddc:	4b6a      	ldr	r3, [pc, #424]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x1b4>)
 8004dde:	f107 0414 	add.w	r4, r7, #20
 8004de2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004de4:	c407      	stmia	r4!, {r0, r1, r2}
 8004de6:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8004de8:	4b68      	ldr	r3, [pc, #416]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dea:	1d3c      	adds	r4, r7, #4
 8004dec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004dee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	637b      	str	r3, [r7, #52]	; 0x34
 8004df6:	2300      	movs	r3, #0
 8004df8:	633b      	str	r3, [r7, #48]	; 0x30
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dfe:	2300      	movs	r3, #0
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e0e:	4b60      	ldr	r3, [pc, #384]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e16:	f003 030c 	and.w	r3, r3, #12
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d002      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0x50>
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d003      	beq.n	8004e2a <HAL_RCC_GetSysClockFreq+0x56>
 8004e22:	e0a8      	b.n	8004f76 <HAL_RCC_GetSysClockFreq+0x1a2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e24:	4b5b      	ldr	r3, [pc, #364]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004e26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e28:	e0a8      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2c:	0c9b      	lsrs	r3, r3, #18
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004e36:	4413      	add	r3, r2
 8004e38:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8004e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 808e 	beq.w	8004f66 <HAL_RCC_GetSysClockFreq+0x192>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004e4a:	4b51      	ldr	r3, [pc, #324]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004e56:	4413      	add	r3, r2
 8004e58:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8004e5c:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004e5e:	4b4c      	ldr	r3, [pc, #304]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d06b      	beq.n	8004f42 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004e6a:	4b49      	ldr	r3, [pc, #292]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6e:	091b      	lsrs	r3, r3, #4
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	3301      	adds	r3, #1
 8004e76:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004e78:	4b45      	ldr	r3, [pc, #276]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	0a1b      	lsrs	r3, r3, #8
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	3302      	adds	r3, #2
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f04f 0100 	mov.w	r1, #0
 8004e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e90:	461a      	mov	r2, r3
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	fb02 f501 	mul.w	r5, r2, r1
 8004e9a:	fb00 f403 	mul.w	r4, r0, r3
 8004e9e:	192e      	adds	r6, r5, r4
 8004ea0:	fba0 4502 	umull	r4, r5, r0, r2
 8004ea4:	1973      	adds	r3, r6, r5
 8004ea6:	461d      	mov	r5, r3
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	4629      	mov	r1, r5
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	014b      	lsls	r3, r1, #5
 8004eb6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004eba:	0142      	lsls	r2, r0, #5
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	1b00      	subs	r0, r0, r4
 8004ec2:	eb61 0105 	sbc.w	r1, r1, r5
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	018b      	lsls	r3, r1, #6
 8004ed0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ed4:	0182      	lsls	r2, r0, #6
 8004ed6:	1a12      	subs	r2, r2, r0
 8004ed8:	eb63 0301 	sbc.w	r3, r3, r1
 8004edc:	f04f 0000 	mov.w	r0, #0
 8004ee0:	f04f 0100 	mov.w	r1, #0
 8004ee4:	00d9      	lsls	r1, r3, #3
 8004ee6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004eea:	00d0      	lsls	r0, r2, #3
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	1912      	adds	r2, r2, r4
 8004ef2:	eb45 0303 	adc.w	r3, r5, r3
 8004ef6:	f04f 0000 	mov.w	r0, #0
 8004efa:	f04f 0100 	mov.w	r1, #0
 8004efe:	0299      	lsls	r1, r3, #10
 8004f00:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004f04:	0290      	lsls	r0, r2, #10
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4690      	mov	r8, r2
 8004f0c:	4699      	mov	r9, r3
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	4618      	mov	r0, r3
 8004f12:	f04f 0100 	mov.w	r1, #0
 8004f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f18:	461a      	mov	r2, r3
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	fb02 f501 	mul.w	r5, r2, r1
 8004f22:	fb00 f403 	mul.w	r4, r0, r3
 8004f26:	442c      	add	r4, r5
 8004f28:	fba0 2302 	umull	r2, r3, r0, r2
 8004f2c:	18e1      	adds	r1, r4, r3
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4640      	mov	r0, r8
 8004f32:	4649      	mov	r1, r9
 8004f34:	f7fb fe14 	bl	8000b60 <__aeabi_uldivmod>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f40:	e007      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0x17e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004f46:	fb02 f203 	mul.w	r2, r2, r3
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8004f52:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004f56:	461a      	mov	r2, r3
 8004f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d108      	bne.n	8004f70 <HAL_RCC_GetSysClockFreq+0x19c>
        {
          pllclk = pllclk / 2;
 8004f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f60:	085b      	lsrs	r3, r3, #1
 8004f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f64:	e004      	b.n	8004f70 <HAL_RCC_GetSysClockFreq+0x19c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	4a0b      	ldr	r2, [pc, #44]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x1c4>)
 8004f6a:	fb02 f303 	mul.w	r3, r2, r3
 8004f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8004f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f74:	e002      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f76:	4b09      	ldr	r3, [pc, #36]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x1c8>)
 8004f78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3744      	adds	r7, #68	; 0x44
 8004f82:	46bd      	mov	sp, r7
 8004f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f88:	08009c28 	.word	0x08009c28
 8004f8c:	08009c38 	.word	0x08009c38
 8004f90:	40021000 	.word	0x40021000
 8004f94:	00f42400 	.word	0x00f42400
 8004f98:	003d0900 	.word	0x003d0900
 8004f9c:	007a1200 	.word	0x007a1200

08004fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fa4:	4b02      	ldr	r3, [pc, #8]	; (8004fb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr
 8004fb0:	20000014 	.word	0x20000014

08004fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fb8:	f7ff fff2 	bl	8004fa0 <HAL_RCC_GetHCLKFreq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	0a1b      	lsrs	r3, r3, #8
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	4903      	ldr	r1, [pc, #12]	; (8004fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fca:	5ccb      	ldrb	r3, [r1, r3]
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	0800a3f8 	.word	0x0800a3f8

08004fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fe0:	f7ff ffde 	bl	8004fa0 <HAL_RCC_GetHCLKFreq>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	0adb      	lsrs	r3, r3, #11
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	4903      	ldr	r1, [pc, #12]	; (8005000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ff2:	5ccb      	ldrb	r3, [r1, r3]
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40021000 	.word	0x40021000
 8005000:	0800a3f8 	.word	0x0800a3f8

08005004 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800500c:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <RCC_Delay+0x34>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a0a      	ldr	r2, [pc, #40]	; (800503c <RCC_Delay+0x38>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	0a5b      	lsrs	r3, r3, #9
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	fb02 f303 	mul.w	r3, r2, r3
 800501e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005020:	bf00      	nop
  }
  while (Delay --);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	1e5a      	subs	r2, r3, #1
 8005026:	60fa      	str	r2, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1f9      	bne.n	8005020 <RCC_Delay+0x1c>
}
 800502c:	bf00      	nop
 800502e:	bf00      	nop
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	bc80      	pop	{r7}
 8005036:	4770      	bx	lr
 8005038:	20000014 	.word	0x20000014
 800503c:	10624dd3 	.word	0x10624dd3

08005040 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	2300      	movs	r3, #0
 800504e:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d07d      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8005060:	2300      	movs	r3, #0
 8005062:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005064:	4b8b      	ldr	r3, [pc, #556]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10d      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005070:	4b88      	ldr	r3, [pc, #544]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	4a87      	ldr	r2, [pc, #540]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800507a:	61d3      	str	r3, [r2, #28]
 800507c:	4b85      	ldr	r3, [pc, #532]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005088:	2301      	movs	r3, #1
 800508a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508c:	4b82      	ldr	r3, [pc, #520]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005094:	2b00      	cmp	r3, #0
 8005096:	d118      	bne.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005098:	4b7f      	ldr	r3, [pc, #508]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a7e      	ldr	r2, [pc, #504]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800509e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050a4:	f7fe f948 	bl	8003338 <HAL_GetTick>
 80050a8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050aa:	e008      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ac:	f7fe f944 	bl	8003338 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b64      	cmp	r3, #100	; 0x64
 80050b8:	d901      	bls.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e0e5      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050be:	4b76      	ldr	r3, [pc, #472]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050ca:	4b72      	ldr	r3, [pc, #456]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d2:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d02e      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d027      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050e8:	4b6a      	ldr	r3, [pc, #424]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050f2:	4b6a      	ldr	r3, [pc, #424]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80050f4:	2201      	movs	r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050f8:	4b68      	ldr	r3, [pc, #416]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050fe:	4a65      	ldr	r2, [pc, #404]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d014      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510e:	f7fe f913 	bl	8003338 <HAL_GetTick>
 8005112:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005114:	e00a      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005116:	f7fe f90f 	bl	8003338 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	f241 3288 	movw	r2, #5000	; 0x1388
 8005124:	4293      	cmp	r3, r2
 8005126:	d901      	bls.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e0ae      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800512c:	4b59      	ldr	r3, [pc, #356]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0ee      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005138:	4b56      	ldr	r3, [pc, #344]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	4953      	ldr	r1, [pc, #332]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005146:	4313      	orrs	r3, r2
 8005148:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800514a:	7efb      	ldrb	r3, [r7, #27]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d105      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005150:	4b50      	ldr	r3, [pc, #320]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	4a4f      	ldr	r2, [pc, #316]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d008      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005168:	4b4a      	ldr	r3, [pc, #296]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	4947      	ldr	r1, [pc, #284]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005176:	4313      	orrs	r3, r2
 8005178:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	2b00      	cmp	r3, #0
 8005184:	d008      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005186:	4b43      	ldr	r3, [pc, #268]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	4940      	ldr	r1, [pc, #256]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005194:	4313      	orrs	r3, r2
 8005196:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80051a4:	4b3b      	ldr	r3, [pc, #236]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	4938      	ldr	r1, [pc, #224]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80051b6:	4b37      	ldr	r3, [pc, #220]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d105      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80051c2:	4b34      	ldr	r3, [pc, #208]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80051ce:	2301      	movs	r3, #1
 80051d0:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d148      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80051d8:	4b2e      	ldr	r3, [pc, #184]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d138      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80051e4:	4b2b      	ldr	r3, [pc, #172]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d009      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80051f0:	4b28      	ldr	r3, [pc, #160]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d001      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e042      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8005204:	4b23      	ldr	r3, [pc, #140]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	4920      	ldr	r1, [pc, #128]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005212:	4313      	orrs	r3, r2
 8005214:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8005216:	4b1f      	ldr	r3, [pc, #124]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521a:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	491c      	ldr	r1, [pc, #112]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005224:	4313      	orrs	r3, r2
 8005226:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8005228:	4b1d      	ldr	r3, [pc, #116]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522e:	f7fe f883 	bl	8003338 <HAL_GetTick>
 8005232:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005234:	e008      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005236:	f7fe f87f 	bl	8003338 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b64      	cmp	r3, #100	; 0x64
 8005242:	d901      	bls.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e020      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005248:	4b12      	ldr	r3, [pc, #72]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0f0      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005254:	e009      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8005256:	4b0f      	ldr	r3, [pc, #60]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	429a      	cmp	r2, r3
 8005264:	d001      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e00f      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0310 	and.w	r3, r3, #16
 8005272:	2b00      	cmp	r3, #0
 8005274:	d008      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005276:	4b07      	ldr	r3, [pc, #28]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	4904      	ldr	r1, [pc, #16]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005284:	4313      	orrs	r3, r2
 8005286:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40021000 	.word	0x40021000
 8005298:	40007000 	.word	0x40007000
 800529c:	42420440 	.word	0x42420440
 80052a0:	42420070 	.word	0x42420070

080052a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e076      	b.n	80053a4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d108      	bne.n	80052d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052c6:	d009      	beq.n	80052dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	61da      	str	r2, [r3, #28]
 80052ce:	e005      	b.n	80052dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fd fd24 	bl	8002d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005312:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005360:	ea42 0103 	orr.w	r1, r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	0c1a      	lsrs	r2, r3, #16
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f002 0204 	and.w	r2, r2, #4
 8005382:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	69da      	ldr	r2, [r3, #28]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005392:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	4613      	mov	r3, r2
 80053ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d101      	bne.n	80053ce <HAL_SPI_Transmit+0x22>
 80053ca:	2302      	movs	r3, #2
 80053cc:	e126      	b.n	800561c <HAL_SPI_Transmit+0x270>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053d6:	f7fd ffaf 	bl	8003338 <HAL_GetTick>
 80053da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053dc:	88fb      	ldrh	r3, [r7, #6]
 80053de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d002      	beq.n	80053f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80053ec:	2302      	movs	r3, #2
 80053ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053f0:	e10b      	b.n	800560a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <HAL_SPI_Transmit+0x52>
 80053f8:	88fb      	ldrh	r3, [r7, #6]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d102      	bne.n	8005404 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005402:	e102      	b.n	800560a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2203      	movs	r2, #3
 8005408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	88fa      	ldrh	r2, [r7, #6]
 800541c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	88fa      	ldrh	r2, [r7, #6]
 8005422:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800544a:	d10f      	bne.n	800546c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800545a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800546a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005476:	2b40      	cmp	r3, #64	; 0x40
 8005478:	d007      	beq.n	800548a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005488:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005492:	d14b      	bne.n	800552c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <HAL_SPI_Transmit+0xf6>
 800549c:	8afb      	ldrh	r3, [r7, #22]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d13e      	bne.n	8005520 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a6:	881a      	ldrh	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b2:	1c9a      	adds	r2, r3, #2
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054c6:	e02b      	b.n	8005520 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d112      	bne.n	80054fc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	881a      	ldrh	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	1c9a      	adds	r2, r3, #2
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80054fa:	e011      	b.n	8005520 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054fc:	f7fd ff1c 	bl	8003338 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d803      	bhi.n	8005514 <HAL_SPI_Transmit+0x168>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005512:	d102      	bne.n	800551a <HAL_SPI_Transmit+0x16e>
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d102      	bne.n	8005520 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800551e:	e074      	b.n	800560a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1ce      	bne.n	80054c8 <HAL_SPI_Transmit+0x11c>
 800552a:	e04c      	b.n	80055c6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <HAL_SPI_Transmit+0x18e>
 8005534:	8afb      	ldrh	r3, [r7, #22]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d140      	bne.n	80055bc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	330c      	adds	r3, #12
 8005544:	7812      	ldrb	r2, [r2, #0]
 8005546:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005560:	e02c      	b.n	80055bc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b02      	cmp	r3, #2
 800556e:	d113      	bne.n	8005598 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	330c      	adds	r3, #12
 800557a:	7812      	ldrb	r2, [r2, #0]
 800557c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b01      	subs	r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	86da      	strh	r2, [r3, #54]	; 0x36
 8005596:	e011      	b.n	80055bc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005598:	f7fd fece 	bl	8003338 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d803      	bhi.n	80055b0 <HAL_SPI_Transmit+0x204>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ae:	d102      	bne.n	80055b6 <HAL_SPI_Transmit+0x20a>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d102      	bne.n	80055bc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055ba:	e026      	b.n	800560a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1cd      	bne.n	8005562 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 fa62 	bl	8005a94 <SPI_EndRxTxTransaction>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2220      	movs	r2, #32
 80055da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10a      	bne.n	80055fa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055e4:	2300      	movs	r3, #0
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	613b      	str	r3, [r7, #16]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d002      	beq.n	8005608 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	77fb      	strb	r3, [r7, #31]
 8005606:	e000      	b.n	800560a <HAL_SPI_Transmit+0x25e>
  }

error:
 8005608:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800561a:	7ffb      	ldrb	r3, [r7, #31]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3720      	adds	r7, #32
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08c      	sub	sp, #48	; 0x30
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005632:	2301      	movs	r3, #1
 8005634:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <HAL_SPI_TransmitReceive+0x26>
 8005646:	2302      	movs	r3, #2
 8005648:	e18a      	b.n	8005960 <HAL_SPI_TransmitReceive+0x33c>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005652:	f7fd fe71 	bl	8003338 <HAL_GetTick>
 8005656:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800565e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005668:	887b      	ldrh	r3, [r7, #2]
 800566a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800566c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005670:	2b01      	cmp	r3, #1
 8005672:	d00f      	beq.n	8005694 <HAL_SPI_TransmitReceive+0x70>
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800567a:	d107      	bne.n	800568c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d103      	bne.n	800568c <HAL_SPI_TransmitReceive+0x68>
 8005684:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005688:	2b04      	cmp	r3, #4
 800568a:	d003      	beq.n	8005694 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800568c:	2302      	movs	r3, #2
 800568e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005692:	e15b      	b.n	800594c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <HAL_SPI_TransmitReceive+0x82>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <HAL_SPI_TransmitReceive+0x82>
 80056a0:	887b      	ldrh	r3, [r7, #2]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d103      	bne.n	80056ae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80056ac:	e14e      	b.n	800594c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d003      	beq.n	80056c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2205      	movs	r2, #5
 80056be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	887a      	ldrh	r2, [r7, #2]
 80056d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	887a      	ldrh	r2, [r7, #2]
 80056d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	887a      	ldrh	r2, [r7, #2]
 80056e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	887a      	ldrh	r2, [r7, #2]
 80056ea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005702:	2b40      	cmp	r3, #64	; 0x40
 8005704:	d007      	beq.n	8005716 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005714:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800571e:	d178      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_SPI_TransmitReceive+0x10a>
 8005728:	8b7b      	ldrh	r3, [r7, #26]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d166      	bne.n	80057fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005732:	881a      	ldrh	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	1c9a      	adds	r2, r3, #2
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b01      	subs	r3, #1
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005752:	e053      	b.n	80057fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b02      	cmp	r3, #2
 8005760:	d11b      	bne.n	800579a <HAL_SPI_TransmitReceive+0x176>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d016      	beq.n	800579a <HAL_SPI_TransmitReceive+0x176>
 800576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576e:	2b01      	cmp	r3, #1
 8005770:	d113      	bne.n	800579a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	881a      	ldrh	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005782:	1c9a      	adds	r2, r3, #2
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d119      	bne.n	80057dc <HAL_SPI_TransmitReceive+0x1b8>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d014      	beq.n	80057dc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057bc:	b292      	uxth	r2, r2
 80057be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c4:	1c9a      	adds	r2, r3, #2
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057d8:	2301      	movs	r3, #1
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80057dc:	f7fd fdac 	bl	8003338 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d807      	bhi.n	80057fc <HAL_SPI_TransmitReceive+0x1d8>
 80057ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f2:	d003      	beq.n	80057fc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057fa:	e0a7      	b.n	800594c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1a6      	bne.n	8005754 <HAL_SPI_TransmitReceive+0x130>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1a1      	bne.n	8005754 <HAL_SPI_TransmitReceive+0x130>
 8005810:	e07c      	b.n	800590c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <HAL_SPI_TransmitReceive+0x1fc>
 800581a:	8b7b      	ldrh	r3, [r7, #26]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d16b      	bne.n	80058f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	330c      	adds	r3, #12
 800582a:	7812      	ldrb	r2, [r2, #0]
 800582c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005846:	e057      	b.n	80058f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b02      	cmp	r3, #2
 8005854:	d11c      	bne.n	8005890 <HAL_SPI_TransmitReceive+0x26c>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800585a:	b29b      	uxth	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d017      	beq.n	8005890 <HAL_SPI_TransmitReceive+0x26c>
 8005860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005862:	2b01      	cmp	r3, #1
 8005864:	d114      	bne.n	8005890 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	330c      	adds	r3, #12
 8005870:	7812      	ldrb	r2, [r2, #0]
 8005872:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005882:	b29b      	uxth	r3, r3
 8005884:	3b01      	subs	r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b01      	cmp	r3, #1
 800589c:	d119      	bne.n	80058d2 <HAL_SPI_TransmitReceive+0x2ae>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d014      	beq.n	80058d2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058ce:	2301      	movs	r3, #1
 80058d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80058d2:	f7fd fd31 	bl	8003338 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058de:	429a      	cmp	r2, r3
 80058e0:	d803      	bhi.n	80058ea <HAL_SPI_TransmitReceive+0x2c6>
 80058e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e8:	d102      	bne.n	80058f0 <HAL_SPI_TransmitReceive+0x2cc>
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d103      	bne.n	80058f8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80058f6:	e029      	b.n	800594c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1a2      	bne.n	8005848 <HAL_SPI_TransmitReceive+0x224>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d19d      	bne.n	8005848 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800590c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800590e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 f8bf 	bl	8005a94 <SPI_EndRxTxTransaction>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d006      	beq.n	800592a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2220      	movs	r2, #32
 8005926:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005928:	e010      	b.n	800594c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10b      	bne.n	800594a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005932:	2300      	movs	r3, #0
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	e000      	b.n	800594c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800594a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800595c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005960:	4618      	mov	r0, r3
 8005962:	3730      	adds	r7, #48	; 0x30
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005976:	b2db      	uxtb	r3, r3
}
 8005978:	4618      	mov	r0, r3
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	bc80      	pop	{r7}
 8005980:	4770      	bx	lr
	...

08005984 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b088      	sub	sp, #32
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	4613      	mov	r3, r2
 8005992:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005994:	f7fd fcd0 	bl	8003338 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599c:	1a9b      	subs	r3, r3, r2
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	4413      	add	r3, r2
 80059a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059a4:	f7fd fcc8 	bl	8003338 <HAL_GetTick>
 80059a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059aa:	4b39      	ldr	r3, [pc, #228]	; (8005a90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	015b      	lsls	r3, r3, #5
 80059b0:	0d1b      	lsrs	r3, r3, #20
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	fb02 f303 	mul.w	r3, r2, r3
 80059b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059ba:	e054      	b.n	8005a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c2:	d050      	beq.n	8005a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059c4:	f7fd fcb8 	bl	8003338 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d902      	bls.n	80059da <SPI_WaitFlagStateUntilTimeout+0x56>
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d13d      	bne.n	8005a56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059f2:	d111      	bne.n	8005a18 <SPI_WaitFlagStateUntilTimeout+0x94>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059fc:	d004      	beq.n	8005a08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a06:	d107      	bne.n	8005a18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a20:	d10f      	bne.n	8005a42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e017      	b.n	8005a86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	bf0c      	ite	eq
 8005a76:	2301      	moveq	r3, #1
 8005a78:	2300      	movne	r3, #0
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d19b      	bne.n	80059bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3720      	adds	r7, #32
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20000014 	.word	0x20000014

08005a94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af02      	add	r7, sp, #8
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2180      	movs	r1, #128	; 0x80
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f7ff ff6a 	bl	8005984 <SPI_WaitFlagStateUntilTimeout>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aba:	f043 0220 	orr.w	r2, r3, #32
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e000      	b.n	8005ac8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e041      	b.n	8005b66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d106      	bne.n	8005afc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fd f9aa 	bl	8002e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f000 fb20 	bl	8006154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d001      	beq.n	8005b88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e03f      	b.n	8005c08 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0201 	orr.w	r2, r2, #1
 8005b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1b      	ldr	r2, [pc, #108]	; (8005c14 <HAL_TIM_Base_Start_IT+0xa4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d013      	beq.n	8005bd2 <HAL_TIM_Base_Start_IT+0x62>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb2:	d00e      	beq.n	8005bd2 <HAL_TIM_Base_Start_IT+0x62>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <HAL_TIM_Base_Start_IT+0xa8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d009      	beq.n	8005bd2 <HAL_TIM_Base_Start_IT+0x62>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a16      	ldr	r2, [pc, #88]	; (8005c1c <HAL_TIM_Base_Start_IT+0xac>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d004      	beq.n	8005bd2 <HAL_TIM_Base_Start_IT+0x62>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a14      	ldr	r2, [pc, #80]	; (8005c20 <HAL_TIM_Base_Start_IT+0xb0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d111      	bne.n	8005bf6 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b06      	cmp	r3, #6
 8005be2:	d010      	beq.n	8005c06 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf4:	e007      	b.n	8005c06 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f042 0201 	orr.w	r2, r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	40012c00 	.word	0x40012c00
 8005c18:	40000400 	.word	0x40000400
 8005c1c:	40000800 	.word	0x40000800
 8005c20:	40000c00 	.word	0x40000c00

08005c24 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e041      	b.n	8005cba <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fd f938 	bl	8002ec0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	4619      	mov	r1, r3
 8005c62:	4610      	mov	r0, r2
 8005c64:	f000 fa76 	bl	8006154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d122      	bne.n	8005d1e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d11b      	bne.n	8005d1e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f06f 0202 	mvn.w	r2, #2
 8005cee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	f003 0303 	and.w	r3, r3, #3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fa0a 	bl	800611e <HAL_TIM_IC_CaptureCallback>
 8005d0a:	e005      	b.n	8005d18 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f9fd 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fa0c 	bl	8006130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d122      	bne.n	8005d72 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f003 0304 	and.w	r3, r3, #4
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	d11b      	bne.n	8005d72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f06f 0204 	mvn.w	r2, #4
 8005d42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f9e0 	bl	800611e <HAL_TIM_IC_CaptureCallback>
 8005d5e:	e005      	b.n	8005d6c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f9d3 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f9e2 	bl	8006130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d122      	bne.n	8005dc6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f003 0308 	and.w	r3, r3, #8
 8005d8a:	2b08      	cmp	r3, #8
 8005d8c:	d11b      	bne.n	8005dc6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f06f 0208 	mvn.w	r2, #8
 8005d96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2204      	movs	r2, #4
 8005d9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	f003 0303 	and.w	r3, r3, #3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f9b6 	bl	800611e <HAL_TIM_IC_CaptureCallback>
 8005db2:	e005      	b.n	8005dc0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f9a9 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f9b8 	bl	8006130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	f003 0310 	and.w	r3, r3, #16
 8005dd0:	2b10      	cmp	r3, #16
 8005dd2:	d122      	bne.n	8005e1a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f003 0310 	and.w	r3, r3, #16
 8005dde:	2b10      	cmp	r3, #16
 8005de0:	d11b      	bne.n	8005e1a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f06f 0210 	mvn.w	r2, #16
 8005dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2208      	movs	r2, #8
 8005df0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f98c 	bl	800611e <HAL_TIM_IC_CaptureCallback>
 8005e06:	e005      	b.n	8005e14 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f97f 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f98e 	bl	8006130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d10e      	bne.n	8005e46 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d107      	bne.n	8005e46 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f06f 0201 	mvn.w	r2, #1
 8005e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7fc f947 	bl	80020d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e50:	2b80      	cmp	r3, #128	; 0x80
 8005e52:	d10e      	bne.n	8005e72 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5e:	2b80      	cmp	r3, #128	; 0x80
 8005e60:	d107      	bne.n	8005e72 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fc6a 	bl	8006746 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7c:	2b40      	cmp	r3, #64	; 0x40
 8005e7e:	d10e      	bne.n	8005e9e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8a:	2b40      	cmp	r3, #64	; 0x40
 8005e8c:	d107      	bne.n	8005e9e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f952 	bl	8006142 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	d10e      	bne.n	8005eca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b20      	cmp	r3, #32
 8005eb8:	d107      	bne.n	8005eca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f06f 0220 	mvn.w	r2, #32
 8005ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fc35 	bl	8006734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005eca:	bf00      	nop
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d101      	bne.n	8005eee <HAL_TIM_OC_ConfigChannel+0x1a>
 8005eea:	2302      	movs	r3, #2
 8005eec:	e046      	b.n	8005f7c <HAL_TIM_OC_ConfigChannel+0xa8>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b0c      	cmp	r3, #12
 8005efa:	d839      	bhi.n	8005f70 <HAL_TIM_OC_ConfigChannel+0x9c>
 8005efc:	a201      	add	r2, pc, #4	; (adr r2, 8005f04 <HAL_TIM_OC_ConfigChannel+0x30>)
 8005efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f02:	bf00      	nop
 8005f04:	08005f39 	.word	0x08005f39
 8005f08:	08005f71 	.word	0x08005f71
 8005f0c:	08005f71 	.word	0x08005f71
 8005f10:	08005f71 	.word	0x08005f71
 8005f14:	08005f47 	.word	0x08005f47
 8005f18:	08005f71 	.word	0x08005f71
 8005f1c:	08005f71 	.word	0x08005f71
 8005f20:	08005f71 	.word	0x08005f71
 8005f24:	08005f55 	.word	0x08005f55
 8005f28:	08005f71 	.word	0x08005f71
 8005f2c:	08005f71 	.word	0x08005f71
 8005f30:	08005f71 	.word	0x08005f71
 8005f34:	08005f63 	.word	0x08005f63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68b9      	ldr	r1, [r7, #8]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 f974 	bl	800622c <TIM_OC1_SetConfig>
      break;
 8005f44:	e015      	b.n	8005f72 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68b9      	ldr	r1, [r7, #8]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 f9d3 	bl	80062f8 <TIM_OC2_SetConfig>
      break;
 8005f52:	e00e      	b.n	8005f72 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68b9      	ldr	r1, [r7, #8]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 fa36 	bl	80063cc <TIM_OC3_SetConfig>
      break;
 8005f60:	e007      	b.n	8005f72 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fa99 	bl	80064a0 <TIM_OC4_SetConfig>
      break;
 8005f6e:	e000      	b.n	8005f72 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8005f70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d101      	bne.n	8005f9c <HAL_TIM_ConfigClockSource+0x18>
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e0b3      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x180>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd4:	d03e      	beq.n	8006054 <HAL_TIM_ConfigClockSource+0xd0>
 8005fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fda:	f200 8087 	bhi.w	80060ec <HAL_TIM_ConfigClockSource+0x168>
 8005fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe2:	f000 8085 	beq.w	80060f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fea:	d87f      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x168>
 8005fec:	2b70      	cmp	r3, #112	; 0x70
 8005fee:	d01a      	beq.n	8006026 <HAL_TIM_ConfigClockSource+0xa2>
 8005ff0:	2b70      	cmp	r3, #112	; 0x70
 8005ff2:	d87b      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x168>
 8005ff4:	2b60      	cmp	r3, #96	; 0x60
 8005ff6:	d050      	beq.n	800609a <HAL_TIM_ConfigClockSource+0x116>
 8005ff8:	2b60      	cmp	r3, #96	; 0x60
 8005ffa:	d877      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x168>
 8005ffc:	2b50      	cmp	r3, #80	; 0x50
 8005ffe:	d03c      	beq.n	800607a <HAL_TIM_ConfigClockSource+0xf6>
 8006000:	2b50      	cmp	r3, #80	; 0x50
 8006002:	d873      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x168>
 8006004:	2b40      	cmp	r3, #64	; 0x40
 8006006:	d058      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x136>
 8006008:	2b40      	cmp	r3, #64	; 0x40
 800600a:	d86f      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x168>
 800600c:	2b30      	cmp	r3, #48	; 0x30
 800600e:	d064      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x156>
 8006010:	2b30      	cmp	r3, #48	; 0x30
 8006012:	d86b      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x168>
 8006014:	2b20      	cmp	r3, #32
 8006016:	d060      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x156>
 8006018:	2b20      	cmp	r3, #32
 800601a:	d867      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x168>
 800601c:	2b00      	cmp	r3, #0
 800601e:	d05c      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x156>
 8006020:	2b10      	cmp	r3, #16
 8006022:	d05a      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006024:	e062      	b.n	80060ec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	6899      	ldr	r1, [r3, #8]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f000 faf8 	bl	800662a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006048:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	609a      	str	r2, [r3, #8]
      break;
 8006052:	e04e      	b.n	80060f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6818      	ldr	r0, [r3, #0]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	6899      	ldr	r1, [r3, #8]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f000 fae1 	bl	800662a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006076:	609a      	str	r2, [r3, #8]
      break;
 8006078:	e03b      	b.n	80060f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	6859      	ldr	r1, [r3, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	461a      	mov	r2, r3
 8006088:	f000 fa58 	bl	800653c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2150      	movs	r1, #80	; 0x50
 8006092:	4618      	mov	r0, r3
 8006094:	f000 faaf 	bl	80065f6 <TIM_ITRx_SetConfig>
      break;
 8006098:	e02b      	b.n	80060f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6818      	ldr	r0, [r3, #0]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	6859      	ldr	r1, [r3, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	461a      	mov	r2, r3
 80060a8:	f000 fa76 	bl	8006598 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2160      	movs	r1, #96	; 0x60
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 fa9f 	bl	80065f6 <TIM_ITRx_SetConfig>
      break;
 80060b8:	e01b      	b.n	80060f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6818      	ldr	r0, [r3, #0]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	6859      	ldr	r1, [r3, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	461a      	mov	r2, r3
 80060c8:	f000 fa38 	bl	800653c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2140      	movs	r1, #64	; 0x40
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 fa8f 	bl	80065f6 <TIM_ITRx_SetConfig>
      break;
 80060d8:	e00b      	b.n	80060f2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4619      	mov	r1, r3
 80060e4:	4610      	mov	r0, r2
 80060e6:	f000 fa86 	bl	80065f6 <TIM_ITRx_SetConfig>
        break;
 80060ea:	e002      	b.n	80060f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80060ec:	bf00      	nop
 80060ee:	e000      	b.n	80060f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80060f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	bc80      	pop	{r7}
 800611c:	4770      	bx	lr

0800611e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr

08006130 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	bc80      	pop	{r7}
 8006140:	4770      	bx	lr

08006142 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	bc80      	pop	{r7}
 8006152:	4770      	bx	lr

08006154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a2d      	ldr	r2, [pc, #180]	; (800621c <TIM_Base_SetConfig+0xc8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00f      	beq.n	800618c <TIM_Base_SetConfig+0x38>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006172:	d00b      	beq.n	800618c <TIM_Base_SetConfig+0x38>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a2a      	ldr	r2, [pc, #168]	; (8006220 <TIM_Base_SetConfig+0xcc>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d007      	beq.n	800618c <TIM_Base_SetConfig+0x38>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a29      	ldr	r2, [pc, #164]	; (8006224 <TIM_Base_SetConfig+0xd0>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d003      	beq.n	800618c <TIM_Base_SetConfig+0x38>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a28      	ldr	r2, [pc, #160]	; (8006228 <TIM_Base_SetConfig+0xd4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d108      	bne.n	800619e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a1e      	ldr	r2, [pc, #120]	; (800621c <TIM_Base_SetConfig+0xc8>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d00f      	beq.n	80061c6 <TIM_Base_SetConfig+0x72>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ac:	d00b      	beq.n	80061c6 <TIM_Base_SetConfig+0x72>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a1b      	ldr	r2, [pc, #108]	; (8006220 <TIM_Base_SetConfig+0xcc>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d007      	beq.n	80061c6 <TIM_Base_SetConfig+0x72>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a1a      	ldr	r2, [pc, #104]	; (8006224 <TIM_Base_SetConfig+0xd0>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d003      	beq.n	80061c6 <TIM_Base_SetConfig+0x72>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a19      	ldr	r2, [pc, #100]	; (8006228 <TIM_Base_SetConfig+0xd4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d108      	bne.n	80061d8 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a07      	ldr	r2, [pc, #28]	; (800621c <TIM_Base_SetConfig+0xc8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d103      	bne.n	800620c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	615a      	str	r2, [r3, #20]
}
 8006212:	bf00      	nop
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	bc80      	pop	{r7}
 800621a:	4770      	bx	lr
 800621c:	40012c00 	.word	0x40012c00
 8006220:	40000400 	.word	0x40000400
 8006224:	40000800 	.word	0x40000800
 8006228:	40000c00 	.word	0x40000c00

0800622c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	f023 0201 	bic.w	r2, r3, #1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0303 	bic.w	r3, r3, #3
 8006262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f023 0302 	bic.w	r3, r3, #2
 8006274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	4313      	orrs	r3, r2
 800627e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a1c      	ldr	r2, [pc, #112]	; (80062f4 <TIM_OC1_SetConfig+0xc8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d10c      	bne.n	80062a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f023 0308 	bic.w	r3, r3, #8
 800628e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	4313      	orrs	r3, r2
 8006298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f023 0304 	bic.w	r3, r3, #4
 80062a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a13      	ldr	r2, [pc, #76]	; (80062f4 <TIM_OC1_SetConfig+0xc8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d111      	bne.n	80062ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	621a      	str	r2, [r3, #32]
}
 80062e8:	bf00      	nop
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bc80      	pop	{r7}
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40012c00 	.word	0x40012c00

080062f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f023 0210 	bic.w	r2, r3, #16
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800632e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	021b      	lsls	r3, r3, #8
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f023 0320 	bic.w	r3, r3, #32
 8006342:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	011b      	lsls	r3, r3, #4
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	4313      	orrs	r3, r2
 800634e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a1d      	ldr	r2, [pc, #116]	; (80063c8 <TIM_OC2_SetConfig+0xd0>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d10d      	bne.n	8006374 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800635e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	011b      	lsls	r3, r3, #4
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006372:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a14      	ldr	r2, [pc, #80]	; (80063c8 <TIM_OC2_SetConfig+0xd0>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d113      	bne.n	80063a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006382:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800638a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4313      	orrs	r3, r2
 8006396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	621a      	str	r2, [r3, #32]
}
 80063be:	bf00      	nop
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bc80      	pop	{r7}
 80063c6:	4770      	bx	lr
 80063c8:	40012c00 	.word	0x40012c00

080063cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f023 0303 	bic.w	r3, r3, #3
 8006402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	4313      	orrs	r3, r2
 800640c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a1d      	ldr	r2, [pc, #116]	; (800649c <TIM_OC3_SetConfig+0xd0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d10d      	bne.n	8006446 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006430:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	021b      	lsls	r3, r3, #8
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	4313      	orrs	r3, r2
 800643c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a14      	ldr	r2, [pc, #80]	; (800649c <TIM_OC3_SetConfig+0xd0>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d113      	bne.n	8006476 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800645c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	621a      	str	r2, [r3, #32]
}
 8006490:	bf00      	nop
 8006492:	371c      	adds	r7, #28
 8006494:	46bd      	mov	sp, r7
 8006496:	bc80      	pop	{r7}
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	40012c00 	.word	0x40012c00

080064a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	021b      	lsls	r3, r3, #8
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	031b      	lsls	r3, r3, #12
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a0f      	ldr	r2, [pc, #60]	; (8006538 <TIM_OC4_SetConfig+0x98>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d109      	bne.n	8006514 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006506:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	019b      	lsls	r3, r3, #6
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	4313      	orrs	r3, r2
 8006512:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	621a      	str	r2, [r3, #32]
}
 800652e:	bf00      	nop
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	bc80      	pop	{r7}
 8006536:	4770      	bx	lr
 8006538:	40012c00 	.word	0x40012c00

0800653c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	f023 0201 	bic.w	r2, r3, #1
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	011b      	lsls	r3, r3, #4
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	4313      	orrs	r3, r2
 8006570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f023 030a 	bic.w	r3, r3, #10
 8006578:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	621a      	str	r2, [r3, #32]
}
 800658e:	bf00      	nop
 8006590:	371c      	adds	r7, #28
 8006592:	46bd      	mov	sp, r7
 8006594:	bc80      	pop	{r7}
 8006596:	4770      	bx	lr

08006598 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	f023 0210 	bic.w	r2, r3, #16
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	031b      	lsls	r3, r3, #12
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	011b      	lsls	r3, r3, #4
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	621a      	str	r2, [r3, #32]
}
 80065ec:	bf00      	nop
 80065ee:	371c      	adds	r7, #28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bc80      	pop	{r7}
 80065f4:	4770      	bx	lr

080065f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b085      	sub	sp, #20
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	f043 0307 	orr.w	r3, r3, #7
 8006618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	609a      	str	r2, [r3, #8]
}
 8006620:	bf00      	nop
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	bc80      	pop	{r7}
 8006628:	4770      	bx	lr

0800662a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800662a:	b480      	push	{r7}
 800662c:	b087      	sub	sp, #28
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	607a      	str	r2, [r7, #4]
 8006636:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006644:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	021a      	lsls	r2, r3, #8
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	431a      	orrs	r2, r3
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	4313      	orrs	r3, r2
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	609a      	str	r2, [r3, #8]
}
 800665e:	bf00      	nop
 8006660:	371c      	adds	r7, #28
 8006662:	46bd      	mov	sp, r7
 8006664:	bc80      	pop	{r7}
 8006666:	4770      	bx	lr

08006668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006678:	2b01      	cmp	r3, #1
 800667a:	d101      	bne.n	8006680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800667c:	2302      	movs	r3, #2
 800667e:	e04b      	b.n	8006718 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a19      	ldr	r2, [pc, #100]	; (8006724 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d013      	beq.n	80066ec <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066cc:	d00e      	beq.n	80066ec <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a15      	ldr	r2, [pc, #84]	; (8006728 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d009      	beq.n	80066ec <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a13      	ldr	r2, [pc, #76]	; (800672c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d004      	beq.n	80066ec <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a12      	ldr	r2, [pc, #72]	; (8006730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d10c      	bne.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	bc80      	pop	{r7}
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40012c00 	.word	0x40012c00
 8006728:	40000400 	.word	0x40000400
 800672c:	40000800 	.word	0x40000800
 8006730:	40000c00 	.word	0x40000c00

08006734 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	bc80      	pop	{r7}
 8006744:	4770      	bx	lr

08006746 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e03f      	b.n	80067ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d106      	bne.n	8006784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7fc fbbc 	bl	8002efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2224      	movs	r2, #36	; 0x24
 8006788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800679a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f905 	bl	80069ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	691a      	ldr	r2, [r3, #16]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	695a      	ldr	r2, [r3, #20]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68da      	ldr	r2, [r3, #12]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2220      	movs	r2, #32
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b08a      	sub	sp, #40	; 0x28
 80067f6:	af02      	add	r7, sp, #8
 80067f8:	60f8      	str	r0, [r7, #12]
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	603b      	str	r3, [r7, #0]
 80067fe:	4613      	mov	r3, r2
 8006800:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b20      	cmp	r3, #32
 8006810:	d17c      	bne.n	800690c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <HAL_UART_Transmit+0x2c>
 8006818:	88fb      	ldrh	r3, [r7, #6]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e075      	b.n	800690e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006828:	2b01      	cmp	r3, #1
 800682a:	d101      	bne.n	8006830 <HAL_UART_Transmit+0x3e>
 800682c:	2302      	movs	r3, #2
 800682e:	e06e      	b.n	800690e <HAL_UART_Transmit+0x11c>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2221      	movs	r2, #33	; 0x21
 8006842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006846:	f7fc fd77 	bl	8003338 <HAL_GetTick>
 800684a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	88fa      	ldrh	r2, [r7, #6]
 8006850:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	88fa      	ldrh	r2, [r7, #6]
 8006856:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006860:	d108      	bne.n	8006874 <HAL_UART_Transmit+0x82>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d104      	bne.n	8006874 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	e003      	b.n	800687c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006878:	2300      	movs	r3, #0
 800687a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006884:	e02a      	b.n	80068dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2200      	movs	r2, #0
 800688e:	2180      	movs	r1, #128	; 0x80
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 f840 	bl	8006916 <UART_WaitOnFlagUntilTimeout>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e036      	b.n	800690e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10b      	bne.n	80068be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	881b      	ldrh	r3, [r3, #0]
 80068aa:	461a      	mov	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	3302      	adds	r3, #2
 80068ba:	61bb      	str	r3, [r7, #24]
 80068bc:	e007      	b.n	80068ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	781a      	ldrb	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	3301      	adds	r3, #1
 80068cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	3b01      	subs	r3, #1
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1cf      	bne.n	8006886 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2200      	movs	r2, #0
 80068ee:	2140      	movs	r1, #64	; 0x40
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 f810 	bl	8006916 <UART_WaitOnFlagUntilTimeout>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e006      	b.n	800690e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2220      	movs	r2, #32
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	e000      	b.n	800690e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800690c:	2302      	movs	r3, #2
  }
}
 800690e:	4618      	mov	r0, r3
 8006910:	3720      	adds	r7, #32
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	60f8      	str	r0, [r7, #12]
 800691e:	60b9      	str	r1, [r7, #8]
 8006920:	603b      	str	r3, [r7, #0]
 8006922:	4613      	mov	r3, r2
 8006924:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006926:	e02c      	b.n	8006982 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692e:	d028      	beq.n	8006982 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d007      	beq.n	8006946 <UART_WaitOnFlagUntilTimeout+0x30>
 8006936:	f7fc fcff 	bl	8003338 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	429a      	cmp	r2, r3
 8006944:	d21d      	bcs.n	8006982 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68da      	ldr	r2, [r3, #12]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006954:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	695a      	ldr	r2, [r3, #20]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0201 	bic.w	r2, r2, #1
 8006964:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2220      	movs	r2, #32
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2220      	movs	r2, #32
 8006972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e00f      	b.n	80069a2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	4013      	ands	r3, r2
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	429a      	cmp	r2, r3
 8006990:	bf0c      	ite	eq
 8006992:	2301      	moveq	r3, #1
 8006994:	2300      	movne	r3, #0
 8006996:	b2db      	uxtb	r3, r3
 8006998:	461a      	mov	r2, r3
 800699a:	79fb      	ldrb	r3, [r7, #7]
 800699c:	429a      	cmp	r2, r3
 800699e:	d0c3      	beq.n	8006928 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689a      	ldr	r2, [r3, #8]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80069e6:	f023 030c 	bic.w	r3, r3, #12
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	6812      	ldr	r2, [r2, #0]
 80069ee:	68b9      	ldr	r1, [r7, #8]
 80069f0:	430b      	orrs	r3, r1
 80069f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699a      	ldr	r2, [r3, #24]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a2c      	ldr	r2, [pc, #176]	; (8006ac0 <UART_SetConfig+0x114>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d103      	bne.n	8006a1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006a14:	f7fe fae2 	bl	8004fdc <HAL_RCC_GetPCLK2Freq>
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	e002      	b.n	8006a22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006a1c:	f7fe faca 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 8006a20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	009a      	lsls	r2, r3, #2
 8006a2c:	441a      	add	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a38:	4a22      	ldr	r2, [pc, #136]	; (8006ac4 <UART_SetConfig+0x118>)
 8006a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	0119      	lsls	r1, r3, #4
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	009a      	lsls	r2, r3, #2
 8006a4c:	441a      	add	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a58:	4b1a      	ldr	r3, [pc, #104]	; (8006ac4 <UART_SetConfig+0x118>)
 8006a5a:	fba3 0302 	umull	r0, r3, r3, r2
 8006a5e:	095b      	lsrs	r3, r3, #5
 8006a60:	2064      	movs	r0, #100	; 0x64
 8006a62:	fb00 f303 	mul.w	r3, r0, r3
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	011b      	lsls	r3, r3, #4
 8006a6a:	3332      	adds	r3, #50	; 0x32
 8006a6c:	4a15      	ldr	r2, [pc, #84]	; (8006ac4 <UART_SetConfig+0x118>)
 8006a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a72:	095b      	lsrs	r3, r3, #5
 8006a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a78:	4419      	add	r1, r3
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	009a      	lsls	r2, r3, #2
 8006a84:	441a      	add	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a90:	4b0c      	ldr	r3, [pc, #48]	; (8006ac4 <UART_SetConfig+0x118>)
 8006a92:	fba3 0302 	umull	r0, r3, r3, r2
 8006a96:	095b      	lsrs	r3, r3, #5
 8006a98:	2064      	movs	r0, #100	; 0x64
 8006a9a:	fb00 f303 	mul.w	r3, r0, r3
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	3332      	adds	r3, #50	; 0x32
 8006aa4:	4a07      	ldr	r2, [pc, #28]	; (8006ac4 <UART_SetConfig+0x118>)
 8006aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	f003 020f 	and.w	r2, r3, #15
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	440a      	add	r2, r1
 8006ab6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006ab8:	bf00      	nop
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	40013800 	.word	0x40013800
 8006ac4:	51eb851f 	.word	0x51eb851f

08006ac8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006acc:	4904      	ldr	r1, [pc, #16]	; (8006ae0 <MX_FATFS_Init+0x18>)
 8006ace:	4805      	ldr	r0, [pc, #20]	; (8006ae4 <MX_FATFS_Init+0x1c>)
 8006ad0:	f000 f8b0 	bl	8006c34 <FATFS_LinkDriver>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	4b03      	ldr	r3, [pc, #12]	; (8006ae8 <MX_FATFS_Init+0x20>)
 8006ada:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006adc:	bf00      	nop
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	200025c8 	.word	0x200025c8
 8006ae4:	20000020 	.word	0x20000020
 8006ae8:	200025cc 	.word	0x200025cc

08006aec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	4603      	mov	r3, r0
 8006af4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fa fbcf 	bl	800129c <SD_disk_initialize>
 8006afe:	4603      	mov	r3, r0
 8006b00:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b082      	sub	sp, #8
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	4603      	mov	r3, r0
 8006b12:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8006b14:	79fb      	ldrb	r3, [r7, #7]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fa fcaa 	bl	8001470 <SD_disk_status>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60b9      	str	r1, [r7, #8]
 8006b30:	607a      	str	r2, [r7, #4]
 8006b32:	603b      	str	r3, [r7, #0]
 8006b34:	4603      	mov	r3, r0
 8006b36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8006b38:	7bf8      	ldrb	r0, [r7, #15]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	68b9      	ldr	r1, [r7, #8]
 8006b40:	f7fa fcaa 	bl	8001498 <SD_disk_read>
 8006b44:	4603      	mov	r3, r0
 8006b46:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60b9      	str	r1, [r7, #8]
 8006b58:	607a      	str	r2, [r7, #4]
 8006b5a:	603b      	str	r3, [r7, #0]
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8006b60:	7bf8      	ldrb	r0, [r7, #15]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	68b9      	ldr	r1, [r7, #8]
 8006b68:	f7fa fd00 	bl	800156c <SD_disk_write>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	603a      	str	r2, [r7, #0]
 8006b82:	71fb      	strb	r3, [r7, #7]
 8006b84:	460b      	mov	r3, r1
 8006b86:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8006b88:	79fb      	ldrb	r3, [r7, #7]
 8006b8a:	79b9      	ldrb	r1, [r7, #6]
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fa fd70 	bl	8001674 <SD_disk_ioctl>
 8006b94:	4603      	mov	r3, r0
 8006b96:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	4613      	mov	r3, r2
 8006bac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006bb6:	4b1e      	ldr	r3, [pc, #120]	; (8006c30 <FATFS_LinkDriverEx+0x90>)
 8006bb8:	7a5b      	ldrb	r3, [r3, #9]
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d831      	bhi.n	8006c24 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006bc0:	4b1b      	ldr	r3, [pc, #108]	; (8006c30 <FATFS_LinkDriverEx+0x90>)
 8006bc2:	7a5b      	ldrb	r3, [r3, #9]
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	4b19      	ldr	r3, [pc, #100]	; (8006c30 <FATFS_LinkDriverEx+0x90>)
 8006bca:	2100      	movs	r1, #0
 8006bcc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006bce:	4b18      	ldr	r3, [pc, #96]	; (8006c30 <FATFS_LinkDriverEx+0x90>)
 8006bd0:	7a5b      	ldrb	r3, [r3, #9]
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	4a16      	ldr	r2, [pc, #88]	; (8006c30 <FATFS_LinkDriverEx+0x90>)
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006bde:	4b14      	ldr	r3, [pc, #80]	; (8006c30 <FATFS_LinkDriverEx+0x90>)
 8006be0:	7a5b      	ldrb	r3, [r3, #9]
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	461a      	mov	r2, r3
 8006be6:	4b12      	ldr	r3, [pc, #72]	; (8006c30 <FATFS_LinkDriverEx+0x90>)
 8006be8:	4413      	add	r3, r2
 8006bea:	79fa      	ldrb	r2, [r7, #7]
 8006bec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006bee:	4b10      	ldr	r3, [pc, #64]	; (8006c30 <FATFS_LinkDriverEx+0x90>)
 8006bf0:	7a5b      	ldrb	r3, [r3, #9]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	b2d1      	uxtb	r1, r2
 8006bf8:	4a0d      	ldr	r2, [pc, #52]	; (8006c30 <FATFS_LinkDriverEx+0x90>)
 8006bfa:	7251      	strb	r1, [r2, #9]
 8006bfc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006bfe:	7dbb      	ldrb	r3, [r7, #22]
 8006c00:	3330      	adds	r3, #48	; 0x30
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	223a      	movs	r2, #58	; 0x3a
 8006c0e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	3302      	adds	r3, #2
 8006c14:	222f      	movs	r2, #47	; 0x2f
 8006c16:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	3303      	adds	r3, #3
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	371c      	adds	r7, #28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bc80      	pop	{r7}
 8006c2e:	4770      	bx	lr
 8006c30:	20000228 	.word	0x20000228

08006c34 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006c3e:	2200      	movs	r2, #0
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff ffac 	bl	8006ba0 <FATFS_LinkDriverEx>
 8006c48:	4603      	mov	r3, r0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <__errno>:
 8006c54:	4b01      	ldr	r3, [pc, #4]	; (8006c5c <__errno+0x8>)
 8006c56:	6818      	ldr	r0, [r3, #0]
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	20000034 	.word	0x20000034

08006c60 <__libc_init_array>:
 8006c60:	b570      	push	{r4, r5, r6, lr}
 8006c62:	2600      	movs	r6, #0
 8006c64:	4d0c      	ldr	r5, [pc, #48]	; (8006c98 <__libc_init_array+0x38>)
 8006c66:	4c0d      	ldr	r4, [pc, #52]	; (8006c9c <__libc_init_array+0x3c>)
 8006c68:	1b64      	subs	r4, r4, r5
 8006c6a:	10a4      	asrs	r4, r4, #2
 8006c6c:	42a6      	cmp	r6, r4
 8006c6e:	d109      	bne.n	8006c84 <__libc_init_array+0x24>
 8006c70:	f002 fee2 	bl	8009a38 <_init>
 8006c74:	2600      	movs	r6, #0
 8006c76:	4d0a      	ldr	r5, [pc, #40]	; (8006ca0 <__libc_init_array+0x40>)
 8006c78:	4c0a      	ldr	r4, [pc, #40]	; (8006ca4 <__libc_init_array+0x44>)
 8006c7a:	1b64      	subs	r4, r4, r5
 8006c7c:	10a4      	asrs	r4, r4, #2
 8006c7e:	42a6      	cmp	r6, r4
 8006c80:	d105      	bne.n	8006c8e <__libc_init_array+0x2e>
 8006c82:	bd70      	pop	{r4, r5, r6, pc}
 8006c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c88:	4798      	blx	r3
 8006c8a:	3601      	adds	r6, #1
 8006c8c:	e7ee      	b.n	8006c6c <__libc_init_array+0xc>
 8006c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c92:	4798      	blx	r3
 8006c94:	3601      	adds	r6, #1
 8006c96:	e7f2      	b.n	8006c7e <__libc_init_array+0x1e>
 8006c98:	0800a7ec 	.word	0x0800a7ec
 8006c9c:	0800a7ec 	.word	0x0800a7ec
 8006ca0:	0800a7ec 	.word	0x0800a7ec
 8006ca4:	0800a7f0 	.word	0x0800a7f0

08006ca8 <malloc>:
 8006ca8:	4b02      	ldr	r3, [pc, #8]	; (8006cb4 <malloc+0xc>)
 8006caa:	4601      	mov	r1, r0
 8006cac:	6818      	ldr	r0, [r3, #0]
 8006cae:	f000 b857 	b.w	8006d60 <_malloc_r>
 8006cb2:	bf00      	nop
 8006cb4:	20000034 	.word	0x20000034

08006cb8 <memset>:
 8006cb8:	4603      	mov	r3, r0
 8006cba:	4402      	add	r2, r0
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d100      	bne.n	8006cc2 <memset+0xa>
 8006cc0:	4770      	bx	lr
 8006cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8006cc6:	e7f9      	b.n	8006cbc <memset+0x4>

08006cc8 <_free_r>:
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	4605      	mov	r5, r0
 8006ccc:	2900      	cmp	r1, #0
 8006cce:	d043      	beq.n	8006d58 <_free_r+0x90>
 8006cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cd4:	1f0c      	subs	r4, r1, #4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	bfb8      	it	lt
 8006cda:	18e4      	addlt	r4, r4, r3
 8006cdc:	f001 fce8 	bl	80086b0 <__malloc_lock>
 8006ce0:	4a1e      	ldr	r2, [pc, #120]	; (8006d5c <_free_r+0x94>)
 8006ce2:	6813      	ldr	r3, [r2, #0]
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	b933      	cbnz	r3, 8006cf6 <_free_r+0x2e>
 8006ce8:	6063      	str	r3, [r4, #4]
 8006cea:	6014      	str	r4, [r2, #0]
 8006cec:	4628      	mov	r0, r5
 8006cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cf2:	f001 bce3 	b.w	80086bc <__malloc_unlock>
 8006cf6:	42a3      	cmp	r3, r4
 8006cf8:	d90a      	bls.n	8006d10 <_free_r+0x48>
 8006cfa:	6821      	ldr	r1, [r4, #0]
 8006cfc:	1862      	adds	r2, r4, r1
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	bf01      	itttt	eq
 8006d02:	681a      	ldreq	r2, [r3, #0]
 8006d04:	685b      	ldreq	r3, [r3, #4]
 8006d06:	1852      	addeq	r2, r2, r1
 8006d08:	6022      	streq	r2, [r4, #0]
 8006d0a:	6063      	str	r3, [r4, #4]
 8006d0c:	6004      	str	r4, [r0, #0]
 8006d0e:	e7ed      	b.n	8006cec <_free_r+0x24>
 8006d10:	461a      	mov	r2, r3
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	b10b      	cbz	r3, 8006d1a <_free_r+0x52>
 8006d16:	42a3      	cmp	r3, r4
 8006d18:	d9fa      	bls.n	8006d10 <_free_r+0x48>
 8006d1a:	6811      	ldr	r1, [r2, #0]
 8006d1c:	1850      	adds	r0, r2, r1
 8006d1e:	42a0      	cmp	r0, r4
 8006d20:	d10b      	bne.n	8006d3a <_free_r+0x72>
 8006d22:	6820      	ldr	r0, [r4, #0]
 8006d24:	4401      	add	r1, r0
 8006d26:	1850      	adds	r0, r2, r1
 8006d28:	4283      	cmp	r3, r0
 8006d2a:	6011      	str	r1, [r2, #0]
 8006d2c:	d1de      	bne.n	8006cec <_free_r+0x24>
 8006d2e:	6818      	ldr	r0, [r3, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	4401      	add	r1, r0
 8006d34:	6011      	str	r1, [r2, #0]
 8006d36:	6053      	str	r3, [r2, #4]
 8006d38:	e7d8      	b.n	8006cec <_free_r+0x24>
 8006d3a:	d902      	bls.n	8006d42 <_free_r+0x7a>
 8006d3c:	230c      	movs	r3, #12
 8006d3e:	602b      	str	r3, [r5, #0]
 8006d40:	e7d4      	b.n	8006cec <_free_r+0x24>
 8006d42:	6820      	ldr	r0, [r4, #0]
 8006d44:	1821      	adds	r1, r4, r0
 8006d46:	428b      	cmp	r3, r1
 8006d48:	bf01      	itttt	eq
 8006d4a:	6819      	ldreq	r1, [r3, #0]
 8006d4c:	685b      	ldreq	r3, [r3, #4]
 8006d4e:	1809      	addeq	r1, r1, r0
 8006d50:	6021      	streq	r1, [r4, #0]
 8006d52:	6063      	str	r3, [r4, #4]
 8006d54:	6054      	str	r4, [r2, #4]
 8006d56:	e7c9      	b.n	8006cec <_free_r+0x24>
 8006d58:	bd38      	pop	{r3, r4, r5, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000234 	.word	0x20000234

08006d60 <_malloc_r>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	1ccd      	adds	r5, r1, #3
 8006d64:	f025 0503 	bic.w	r5, r5, #3
 8006d68:	3508      	adds	r5, #8
 8006d6a:	2d0c      	cmp	r5, #12
 8006d6c:	bf38      	it	cc
 8006d6e:	250c      	movcc	r5, #12
 8006d70:	2d00      	cmp	r5, #0
 8006d72:	4606      	mov	r6, r0
 8006d74:	db01      	blt.n	8006d7a <_malloc_r+0x1a>
 8006d76:	42a9      	cmp	r1, r5
 8006d78:	d903      	bls.n	8006d82 <_malloc_r+0x22>
 8006d7a:	230c      	movs	r3, #12
 8006d7c:	6033      	str	r3, [r6, #0]
 8006d7e:	2000      	movs	r0, #0
 8006d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d82:	f001 fc95 	bl	80086b0 <__malloc_lock>
 8006d86:	4921      	ldr	r1, [pc, #132]	; (8006e0c <_malloc_r+0xac>)
 8006d88:	680a      	ldr	r2, [r1, #0]
 8006d8a:	4614      	mov	r4, r2
 8006d8c:	b99c      	cbnz	r4, 8006db6 <_malloc_r+0x56>
 8006d8e:	4f20      	ldr	r7, [pc, #128]	; (8006e10 <_malloc_r+0xb0>)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	b923      	cbnz	r3, 8006d9e <_malloc_r+0x3e>
 8006d94:	4621      	mov	r1, r4
 8006d96:	4630      	mov	r0, r6
 8006d98:	f000 fcb4 	bl	8007704 <_sbrk_r>
 8006d9c:	6038      	str	r0, [r7, #0]
 8006d9e:	4629      	mov	r1, r5
 8006da0:	4630      	mov	r0, r6
 8006da2:	f000 fcaf 	bl	8007704 <_sbrk_r>
 8006da6:	1c43      	adds	r3, r0, #1
 8006da8:	d123      	bne.n	8006df2 <_malloc_r+0x92>
 8006daa:	230c      	movs	r3, #12
 8006dac:	4630      	mov	r0, r6
 8006dae:	6033      	str	r3, [r6, #0]
 8006db0:	f001 fc84 	bl	80086bc <__malloc_unlock>
 8006db4:	e7e3      	b.n	8006d7e <_malloc_r+0x1e>
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	1b5b      	subs	r3, r3, r5
 8006dba:	d417      	bmi.n	8006dec <_malloc_r+0x8c>
 8006dbc:	2b0b      	cmp	r3, #11
 8006dbe:	d903      	bls.n	8006dc8 <_malloc_r+0x68>
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	441c      	add	r4, r3
 8006dc4:	6025      	str	r5, [r4, #0]
 8006dc6:	e004      	b.n	8006dd2 <_malloc_r+0x72>
 8006dc8:	6863      	ldr	r3, [r4, #4]
 8006dca:	42a2      	cmp	r2, r4
 8006dcc:	bf0c      	ite	eq
 8006dce:	600b      	streq	r3, [r1, #0]
 8006dd0:	6053      	strne	r3, [r2, #4]
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f001 fc72 	bl	80086bc <__malloc_unlock>
 8006dd8:	f104 000b 	add.w	r0, r4, #11
 8006ddc:	1d23      	adds	r3, r4, #4
 8006dde:	f020 0007 	bic.w	r0, r0, #7
 8006de2:	1ac2      	subs	r2, r0, r3
 8006de4:	d0cc      	beq.n	8006d80 <_malloc_r+0x20>
 8006de6:	1a1b      	subs	r3, r3, r0
 8006de8:	50a3      	str	r3, [r4, r2]
 8006dea:	e7c9      	b.n	8006d80 <_malloc_r+0x20>
 8006dec:	4622      	mov	r2, r4
 8006dee:	6864      	ldr	r4, [r4, #4]
 8006df0:	e7cc      	b.n	8006d8c <_malloc_r+0x2c>
 8006df2:	1cc4      	adds	r4, r0, #3
 8006df4:	f024 0403 	bic.w	r4, r4, #3
 8006df8:	42a0      	cmp	r0, r4
 8006dfa:	d0e3      	beq.n	8006dc4 <_malloc_r+0x64>
 8006dfc:	1a21      	subs	r1, r4, r0
 8006dfe:	4630      	mov	r0, r6
 8006e00:	f000 fc80 	bl	8007704 <_sbrk_r>
 8006e04:	3001      	adds	r0, #1
 8006e06:	d1dd      	bne.n	8006dc4 <_malloc_r+0x64>
 8006e08:	e7cf      	b.n	8006daa <_malloc_r+0x4a>
 8006e0a:	bf00      	nop
 8006e0c:	20000234 	.word	0x20000234
 8006e10:	20000238 	.word	0x20000238

08006e14 <__cvt>:
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e1a:	461f      	mov	r7, r3
 8006e1c:	bfbb      	ittet	lt
 8006e1e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006e22:	461f      	movlt	r7, r3
 8006e24:	2300      	movge	r3, #0
 8006e26:	232d      	movlt	r3, #45	; 0x2d
 8006e28:	b088      	sub	sp, #32
 8006e2a:	4614      	mov	r4, r2
 8006e2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e2e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006e30:	7013      	strb	r3, [r2, #0]
 8006e32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e34:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006e38:	f023 0820 	bic.w	r8, r3, #32
 8006e3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e40:	d005      	beq.n	8006e4e <__cvt+0x3a>
 8006e42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006e46:	d100      	bne.n	8006e4a <__cvt+0x36>
 8006e48:	3501      	adds	r5, #1
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	e000      	b.n	8006e50 <__cvt+0x3c>
 8006e4e:	2303      	movs	r3, #3
 8006e50:	aa07      	add	r2, sp, #28
 8006e52:	9204      	str	r2, [sp, #16]
 8006e54:	aa06      	add	r2, sp, #24
 8006e56:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006e5a:	e9cd 3500 	strd	r3, r5, [sp]
 8006e5e:	4622      	mov	r2, r4
 8006e60:	463b      	mov	r3, r7
 8006e62:	f000 fd1d 	bl	80078a0 <_dtoa_r>
 8006e66:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006e6a:	4606      	mov	r6, r0
 8006e6c:	d102      	bne.n	8006e74 <__cvt+0x60>
 8006e6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e70:	07db      	lsls	r3, r3, #31
 8006e72:	d522      	bpl.n	8006eba <__cvt+0xa6>
 8006e74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e78:	eb06 0905 	add.w	r9, r6, r5
 8006e7c:	d110      	bne.n	8006ea0 <__cvt+0x8c>
 8006e7e:	7833      	ldrb	r3, [r6, #0]
 8006e80:	2b30      	cmp	r3, #48	; 0x30
 8006e82:	d10a      	bne.n	8006e9a <__cvt+0x86>
 8006e84:	2200      	movs	r2, #0
 8006e86:	2300      	movs	r3, #0
 8006e88:	4620      	mov	r0, r4
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	f7f9 fdf8 	bl	8000a80 <__aeabi_dcmpeq>
 8006e90:	b918      	cbnz	r0, 8006e9a <__cvt+0x86>
 8006e92:	f1c5 0501 	rsb	r5, r5, #1
 8006e96:	f8ca 5000 	str.w	r5, [sl]
 8006e9a:	f8da 3000 	ldr.w	r3, [sl]
 8006e9e:	4499      	add	r9, r3
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	4639      	mov	r1, r7
 8006ea8:	f7f9 fdea 	bl	8000a80 <__aeabi_dcmpeq>
 8006eac:	b108      	cbz	r0, 8006eb2 <__cvt+0x9e>
 8006eae:	f8cd 901c 	str.w	r9, [sp, #28]
 8006eb2:	2230      	movs	r2, #48	; 0x30
 8006eb4:	9b07      	ldr	r3, [sp, #28]
 8006eb6:	454b      	cmp	r3, r9
 8006eb8:	d307      	bcc.n	8006eca <__cvt+0xb6>
 8006eba:	4630      	mov	r0, r6
 8006ebc:	9b07      	ldr	r3, [sp, #28]
 8006ebe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006ec0:	1b9b      	subs	r3, r3, r6
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	b008      	add	sp, #32
 8006ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eca:	1c59      	adds	r1, r3, #1
 8006ecc:	9107      	str	r1, [sp, #28]
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	e7f0      	b.n	8006eb4 <__cvt+0xa0>

08006ed2 <__exponent>:
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ed6:	2900      	cmp	r1, #0
 8006ed8:	f803 2b02 	strb.w	r2, [r3], #2
 8006edc:	bfb6      	itet	lt
 8006ede:	222d      	movlt	r2, #45	; 0x2d
 8006ee0:	222b      	movge	r2, #43	; 0x2b
 8006ee2:	4249      	neglt	r1, r1
 8006ee4:	2909      	cmp	r1, #9
 8006ee6:	7042      	strb	r2, [r0, #1]
 8006ee8:	dd2b      	ble.n	8006f42 <__exponent+0x70>
 8006eea:	f10d 0407 	add.w	r4, sp, #7
 8006eee:	46a4      	mov	ip, r4
 8006ef0:	270a      	movs	r7, #10
 8006ef2:	fb91 f6f7 	sdiv	r6, r1, r7
 8006ef6:	460a      	mov	r2, r1
 8006ef8:	46a6      	mov	lr, r4
 8006efa:	fb07 1516 	mls	r5, r7, r6, r1
 8006efe:	2a63      	cmp	r2, #99	; 0x63
 8006f00:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006f04:	4631      	mov	r1, r6
 8006f06:	f104 34ff 	add.w	r4, r4, #4294967295
 8006f0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006f0e:	dcf0      	bgt.n	8006ef2 <__exponent+0x20>
 8006f10:	3130      	adds	r1, #48	; 0x30
 8006f12:	f1ae 0502 	sub.w	r5, lr, #2
 8006f16:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006f1a:	4629      	mov	r1, r5
 8006f1c:	1c44      	adds	r4, r0, #1
 8006f1e:	4561      	cmp	r1, ip
 8006f20:	d30a      	bcc.n	8006f38 <__exponent+0x66>
 8006f22:	f10d 0209 	add.w	r2, sp, #9
 8006f26:	eba2 020e 	sub.w	r2, r2, lr
 8006f2a:	4565      	cmp	r5, ip
 8006f2c:	bf88      	it	hi
 8006f2e:	2200      	movhi	r2, #0
 8006f30:	4413      	add	r3, r2
 8006f32:	1a18      	subs	r0, r3, r0
 8006f34:	b003      	add	sp, #12
 8006f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f3c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006f40:	e7ed      	b.n	8006f1e <__exponent+0x4c>
 8006f42:	2330      	movs	r3, #48	; 0x30
 8006f44:	3130      	adds	r1, #48	; 0x30
 8006f46:	7083      	strb	r3, [r0, #2]
 8006f48:	70c1      	strb	r1, [r0, #3]
 8006f4a:	1d03      	adds	r3, r0, #4
 8006f4c:	e7f1      	b.n	8006f32 <__exponent+0x60>
	...

08006f50 <_printf_float>:
 8006f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f54:	b091      	sub	sp, #68	; 0x44
 8006f56:	460c      	mov	r4, r1
 8006f58:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006f5c:	4616      	mov	r6, r2
 8006f5e:	461f      	mov	r7, r3
 8006f60:	4605      	mov	r5, r0
 8006f62:	f001 fb81 	bl	8008668 <_localeconv_r>
 8006f66:	6803      	ldr	r3, [r0, #0]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f6c:	f7f9 f95c 	bl	8000228 <strlen>
 8006f70:	2300      	movs	r3, #0
 8006f72:	930e      	str	r3, [sp, #56]	; 0x38
 8006f74:	f8d8 3000 	ldr.w	r3, [r8]
 8006f78:	900a      	str	r0, [sp, #40]	; 0x28
 8006f7a:	3307      	adds	r3, #7
 8006f7c:	f023 0307 	bic.w	r3, r3, #7
 8006f80:	f103 0208 	add.w	r2, r3, #8
 8006f84:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006f88:	f8d4 b000 	ldr.w	fp, [r4]
 8006f8c:	f8c8 2000 	str.w	r2, [r8]
 8006f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f94:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f98:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006f9c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006fa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa6:	4640      	mov	r0, r8
 8006fa8:	4b9c      	ldr	r3, [pc, #624]	; (800721c <_printf_float+0x2cc>)
 8006faa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fac:	f7f9 fd9a 	bl	8000ae4 <__aeabi_dcmpun>
 8006fb0:	bb70      	cbnz	r0, 8007010 <_printf_float+0xc0>
 8006fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	4b98      	ldr	r3, [pc, #608]	; (800721c <_printf_float+0x2cc>)
 8006fba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fbc:	f7f9 fd74 	bl	8000aa8 <__aeabi_dcmple>
 8006fc0:	bb30      	cbnz	r0, 8007010 <_printf_float+0xc0>
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	4640      	mov	r0, r8
 8006fc8:	4651      	mov	r1, sl
 8006fca:	f7f9 fd63 	bl	8000a94 <__aeabi_dcmplt>
 8006fce:	b110      	cbz	r0, 8006fd6 <_printf_float+0x86>
 8006fd0:	232d      	movs	r3, #45	; 0x2d
 8006fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fd6:	4b92      	ldr	r3, [pc, #584]	; (8007220 <_printf_float+0x2d0>)
 8006fd8:	4892      	ldr	r0, [pc, #584]	; (8007224 <_printf_float+0x2d4>)
 8006fda:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006fde:	bf94      	ite	ls
 8006fe0:	4698      	movls	r8, r3
 8006fe2:	4680      	movhi	r8, r0
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	f04f 0a00 	mov.w	sl, #0
 8006fea:	6123      	str	r3, [r4, #16]
 8006fec:	f02b 0304 	bic.w	r3, fp, #4
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	4633      	mov	r3, r6
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	9700      	str	r7, [sp, #0]
 8006ffa:	aa0f      	add	r2, sp, #60	; 0x3c
 8006ffc:	f000 f9d4 	bl	80073a8 <_printf_common>
 8007000:	3001      	adds	r0, #1
 8007002:	f040 8090 	bne.w	8007126 <_printf_float+0x1d6>
 8007006:	f04f 30ff 	mov.w	r0, #4294967295
 800700a:	b011      	add	sp, #68	; 0x44
 800700c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007010:	4642      	mov	r2, r8
 8007012:	4653      	mov	r3, sl
 8007014:	4640      	mov	r0, r8
 8007016:	4651      	mov	r1, sl
 8007018:	f7f9 fd64 	bl	8000ae4 <__aeabi_dcmpun>
 800701c:	b148      	cbz	r0, 8007032 <_printf_float+0xe2>
 800701e:	f1ba 0f00 	cmp.w	sl, #0
 8007022:	bfb8      	it	lt
 8007024:	232d      	movlt	r3, #45	; 0x2d
 8007026:	4880      	ldr	r0, [pc, #512]	; (8007228 <_printf_float+0x2d8>)
 8007028:	bfb8      	it	lt
 800702a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800702e:	4b7f      	ldr	r3, [pc, #508]	; (800722c <_printf_float+0x2dc>)
 8007030:	e7d3      	b.n	8006fda <_printf_float+0x8a>
 8007032:	6863      	ldr	r3, [r4, #4]
 8007034:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	d142      	bne.n	80070c2 <_printf_float+0x172>
 800703c:	2306      	movs	r3, #6
 800703e:	6063      	str	r3, [r4, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	9206      	str	r2, [sp, #24]
 8007044:	aa0e      	add	r2, sp, #56	; 0x38
 8007046:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800704a:	aa0d      	add	r2, sp, #52	; 0x34
 800704c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007050:	9203      	str	r2, [sp, #12]
 8007052:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007056:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800705a:	6023      	str	r3, [r4, #0]
 800705c:	6863      	ldr	r3, [r4, #4]
 800705e:	4642      	mov	r2, r8
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	4628      	mov	r0, r5
 8007064:	4653      	mov	r3, sl
 8007066:	910b      	str	r1, [sp, #44]	; 0x2c
 8007068:	f7ff fed4 	bl	8006e14 <__cvt>
 800706c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800706e:	4680      	mov	r8, r0
 8007070:	2947      	cmp	r1, #71	; 0x47
 8007072:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007074:	d108      	bne.n	8007088 <_printf_float+0x138>
 8007076:	1cc8      	adds	r0, r1, #3
 8007078:	db02      	blt.n	8007080 <_printf_float+0x130>
 800707a:	6863      	ldr	r3, [r4, #4]
 800707c:	4299      	cmp	r1, r3
 800707e:	dd40      	ble.n	8007102 <_printf_float+0x1b2>
 8007080:	f1a9 0902 	sub.w	r9, r9, #2
 8007084:	fa5f f989 	uxtb.w	r9, r9
 8007088:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800708c:	d81f      	bhi.n	80070ce <_printf_float+0x17e>
 800708e:	464a      	mov	r2, r9
 8007090:	3901      	subs	r1, #1
 8007092:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007096:	910d      	str	r1, [sp, #52]	; 0x34
 8007098:	f7ff ff1b 	bl	8006ed2 <__exponent>
 800709c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800709e:	4682      	mov	sl, r0
 80070a0:	1813      	adds	r3, r2, r0
 80070a2:	2a01      	cmp	r2, #1
 80070a4:	6123      	str	r3, [r4, #16]
 80070a6:	dc02      	bgt.n	80070ae <_printf_float+0x15e>
 80070a8:	6822      	ldr	r2, [r4, #0]
 80070aa:	07d2      	lsls	r2, r2, #31
 80070ac:	d501      	bpl.n	80070b2 <_printf_float+0x162>
 80070ae:	3301      	adds	r3, #1
 80070b0:	6123      	str	r3, [r4, #16]
 80070b2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d09b      	beq.n	8006ff2 <_printf_float+0xa2>
 80070ba:	232d      	movs	r3, #45	; 0x2d
 80070bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070c0:	e797      	b.n	8006ff2 <_printf_float+0xa2>
 80070c2:	2947      	cmp	r1, #71	; 0x47
 80070c4:	d1bc      	bne.n	8007040 <_printf_float+0xf0>
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1ba      	bne.n	8007040 <_printf_float+0xf0>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e7b7      	b.n	800703e <_printf_float+0xee>
 80070ce:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80070d2:	d118      	bne.n	8007106 <_printf_float+0x1b6>
 80070d4:	2900      	cmp	r1, #0
 80070d6:	6863      	ldr	r3, [r4, #4]
 80070d8:	dd0b      	ble.n	80070f2 <_printf_float+0x1a2>
 80070da:	6121      	str	r1, [r4, #16]
 80070dc:	b913      	cbnz	r3, 80070e4 <_printf_float+0x194>
 80070de:	6822      	ldr	r2, [r4, #0]
 80070e0:	07d0      	lsls	r0, r2, #31
 80070e2:	d502      	bpl.n	80070ea <_printf_float+0x19a>
 80070e4:	3301      	adds	r3, #1
 80070e6:	440b      	add	r3, r1
 80070e8:	6123      	str	r3, [r4, #16]
 80070ea:	f04f 0a00 	mov.w	sl, #0
 80070ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80070f0:	e7df      	b.n	80070b2 <_printf_float+0x162>
 80070f2:	b913      	cbnz	r3, 80070fa <_printf_float+0x1aa>
 80070f4:	6822      	ldr	r2, [r4, #0]
 80070f6:	07d2      	lsls	r2, r2, #31
 80070f8:	d501      	bpl.n	80070fe <_printf_float+0x1ae>
 80070fa:	3302      	adds	r3, #2
 80070fc:	e7f4      	b.n	80070e8 <_printf_float+0x198>
 80070fe:	2301      	movs	r3, #1
 8007100:	e7f2      	b.n	80070e8 <_printf_float+0x198>
 8007102:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007108:	4299      	cmp	r1, r3
 800710a:	db05      	blt.n	8007118 <_printf_float+0x1c8>
 800710c:	6823      	ldr	r3, [r4, #0]
 800710e:	6121      	str	r1, [r4, #16]
 8007110:	07d8      	lsls	r0, r3, #31
 8007112:	d5ea      	bpl.n	80070ea <_printf_float+0x19a>
 8007114:	1c4b      	adds	r3, r1, #1
 8007116:	e7e7      	b.n	80070e8 <_printf_float+0x198>
 8007118:	2900      	cmp	r1, #0
 800711a:	bfcc      	ite	gt
 800711c:	2201      	movgt	r2, #1
 800711e:	f1c1 0202 	rsble	r2, r1, #2
 8007122:	4413      	add	r3, r2
 8007124:	e7e0      	b.n	80070e8 <_printf_float+0x198>
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	055a      	lsls	r2, r3, #21
 800712a:	d407      	bmi.n	800713c <_printf_float+0x1ec>
 800712c:	6923      	ldr	r3, [r4, #16]
 800712e:	4642      	mov	r2, r8
 8007130:	4631      	mov	r1, r6
 8007132:	4628      	mov	r0, r5
 8007134:	47b8      	blx	r7
 8007136:	3001      	adds	r0, #1
 8007138:	d12b      	bne.n	8007192 <_printf_float+0x242>
 800713a:	e764      	b.n	8007006 <_printf_float+0xb6>
 800713c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007140:	f240 80dd 	bls.w	80072fe <_printf_float+0x3ae>
 8007144:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007148:	2200      	movs	r2, #0
 800714a:	2300      	movs	r3, #0
 800714c:	f7f9 fc98 	bl	8000a80 <__aeabi_dcmpeq>
 8007150:	2800      	cmp	r0, #0
 8007152:	d033      	beq.n	80071bc <_printf_float+0x26c>
 8007154:	2301      	movs	r3, #1
 8007156:	4631      	mov	r1, r6
 8007158:	4628      	mov	r0, r5
 800715a:	4a35      	ldr	r2, [pc, #212]	; (8007230 <_printf_float+0x2e0>)
 800715c:	47b8      	blx	r7
 800715e:	3001      	adds	r0, #1
 8007160:	f43f af51 	beq.w	8007006 <_printf_float+0xb6>
 8007164:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007168:	429a      	cmp	r2, r3
 800716a:	db02      	blt.n	8007172 <_printf_float+0x222>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	07d8      	lsls	r0, r3, #31
 8007170:	d50f      	bpl.n	8007192 <_printf_float+0x242>
 8007172:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007176:	4631      	mov	r1, r6
 8007178:	4628      	mov	r0, r5
 800717a:	47b8      	blx	r7
 800717c:	3001      	adds	r0, #1
 800717e:	f43f af42 	beq.w	8007006 <_printf_float+0xb6>
 8007182:	f04f 0800 	mov.w	r8, #0
 8007186:	f104 091a 	add.w	r9, r4, #26
 800718a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800718c:	3b01      	subs	r3, #1
 800718e:	4543      	cmp	r3, r8
 8007190:	dc09      	bgt.n	80071a6 <_printf_float+0x256>
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	079b      	lsls	r3, r3, #30
 8007196:	f100 8102 	bmi.w	800739e <_printf_float+0x44e>
 800719a:	68e0      	ldr	r0, [r4, #12]
 800719c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800719e:	4298      	cmp	r0, r3
 80071a0:	bfb8      	it	lt
 80071a2:	4618      	movlt	r0, r3
 80071a4:	e731      	b.n	800700a <_printf_float+0xba>
 80071a6:	2301      	movs	r3, #1
 80071a8:	464a      	mov	r2, r9
 80071aa:	4631      	mov	r1, r6
 80071ac:	4628      	mov	r0, r5
 80071ae:	47b8      	blx	r7
 80071b0:	3001      	adds	r0, #1
 80071b2:	f43f af28 	beq.w	8007006 <_printf_float+0xb6>
 80071b6:	f108 0801 	add.w	r8, r8, #1
 80071ba:	e7e6      	b.n	800718a <_printf_float+0x23a>
 80071bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071be:	2b00      	cmp	r3, #0
 80071c0:	dc38      	bgt.n	8007234 <_printf_float+0x2e4>
 80071c2:	2301      	movs	r3, #1
 80071c4:	4631      	mov	r1, r6
 80071c6:	4628      	mov	r0, r5
 80071c8:	4a19      	ldr	r2, [pc, #100]	; (8007230 <_printf_float+0x2e0>)
 80071ca:	47b8      	blx	r7
 80071cc:	3001      	adds	r0, #1
 80071ce:	f43f af1a 	beq.w	8007006 <_printf_float+0xb6>
 80071d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071d6:	4313      	orrs	r3, r2
 80071d8:	d102      	bne.n	80071e0 <_printf_float+0x290>
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	07d9      	lsls	r1, r3, #31
 80071de:	d5d8      	bpl.n	8007192 <_printf_float+0x242>
 80071e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071e4:	4631      	mov	r1, r6
 80071e6:	4628      	mov	r0, r5
 80071e8:	47b8      	blx	r7
 80071ea:	3001      	adds	r0, #1
 80071ec:	f43f af0b 	beq.w	8007006 <_printf_float+0xb6>
 80071f0:	f04f 0900 	mov.w	r9, #0
 80071f4:	f104 0a1a 	add.w	sl, r4, #26
 80071f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071fa:	425b      	negs	r3, r3
 80071fc:	454b      	cmp	r3, r9
 80071fe:	dc01      	bgt.n	8007204 <_printf_float+0x2b4>
 8007200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007202:	e794      	b.n	800712e <_printf_float+0x1de>
 8007204:	2301      	movs	r3, #1
 8007206:	4652      	mov	r2, sl
 8007208:	4631      	mov	r1, r6
 800720a:	4628      	mov	r0, r5
 800720c:	47b8      	blx	r7
 800720e:	3001      	adds	r0, #1
 8007210:	f43f aef9 	beq.w	8007006 <_printf_float+0xb6>
 8007214:	f109 0901 	add.w	r9, r9, #1
 8007218:	e7ee      	b.n	80071f8 <_printf_float+0x2a8>
 800721a:	bf00      	nop
 800721c:	7fefffff 	.word	0x7fefffff
 8007220:	0800a404 	.word	0x0800a404
 8007224:	0800a408 	.word	0x0800a408
 8007228:	0800a410 	.word	0x0800a410
 800722c:	0800a40c 	.word	0x0800a40c
 8007230:	0800a414 	.word	0x0800a414
 8007234:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007236:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007238:	429a      	cmp	r2, r3
 800723a:	bfa8      	it	ge
 800723c:	461a      	movge	r2, r3
 800723e:	2a00      	cmp	r2, #0
 8007240:	4691      	mov	r9, r2
 8007242:	dc37      	bgt.n	80072b4 <_printf_float+0x364>
 8007244:	f04f 0b00 	mov.w	fp, #0
 8007248:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800724c:	f104 021a 	add.w	r2, r4, #26
 8007250:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007254:	ebaa 0309 	sub.w	r3, sl, r9
 8007258:	455b      	cmp	r3, fp
 800725a:	dc33      	bgt.n	80072c4 <_printf_float+0x374>
 800725c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007260:	429a      	cmp	r2, r3
 8007262:	db3b      	blt.n	80072dc <_printf_float+0x38c>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	07da      	lsls	r2, r3, #31
 8007268:	d438      	bmi.n	80072dc <_printf_float+0x38c>
 800726a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800726c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800726e:	eba2 030a 	sub.w	r3, r2, sl
 8007272:	eba2 0901 	sub.w	r9, r2, r1
 8007276:	4599      	cmp	r9, r3
 8007278:	bfa8      	it	ge
 800727a:	4699      	movge	r9, r3
 800727c:	f1b9 0f00 	cmp.w	r9, #0
 8007280:	dc34      	bgt.n	80072ec <_printf_float+0x39c>
 8007282:	f04f 0800 	mov.w	r8, #0
 8007286:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800728a:	f104 0a1a 	add.w	sl, r4, #26
 800728e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007292:	1a9b      	subs	r3, r3, r2
 8007294:	eba3 0309 	sub.w	r3, r3, r9
 8007298:	4543      	cmp	r3, r8
 800729a:	f77f af7a 	ble.w	8007192 <_printf_float+0x242>
 800729e:	2301      	movs	r3, #1
 80072a0:	4652      	mov	r2, sl
 80072a2:	4631      	mov	r1, r6
 80072a4:	4628      	mov	r0, r5
 80072a6:	47b8      	blx	r7
 80072a8:	3001      	adds	r0, #1
 80072aa:	f43f aeac 	beq.w	8007006 <_printf_float+0xb6>
 80072ae:	f108 0801 	add.w	r8, r8, #1
 80072b2:	e7ec      	b.n	800728e <_printf_float+0x33e>
 80072b4:	4613      	mov	r3, r2
 80072b6:	4631      	mov	r1, r6
 80072b8:	4642      	mov	r2, r8
 80072ba:	4628      	mov	r0, r5
 80072bc:	47b8      	blx	r7
 80072be:	3001      	adds	r0, #1
 80072c0:	d1c0      	bne.n	8007244 <_printf_float+0x2f4>
 80072c2:	e6a0      	b.n	8007006 <_printf_float+0xb6>
 80072c4:	2301      	movs	r3, #1
 80072c6:	4631      	mov	r1, r6
 80072c8:	4628      	mov	r0, r5
 80072ca:	920b      	str	r2, [sp, #44]	; 0x2c
 80072cc:	47b8      	blx	r7
 80072ce:	3001      	adds	r0, #1
 80072d0:	f43f ae99 	beq.w	8007006 <_printf_float+0xb6>
 80072d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072d6:	f10b 0b01 	add.w	fp, fp, #1
 80072da:	e7b9      	b.n	8007250 <_printf_float+0x300>
 80072dc:	4631      	mov	r1, r6
 80072de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072e2:	4628      	mov	r0, r5
 80072e4:	47b8      	blx	r7
 80072e6:	3001      	adds	r0, #1
 80072e8:	d1bf      	bne.n	800726a <_printf_float+0x31a>
 80072ea:	e68c      	b.n	8007006 <_printf_float+0xb6>
 80072ec:	464b      	mov	r3, r9
 80072ee:	4631      	mov	r1, r6
 80072f0:	4628      	mov	r0, r5
 80072f2:	eb08 020a 	add.w	r2, r8, sl
 80072f6:	47b8      	blx	r7
 80072f8:	3001      	adds	r0, #1
 80072fa:	d1c2      	bne.n	8007282 <_printf_float+0x332>
 80072fc:	e683      	b.n	8007006 <_printf_float+0xb6>
 80072fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007300:	2a01      	cmp	r2, #1
 8007302:	dc01      	bgt.n	8007308 <_printf_float+0x3b8>
 8007304:	07db      	lsls	r3, r3, #31
 8007306:	d537      	bpl.n	8007378 <_printf_float+0x428>
 8007308:	2301      	movs	r3, #1
 800730a:	4642      	mov	r2, r8
 800730c:	4631      	mov	r1, r6
 800730e:	4628      	mov	r0, r5
 8007310:	47b8      	blx	r7
 8007312:	3001      	adds	r0, #1
 8007314:	f43f ae77 	beq.w	8007006 <_printf_float+0xb6>
 8007318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800731c:	4631      	mov	r1, r6
 800731e:	4628      	mov	r0, r5
 8007320:	47b8      	blx	r7
 8007322:	3001      	adds	r0, #1
 8007324:	f43f ae6f 	beq.w	8007006 <_printf_float+0xb6>
 8007328:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800732c:	2200      	movs	r2, #0
 800732e:	2300      	movs	r3, #0
 8007330:	f7f9 fba6 	bl	8000a80 <__aeabi_dcmpeq>
 8007334:	b9d8      	cbnz	r0, 800736e <_printf_float+0x41e>
 8007336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007338:	f108 0201 	add.w	r2, r8, #1
 800733c:	3b01      	subs	r3, #1
 800733e:	4631      	mov	r1, r6
 8007340:	4628      	mov	r0, r5
 8007342:	47b8      	blx	r7
 8007344:	3001      	adds	r0, #1
 8007346:	d10e      	bne.n	8007366 <_printf_float+0x416>
 8007348:	e65d      	b.n	8007006 <_printf_float+0xb6>
 800734a:	2301      	movs	r3, #1
 800734c:	464a      	mov	r2, r9
 800734e:	4631      	mov	r1, r6
 8007350:	4628      	mov	r0, r5
 8007352:	47b8      	blx	r7
 8007354:	3001      	adds	r0, #1
 8007356:	f43f ae56 	beq.w	8007006 <_printf_float+0xb6>
 800735a:	f108 0801 	add.w	r8, r8, #1
 800735e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007360:	3b01      	subs	r3, #1
 8007362:	4543      	cmp	r3, r8
 8007364:	dcf1      	bgt.n	800734a <_printf_float+0x3fa>
 8007366:	4653      	mov	r3, sl
 8007368:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800736c:	e6e0      	b.n	8007130 <_printf_float+0x1e0>
 800736e:	f04f 0800 	mov.w	r8, #0
 8007372:	f104 091a 	add.w	r9, r4, #26
 8007376:	e7f2      	b.n	800735e <_printf_float+0x40e>
 8007378:	2301      	movs	r3, #1
 800737a:	4642      	mov	r2, r8
 800737c:	e7df      	b.n	800733e <_printf_float+0x3ee>
 800737e:	2301      	movs	r3, #1
 8007380:	464a      	mov	r2, r9
 8007382:	4631      	mov	r1, r6
 8007384:	4628      	mov	r0, r5
 8007386:	47b8      	blx	r7
 8007388:	3001      	adds	r0, #1
 800738a:	f43f ae3c 	beq.w	8007006 <_printf_float+0xb6>
 800738e:	f108 0801 	add.w	r8, r8, #1
 8007392:	68e3      	ldr	r3, [r4, #12]
 8007394:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007396:	1a5b      	subs	r3, r3, r1
 8007398:	4543      	cmp	r3, r8
 800739a:	dcf0      	bgt.n	800737e <_printf_float+0x42e>
 800739c:	e6fd      	b.n	800719a <_printf_float+0x24a>
 800739e:	f04f 0800 	mov.w	r8, #0
 80073a2:	f104 0919 	add.w	r9, r4, #25
 80073a6:	e7f4      	b.n	8007392 <_printf_float+0x442>

080073a8 <_printf_common>:
 80073a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ac:	4616      	mov	r6, r2
 80073ae:	4699      	mov	r9, r3
 80073b0:	688a      	ldr	r2, [r1, #8]
 80073b2:	690b      	ldr	r3, [r1, #16]
 80073b4:	4607      	mov	r7, r0
 80073b6:	4293      	cmp	r3, r2
 80073b8:	bfb8      	it	lt
 80073ba:	4613      	movlt	r3, r2
 80073bc:	6033      	str	r3, [r6, #0]
 80073be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073c2:	460c      	mov	r4, r1
 80073c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073c8:	b10a      	cbz	r2, 80073ce <_printf_common+0x26>
 80073ca:	3301      	adds	r3, #1
 80073cc:	6033      	str	r3, [r6, #0]
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	0699      	lsls	r1, r3, #26
 80073d2:	bf42      	ittt	mi
 80073d4:	6833      	ldrmi	r3, [r6, #0]
 80073d6:	3302      	addmi	r3, #2
 80073d8:	6033      	strmi	r3, [r6, #0]
 80073da:	6825      	ldr	r5, [r4, #0]
 80073dc:	f015 0506 	ands.w	r5, r5, #6
 80073e0:	d106      	bne.n	80073f0 <_printf_common+0x48>
 80073e2:	f104 0a19 	add.w	sl, r4, #25
 80073e6:	68e3      	ldr	r3, [r4, #12]
 80073e8:	6832      	ldr	r2, [r6, #0]
 80073ea:	1a9b      	subs	r3, r3, r2
 80073ec:	42ab      	cmp	r3, r5
 80073ee:	dc28      	bgt.n	8007442 <_printf_common+0x9a>
 80073f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073f4:	1e13      	subs	r3, r2, #0
 80073f6:	6822      	ldr	r2, [r4, #0]
 80073f8:	bf18      	it	ne
 80073fa:	2301      	movne	r3, #1
 80073fc:	0692      	lsls	r2, r2, #26
 80073fe:	d42d      	bmi.n	800745c <_printf_common+0xb4>
 8007400:	4649      	mov	r1, r9
 8007402:	4638      	mov	r0, r7
 8007404:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007408:	47c0      	blx	r8
 800740a:	3001      	adds	r0, #1
 800740c:	d020      	beq.n	8007450 <_printf_common+0xa8>
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	68e5      	ldr	r5, [r4, #12]
 8007412:	f003 0306 	and.w	r3, r3, #6
 8007416:	2b04      	cmp	r3, #4
 8007418:	bf18      	it	ne
 800741a:	2500      	movne	r5, #0
 800741c:	6832      	ldr	r2, [r6, #0]
 800741e:	f04f 0600 	mov.w	r6, #0
 8007422:	68a3      	ldr	r3, [r4, #8]
 8007424:	bf08      	it	eq
 8007426:	1aad      	subeq	r5, r5, r2
 8007428:	6922      	ldr	r2, [r4, #16]
 800742a:	bf08      	it	eq
 800742c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007430:	4293      	cmp	r3, r2
 8007432:	bfc4      	itt	gt
 8007434:	1a9b      	subgt	r3, r3, r2
 8007436:	18ed      	addgt	r5, r5, r3
 8007438:	341a      	adds	r4, #26
 800743a:	42b5      	cmp	r5, r6
 800743c:	d11a      	bne.n	8007474 <_printf_common+0xcc>
 800743e:	2000      	movs	r0, #0
 8007440:	e008      	b.n	8007454 <_printf_common+0xac>
 8007442:	2301      	movs	r3, #1
 8007444:	4652      	mov	r2, sl
 8007446:	4649      	mov	r1, r9
 8007448:	4638      	mov	r0, r7
 800744a:	47c0      	blx	r8
 800744c:	3001      	adds	r0, #1
 800744e:	d103      	bne.n	8007458 <_printf_common+0xb0>
 8007450:	f04f 30ff 	mov.w	r0, #4294967295
 8007454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007458:	3501      	adds	r5, #1
 800745a:	e7c4      	b.n	80073e6 <_printf_common+0x3e>
 800745c:	2030      	movs	r0, #48	; 0x30
 800745e:	18e1      	adds	r1, r4, r3
 8007460:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800746a:	4422      	add	r2, r4
 800746c:	3302      	adds	r3, #2
 800746e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007472:	e7c5      	b.n	8007400 <_printf_common+0x58>
 8007474:	2301      	movs	r3, #1
 8007476:	4622      	mov	r2, r4
 8007478:	4649      	mov	r1, r9
 800747a:	4638      	mov	r0, r7
 800747c:	47c0      	blx	r8
 800747e:	3001      	adds	r0, #1
 8007480:	d0e6      	beq.n	8007450 <_printf_common+0xa8>
 8007482:	3601      	adds	r6, #1
 8007484:	e7d9      	b.n	800743a <_printf_common+0x92>
	...

08007488 <_printf_i>:
 8007488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800748c:	460c      	mov	r4, r1
 800748e:	7e27      	ldrb	r7, [r4, #24]
 8007490:	4691      	mov	r9, r2
 8007492:	2f78      	cmp	r7, #120	; 0x78
 8007494:	4680      	mov	r8, r0
 8007496:	469a      	mov	sl, r3
 8007498:	990c      	ldr	r1, [sp, #48]	; 0x30
 800749a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800749e:	d807      	bhi.n	80074b0 <_printf_i+0x28>
 80074a0:	2f62      	cmp	r7, #98	; 0x62
 80074a2:	d80a      	bhi.n	80074ba <_printf_i+0x32>
 80074a4:	2f00      	cmp	r7, #0
 80074a6:	f000 80d9 	beq.w	800765c <_printf_i+0x1d4>
 80074aa:	2f58      	cmp	r7, #88	; 0x58
 80074ac:	f000 80a4 	beq.w	80075f8 <_printf_i+0x170>
 80074b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074b8:	e03a      	b.n	8007530 <_printf_i+0xa8>
 80074ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074be:	2b15      	cmp	r3, #21
 80074c0:	d8f6      	bhi.n	80074b0 <_printf_i+0x28>
 80074c2:	a001      	add	r0, pc, #4	; (adr r0, 80074c8 <_printf_i+0x40>)
 80074c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80074c8:	08007521 	.word	0x08007521
 80074cc:	08007535 	.word	0x08007535
 80074d0:	080074b1 	.word	0x080074b1
 80074d4:	080074b1 	.word	0x080074b1
 80074d8:	080074b1 	.word	0x080074b1
 80074dc:	080074b1 	.word	0x080074b1
 80074e0:	08007535 	.word	0x08007535
 80074e4:	080074b1 	.word	0x080074b1
 80074e8:	080074b1 	.word	0x080074b1
 80074ec:	080074b1 	.word	0x080074b1
 80074f0:	080074b1 	.word	0x080074b1
 80074f4:	08007643 	.word	0x08007643
 80074f8:	08007565 	.word	0x08007565
 80074fc:	08007625 	.word	0x08007625
 8007500:	080074b1 	.word	0x080074b1
 8007504:	080074b1 	.word	0x080074b1
 8007508:	08007665 	.word	0x08007665
 800750c:	080074b1 	.word	0x080074b1
 8007510:	08007565 	.word	0x08007565
 8007514:	080074b1 	.word	0x080074b1
 8007518:	080074b1 	.word	0x080074b1
 800751c:	0800762d 	.word	0x0800762d
 8007520:	680b      	ldr	r3, [r1, #0]
 8007522:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007526:	1d1a      	adds	r2, r3, #4
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	600a      	str	r2, [r1, #0]
 800752c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007530:	2301      	movs	r3, #1
 8007532:	e0a4      	b.n	800767e <_printf_i+0x1f6>
 8007534:	6825      	ldr	r5, [r4, #0]
 8007536:	6808      	ldr	r0, [r1, #0]
 8007538:	062e      	lsls	r6, r5, #24
 800753a:	f100 0304 	add.w	r3, r0, #4
 800753e:	d50a      	bpl.n	8007556 <_printf_i+0xce>
 8007540:	6805      	ldr	r5, [r0, #0]
 8007542:	600b      	str	r3, [r1, #0]
 8007544:	2d00      	cmp	r5, #0
 8007546:	da03      	bge.n	8007550 <_printf_i+0xc8>
 8007548:	232d      	movs	r3, #45	; 0x2d
 800754a:	426d      	negs	r5, r5
 800754c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007550:	230a      	movs	r3, #10
 8007552:	485e      	ldr	r0, [pc, #376]	; (80076cc <_printf_i+0x244>)
 8007554:	e019      	b.n	800758a <_printf_i+0x102>
 8007556:	f015 0f40 	tst.w	r5, #64	; 0x40
 800755a:	6805      	ldr	r5, [r0, #0]
 800755c:	600b      	str	r3, [r1, #0]
 800755e:	bf18      	it	ne
 8007560:	b22d      	sxthne	r5, r5
 8007562:	e7ef      	b.n	8007544 <_printf_i+0xbc>
 8007564:	680b      	ldr	r3, [r1, #0]
 8007566:	6825      	ldr	r5, [r4, #0]
 8007568:	1d18      	adds	r0, r3, #4
 800756a:	6008      	str	r0, [r1, #0]
 800756c:	0628      	lsls	r0, r5, #24
 800756e:	d501      	bpl.n	8007574 <_printf_i+0xec>
 8007570:	681d      	ldr	r5, [r3, #0]
 8007572:	e002      	b.n	800757a <_printf_i+0xf2>
 8007574:	0669      	lsls	r1, r5, #25
 8007576:	d5fb      	bpl.n	8007570 <_printf_i+0xe8>
 8007578:	881d      	ldrh	r5, [r3, #0]
 800757a:	2f6f      	cmp	r7, #111	; 0x6f
 800757c:	bf0c      	ite	eq
 800757e:	2308      	moveq	r3, #8
 8007580:	230a      	movne	r3, #10
 8007582:	4852      	ldr	r0, [pc, #328]	; (80076cc <_printf_i+0x244>)
 8007584:	2100      	movs	r1, #0
 8007586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800758a:	6866      	ldr	r6, [r4, #4]
 800758c:	2e00      	cmp	r6, #0
 800758e:	bfa8      	it	ge
 8007590:	6821      	ldrge	r1, [r4, #0]
 8007592:	60a6      	str	r6, [r4, #8]
 8007594:	bfa4      	itt	ge
 8007596:	f021 0104 	bicge.w	r1, r1, #4
 800759a:	6021      	strge	r1, [r4, #0]
 800759c:	b90d      	cbnz	r5, 80075a2 <_printf_i+0x11a>
 800759e:	2e00      	cmp	r6, #0
 80075a0:	d04d      	beq.n	800763e <_printf_i+0x1b6>
 80075a2:	4616      	mov	r6, r2
 80075a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80075a8:	fb03 5711 	mls	r7, r3, r1, r5
 80075ac:	5dc7      	ldrb	r7, [r0, r7]
 80075ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075b2:	462f      	mov	r7, r5
 80075b4:	42bb      	cmp	r3, r7
 80075b6:	460d      	mov	r5, r1
 80075b8:	d9f4      	bls.n	80075a4 <_printf_i+0x11c>
 80075ba:	2b08      	cmp	r3, #8
 80075bc:	d10b      	bne.n	80075d6 <_printf_i+0x14e>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	07df      	lsls	r7, r3, #31
 80075c2:	d508      	bpl.n	80075d6 <_printf_i+0x14e>
 80075c4:	6923      	ldr	r3, [r4, #16]
 80075c6:	6861      	ldr	r1, [r4, #4]
 80075c8:	4299      	cmp	r1, r3
 80075ca:	bfde      	ittt	le
 80075cc:	2330      	movle	r3, #48	; 0x30
 80075ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075d6:	1b92      	subs	r2, r2, r6
 80075d8:	6122      	str	r2, [r4, #16]
 80075da:	464b      	mov	r3, r9
 80075dc:	4621      	mov	r1, r4
 80075de:	4640      	mov	r0, r8
 80075e0:	f8cd a000 	str.w	sl, [sp]
 80075e4:	aa03      	add	r2, sp, #12
 80075e6:	f7ff fedf 	bl	80073a8 <_printf_common>
 80075ea:	3001      	adds	r0, #1
 80075ec:	d14c      	bne.n	8007688 <_printf_i+0x200>
 80075ee:	f04f 30ff 	mov.w	r0, #4294967295
 80075f2:	b004      	add	sp, #16
 80075f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f8:	4834      	ldr	r0, [pc, #208]	; (80076cc <_printf_i+0x244>)
 80075fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80075fe:	680e      	ldr	r6, [r1, #0]
 8007600:	6823      	ldr	r3, [r4, #0]
 8007602:	f856 5b04 	ldr.w	r5, [r6], #4
 8007606:	061f      	lsls	r7, r3, #24
 8007608:	600e      	str	r6, [r1, #0]
 800760a:	d514      	bpl.n	8007636 <_printf_i+0x1ae>
 800760c:	07d9      	lsls	r1, r3, #31
 800760e:	bf44      	itt	mi
 8007610:	f043 0320 	orrmi.w	r3, r3, #32
 8007614:	6023      	strmi	r3, [r4, #0]
 8007616:	b91d      	cbnz	r5, 8007620 <_printf_i+0x198>
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	f023 0320 	bic.w	r3, r3, #32
 800761e:	6023      	str	r3, [r4, #0]
 8007620:	2310      	movs	r3, #16
 8007622:	e7af      	b.n	8007584 <_printf_i+0xfc>
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	f043 0320 	orr.w	r3, r3, #32
 800762a:	6023      	str	r3, [r4, #0]
 800762c:	2378      	movs	r3, #120	; 0x78
 800762e:	4828      	ldr	r0, [pc, #160]	; (80076d0 <_printf_i+0x248>)
 8007630:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007634:	e7e3      	b.n	80075fe <_printf_i+0x176>
 8007636:	065e      	lsls	r6, r3, #25
 8007638:	bf48      	it	mi
 800763a:	b2ad      	uxthmi	r5, r5
 800763c:	e7e6      	b.n	800760c <_printf_i+0x184>
 800763e:	4616      	mov	r6, r2
 8007640:	e7bb      	b.n	80075ba <_printf_i+0x132>
 8007642:	680b      	ldr	r3, [r1, #0]
 8007644:	6826      	ldr	r6, [r4, #0]
 8007646:	1d1d      	adds	r5, r3, #4
 8007648:	6960      	ldr	r0, [r4, #20]
 800764a:	600d      	str	r5, [r1, #0]
 800764c:	0635      	lsls	r5, r6, #24
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	d501      	bpl.n	8007656 <_printf_i+0x1ce>
 8007652:	6018      	str	r0, [r3, #0]
 8007654:	e002      	b.n	800765c <_printf_i+0x1d4>
 8007656:	0671      	lsls	r1, r6, #25
 8007658:	d5fb      	bpl.n	8007652 <_printf_i+0x1ca>
 800765a:	8018      	strh	r0, [r3, #0]
 800765c:	2300      	movs	r3, #0
 800765e:	4616      	mov	r6, r2
 8007660:	6123      	str	r3, [r4, #16]
 8007662:	e7ba      	b.n	80075da <_printf_i+0x152>
 8007664:	680b      	ldr	r3, [r1, #0]
 8007666:	1d1a      	adds	r2, r3, #4
 8007668:	600a      	str	r2, [r1, #0]
 800766a:	681e      	ldr	r6, [r3, #0]
 800766c:	2100      	movs	r1, #0
 800766e:	4630      	mov	r0, r6
 8007670:	6862      	ldr	r2, [r4, #4]
 8007672:	f001 f800 	bl	8008676 <memchr>
 8007676:	b108      	cbz	r0, 800767c <_printf_i+0x1f4>
 8007678:	1b80      	subs	r0, r0, r6
 800767a:	6060      	str	r0, [r4, #4]
 800767c:	6863      	ldr	r3, [r4, #4]
 800767e:	6123      	str	r3, [r4, #16]
 8007680:	2300      	movs	r3, #0
 8007682:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007686:	e7a8      	b.n	80075da <_printf_i+0x152>
 8007688:	4632      	mov	r2, r6
 800768a:	4649      	mov	r1, r9
 800768c:	4640      	mov	r0, r8
 800768e:	6923      	ldr	r3, [r4, #16]
 8007690:	47d0      	blx	sl
 8007692:	3001      	adds	r0, #1
 8007694:	d0ab      	beq.n	80075ee <_printf_i+0x166>
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	079b      	lsls	r3, r3, #30
 800769a:	d413      	bmi.n	80076c4 <_printf_i+0x23c>
 800769c:	68e0      	ldr	r0, [r4, #12]
 800769e:	9b03      	ldr	r3, [sp, #12]
 80076a0:	4298      	cmp	r0, r3
 80076a2:	bfb8      	it	lt
 80076a4:	4618      	movlt	r0, r3
 80076a6:	e7a4      	b.n	80075f2 <_printf_i+0x16a>
 80076a8:	2301      	movs	r3, #1
 80076aa:	4632      	mov	r2, r6
 80076ac:	4649      	mov	r1, r9
 80076ae:	4640      	mov	r0, r8
 80076b0:	47d0      	blx	sl
 80076b2:	3001      	adds	r0, #1
 80076b4:	d09b      	beq.n	80075ee <_printf_i+0x166>
 80076b6:	3501      	adds	r5, #1
 80076b8:	68e3      	ldr	r3, [r4, #12]
 80076ba:	9903      	ldr	r1, [sp, #12]
 80076bc:	1a5b      	subs	r3, r3, r1
 80076be:	42ab      	cmp	r3, r5
 80076c0:	dcf2      	bgt.n	80076a8 <_printf_i+0x220>
 80076c2:	e7eb      	b.n	800769c <_printf_i+0x214>
 80076c4:	2500      	movs	r5, #0
 80076c6:	f104 0619 	add.w	r6, r4, #25
 80076ca:	e7f5      	b.n	80076b8 <_printf_i+0x230>
 80076cc:	0800a416 	.word	0x0800a416
 80076d0:	0800a427 	.word	0x0800a427

080076d4 <iprintf>:
 80076d4:	b40f      	push	{r0, r1, r2, r3}
 80076d6:	4b0a      	ldr	r3, [pc, #40]	; (8007700 <iprintf+0x2c>)
 80076d8:	b513      	push	{r0, r1, r4, lr}
 80076da:	681c      	ldr	r4, [r3, #0]
 80076dc:	b124      	cbz	r4, 80076e8 <iprintf+0x14>
 80076de:	69a3      	ldr	r3, [r4, #24]
 80076e0:	b913      	cbnz	r3, 80076e8 <iprintf+0x14>
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 ff22 	bl	800852c <__sinit>
 80076e8:	ab05      	add	r3, sp, #20
 80076ea:	4620      	mov	r0, r4
 80076ec:	9a04      	ldr	r2, [sp, #16]
 80076ee:	68a1      	ldr	r1, [r4, #8]
 80076f0:	9301      	str	r3, [sp, #4]
 80076f2:	f001 fcfd 	bl	80090f0 <_vfiprintf_r>
 80076f6:	b002      	add	sp, #8
 80076f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076fc:	b004      	add	sp, #16
 80076fe:	4770      	bx	lr
 8007700:	20000034 	.word	0x20000034

08007704 <_sbrk_r>:
 8007704:	b538      	push	{r3, r4, r5, lr}
 8007706:	2300      	movs	r3, #0
 8007708:	4d05      	ldr	r5, [pc, #20]	; (8007720 <_sbrk_r+0x1c>)
 800770a:	4604      	mov	r4, r0
 800770c:	4608      	mov	r0, r1
 800770e:	602b      	str	r3, [r5, #0]
 8007710:	f7fb fd16 	bl	8003140 <_sbrk>
 8007714:	1c43      	adds	r3, r0, #1
 8007716:	d102      	bne.n	800771e <_sbrk_r+0x1a>
 8007718:	682b      	ldr	r3, [r5, #0]
 800771a:	b103      	cbz	r3, 800771e <_sbrk_r+0x1a>
 800771c:	6023      	str	r3, [r4, #0]
 800771e:	bd38      	pop	{r3, r4, r5, pc}
 8007720:	20004638 	.word	0x20004638

08007724 <siprintf>:
 8007724:	b40e      	push	{r1, r2, r3}
 8007726:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800772a:	b500      	push	{lr}
 800772c:	b09c      	sub	sp, #112	; 0x70
 800772e:	ab1d      	add	r3, sp, #116	; 0x74
 8007730:	9002      	str	r0, [sp, #8]
 8007732:	9006      	str	r0, [sp, #24]
 8007734:	9107      	str	r1, [sp, #28]
 8007736:	9104      	str	r1, [sp, #16]
 8007738:	4808      	ldr	r0, [pc, #32]	; (800775c <siprintf+0x38>)
 800773a:	4909      	ldr	r1, [pc, #36]	; (8007760 <siprintf+0x3c>)
 800773c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007740:	9105      	str	r1, [sp, #20]
 8007742:	6800      	ldr	r0, [r0, #0]
 8007744:	a902      	add	r1, sp, #8
 8007746:	9301      	str	r3, [sp, #4]
 8007748:	f001 fbaa 	bl	8008ea0 <_svfiprintf_r>
 800774c:	2200      	movs	r2, #0
 800774e:	9b02      	ldr	r3, [sp, #8]
 8007750:	701a      	strb	r2, [r3, #0]
 8007752:	b01c      	add	sp, #112	; 0x70
 8007754:	f85d eb04 	ldr.w	lr, [sp], #4
 8007758:	b003      	add	sp, #12
 800775a:	4770      	bx	lr
 800775c:	20000034 	.word	0x20000034
 8007760:	ffff0208 	.word	0xffff0208

08007764 <strcat>:
 8007764:	4602      	mov	r2, r0
 8007766:	b510      	push	{r4, lr}
 8007768:	7814      	ldrb	r4, [r2, #0]
 800776a:	4613      	mov	r3, r2
 800776c:	3201      	adds	r2, #1
 800776e:	2c00      	cmp	r4, #0
 8007770:	d1fa      	bne.n	8007768 <strcat+0x4>
 8007772:	3b01      	subs	r3, #1
 8007774:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007778:	f803 2f01 	strb.w	r2, [r3, #1]!
 800777c:	2a00      	cmp	r2, #0
 800777e:	d1f9      	bne.n	8007774 <strcat+0x10>
 8007780:	bd10      	pop	{r4, pc}

08007782 <quorem>:
 8007782:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007786:	6903      	ldr	r3, [r0, #16]
 8007788:	690c      	ldr	r4, [r1, #16]
 800778a:	4607      	mov	r7, r0
 800778c:	42a3      	cmp	r3, r4
 800778e:	f2c0 8083 	blt.w	8007898 <quorem+0x116>
 8007792:	3c01      	subs	r4, #1
 8007794:	f100 0514 	add.w	r5, r0, #20
 8007798:	f101 0814 	add.w	r8, r1, #20
 800779c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077a0:	9301      	str	r3, [sp, #4]
 80077a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077aa:	3301      	adds	r3, #1
 80077ac:	429a      	cmp	r2, r3
 80077ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80077b2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80077b6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077ba:	d332      	bcc.n	8007822 <quorem+0xa0>
 80077bc:	f04f 0e00 	mov.w	lr, #0
 80077c0:	4640      	mov	r0, r8
 80077c2:	46ac      	mov	ip, r5
 80077c4:	46f2      	mov	sl, lr
 80077c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80077ca:	b293      	uxth	r3, r2
 80077cc:	fb06 e303 	mla	r3, r6, r3, lr
 80077d0:	0c12      	lsrs	r2, r2, #16
 80077d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80077d6:	fb06 e202 	mla	r2, r6, r2, lr
 80077da:	b29b      	uxth	r3, r3
 80077dc:	ebaa 0303 	sub.w	r3, sl, r3
 80077e0:	f8dc a000 	ldr.w	sl, [ip]
 80077e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077e8:	fa1f fa8a 	uxth.w	sl, sl
 80077ec:	4453      	add	r3, sl
 80077ee:	fa1f fa82 	uxth.w	sl, r2
 80077f2:	f8dc 2000 	ldr.w	r2, [ip]
 80077f6:	4581      	cmp	r9, r0
 80077f8:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80077fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007800:	b29b      	uxth	r3, r3
 8007802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007806:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800780a:	f84c 3b04 	str.w	r3, [ip], #4
 800780e:	d2da      	bcs.n	80077c6 <quorem+0x44>
 8007810:	f855 300b 	ldr.w	r3, [r5, fp]
 8007814:	b92b      	cbnz	r3, 8007822 <quorem+0xa0>
 8007816:	9b01      	ldr	r3, [sp, #4]
 8007818:	3b04      	subs	r3, #4
 800781a:	429d      	cmp	r5, r3
 800781c:	461a      	mov	r2, r3
 800781e:	d32f      	bcc.n	8007880 <quorem+0xfe>
 8007820:	613c      	str	r4, [r7, #16]
 8007822:	4638      	mov	r0, r7
 8007824:	f001 f9ca 	bl	8008bbc <__mcmp>
 8007828:	2800      	cmp	r0, #0
 800782a:	db25      	blt.n	8007878 <quorem+0xf6>
 800782c:	4628      	mov	r0, r5
 800782e:	f04f 0c00 	mov.w	ip, #0
 8007832:	3601      	adds	r6, #1
 8007834:	f858 1b04 	ldr.w	r1, [r8], #4
 8007838:	f8d0 e000 	ldr.w	lr, [r0]
 800783c:	b28b      	uxth	r3, r1
 800783e:	ebac 0303 	sub.w	r3, ip, r3
 8007842:	fa1f f28e 	uxth.w	r2, lr
 8007846:	4413      	add	r3, r2
 8007848:	0c0a      	lsrs	r2, r1, #16
 800784a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800784e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007852:	b29b      	uxth	r3, r3
 8007854:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007858:	45c1      	cmp	r9, r8
 800785a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800785e:	f840 3b04 	str.w	r3, [r0], #4
 8007862:	d2e7      	bcs.n	8007834 <quorem+0xb2>
 8007864:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007868:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800786c:	b922      	cbnz	r2, 8007878 <quorem+0xf6>
 800786e:	3b04      	subs	r3, #4
 8007870:	429d      	cmp	r5, r3
 8007872:	461a      	mov	r2, r3
 8007874:	d30a      	bcc.n	800788c <quorem+0x10a>
 8007876:	613c      	str	r4, [r7, #16]
 8007878:	4630      	mov	r0, r6
 800787a:	b003      	add	sp, #12
 800787c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007880:	6812      	ldr	r2, [r2, #0]
 8007882:	3b04      	subs	r3, #4
 8007884:	2a00      	cmp	r2, #0
 8007886:	d1cb      	bne.n	8007820 <quorem+0x9e>
 8007888:	3c01      	subs	r4, #1
 800788a:	e7c6      	b.n	800781a <quorem+0x98>
 800788c:	6812      	ldr	r2, [r2, #0]
 800788e:	3b04      	subs	r3, #4
 8007890:	2a00      	cmp	r2, #0
 8007892:	d1f0      	bne.n	8007876 <quorem+0xf4>
 8007894:	3c01      	subs	r4, #1
 8007896:	e7eb      	b.n	8007870 <quorem+0xee>
 8007898:	2000      	movs	r0, #0
 800789a:	e7ee      	b.n	800787a <quorem+0xf8>
 800789c:	0000      	movs	r0, r0
	...

080078a0 <_dtoa_r>:
 80078a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a4:	4616      	mov	r6, r2
 80078a6:	461f      	mov	r7, r3
 80078a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80078aa:	b099      	sub	sp, #100	; 0x64
 80078ac:	4605      	mov	r5, r0
 80078ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80078b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80078b6:	b974      	cbnz	r4, 80078d6 <_dtoa_r+0x36>
 80078b8:	2010      	movs	r0, #16
 80078ba:	f7ff f9f5 	bl	8006ca8 <malloc>
 80078be:	4602      	mov	r2, r0
 80078c0:	6268      	str	r0, [r5, #36]	; 0x24
 80078c2:	b920      	cbnz	r0, 80078ce <_dtoa_r+0x2e>
 80078c4:	21ea      	movs	r1, #234	; 0xea
 80078c6:	4bae      	ldr	r3, [pc, #696]	; (8007b80 <_dtoa_r+0x2e0>)
 80078c8:	48ae      	ldr	r0, [pc, #696]	; (8007b84 <_dtoa_r+0x2e4>)
 80078ca:	f001 fe57 	bl	800957c <__assert_func>
 80078ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078d2:	6004      	str	r4, [r0, #0]
 80078d4:	60c4      	str	r4, [r0, #12]
 80078d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80078d8:	6819      	ldr	r1, [r3, #0]
 80078da:	b151      	cbz	r1, 80078f2 <_dtoa_r+0x52>
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	2301      	movs	r3, #1
 80078e0:	4093      	lsls	r3, r2
 80078e2:	604a      	str	r2, [r1, #4]
 80078e4:	608b      	str	r3, [r1, #8]
 80078e6:	4628      	mov	r0, r5
 80078e8:	f000 ff2e 	bl	8008748 <_Bfree>
 80078ec:	2200      	movs	r2, #0
 80078ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	1e3b      	subs	r3, r7, #0
 80078f4:	bfaf      	iteee	ge
 80078f6:	2300      	movge	r3, #0
 80078f8:	2201      	movlt	r2, #1
 80078fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078fe:	9305      	strlt	r3, [sp, #20]
 8007900:	bfa8      	it	ge
 8007902:	f8c8 3000 	strge.w	r3, [r8]
 8007906:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800790a:	4b9f      	ldr	r3, [pc, #636]	; (8007b88 <_dtoa_r+0x2e8>)
 800790c:	bfb8      	it	lt
 800790e:	f8c8 2000 	strlt.w	r2, [r8]
 8007912:	ea33 0309 	bics.w	r3, r3, r9
 8007916:	d119      	bne.n	800794c <_dtoa_r+0xac>
 8007918:	f242 730f 	movw	r3, #9999	; 0x270f
 800791c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007924:	4333      	orrs	r3, r6
 8007926:	f000 8580 	beq.w	800842a <_dtoa_r+0xb8a>
 800792a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800792c:	b953      	cbnz	r3, 8007944 <_dtoa_r+0xa4>
 800792e:	4b97      	ldr	r3, [pc, #604]	; (8007b8c <_dtoa_r+0x2ec>)
 8007930:	e022      	b.n	8007978 <_dtoa_r+0xd8>
 8007932:	4b97      	ldr	r3, [pc, #604]	; (8007b90 <_dtoa_r+0x2f0>)
 8007934:	9308      	str	r3, [sp, #32]
 8007936:	3308      	adds	r3, #8
 8007938:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800793a:	6013      	str	r3, [r2, #0]
 800793c:	9808      	ldr	r0, [sp, #32]
 800793e:	b019      	add	sp, #100	; 0x64
 8007940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007944:	4b91      	ldr	r3, [pc, #580]	; (8007b8c <_dtoa_r+0x2ec>)
 8007946:	9308      	str	r3, [sp, #32]
 8007948:	3303      	adds	r3, #3
 800794a:	e7f5      	b.n	8007938 <_dtoa_r+0x98>
 800794c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007950:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007954:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007958:	2200      	movs	r2, #0
 800795a:	2300      	movs	r3, #0
 800795c:	f7f9 f890 	bl	8000a80 <__aeabi_dcmpeq>
 8007960:	4680      	mov	r8, r0
 8007962:	b158      	cbz	r0, 800797c <_dtoa_r+0xdc>
 8007964:	2301      	movs	r3, #1
 8007966:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007968:	6013      	str	r3, [r2, #0]
 800796a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800796c:	2b00      	cmp	r3, #0
 800796e:	f000 8559 	beq.w	8008424 <_dtoa_r+0xb84>
 8007972:	4888      	ldr	r0, [pc, #544]	; (8007b94 <_dtoa_r+0x2f4>)
 8007974:	6018      	str	r0, [r3, #0]
 8007976:	1e43      	subs	r3, r0, #1
 8007978:	9308      	str	r3, [sp, #32]
 800797a:	e7df      	b.n	800793c <_dtoa_r+0x9c>
 800797c:	ab16      	add	r3, sp, #88	; 0x58
 800797e:	9301      	str	r3, [sp, #4]
 8007980:	ab17      	add	r3, sp, #92	; 0x5c
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	4628      	mov	r0, r5
 8007986:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800798a:	f001 f9c3 	bl	8008d14 <__d2b>
 800798e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007992:	4682      	mov	sl, r0
 8007994:	2c00      	cmp	r4, #0
 8007996:	d07e      	beq.n	8007a96 <_dtoa_r+0x1f6>
 8007998:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800799c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800799e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80079a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80079aa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80079ae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80079b2:	2200      	movs	r2, #0
 80079b4:	4b78      	ldr	r3, [pc, #480]	; (8007b98 <_dtoa_r+0x2f8>)
 80079b6:	f7f8 fc43 	bl	8000240 <__aeabi_dsub>
 80079ba:	a36b      	add	r3, pc, #428	; (adr r3, 8007b68 <_dtoa_r+0x2c8>)
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	f7f8 fdf6 	bl	80005b0 <__aeabi_dmul>
 80079c4:	a36a      	add	r3, pc, #424	; (adr r3, 8007b70 <_dtoa_r+0x2d0>)
 80079c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ca:	f7f8 fc3b 	bl	8000244 <__adddf3>
 80079ce:	4606      	mov	r6, r0
 80079d0:	4620      	mov	r0, r4
 80079d2:	460f      	mov	r7, r1
 80079d4:	f7f8 fd82 	bl	80004dc <__aeabi_i2d>
 80079d8:	a367      	add	r3, pc, #412	; (adr r3, 8007b78 <_dtoa_r+0x2d8>)
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	f7f8 fde7 	bl	80005b0 <__aeabi_dmul>
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	4630      	mov	r0, r6
 80079e8:	4639      	mov	r1, r7
 80079ea:	f7f8 fc2b 	bl	8000244 <__adddf3>
 80079ee:	4606      	mov	r6, r0
 80079f0:	460f      	mov	r7, r1
 80079f2:	f7f9 f88d 	bl	8000b10 <__aeabi_d2iz>
 80079f6:	2200      	movs	r2, #0
 80079f8:	4681      	mov	r9, r0
 80079fa:	2300      	movs	r3, #0
 80079fc:	4630      	mov	r0, r6
 80079fe:	4639      	mov	r1, r7
 8007a00:	f7f9 f848 	bl	8000a94 <__aeabi_dcmplt>
 8007a04:	b148      	cbz	r0, 8007a1a <_dtoa_r+0x17a>
 8007a06:	4648      	mov	r0, r9
 8007a08:	f7f8 fd68 	bl	80004dc <__aeabi_i2d>
 8007a0c:	4632      	mov	r2, r6
 8007a0e:	463b      	mov	r3, r7
 8007a10:	f7f9 f836 	bl	8000a80 <__aeabi_dcmpeq>
 8007a14:	b908      	cbnz	r0, 8007a1a <_dtoa_r+0x17a>
 8007a16:	f109 39ff 	add.w	r9, r9, #4294967295
 8007a1a:	f1b9 0f16 	cmp.w	r9, #22
 8007a1e:	d857      	bhi.n	8007ad0 <_dtoa_r+0x230>
 8007a20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a24:	4b5d      	ldr	r3, [pc, #372]	; (8007b9c <_dtoa_r+0x2fc>)
 8007a26:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	f7f9 f831 	bl	8000a94 <__aeabi_dcmplt>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d04e      	beq.n	8007ad4 <_dtoa_r+0x234>
 8007a36:	2300      	movs	r3, #0
 8007a38:	f109 39ff 	add.w	r9, r9, #4294967295
 8007a3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a40:	1b1c      	subs	r4, r3, r4
 8007a42:	1e63      	subs	r3, r4, #1
 8007a44:	9309      	str	r3, [sp, #36]	; 0x24
 8007a46:	bf49      	itett	mi
 8007a48:	f1c4 0301 	rsbmi	r3, r4, #1
 8007a4c:	2300      	movpl	r3, #0
 8007a4e:	9306      	strmi	r3, [sp, #24]
 8007a50:	2300      	movmi	r3, #0
 8007a52:	bf54      	ite	pl
 8007a54:	9306      	strpl	r3, [sp, #24]
 8007a56:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007a58:	f1b9 0f00 	cmp.w	r9, #0
 8007a5c:	db3c      	blt.n	8007ad8 <_dtoa_r+0x238>
 8007a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a60:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007a64:	444b      	add	r3, r9
 8007a66:	9309      	str	r3, [sp, #36]	; 0x24
 8007a68:	2300      	movs	r3, #0
 8007a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a6e:	2b09      	cmp	r3, #9
 8007a70:	d86c      	bhi.n	8007b4c <_dtoa_r+0x2ac>
 8007a72:	2b05      	cmp	r3, #5
 8007a74:	bfc4      	itt	gt
 8007a76:	3b04      	subgt	r3, #4
 8007a78:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007a7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a7c:	bfc8      	it	gt
 8007a7e:	2400      	movgt	r4, #0
 8007a80:	f1a3 0302 	sub.w	r3, r3, #2
 8007a84:	bfd8      	it	le
 8007a86:	2401      	movle	r4, #1
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	f200 808b 	bhi.w	8007ba4 <_dtoa_r+0x304>
 8007a8e:	e8df f003 	tbb	[pc, r3]
 8007a92:	4f2d      	.short	0x4f2d
 8007a94:	5b4d      	.short	0x5b4d
 8007a96:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007a9a:	441c      	add	r4, r3
 8007a9c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007aa0:	2b20      	cmp	r3, #32
 8007aa2:	bfc3      	ittte	gt
 8007aa4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007aa8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007aac:	fa09 f303 	lslgt.w	r3, r9, r3
 8007ab0:	f1c3 0320 	rsble	r3, r3, #32
 8007ab4:	bfc6      	itte	gt
 8007ab6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007aba:	4318      	orrgt	r0, r3
 8007abc:	fa06 f003 	lslle.w	r0, r6, r3
 8007ac0:	f7f8 fcfc 	bl	80004bc <__aeabi_ui2d>
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007aca:	3c01      	subs	r4, #1
 8007acc:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ace:	e770      	b.n	80079b2 <_dtoa_r+0x112>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e7b3      	b.n	8007a3c <_dtoa_r+0x19c>
 8007ad4:	900f      	str	r0, [sp, #60]	; 0x3c
 8007ad6:	e7b2      	b.n	8007a3e <_dtoa_r+0x19e>
 8007ad8:	9b06      	ldr	r3, [sp, #24]
 8007ada:	eba3 0309 	sub.w	r3, r3, r9
 8007ade:	9306      	str	r3, [sp, #24]
 8007ae0:	f1c9 0300 	rsb	r3, r9, #0
 8007ae4:	930a      	str	r3, [sp, #40]	; 0x28
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	930e      	str	r3, [sp, #56]	; 0x38
 8007aea:	e7bf      	b.n	8007a6c <_dtoa_r+0x1cc>
 8007aec:	2300      	movs	r3, #0
 8007aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8007af0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	dc59      	bgt.n	8007baa <_dtoa_r+0x30a>
 8007af6:	f04f 0b01 	mov.w	fp, #1
 8007afa:	465b      	mov	r3, fp
 8007afc:	f8cd b008 	str.w	fp, [sp, #8]
 8007b00:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007b04:	2200      	movs	r2, #0
 8007b06:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007b08:	6042      	str	r2, [r0, #4]
 8007b0a:	2204      	movs	r2, #4
 8007b0c:	f102 0614 	add.w	r6, r2, #20
 8007b10:	429e      	cmp	r6, r3
 8007b12:	6841      	ldr	r1, [r0, #4]
 8007b14:	d94f      	bls.n	8007bb6 <_dtoa_r+0x316>
 8007b16:	4628      	mov	r0, r5
 8007b18:	f000 fdd6 	bl	80086c8 <_Balloc>
 8007b1c:	9008      	str	r0, [sp, #32]
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d14d      	bne.n	8007bbe <_dtoa_r+0x31e>
 8007b22:	4602      	mov	r2, r0
 8007b24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007b28:	4b1d      	ldr	r3, [pc, #116]	; (8007ba0 <_dtoa_r+0x300>)
 8007b2a:	e6cd      	b.n	80078c8 <_dtoa_r+0x28>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e7de      	b.n	8007aee <_dtoa_r+0x24e>
 8007b30:	2300      	movs	r3, #0
 8007b32:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b36:	eb09 0b03 	add.w	fp, r9, r3
 8007b3a:	f10b 0301 	add.w	r3, fp, #1
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	9302      	str	r3, [sp, #8]
 8007b42:	bfb8      	it	lt
 8007b44:	2301      	movlt	r3, #1
 8007b46:	e7dd      	b.n	8007b04 <_dtoa_r+0x264>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e7f2      	b.n	8007b32 <_dtoa_r+0x292>
 8007b4c:	2401      	movs	r4, #1
 8007b4e:	2300      	movs	r3, #0
 8007b50:	940b      	str	r4, [sp, #44]	; 0x2c
 8007b52:	9322      	str	r3, [sp, #136]	; 0x88
 8007b54:	f04f 3bff 	mov.w	fp, #4294967295
 8007b58:	2200      	movs	r2, #0
 8007b5a:	2312      	movs	r3, #18
 8007b5c:	f8cd b008 	str.w	fp, [sp, #8]
 8007b60:	9223      	str	r2, [sp, #140]	; 0x8c
 8007b62:	e7cf      	b.n	8007b04 <_dtoa_r+0x264>
 8007b64:	f3af 8000 	nop.w
 8007b68:	636f4361 	.word	0x636f4361
 8007b6c:	3fd287a7 	.word	0x3fd287a7
 8007b70:	8b60c8b3 	.word	0x8b60c8b3
 8007b74:	3fc68a28 	.word	0x3fc68a28
 8007b78:	509f79fb 	.word	0x509f79fb
 8007b7c:	3fd34413 	.word	0x3fd34413
 8007b80:	0800a445 	.word	0x0800a445
 8007b84:	0800a45c 	.word	0x0800a45c
 8007b88:	7ff00000 	.word	0x7ff00000
 8007b8c:	0800a441 	.word	0x0800a441
 8007b90:	0800a438 	.word	0x0800a438
 8007b94:	0800a415 	.word	0x0800a415
 8007b98:	3ff80000 	.word	0x3ff80000
 8007b9c:	0800a5b8 	.word	0x0800a5b8
 8007ba0:	0800a4bb 	.word	0x0800a4bb
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ba8:	e7d4      	b.n	8007b54 <_dtoa_r+0x2b4>
 8007baa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007bae:	465b      	mov	r3, fp
 8007bb0:	f8cd b008 	str.w	fp, [sp, #8]
 8007bb4:	e7a6      	b.n	8007b04 <_dtoa_r+0x264>
 8007bb6:	3101      	adds	r1, #1
 8007bb8:	6041      	str	r1, [r0, #4]
 8007bba:	0052      	lsls	r2, r2, #1
 8007bbc:	e7a6      	b.n	8007b0c <_dtoa_r+0x26c>
 8007bbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007bc0:	9a08      	ldr	r2, [sp, #32]
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	9b02      	ldr	r3, [sp, #8]
 8007bc6:	2b0e      	cmp	r3, #14
 8007bc8:	f200 80a8 	bhi.w	8007d1c <_dtoa_r+0x47c>
 8007bcc:	2c00      	cmp	r4, #0
 8007bce:	f000 80a5 	beq.w	8007d1c <_dtoa_r+0x47c>
 8007bd2:	f1b9 0f00 	cmp.w	r9, #0
 8007bd6:	dd34      	ble.n	8007c42 <_dtoa_r+0x3a2>
 8007bd8:	4a9a      	ldr	r2, [pc, #616]	; (8007e44 <_dtoa_r+0x5a4>)
 8007bda:	f009 030f 	and.w	r3, r9, #15
 8007bde:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007be2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007be6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007bea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007bee:	ea4f 1429 	mov.w	r4, r9, asr #4
 8007bf2:	d016      	beq.n	8007c22 <_dtoa_r+0x382>
 8007bf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bf8:	4b93      	ldr	r3, [pc, #588]	; (8007e48 <_dtoa_r+0x5a8>)
 8007bfa:	2703      	movs	r7, #3
 8007bfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c00:	f7f8 fe00 	bl	8000804 <__aeabi_ddiv>
 8007c04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c08:	f004 040f 	and.w	r4, r4, #15
 8007c0c:	4e8e      	ldr	r6, [pc, #568]	; (8007e48 <_dtoa_r+0x5a8>)
 8007c0e:	b954      	cbnz	r4, 8007c26 <_dtoa_r+0x386>
 8007c10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c18:	f7f8 fdf4 	bl	8000804 <__aeabi_ddiv>
 8007c1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c20:	e029      	b.n	8007c76 <_dtoa_r+0x3d6>
 8007c22:	2702      	movs	r7, #2
 8007c24:	e7f2      	b.n	8007c0c <_dtoa_r+0x36c>
 8007c26:	07e1      	lsls	r1, r4, #31
 8007c28:	d508      	bpl.n	8007c3c <_dtoa_r+0x39c>
 8007c2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c32:	f7f8 fcbd 	bl	80005b0 <__aeabi_dmul>
 8007c36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c3a:	3701      	adds	r7, #1
 8007c3c:	1064      	asrs	r4, r4, #1
 8007c3e:	3608      	adds	r6, #8
 8007c40:	e7e5      	b.n	8007c0e <_dtoa_r+0x36e>
 8007c42:	f000 80a5 	beq.w	8007d90 <_dtoa_r+0x4f0>
 8007c46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c4a:	f1c9 0400 	rsb	r4, r9, #0
 8007c4e:	4b7d      	ldr	r3, [pc, #500]	; (8007e44 <_dtoa_r+0x5a4>)
 8007c50:	f004 020f 	and.w	r2, r4, #15
 8007c54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5c:	f7f8 fca8 	bl	80005b0 <__aeabi_dmul>
 8007c60:	2702      	movs	r7, #2
 8007c62:	2300      	movs	r3, #0
 8007c64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c68:	4e77      	ldr	r6, [pc, #476]	; (8007e48 <_dtoa_r+0x5a8>)
 8007c6a:	1124      	asrs	r4, r4, #4
 8007c6c:	2c00      	cmp	r4, #0
 8007c6e:	f040 8084 	bne.w	8007d7a <_dtoa_r+0x4da>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1d2      	bne.n	8007c1c <_dtoa_r+0x37c>
 8007c76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 808b 	beq.w	8007d94 <_dtoa_r+0x4f4>
 8007c7e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007c82:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007c86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	4b6f      	ldr	r3, [pc, #444]	; (8007e4c <_dtoa_r+0x5ac>)
 8007c8e:	f7f8 ff01 	bl	8000a94 <__aeabi_dcmplt>
 8007c92:	2800      	cmp	r0, #0
 8007c94:	d07e      	beq.n	8007d94 <_dtoa_r+0x4f4>
 8007c96:	9b02      	ldr	r3, [sp, #8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d07b      	beq.n	8007d94 <_dtoa_r+0x4f4>
 8007c9c:	f1bb 0f00 	cmp.w	fp, #0
 8007ca0:	dd38      	ble.n	8007d14 <_dtoa_r+0x474>
 8007ca2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	4b69      	ldr	r3, [pc, #420]	; (8007e50 <_dtoa_r+0x5b0>)
 8007caa:	f7f8 fc81 	bl	80005b0 <__aeabi_dmul>
 8007cae:	465c      	mov	r4, fp
 8007cb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cb4:	f109 38ff 	add.w	r8, r9, #4294967295
 8007cb8:	3701      	adds	r7, #1
 8007cba:	4638      	mov	r0, r7
 8007cbc:	f7f8 fc0e 	bl	80004dc <__aeabi_i2d>
 8007cc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cc4:	f7f8 fc74 	bl	80005b0 <__aeabi_dmul>
 8007cc8:	2200      	movs	r2, #0
 8007cca:	4b62      	ldr	r3, [pc, #392]	; (8007e54 <_dtoa_r+0x5b4>)
 8007ccc:	f7f8 faba 	bl	8000244 <__adddf3>
 8007cd0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007cd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007cd8:	9611      	str	r6, [sp, #68]	; 0x44
 8007cda:	2c00      	cmp	r4, #0
 8007cdc:	d15d      	bne.n	8007d9a <_dtoa_r+0x4fa>
 8007cde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	4b5c      	ldr	r3, [pc, #368]	; (8007e58 <_dtoa_r+0x5b8>)
 8007ce6:	f7f8 faab 	bl	8000240 <__aeabi_dsub>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007cf2:	4633      	mov	r3, r6
 8007cf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007cf6:	f7f8 feeb 	bl	8000ad0 <__aeabi_dcmpgt>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	f040 829e 	bne.w	800823c <_dtoa_r+0x99c>
 8007d00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d06:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007d0a:	f7f8 fec3 	bl	8000a94 <__aeabi_dcmplt>
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	f040 8292 	bne.w	8008238 <_dtoa_r+0x998>
 8007d14:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007d18:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007d1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f2c0 8153 	blt.w	8007fca <_dtoa_r+0x72a>
 8007d24:	f1b9 0f0e 	cmp.w	r9, #14
 8007d28:	f300 814f 	bgt.w	8007fca <_dtoa_r+0x72a>
 8007d2c:	4b45      	ldr	r3, [pc, #276]	; (8007e44 <_dtoa_r+0x5a4>)
 8007d2e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007d32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d36:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007d3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f280 80db 	bge.w	8007ef8 <_dtoa_r+0x658>
 8007d42:	9b02      	ldr	r3, [sp, #8]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f300 80d7 	bgt.w	8007ef8 <_dtoa_r+0x658>
 8007d4a:	f040 8274 	bne.w	8008236 <_dtoa_r+0x996>
 8007d4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d52:	2200      	movs	r2, #0
 8007d54:	4b40      	ldr	r3, [pc, #256]	; (8007e58 <_dtoa_r+0x5b8>)
 8007d56:	f7f8 fc2b 	bl	80005b0 <__aeabi_dmul>
 8007d5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d5e:	f7f8 fead 	bl	8000abc <__aeabi_dcmpge>
 8007d62:	9c02      	ldr	r4, [sp, #8]
 8007d64:	4626      	mov	r6, r4
 8007d66:	2800      	cmp	r0, #0
 8007d68:	f040 824a 	bne.w	8008200 <_dtoa_r+0x960>
 8007d6c:	2331      	movs	r3, #49	; 0x31
 8007d6e:	9f08      	ldr	r7, [sp, #32]
 8007d70:	f109 0901 	add.w	r9, r9, #1
 8007d74:	f807 3b01 	strb.w	r3, [r7], #1
 8007d78:	e246      	b.n	8008208 <_dtoa_r+0x968>
 8007d7a:	07e2      	lsls	r2, r4, #31
 8007d7c:	d505      	bpl.n	8007d8a <_dtoa_r+0x4ea>
 8007d7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d82:	f7f8 fc15 	bl	80005b0 <__aeabi_dmul>
 8007d86:	2301      	movs	r3, #1
 8007d88:	3701      	adds	r7, #1
 8007d8a:	1064      	asrs	r4, r4, #1
 8007d8c:	3608      	adds	r6, #8
 8007d8e:	e76d      	b.n	8007c6c <_dtoa_r+0x3cc>
 8007d90:	2702      	movs	r7, #2
 8007d92:	e770      	b.n	8007c76 <_dtoa_r+0x3d6>
 8007d94:	46c8      	mov	r8, r9
 8007d96:	9c02      	ldr	r4, [sp, #8]
 8007d98:	e78f      	b.n	8007cba <_dtoa_r+0x41a>
 8007d9a:	9908      	ldr	r1, [sp, #32]
 8007d9c:	4b29      	ldr	r3, [pc, #164]	; (8007e44 <_dtoa_r+0x5a4>)
 8007d9e:	4421      	add	r1, r4
 8007da0:	9112      	str	r1, [sp, #72]	; 0x48
 8007da2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007da4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007da8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007dac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007db0:	2900      	cmp	r1, #0
 8007db2:	d055      	beq.n	8007e60 <_dtoa_r+0x5c0>
 8007db4:	2000      	movs	r0, #0
 8007db6:	4929      	ldr	r1, [pc, #164]	; (8007e5c <_dtoa_r+0x5bc>)
 8007db8:	f7f8 fd24 	bl	8000804 <__aeabi_ddiv>
 8007dbc:	463b      	mov	r3, r7
 8007dbe:	4632      	mov	r2, r6
 8007dc0:	f7f8 fa3e 	bl	8000240 <__aeabi_dsub>
 8007dc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007dc8:	9f08      	ldr	r7, [sp, #32]
 8007dca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dce:	f7f8 fe9f 	bl	8000b10 <__aeabi_d2iz>
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	f7f8 fb82 	bl	80004dc <__aeabi_i2d>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007de0:	f7f8 fa2e 	bl	8000240 <__aeabi_dsub>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	3430      	adds	r4, #48	; 0x30
 8007dea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007dee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007df2:	f807 4b01 	strb.w	r4, [r7], #1
 8007df6:	f7f8 fe4d 	bl	8000a94 <__aeabi_dcmplt>
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	d174      	bne.n	8007ee8 <_dtoa_r+0x648>
 8007dfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e02:	2000      	movs	r0, #0
 8007e04:	4911      	ldr	r1, [pc, #68]	; (8007e4c <_dtoa_r+0x5ac>)
 8007e06:	f7f8 fa1b 	bl	8000240 <__aeabi_dsub>
 8007e0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e0e:	f7f8 fe41 	bl	8000a94 <__aeabi_dcmplt>
 8007e12:	2800      	cmp	r0, #0
 8007e14:	f040 80b6 	bne.w	8007f84 <_dtoa_r+0x6e4>
 8007e18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e1a:	429f      	cmp	r7, r3
 8007e1c:	f43f af7a 	beq.w	8007d14 <_dtoa_r+0x474>
 8007e20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e24:	2200      	movs	r2, #0
 8007e26:	4b0a      	ldr	r3, [pc, #40]	; (8007e50 <_dtoa_r+0x5b0>)
 8007e28:	f7f8 fbc2 	bl	80005b0 <__aeabi_dmul>
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e36:	4b06      	ldr	r3, [pc, #24]	; (8007e50 <_dtoa_r+0x5b0>)
 8007e38:	f7f8 fbba 	bl	80005b0 <__aeabi_dmul>
 8007e3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e40:	e7c3      	b.n	8007dca <_dtoa_r+0x52a>
 8007e42:	bf00      	nop
 8007e44:	0800a5b8 	.word	0x0800a5b8
 8007e48:	0800a590 	.word	0x0800a590
 8007e4c:	3ff00000 	.word	0x3ff00000
 8007e50:	40240000 	.word	0x40240000
 8007e54:	401c0000 	.word	0x401c0000
 8007e58:	40140000 	.word	0x40140000
 8007e5c:	3fe00000 	.word	0x3fe00000
 8007e60:	4630      	mov	r0, r6
 8007e62:	4639      	mov	r1, r7
 8007e64:	f7f8 fba4 	bl	80005b0 <__aeabi_dmul>
 8007e68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e6e:	9c08      	ldr	r4, [sp, #32]
 8007e70:	9314      	str	r3, [sp, #80]	; 0x50
 8007e72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e76:	f7f8 fe4b 	bl	8000b10 <__aeabi_d2iz>
 8007e7a:	9015      	str	r0, [sp, #84]	; 0x54
 8007e7c:	f7f8 fb2e 	bl	80004dc <__aeabi_i2d>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e88:	f7f8 f9da 	bl	8000240 <__aeabi_dsub>
 8007e8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e8e:	4606      	mov	r6, r0
 8007e90:	3330      	adds	r3, #48	; 0x30
 8007e92:	f804 3b01 	strb.w	r3, [r4], #1
 8007e96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e98:	460f      	mov	r7, r1
 8007e9a:	429c      	cmp	r4, r3
 8007e9c:	f04f 0200 	mov.w	r2, #0
 8007ea0:	d124      	bne.n	8007eec <_dtoa_r+0x64c>
 8007ea2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ea6:	4bb3      	ldr	r3, [pc, #716]	; (8008174 <_dtoa_r+0x8d4>)
 8007ea8:	f7f8 f9cc 	bl	8000244 <__adddf3>
 8007eac:	4602      	mov	r2, r0
 8007eae:	460b      	mov	r3, r1
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	4639      	mov	r1, r7
 8007eb4:	f7f8 fe0c 	bl	8000ad0 <__aeabi_dcmpgt>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d162      	bne.n	8007f82 <_dtoa_r+0x6e2>
 8007ebc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	49ac      	ldr	r1, [pc, #688]	; (8008174 <_dtoa_r+0x8d4>)
 8007ec4:	f7f8 f9bc 	bl	8000240 <__aeabi_dsub>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	4630      	mov	r0, r6
 8007ece:	4639      	mov	r1, r7
 8007ed0:	f7f8 fde0 	bl	8000a94 <__aeabi_dcmplt>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	f43f af1d 	beq.w	8007d14 <_dtoa_r+0x474>
 8007eda:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007edc:	1e7b      	subs	r3, r7, #1
 8007ede:	9314      	str	r3, [sp, #80]	; 0x50
 8007ee0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007ee4:	2b30      	cmp	r3, #48	; 0x30
 8007ee6:	d0f8      	beq.n	8007eda <_dtoa_r+0x63a>
 8007ee8:	46c1      	mov	r9, r8
 8007eea:	e03a      	b.n	8007f62 <_dtoa_r+0x6c2>
 8007eec:	4ba2      	ldr	r3, [pc, #648]	; (8008178 <_dtoa_r+0x8d8>)
 8007eee:	f7f8 fb5f 	bl	80005b0 <__aeabi_dmul>
 8007ef2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ef6:	e7bc      	b.n	8007e72 <_dtoa_r+0x5d2>
 8007ef8:	9f08      	ldr	r7, [sp, #32]
 8007efa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007efe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f02:	f7f8 fc7f 	bl	8000804 <__aeabi_ddiv>
 8007f06:	f7f8 fe03 	bl	8000b10 <__aeabi_d2iz>
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	f7f8 fae6 	bl	80004dc <__aeabi_i2d>
 8007f10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f14:	f7f8 fb4c 	bl	80005b0 <__aeabi_dmul>
 8007f18:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	4602      	mov	r2, r0
 8007f20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f24:	f7f8 f98c 	bl	8000240 <__aeabi_dsub>
 8007f28:	f807 6b01 	strb.w	r6, [r7], #1
 8007f2c:	9e08      	ldr	r6, [sp, #32]
 8007f2e:	9b02      	ldr	r3, [sp, #8]
 8007f30:	1bbe      	subs	r6, r7, r6
 8007f32:	42b3      	cmp	r3, r6
 8007f34:	d13a      	bne.n	8007fac <_dtoa_r+0x70c>
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	f7f8 f983 	bl	8000244 <__adddf3>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f4a:	f7f8 fdc1 	bl	8000ad0 <__aeabi_dcmpgt>
 8007f4e:	bb58      	cbnz	r0, 8007fa8 <_dtoa_r+0x708>
 8007f50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f58:	f7f8 fd92 	bl	8000a80 <__aeabi_dcmpeq>
 8007f5c:	b108      	cbz	r0, 8007f62 <_dtoa_r+0x6c2>
 8007f5e:	07e1      	lsls	r1, r4, #31
 8007f60:	d422      	bmi.n	8007fa8 <_dtoa_r+0x708>
 8007f62:	4628      	mov	r0, r5
 8007f64:	4651      	mov	r1, sl
 8007f66:	f000 fbef 	bl	8008748 <_Bfree>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	703b      	strb	r3, [r7, #0]
 8007f6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007f70:	f109 0001 	add.w	r0, r9, #1
 8007f74:	6018      	str	r0, [r3, #0]
 8007f76:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f43f acdf 	beq.w	800793c <_dtoa_r+0x9c>
 8007f7e:	601f      	str	r7, [r3, #0]
 8007f80:	e4dc      	b.n	800793c <_dtoa_r+0x9c>
 8007f82:	4627      	mov	r7, r4
 8007f84:	463b      	mov	r3, r7
 8007f86:	461f      	mov	r7, r3
 8007f88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f8c:	2a39      	cmp	r2, #57	; 0x39
 8007f8e:	d107      	bne.n	8007fa0 <_dtoa_r+0x700>
 8007f90:	9a08      	ldr	r2, [sp, #32]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d1f7      	bne.n	8007f86 <_dtoa_r+0x6e6>
 8007f96:	2230      	movs	r2, #48	; 0x30
 8007f98:	9908      	ldr	r1, [sp, #32]
 8007f9a:	f108 0801 	add.w	r8, r8, #1
 8007f9e:	700a      	strb	r2, [r1, #0]
 8007fa0:	781a      	ldrb	r2, [r3, #0]
 8007fa2:	3201      	adds	r2, #1
 8007fa4:	701a      	strb	r2, [r3, #0]
 8007fa6:	e79f      	b.n	8007ee8 <_dtoa_r+0x648>
 8007fa8:	46c8      	mov	r8, r9
 8007faa:	e7eb      	b.n	8007f84 <_dtoa_r+0x6e4>
 8007fac:	2200      	movs	r2, #0
 8007fae:	4b72      	ldr	r3, [pc, #456]	; (8008178 <_dtoa_r+0x8d8>)
 8007fb0:	f7f8 fafe 	bl	80005b0 <__aeabi_dmul>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	f7f8 fd5e 	bl	8000a80 <__aeabi_dcmpeq>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d098      	beq.n	8007efa <_dtoa_r+0x65a>
 8007fc8:	e7cb      	b.n	8007f62 <_dtoa_r+0x6c2>
 8007fca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fcc:	2a00      	cmp	r2, #0
 8007fce:	f000 80cd 	beq.w	800816c <_dtoa_r+0x8cc>
 8007fd2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007fd4:	2a01      	cmp	r2, #1
 8007fd6:	f300 80af 	bgt.w	8008138 <_dtoa_r+0x898>
 8007fda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007fdc:	2a00      	cmp	r2, #0
 8007fde:	f000 80a7 	beq.w	8008130 <_dtoa_r+0x890>
 8007fe2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007fe6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007fe8:	9f06      	ldr	r7, [sp, #24]
 8007fea:	9a06      	ldr	r2, [sp, #24]
 8007fec:	2101      	movs	r1, #1
 8007fee:	441a      	add	r2, r3
 8007ff0:	9206      	str	r2, [sp, #24]
 8007ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	441a      	add	r2, r3
 8007ff8:	9209      	str	r2, [sp, #36]	; 0x24
 8007ffa:	f000 fc5f 	bl	80088bc <__i2b>
 8007ffe:	4606      	mov	r6, r0
 8008000:	2f00      	cmp	r7, #0
 8008002:	dd0c      	ble.n	800801e <_dtoa_r+0x77e>
 8008004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008006:	2b00      	cmp	r3, #0
 8008008:	dd09      	ble.n	800801e <_dtoa_r+0x77e>
 800800a:	42bb      	cmp	r3, r7
 800800c:	bfa8      	it	ge
 800800e:	463b      	movge	r3, r7
 8008010:	9a06      	ldr	r2, [sp, #24]
 8008012:	1aff      	subs	r7, r7, r3
 8008014:	1ad2      	subs	r2, r2, r3
 8008016:	9206      	str	r2, [sp, #24]
 8008018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	9309      	str	r3, [sp, #36]	; 0x24
 800801e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008020:	b1f3      	cbz	r3, 8008060 <_dtoa_r+0x7c0>
 8008022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008024:	2b00      	cmp	r3, #0
 8008026:	f000 80a9 	beq.w	800817c <_dtoa_r+0x8dc>
 800802a:	2c00      	cmp	r4, #0
 800802c:	dd10      	ble.n	8008050 <_dtoa_r+0x7b0>
 800802e:	4631      	mov	r1, r6
 8008030:	4622      	mov	r2, r4
 8008032:	4628      	mov	r0, r5
 8008034:	f000 fcfc 	bl	8008a30 <__pow5mult>
 8008038:	4652      	mov	r2, sl
 800803a:	4601      	mov	r1, r0
 800803c:	4606      	mov	r6, r0
 800803e:	4628      	mov	r0, r5
 8008040:	f000 fc52 	bl	80088e8 <__multiply>
 8008044:	4680      	mov	r8, r0
 8008046:	4651      	mov	r1, sl
 8008048:	4628      	mov	r0, r5
 800804a:	f000 fb7d 	bl	8008748 <_Bfree>
 800804e:	46c2      	mov	sl, r8
 8008050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008052:	1b1a      	subs	r2, r3, r4
 8008054:	d004      	beq.n	8008060 <_dtoa_r+0x7c0>
 8008056:	4651      	mov	r1, sl
 8008058:	4628      	mov	r0, r5
 800805a:	f000 fce9 	bl	8008a30 <__pow5mult>
 800805e:	4682      	mov	sl, r0
 8008060:	2101      	movs	r1, #1
 8008062:	4628      	mov	r0, r5
 8008064:	f000 fc2a 	bl	80088bc <__i2b>
 8008068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800806a:	4604      	mov	r4, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	f340 8087 	ble.w	8008180 <_dtoa_r+0x8e0>
 8008072:	461a      	mov	r2, r3
 8008074:	4601      	mov	r1, r0
 8008076:	4628      	mov	r0, r5
 8008078:	f000 fcda 	bl	8008a30 <__pow5mult>
 800807c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800807e:	4604      	mov	r4, r0
 8008080:	2b01      	cmp	r3, #1
 8008082:	f340 8080 	ble.w	8008186 <_dtoa_r+0x8e6>
 8008086:	f04f 0800 	mov.w	r8, #0
 800808a:	6923      	ldr	r3, [r4, #16]
 800808c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008090:	6918      	ldr	r0, [r3, #16]
 8008092:	f000 fbc5 	bl	8008820 <__hi0bits>
 8008096:	f1c0 0020 	rsb	r0, r0, #32
 800809a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800809c:	4418      	add	r0, r3
 800809e:	f010 001f 	ands.w	r0, r0, #31
 80080a2:	f000 8092 	beq.w	80081ca <_dtoa_r+0x92a>
 80080a6:	f1c0 0320 	rsb	r3, r0, #32
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	f340 808a 	ble.w	80081c4 <_dtoa_r+0x924>
 80080b0:	f1c0 001c 	rsb	r0, r0, #28
 80080b4:	9b06      	ldr	r3, [sp, #24]
 80080b6:	4407      	add	r7, r0
 80080b8:	4403      	add	r3, r0
 80080ba:	9306      	str	r3, [sp, #24]
 80080bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080be:	4403      	add	r3, r0
 80080c0:	9309      	str	r3, [sp, #36]	; 0x24
 80080c2:	9b06      	ldr	r3, [sp, #24]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	dd05      	ble.n	80080d4 <_dtoa_r+0x834>
 80080c8:	4651      	mov	r1, sl
 80080ca:	461a      	mov	r2, r3
 80080cc:	4628      	mov	r0, r5
 80080ce:	f000 fd09 	bl	8008ae4 <__lshift>
 80080d2:	4682      	mov	sl, r0
 80080d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	dd05      	ble.n	80080e6 <_dtoa_r+0x846>
 80080da:	4621      	mov	r1, r4
 80080dc:	461a      	mov	r2, r3
 80080de:	4628      	mov	r0, r5
 80080e0:	f000 fd00 	bl	8008ae4 <__lshift>
 80080e4:	4604      	mov	r4, r0
 80080e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d070      	beq.n	80081ce <_dtoa_r+0x92e>
 80080ec:	4621      	mov	r1, r4
 80080ee:	4650      	mov	r0, sl
 80080f0:	f000 fd64 	bl	8008bbc <__mcmp>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	da6a      	bge.n	80081ce <_dtoa_r+0x92e>
 80080f8:	2300      	movs	r3, #0
 80080fa:	4651      	mov	r1, sl
 80080fc:	220a      	movs	r2, #10
 80080fe:	4628      	mov	r0, r5
 8008100:	f000 fb44 	bl	800878c <__multadd>
 8008104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008106:	4682      	mov	sl, r0
 8008108:	f109 39ff 	add.w	r9, r9, #4294967295
 800810c:	2b00      	cmp	r3, #0
 800810e:	f000 8193 	beq.w	8008438 <_dtoa_r+0xb98>
 8008112:	4631      	mov	r1, r6
 8008114:	2300      	movs	r3, #0
 8008116:	220a      	movs	r2, #10
 8008118:	4628      	mov	r0, r5
 800811a:	f000 fb37 	bl	800878c <__multadd>
 800811e:	f1bb 0f00 	cmp.w	fp, #0
 8008122:	4606      	mov	r6, r0
 8008124:	f300 8093 	bgt.w	800824e <_dtoa_r+0x9ae>
 8008128:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800812a:	2b02      	cmp	r3, #2
 800812c:	dc57      	bgt.n	80081de <_dtoa_r+0x93e>
 800812e:	e08e      	b.n	800824e <_dtoa_r+0x9ae>
 8008130:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008132:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008136:	e756      	b.n	8007fe6 <_dtoa_r+0x746>
 8008138:	9b02      	ldr	r3, [sp, #8]
 800813a:	1e5c      	subs	r4, r3, #1
 800813c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800813e:	42a3      	cmp	r3, r4
 8008140:	bfb7      	itett	lt
 8008142:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008144:	1b1c      	subge	r4, r3, r4
 8008146:	1ae2      	sublt	r2, r4, r3
 8008148:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800814a:	bfbe      	ittt	lt
 800814c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800814e:	189b      	addlt	r3, r3, r2
 8008150:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008152:	9b02      	ldr	r3, [sp, #8]
 8008154:	bfb8      	it	lt
 8008156:	2400      	movlt	r4, #0
 8008158:	2b00      	cmp	r3, #0
 800815a:	bfbb      	ittet	lt
 800815c:	9b06      	ldrlt	r3, [sp, #24]
 800815e:	9a02      	ldrlt	r2, [sp, #8]
 8008160:	9f06      	ldrge	r7, [sp, #24]
 8008162:	1a9f      	sublt	r7, r3, r2
 8008164:	bfac      	ite	ge
 8008166:	9b02      	ldrge	r3, [sp, #8]
 8008168:	2300      	movlt	r3, #0
 800816a:	e73e      	b.n	8007fea <_dtoa_r+0x74a>
 800816c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800816e:	9f06      	ldr	r7, [sp, #24]
 8008170:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008172:	e745      	b.n	8008000 <_dtoa_r+0x760>
 8008174:	3fe00000 	.word	0x3fe00000
 8008178:	40240000 	.word	0x40240000
 800817c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800817e:	e76a      	b.n	8008056 <_dtoa_r+0x7b6>
 8008180:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008182:	2b01      	cmp	r3, #1
 8008184:	dc19      	bgt.n	80081ba <_dtoa_r+0x91a>
 8008186:	9b04      	ldr	r3, [sp, #16]
 8008188:	b9bb      	cbnz	r3, 80081ba <_dtoa_r+0x91a>
 800818a:	9b05      	ldr	r3, [sp, #20]
 800818c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008190:	b99b      	cbnz	r3, 80081ba <_dtoa_r+0x91a>
 8008192:	9b05      	ldr	r3, [sp, #20]
 8008194:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008198:	0d1b      	lsrs	r3, r3, #20
 800819a:	051b      	lsls	r3, r3, #20
 800819c:	b183      	cbz	r3, 80081c0 <_dtoa_r+0x920>
 800819e:	f04f 0801 	mov.w	r8, #1
 80081a2:	9b06      	ldr	r3, [sp, #24]
 80081a4:	3301      	adds	r3, #1
 80081a6:	9306      	str	r3, [sp, #24]
 80081a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081aa:	3301      	adds	r3, #1
 80081ac:	9309      	str	r3, [sp, #36]	; 0x24
 80081ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f47f af6a 	bne.w	800808a <_dtoa_r+0x7ea>
 80081b6:	2001      	movs	r0, #1
 80081b8:	e76f      	b.n	800809a <_dtoa_r+0x7fa>
 80081ba:	f04f 0800 	mov.w	r8, #0
 80081be:	e7f6      	b.n	80081ae <_dtoa_r+0x90e>
 80081c0:	4698      	mov	r8, r3
 80081c2:	e7f4      	b.n	80081ae <_dtoa_r+0x90e>
 80081c4:	f43f af7d 	beq.w	80080c2 <_dtoa_r+0x822>
 80081c8:	4618      	mov	r0, r3
 80081ca:	301c      	adds	r0, #28
 80081cc:	e772      	b.n	80080b4 <_dtoa_r+0x814>
 80081ce:	9b02      	ldr	r3, [sp, #8]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	dc36      	bgt.n	8008242 <_dtoa_r+0x9a2>
 80081d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	dd33      	ble.n	8008242 <_dtoa_r+0x9a2>
 80081da:	f8dd b008 	ldr.w	fp, [sp, #8]
 80081de:	f1bb 0f00 	cmp.w	fp, #0
 80081e2:	d10d      	bne.n	8008200 <_dtoa_r+0x960>
 80081e4:	4621      	mov	r1, r4
 80081e6:	465b      	mov	r3, fp
 80081e8:	2205      	movs	r2, #5
 80081ea:	4628      	mov	r0, r5
 80081ec:	f000 face 	bl	800878c <__multadd>
 80081f0:	4601      	mov	r1, r0
 80081f2:	4604      	mov	r4, r0
 80081f4:	4650      	mov	r0, sl
 80081f6:	f000 fce1 	bl	8008bbc <__mcmp>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	f73f adb6 	bgt.w	8007d6c <_dtoa_r+0x4cc>
 8008200:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008202:	9f08      	ldr	r7, [sp, #32]
 8008204:	ea6f 0903 	mvn.w	r9, r3
 8008208:	f04f 0800 	mov.w	r8, #0
 800820c:	4621      	mov	r1, r4
 800820e:	4628      	mov	r0, r5
 8008210:	f000 fa9a 	bl	8008748 <_Bfree>
 8008214:	2e00      	cmp	r6, #0
 8008216:	f43f aea4 	beq.w	8007f62 <_dtoa_r+0x6c2>
 800821a:	f1b8 0f00 	cmp.w	r8, #0
 800821e:	d005      	beq.n	800822c <_dtoa_r+0x98c>
 8008220:	45b0      	cmp	r8, r6
 8008222:	d003      	beq.n	800822c <_dtoa_r+0x98c>
 8008224:	4641      	mov	r1, r8
 8008226:	4628      	mov	r0, r5
 8008228:	f000 fa8e 	bl	8008748 <_Bfree>
 800822c:	4631      	mov	r1, r6
 800822e:	4628      	mov	r0, r5
 8008230:	f000 fa8a 	bl	8008748 <_Bfree>
 8008234:	e695      	b.n	8007f62 <_dtoa_r+0x6c2>
 8008236:	2400      	movs	r4, #0
 8008238:	4626      	mov	r6, r4
 800823a:	e7e1      	b.n	8008200 <_dtoa_r+0x960>
 800823c:	46c1      	mov	r9, r8
 800823e:	4626      	mov	r6, r4
 8008240:	e594      	b.n	8007d6c <_dtoa_r+0x4cc>
 8008242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008244:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 80fc 	beq.w	8008446 <_dtoa_r+0xba6>
 800824e:	2f00      	cmp	r7, #0
 8008250:	dd05      	ble.n	800825e <_dtoa_r+0x9be>
 8008252:	4631      	mov	r1, r6
 8008254:	463a      	mov	r2, r7
 8008256:	4628      	mov	r0, r5
 8008258:	f000 fc44 	bl	8008ae4 <__lshift>
 800825c:	4606      	mov	r6, r0
 800825e:	f1b8 0f00 	cmp.w	r8, #0
 8008262:	d05c      	beq.n	800831e <_dtoa_r+0xa7e>
 8008264:	4628      	mov	r0, r5
 8008266:	6871      	ldr	r1, [r6, #4]
 8008268:	f000 fa2e 	bl	80086c8 <_Balloc>
 800826c:	4607      	mov	r7, r0
 800826e:	b928      	cbnz	r0, 800827c <_dtoa_r+0x9dc>
 8008270:	4602      	mov	r2, r0
 8008272:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008276:	4b7e      	ldr	r3, [pc, #504]	; (8008470 <_dtoa_r+0xbd0>)
 8008278:	f7ff bb26 	b.w	80078c8 <_dtoa_r+0x28>
 800827c:	6932      	ldr	r2, [r6, #16]
 800827e:	f106 010c 	add.w	r1, r6, #12
 8008282:	3202      	adds	r2, #2
 8008284:	0092      	lsls	r2, r2, #2
 8008286:	300c      	adds	r0, #12
 8008288:	f000 fa03 	bl	8008692 <memcpy>
 800828c:	2201      	movs	r2, #1
 800828e:	4639      	mov	r1, r7
 8008290:	4628      	mov	r0, r5
 8008292:	f000 fc27 	bl	8008ae4 <__lshift>
 8008296:	46b0      	mov	r8, r6
 8008298:	4606      	mov	r6, r0
 800829a:	9b08      	ldr	r3, [sp, #32]
 800829c:	3301      	adds	r3, #1
 800829e:	9302      	str	r3, [sp, #8]
 80082a0:	9b08      	ldr	r3, [sp, #32]
 80082a2:	445b      	add	r3, fp
 80082a4:	930a      	str	r3, [sp, #40]	; 0x28
 80082a6:	9b04      	ldr	r3, [sp, #16]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	9309      	str	r3, [sp, #36]	; 0x24
 80082ae:	9b02      	ldr	r3, [sp, #8]
 80082b0:	4621      	mov	r1, r4
 80082b2:	4650      	mov	r0, sl
 80082b4:	f103 3bff 	add.w	fp, r3, #4294967295
 80082b8:	f7ff fa63 	bl	8007782 <quorem>
 80082bc:	4603      	mov	r3, r0
 80082be:	4641      	mov	r1, r8
 80082c0:	3330      	adds	r3, #48	; 0x30
 80082c2:	9004      	str	r0, [sp, #16]
 80082c4:	4650      	mov	r0, sl
 80082c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80082c8:	f000 fc78 	bl	8008bbc <__mcmp>
 80082cc:	4632      	mov	r2, r6
 80082ce:	9006      	str	r0, [sp, #24]
 80082d0:	4621      	mov	r1, r4
 80082d2:	4628      	mov	r0, r5
 80082d4:	f000 fc8e 	bl	8008bf4 <__mdiff>
 80082d8:	68c2      	ldr	r2, [r0, #12]
 80082da:	4607      	mov	r7, r0
 80082dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082de:	bb02      	cbnz	r2, 8008322 <_dtoa_r+0xa82>
 80082e0:	4601      	mov	r1, r0
 80082e2:	4650      	mov	r0, sl
 80082e4:	f000 fc6a 	bl	8008bbc <__mcmp>
 80082e8:	4602      	mov	r2, r0
 80082ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082ec:	4639      	mov	r1, r7
 80082ee:	4628      	mov	r0, r5
 80082f0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80082f4:	f000 fa28 	bl	8008748 <_Bfree>
 80082f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082fc:	9f02      	ldr	r7, [sp, #8]
 80082fe:	ea43 0102 	orr.w	r1, r3, r2
 8008302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008304:	430b      	orrs	r3, r1
 8008306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008308:	d10d      	bne.n	8008326 <_dtoa_r+0xa86>
 800830a:	2b39      	cmp	r3, #57	; 0x39
 800830c:	d027      	beq.n	800835e <_dtoa_r+0xabe>
 800830e:	9a06      	ldr	r2, [sp, #24]
 8008310:	2a00      	cmp	r2, #0
 8008312:	dd01      	ble.n	8008318 <_dtoa_r+0xa78>
 8008314:	9b04      	ldr	r3, [sp, #16]
 8008316:	3331      	adds	r3, #49	; 0x31
 8008318:	f88b 3000 	strb.w	r3, [fp]
 800831c:	e776      	b.n	800820c <_dtoa_r+0x96c>
 800831e:	4630      	mov	r0, r6
 8008320:	e7b9      	b.n	8008296 <_dtoa_r+0x9f6>
 8008322:	2201      	movs	r2, #1
 8008324:	e7e2      	b.n	80082ec <_dtoa_r+0xa4c>
 8008326:	9906      	ldr	r1, [sp, #24]
 8008328:	2900      	cmp	r1, #0
 800832a:	db04      	blt.n	8008336 <_dtoa_r+0xa96>
 800832c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800832e:	4301      	orrs	r1, r0
 8008330:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008332:	4301      	orrs	r1, r0
 8008334:	d120      	bne.n	8008378 <_dtoa_r+0xad8>
 8008336:	2a00      	cmp	r2, #0
 8008338:	ddee      	ble.n	8008318 <_dtoa_r+0xa78>
 800833a:	4651      	mov	r1, sl
 800833c:	2201      	movs	r2, #1
 800833e:	4628      	mov	r0, r5
 8008340:	9302      	str	r3, [sp, #8]
 8008342:	f000 fbcf 	bl	8008ae4 <__lshift>
 8008346:	4621      	mov	r1, r4
 8008348:	4682      	mov	sl, r0
 800834a:	f000 fc37 	bl	8008bbc <__mcmp>
 800834e:	2800      	cmp	r0, #0
 8008350:	9b02      	ldr	r3, [sp, #8]
 8008352:	dc02      	bgt.n	800835a <_dtoa_r+0xaba>
 8008354:	d1e0      	bne.n	8008318 <_dtoa_r+0xa78>
 8008356:	07da      	lsls	r2, r3, #31
 8008358:	d5de      	bpl.n	8008318 <_dtoa_r+0xa78>
 800835a:	2b39      	cmp	r3, #57	; 0x39
 800835c:	d1da      	bne.n	8008314 <_dtoa_r+0xa74>
 800835e:	2339      	movs	r3, #57	; 0x39
 8008360:	f88b 3000 	strb.w	r3, [fp]
 8008364:	463b      	mov	r3, r7
 8008366:	461f      	mov	r7, r3
 8008368:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800836c:	3b01      	subs	r3, #1
 800836e:	2a39      	cmp	r2, #57	; 0x39
 8008370:	d050      	beq.n	8008414 <_dtoa_r+0xb74>
 8008372:	3201      	adds	r2, #1
 8008374:	701a      	strb	r2, [r3, #0]
 8008376:	e749      	b.n	800820c <_dtoa_r+0x96c>
 8008378:	2a00      	cmp	r2, #0
 800837a:	dd03      	ble.n	8008384 <_dtoa_r+0xae4>
 800837c:	2b39      	cmp	r3, #57	; 0x39
 800837e:	d0ee      	beq.n	800835e <_dtoa_r+0xabe>
 8008380:	3301      	adds	r3, #1
 8008382:	e7c9      	b.n	8008318 <_dtoa_r+0xa78>
 8008384:	9a02      	ldr	r2, [sp, #8]
 8008386:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008388:	f802 3c01 	strb.w	r3, [r2, #-1]
 800838c:	428a      	cmp	r2, r1
 800838e:	d02a      	beq.n	80083e6 <_dtoa_r+0xb46>
 8008390:	4651      	mov	r1, sl
 8008392:	2300      	movs	r3, #0
 8008394:	220a      	movs	r2, #10
 8008396:	4628      	mov	r0, r5
 8008398:	f000 f9f8 	bl	800878c <__multadd>
 800839c:	45b0      	cmp	r8, r6
 800839e:	4682      	mov	sl, r0
 80083a0:	f04f 0300 	mov.w	r3, #0
 80083a4:	f04f 020a 	mov.w	r2, #10
 80083a8:	4641      	mov	r1, r8
 80083aa:	4628      	mov	r0, r5
 80083ac:	d107      	bne.n	80083be <_dtoa_r+0xb1e>
 80083ae:	f000 f9ed 	bl	800878c <__multadd>
 80083b2:	4680      	mov	r8, r0
 80083b4:	4606      	mov	r6, r0
 80083b6:	9b02      	ldr	r3, [sp, #8]
 80083b8:	3301      	adds	r3, #1
 80083ba:	9302      	str	r3, [sp, #8]
 80083bc:	e777      	b.n	80082ae <_dtoa_r+0xa0e>
 80083be:	f000 f9e5 	bl	800878c <__multadd>
 80083c2:	4631      	mov	r1, r6
 80083c4:	4680      	mov	r8, r0
 80083c6:	2300      	movs	r3, #0
 80083c8:	220a      	movs	r2, #10
 80083ca:	4628      	mov	r0, r5
 80083cc:	f000 f9de 	bl	800878c <__multadd>
 80083d0:	4606      	mov	r6, r0
 80083d2:	e7f0      	b.n	80083b6 <_dtoa_r+0xb16>
 80083d4:	f1bb 0f00 	cmp.w	fp, #0
 80083d8:	bfcc      	ite	gt
 80083da:	465f      	movgt	r7, fp
 80083dc:	2701      	movle	r7, #1
 80083de:	f04f 0800 	mov.w	r8, #0
 80083e2:	9a08      	ldr	r2, [sp, #32]
 80083e4:	4417      	add	r7, r2
 80083e6:	4651      	mov	r1, sl
 80083e8:	2201      	movs	r2, #1
 80083ea:	4628      	mov	r0, r5
 80083ec:	9302      	str	r3, [sp, #8]
 80083ee:	f000 fb79 	bl	8008ae4 <__lshift>
 80083f2:	4621      	mov	r1, r4
 80083f4:	4682      	mov	sl, r0
 80083f6:	f000 fbe1 	bl	8008bbc <__mcmp>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	dcb2      	bgt.n	8008364 <_dtoa_r+0xac4>
 80083fe:	d102      	bne.n	8008406 <_dtoa_r+0xb66>
 8008400:	9b02      	ldr	r3, [sp, #8]
 8008402:	07db      	lsls	r3, r3, #31
 8008404:	d4ae      	bmi.n	8008364 <_dtoa_r+0xac4>
 8008406:	463b      	mov	r3, r7
 8008408:	461f      	mov	r7, r3
 800840a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800840e:	2a30      	cmp	r2, #48	; 0x30
 8008410:	d0fa      	beq.n	8008408 <_dtoa_r+0xb68>
 8008412:	e6fb      	b.n	800820c <_dtoa_r+0x96c>
 8008414:	9a08      	ldr	r2, [sp, #32]
 8008416:	429a      	cmp	r2, r3
 8008418:	d1a5      	bne.n	8008366 <_dtoa_r+0xac6>
 800841a:	2331      	movs	r3, #49	; 0x31
 800841c:	f109 0901 	add.w	r9, r9, #1
 8008420:	7013      	strb	r3, [r2, #0]
 8008422:	e6f3      	b.n	800820c <_dtoa_r+0x96c>
 8008424:	4b13      	ldr	r3, [pc, #76]	; (8008474 <_dtoa_r+0xbd4>)
 8008426:	f7ff baa7 	b.w	8007978 <_dtoa_r+0xd8>
 800842a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800842c:	2b00      	cmp	r3, #0
 800842e:	f47f aa80 	bne.w	8007932 <_dtoa_r+0x92>
 8008432:	4b11      	ldr	r3, [pc, #68]	; (8008478 <_dtoa_r+0xbd8>)
 8008434:	f7ff baa0 	b.w	8007978 <_dtoa_r+0xd8>
 8008438:	f1bb 0f00 	cmp.w	fp, #0
 800843c:	dc03      	bgt.n	8008446 <_dtoa_r+0xba6>
 800843e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008440:	2b02      	cmp	r3, #2
 8008442:	f73f aecc 	bgt.w	80081de <_dtoa_r+0x93e>
 8008446:	9f08      	ldr	r7, [sp, #32]
 8008448:	4621      	mov	r1, r4
 800844a:	4650      	mov	r0, sl
 800844c:	f7ff f999 	bl	8007782 <quorem>
 8008450:	9a08      	ldr	r2, [sp, #32]
 8008452:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008456:	f807 3b01 	strb.w	r3, [r7], #1
 800845a:	1aba      	subs	r2, r7, r2
 800845c:	4593      	cmp	fp, r2
 800845e:	ddb9      	ble.n	80083d4 <_dtoa_r+0xb34>
 8008460:	4651      	mov	r1, sl
 8008462:	2300      	movs	r3, #0
 8008464:	220a      	movs	r2, #10
 8008466:	4628      	mov	r0, r5
 8008468:	f000 f990 	bl	800878c <__multadd>
 800846c:	4682      	mov	sl, r0
 800846e:	e7eb      	b.n	8008448 <_dtoa_r+0xba8>
 8008470:	0800a4bb 	.word	0x0800a4bb
 8008474:	0800a414 	.word	0x0800a414
 8008478:	0800a438 	.word	0x0800a438

0800847c <std>:
 800847c:	2300      	movs	r3, #0
 800847e:	b510      	push	{r4, lr}
 8008480:	4604      	mov	r4, r0
 8008482:	e9c0 3300 	strd	r3, r3, [r0]
 8008486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800848a:	6083      	str	r3, [r0, #8]
 800848c:	8181      	strh	r1, [r0, #12]
 800848e:	6643      	str	r3, [r0, #100]	; 0x64
 8008490:	81c2      	strh	r2, [r0, #14]
 8008492:	6183      	str	r3, [r0, #24]
 8008494:	4619      	mov	r1, r3
 8008496:	2208      	movs	r2, #8
 8008498:	305c      	adds	r0, #92	; 0x5c
 800849a:	f7fe fc0d 	bl	8006cb8 <memset>
 800849e:	4b05      	ldr	r3, [pc, #20]	; (80084b4 <std+0x38>)
 80084a0:	6224      	str	r4, [r4, #32]
 80084a2:	6263      	str	r3, [r4, #36]	; 0x24
 80084a4:	4b04      	ldr	r3, [pc, #16]	; (80084b8 <std+0x3c>)
 80084a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80084a8:	4b04      	ldr	r3, [pc, #16]	; (80084bc <std+0x40>)
 80084aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084ac:	4b04      	ldr	r3, [pc, #16]	; (80084c0 <std+0x44>)
 80084ae:	6323      	str	r3, [r4, #48]	; 0x30
 80084b0:	bd10      	pop	{r4, pc}
 80084b2:	bf00      	nop
 80084b4:	08009351 	.word	0x08009351
 80084b8:	08009373 	.word	0x08009373
 80084bc:	080093ab 	.word	0x080093ab
 80084c0:	080093cf 	.word	0x080093cf

080084c4 <_cleanup_r>:
 80084c4:	4901      	ldr	r1, [pc, #4]	; (80084cc <_cleanup_r+0x8>)
 80084c6:	f000 b8af 	b.w	8008628 <_fwalk_reent>
 80084ca:	bf00      	nop
 80084cc:	080096e5 	.word	0x080096e5

080084d0 <__sfmoreglue>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	2568      	movs	r5, #104	; 0x68
 80084d4:	1e4a      	subs	r2, r1, #1
 80084d6:	4355      	muls	r5, r2
 80084d8:	460e      	mov	r6, r1
 80084da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084de:	f7fe fc3f 	bl	8006d60 <_malloc_r>
 80084e2:	4604      	mov	r4, r0
 80084e4:	b140      	cbz	r0, 80084f8 <__sfmoreglue+0x28>
 80084e6:	2100      	movs	r1, #0
 80084e8:	e9c0 1600 	strd	r1, r6, [r0]
 80084ec:	300c      	adds	r0, #12
 80084ee:	60a0      	str	r0, [r4, #8]
 80084f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084f4:	f7fe fbe0 	bl	8006cb8 <memset>
 80084f8:	4620      	mov	r0, r4
 80084fa:	bd70      	pop	{r4, r5, r6, pc}

080084fc <__sfp_lock_acquire>:
 80084fc:	4801      	ldr	r0, [pc, #4]	; (8008504 <__sfp_lock_acquire+0x8>)
 80084fe:	f000 b8b8 	b.w	8008672 <__retarget_lock_acquire_recursive>
 8008502:	bf00      	nop
 8008504:	20004634 	.word	0x20004634

08008508 <__sfp_lock_release>:
 8008508:	4801      	ldr	r0, [pc, #4]	; (8008510 <__sfp_lock_release+0x8>)
 800850a:	f000 b8b3 	b.w	8008674 <__retarget_lock_release_recursive>
 800850e:	bf00      	nop
 8008510:	20004634 	.word	0x20004634

08008514 <__sinit_lock_acquire>:
 8008514:	4801      	ldr	r0, [pc, #4]	; (800851c <__sinit_lock_acquire+0x8>)
 8008516:	f000 b8ac 	b.w	8008672 <__retarget_lock_acquire_recursive>
 800851a:	bf00      	nop
 800851c:	2000462f 	.word	0x2000462f

08008520 <__sinit_lock_release>:
 8008520:	4801      	ldr	r0, [pc, #4]	; (8008528 <__sinit_lock_release+0x8>)
 8008522:	f000 b8a7 	b.w	8008674 <__retarget_lock_release_recursive>
 8008526:	bf00      	nop
 8008528:	2000462f 	.word	0x2000462f

0800852c <__sinit>:
 800852c:	b510      	push	{r4, lr}
 800852e:	4604      	mov	r4, r0
 8008530:	f7ff fff0 	bl	8008514 <__sinit_lock_acquire>
 8008534:	69a3      	ldr	r3, [r4, #24]
 8008536:	b11b      	cbz	r3, 8008540 <__sinit+0x14>
 8008538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800853c:	f7ff bff0 	b.w	8008520 <__sinit_lock_release>
 8008540:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008544:	6523      	str	r3, [r4, #80]	; 0x50
 8008546:	4b13      	ldr	r3, [pc, #76]	; (8008594 <__sinit+0x68>)
 8008548:	4a13      	ldr	r2, [pc, #76]	; (8008598 <__sinit+0x6c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	62a2      	str	r2, [r4, #40]	; 0x28
 800854e:	42a3      	cmp	r3, r4
 8008550:	bf08      	it	eq
 8008552:	2301      	moveq	r3, #1
 8008554:	4620      	mov	r0, r4
 8008556:	bf08      	it	eq
 8008558:	61a3      	streq	r3, [r4, #24]
 800855a:	f000 f81f 	bl	800859c <__sfp>
 800855e:	6060      	str	r0, [r4, #4]
 8008560:	4620      	mov	r0, r4
 8008562:	f000 f81b 	bl	800859c <__sfp>
 8008566:	60a0      	str	r0, [r4, #8]
 8008568:	4620      	mov	r0, r4
 800856a:	f000 f817 	bl	800859c <__sfp>
 800856e:	2200      	movs	r2, #0
 8008570:	2104      	movs	r1, #4
 8008572:	60e0      	str	r0, [r4, #12]
 8008574:	6860      	ldr	r0, [r4, #4]
 8008576:	f7ff ff81 	bl	800847c <std>
 800857a:	2201      	movs	r2, #1
 800857c:	2109      	movs	r1, #9
 800857e:	68a0      	ldr	r0, [r4, #8]
 8008580:	f7ff ff7c 	bl	800847c <std>
 8008584:	2202      	movs	r2, #2
 8008586:	2112      	movs	r1, #18
 8008588:	68e0      	ldr	r0, [r4, #12]
 800858a:	f7ff ff77 	bl	800847c <std>
 800858e:	2301      	movs	r3, #1
 8008590:	61a3      	str	r3, [r4, #24]
 8008592:	e7d1      	b.n	8008538 <__sinit+0xc>
 8008594:	0800a400 	.word	0x0800a400
 8008598:	080084c5 	.word	0x080084c5

0800859c <__sfp>:
 800859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859e:	4607      	mov	r7, r0
 80085a0:	f7ff ffac 	bl	80084fc <__sfp_lock_acquire>
 80085a4:	4b1e      	ldr	r3, [pc, #120]	; (8008620 <__sfp+0x84>)
 80085a6:	681e      	ldr	r6, [r3, #0]
 80085a8:	69b3      	ldr	r3, [r6, #24]
 80085aa:	b913      	cbnz	r3, 80085b2 <__sfp+0x16>
 80085ac:	4630      	mov	r0, r6
 80085ae:	f7ff ffbd 	bl	800852c <__sinit>
 80085b2:	3648      	adds	r6, #72	; 0x48
 80085b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	d503      	bpl.n	80085c4 <__sfp+0x28>
 80085bc:	6833      	ldr	r3, [r6, #0]
 80085be:	b30b      	cbz	r3, 8008604 <__sfp+0x68>
 80085c0:	6836      	ldr	r6, [r6, #0]
 80085c2:	e7f7      	b.n	80085b4 <__sfp+0x18>
 80085c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085c8:	b9d5      	cbnz	r5, 8008600 <__sfp+0x64>
 80085ca:	4b16      	ldr	r3, [pc, #88]	; (8008624 <__sfp+0x88>)
 80085cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085d0:	60e3      	str	r3, [r4, #12]
 80085d2:	6665      	str	r5, [r4, #100]	; 0x64
 80085d4:	f000 f84c 	bl	8008670 <__retarget_lock_init_recursive>
 80085d8:	f7ff ff96 	bl	8008508 <__sfp_lock_release>
 80085dc:	2208      	movs	r2, #8
 80085de:	4629      	mov	r1, r5
 80085e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80085e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80085e8:	6025      	str	r5, [r4, #0]
 80085ea:	61a5      	str	r5, [r4, #24]
 80085ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085f0:	f7fe fb62 	bl	8006cb8 <memset>
 80085f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085fc:	4620      	mov	r0, r4
 80085fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008600:	3468      	adds	r4, #104	; 0x68
 8008602:	e7d9      	b.n	80085b8 <__sfp+0x1c>
 8008604:	2104      	movs	r1, #4
 8008606:	4638      	mov	r0, r7
 8008608:	f7ff ff62 	bl	80084d0 <__sfmoreglue>
 800860c:	4604      	mov	r4, r0
 800860e:	6030      	str	r0, [r6, #0]
 8008610:	2800      	cmp	r0, #0
 8008612:	d1d5      	bne.n	80085c0 <__sfp+0x24>
 8008614:	f7ff ff78 	bl	8008508 <__sfp_lock_release>
 8008618:	230c      	movs	r3, #12
 800861a:	603b      	str	r3, [r7, #0]
 800861c:	e7ee      	b.n	80085fc <__sfp+0x60>
 800861e:	bf00      	nop
 8008620:	0800a400 	.word	0x0800a400
 8008624:	ffff0001 	.word	0xffff0001

08008628 <_fwalk_reent>:
 8008628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800862c:	4606      	mov	r6, r0
 800862e:	4688      	mov	r8, r1
 8008630:	2700      	movs	r7, #0
 8008632:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008636:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800863a:	f1b9 0901 	subs.w	r9, r9, #1
 800863e:	d505      	bpl.n	800864c <_fwalk_reent+0x24>
 8008640:	6824      	ldr	r4, [r4, #0]
 8008642:	2c00      	cmp	r4, #0
 8008644:	d1f7      	bne.n	8008636 <_fwalk_reent+0xe>
 8008646:	4638      	mov	r0, r7
 8008648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800864c:	89ab      	ldrh	r3, [r5, #12]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d907      	bls.n	8008662 <_fwalk_reent+0x3a>
 8008652:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008656:	3301      	adds	r3, #1
 8008658:	d003      	beq.n	8008662 <_fwalk_reent+0x3a>
 800865a:	4629      	mov	r1, r5
 800865c:	4630      	mov	r0, r6
 800865e:	47c0      	blx	r8
 8008660:	4307      	orrs	r7, r0
 8008662:	3568      	adds	r5, #104	; 0x68
 8008664:	e7e9      	b.n	800863a <_fwalk_reent+0x12>
	...

08008668 <_localeconv_r>:
 8008668:	4800      	ldr	r0, [pc, #0]	; (800866c <_localeconv_r+0x4>)
 800866a:	4770      	bx	lr
 800866c:	20000188 	.word	0x20000188

08008670 <__retarget_lock_init_recursive>:
 8008670:	4770      	bx	lr

08008672 <__retarget_lock_acquire_recursive>:
 8008672:	4770      	bx	lr

08008674 <__retarget_lock_release_recursive>:
 8008674:	4770      	bx	lr

08008676 <memchr>:
 8008676:	4603      	mov	r3, r0
 8008678:	b510      	push	{r4, lr}
 800867a:	b2c9      	uxtb	r1, r1
 800867c:	4402      	add	r2, r0
 800867e:	4293      	cmp	r3, r2
 8008680:	4618      	mov	r0, r3
 8008682:	d101      	bne.n	8008688 <memchr+0x12>
 8008684:	2000      	movs	r0, #0
 8008686:	e003      	b.n	8008690 <memchr+0x1a>
 8008688:	7804      	ldrb	r4, [r0, #0]
 800868a:	3301      	adds	r3, #1
 800868c:	428c      	cmp	r4, r1
 800868e:	d1f6      	bne.n	800867e <memchr+0x8>
 8008690:	bd10      	pop	{r4, pc}

08008692 <memcpy>:
 8008692:	440a      	add	r2, r1
 8008694:	4291      	cmp	r1, r2
 8008696:	f100 33ff 	add.w	r3, r0, #4294967295
 800869a:	d100      	bne.n	800869e <memcpy+0xc>
 800869c:	4770      	bx	lr
 800869e:	b510      	push	{r4, lr}
 80086a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086a4:	4291      	cmp	r1, r2
 80086a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086aa:	d1f9      	bne.n	80086a0 <memcpy+0xe>
 80086ac:	bd10      	pop	{r4, pc}
	...

080086b0 <__malloc_lock>:
 80086b0:	4801      	ldr	r0, [pc, #4]	; (80086b8 <__malloc_lock+0x8>)
 80086b2:	f7ff bfde 	b.w	8008672 <__retarget_lock_acquire_recursive>
 80086b6:	bf00      	nop
 80086b8:	20004630 	.word	0x20004630

080086bc <__malloc_unlock>:
 80086bc:	4801      	ldr	r0, [pc, #4]	; (80086c4 <__malloc_unlock+0x8>)
 80086be:	f7ff bfd9 	b.w	8008674 <__retarget_lock_release_recursive>
 80086c2:	bf00      	nop
 80086c4:	20004630 	.word	0x20004630

080086c8 <_Balloc>:
 80086c8:	b570      	push	{r4, r5, r6, lr}
 80086ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086cc:	4604      	mov	r4, r0
 80086ce:	460d      	mov	r5, r1
 80086d0:	b976      	cbnz	r6, 80086f0 <_Balloc+0x28>
 80086d2:	2010      	movs	r0, #16
 80086d4:	f7fe fae8 	bl	8006ca8 <malloc>
 80086d8:	4602      	mov	r2, r0
 80086da:	6260      	str	r0, [r4, #36]	; 0x24
 80086dc:	b920      	cbnz	r0, 80086e8 <_Balloc+0x20>
 80086de:	2166      	movs	r1, #102	; 0x66
 80086e0:	4b17      	ldr	r3, [pc, #92]	; (8008740 <_Balloc+0x78>)
 80086e2:	4818      	ldr	r0, [pc, #96]	; (8008744 <_Balloc+0x7c>)
 80086e4:	f000 ff4a 	bl	800957c <__assert_func>
 80086e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086ec:	6006      	str	r6, [r0, #0]
 80086ee:	60c6      	str	r6, [r0, #12]
 80086f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086f2:	68f3      	ldr	r3, [r6, #12]
 80086f4:	b183      	cbz	r3, 8008718 <_Balloc+0x50>
 80086f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086fe:	b9b8      	cbnz	r0, 8008730 <_Balloc+0x68>
 8008700:	2101      	movs	r1, #1
 8008702:	fa01 f605 	lsl.w	r6, r1, r5
 8008706:	1d72      	adds	r2, r6, #5
 8008708:	4620      	mov	r0, r4
 800870a:	0092      	lsls	r2, r2, #2
 800870c:	f000 fb5e 	bl	8008dcc <_calloc_r>
 8008710:	b160      	cbz	r0, 800872c <_Balloc+0x64>
 8008712:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008716:	e00e      	b.n	8008736 <_Balloc+0x6e>
 8008718:	2221      	movs	r2, #33	; 0x21
 800871a:	2104      	movs	r1, #4
 800871c:	4620      	mov	r0, r4
 800871e:	f000 fb55 	bl	8008dcc <_calloc_r>
 8008722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008724:	60f0      	str	r0, [r6, #12]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e4      	bne.n	80086f6 <_Balloc+0x2e>
 800872c:	2000      	movs	r0, #0
 800872e:	bd70      	pop	{r4, r5, r6, pc}
 8008730:	6802      	ldr	r2, [r0, #0]
 8008732:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008736:	2300      	movs	r3, #0
 8008738:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800873c:	e7f7      	b.n	800872e <_Balloc+0x66>
 800873e:	bf00      	nop
 8008740:	0800a445 	.word	0x0800a445
 8008744:	0800a52c 	.word	0x0800a52c

08008748 <_Bfree>:
 8008748:	b570      	push	{r4, r5, r6, lr}
 800874a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800874c:	4605      	mov	r5, r0
 800874e:	460c      	mov	r4, r1
 8008750:	b976      	cbnz	r6, 8008770 <_Bfree+0x28>
 8008752:	2010      	movs	r0, #16
 8008754:	f7fe faa8 	bl	8006ca8 <malloc>
 8008758:	4602      	mov	r2, r0
 800875a:	6268      	str	r0, [r5, #36]	; 0x24
 800875c:	b920      	cbnz	r0, 8008768 <_Bfree+0x20>
 800875e:	218a      	movs	r1, #138	; 0x8a
 8008760:	4b08      	ldr	r3, [pc, #32]	; (8008784 <_Bfree+0x3c>)
 8008762:	4809      	ldr	r0, [pc, #36]	; (8008788 <_Bfree+0x40>)
 8008764:	f000 ff0a 	bl	800957c <__assert_func>
 8008768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800876c:	6006      	str	r6, [r0, #0]
 800876e:	60c6      	str	r6, [r0, #12]
 8008770:	b13c      	cbz	r4, 8008782 <_Bfree+0x3a>
 8008772:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008774:	6862      	ldr	r2, [r4, #4]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800877c:	6021      	str	r1, [r4, #0]
 800877e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008782:	bd70      	pop	{r4, r5, r6, pc}
 8008784:	0800a445 	.word	0x0800a445
 8008788:	0800a52c 	.word	0x0800a52c

0800878c <__multadd>:
 800878c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008790:	4698      	mov	r8, r3
 8008792:	460c      	mov	r4, r1
 8008794:	2300      	movs	r3, #0
 8008796:	690e      	ldr	r6, [r1, #16]
 8008798:	4607      	mov	r7, r0
 800879a:	f101 0014 	add.w	r0, r1, #20
 800879e:	6805      	ldr	r5, [r0, #0]
 80087a0:	3301      	adds	r3, #1
 80087a2:	b2a9      	uxth	r1, r5
 80087a4:	fb02 8101 	mla	r1, r2, r1, r8
 80087a8:	0c2d      	lsrs	r5, r5, #16
 80087aa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80087ae:	fb02 c505 	mla	r5, r2, r5, ip
 80087b2:	b289      	uxth	r1, r1
 80087b4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80087b8:	429e      	cmp	r6, r3
 80087ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80087be:	f840 1b04 	str.w	r1, [r0], #4
 80087c2:	dcec      	bgt.n	800879e <__multadd+0x12>
 80087c4:	f1b8 0f00 	cmp.w	r8, #0
 80087c8:	d022      	beq.n	8008810 <__multadd+0x84>
 80087ca:	68a3      	ldr	r3, [r4, #8]
 80087cc:	42b3      	cmp	r3, r6
 80087ce:	dc19      	bgt.n	8008804 <__multadd+0x78>
 80087d0:	6861      	ldr	r1, [r4, #4]
 80087d2:	4638      	mov	r0, r7
 80087d4:	3101      	adds	r1, #1
 80087d6:	f7ff ff77 	bl	80086c8 <_Balloc>
 80087da:	4605      	mov	r5, r0
 80087dc:	b928      	cbnz	r0, 80087ea <__multadd+0x5e>
 80087de:	4602      	mov	r2, r0
 80087e0:	21b5      	movs	r1, #181	; 0xb5
 80087e2:	4b0d      	ldr	r3, [pc, #52]	; (8008818 <__multadd+0x8c>)
 80087e4:	480d      	ldr	r0, [pc, #52]	; (800881c <__multadd+0x90>)
 80087e6:	f000 fec9 	bl	800957c <__assert_func>
 80087ea:	6922      	ldr	r2, [r4, #16]
 80087ec:	f104 010c 	add.w	r1, r4, #12
 80087f0:	3202      	adds	r2, #2
 80087f2:	0092      	lsls	r2, r2, #2
 80087f4:	300c      	adds	r0, #12
 80087f6:	f7ff ff4c 	bl	8008692 <memcpy>
 80087fa:	4621      	mov	r1, r4
 80087fc:	4638      	mov	r0, r7
 80087fe:	f7ff ffa3 	bl	8008748 <_Bfree>
 8008802:	462c      	mov	r4, r5
 8008804:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008808:	3601      	adds	r6, #1
 800880a:	f8c3 8014 	str.w	r8, [r3, #20]
 800880e:	6126      	str	r6, [r4, #16]
 8008810:	4620      	mov	r0, r4
 8008812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008816:	bf00      	nop
 8008818:	0800a4bb 	.word	0x0800a4bb
 800881c:	0800a52c 	.word	0x0800a52c

08008820 <__hi0bits>:
 8008820:	0c02      	lsrs	r2, r0, #16
 8008822:	0412      	lsls	r2, r2, #16
 8008824:	4603      	mov	r3, r0
 8008826:	b9ca      	cbnz	r2, 800885c <__hi0bits+0x3c>
 8008828:	0403      	lsls	r3, r0, #16
 800882a:	2010      	movs	r0, #16
 800882c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008830:	bf04      	itt	eq
 8008832:	021b      	lsleq	r3, r3, #8
 8008834:	3008      	addeq	r0, #8
 8008836:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800883a:	bf04      	itt	eq
 800883c:	011b      	lsleq	r3, r3, #4
 800883e:	3004      	addeq	r0, #4
 8008840:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008844:	bf04      	itt	eq
 8008846:	009b      	lsleq	r3, r3, #2
 8008848:	3002      	addeq	r0, #2
 800884a:	2b00      	cmp	r3, #0
 800884c:	db05      	blt.n	800885a <__hi0bits+0x3a>
 800884e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008852:	f100 0001 	add.w	r0, r0, #1
 8008856:	bf08      	it	eq
 8008858:	2020      	moveq	r0, #32
 800885a:	4770      	bx	lr
 800885c:	2000      	movs	r0, #0
 800885e:	e7e5      	b.n	800882c <__hi0bits+0xc>

08008860 <__lo0bits>:
 8008860:	6803      	ldr	r3, [r0, #0]
 8008862:	4602      	mov	r2, r0
 8008864:	f013 0007 	ands.w	r0, r3, #7
 8008868:	d00b      	beq.n	8008882 <__lo0bits+0x22>
 800886a:	07d9      	lsls	r1, r3, #31
 800886c:	d422      	bmi.n	80088b4 <__lo0bits+0x54>
 800886e:	0798      	lsls	r0, r3, #30
 8008870:	bf49      	itett	mi
 8008872:	085b      	lsrmi	r3, r3, #1
 8008874:	089b      	lsrpl	r3, r3, #2
 8008876:	2001      	movmi	r0, #1
 8008878:	6013      	strmi	r3, [r2, #0]
 800887a:	bf5c      	itt	pl
 800887c:	2002      	movpl	r0, #2
 800887e:	6013      	strpl	r3, [r2, #0]
 8008880:	4770      	bx	lr
 8008882:	b299      	uxth	r1, r3
 8008884:	b909      	cbnz	r1, 800888a <__lo0bits+0x2a>
 8008886:	2010      	movs	r0, #16
 8008888:	0c1b      	lsrs	r3, r3, #16
 800888a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800888e:	bf04      	itt	eq
 8008890:	0a1b      	lsreq	r3, r3, #8
 8008892:	3008      	addeq	r0, #8
 8008894:	0719      	lsls	r1, r3, #28
 8008896:	bf04      	itt	eq
 8008898:	091b      	lsreq	r3, r3, #4
 800889a:	3004      	addeq	r0, #4
 800889c:	0799      	lsls	r1, r3, #30
 800889e:	bf04      	itt	eq
 80088a0:	089b      	lsreq	r3, r3, #2
 80088a2:	3002      	addeq	r0, #2
 80088a4:	07d9      	lsls	r1, r3, #31
 80088a6:	d403      	bmi.n	80088b0 <__lo0bits+0x50>
 80088a8:	085b      	lsrs	r3, r3, #1
 80088aa:	f100 0001 	add.w	r0, r0, #1
 80088ae:	d003      	beq.n	80088b8 <__lo0bits+0x58>
 80088b0:	6013      	str	r3, [r2, #0]
 80088b2:	4770      	bx	lr
 80088b4:	2000      	movs	r0, #0
 80088b6:	4770      	bx	lr
 80088b8:	2020      	movs	r0, #32
 80088ba:	4770      	bx	lr

080088bc <__i2b>:
 80088bc:	b510      	push	{r4, lr}
 80088be:	460c      	mov	r4, r1
 80088c0:	2101      	movs	r1, #1
 80088c2:	f7ff ff01 	bl	80086c8 <_Balloc>
 80088c6:	4602      	mov	r2, r0
 80088c8:	b928      	cbnz	r0, 80088d6 <__i2b+0x1a>
 80088ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80088ce:	4b04      	ldr	r3, [pc, #16]	; (80088e0 <__i2b+0x24>)
 80088d0:	4804      	ldr	r0, [pc, #16]	; (80088e4 <__i2b+0x28>)
 80088d2:	f000 fe53 	bl	800957c <__assert_func>
 80088d6:	2301      	movs	r3, #1
 80088d8:	6144      	str	r4, [r0, #20]
 80088da:	6103      	str	r3, [r0, #16]
 80088dc:	bd10      	pop	{r4, pc}
 80088de:	bf00      	nop
 80088e0:	0800a4bb 	.word	0x0800a4bb
 80088e4:	0800a52c 	.word	0x0800a52c

080088e8 <__multiply>:
 80088e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ec:	4614      	mov	r4, r2
 80088ee:	690a      	ldr	r2, [r1, #16]
 80088f0:	6923      	ldr	r3, [r4, #16]
 80088f2:	460d      	mov	r5, r1
 80088f4:	429a      	cmp	r2, r3
 80088f6:	bfbe      	ittt	lt
 80088f8:	460b      	movlt	r3, r1
 80088fa:	4625      	movlt	r5, r4
 80088fc:	461c      	movlt	r4, r3
 80088fe:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008902:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008906:	68ab      	ldr	r3, [r5, #8]
 8008908:	6869      	ldr	r1, [r5, #4]
 800890a:	eb0a 0709 	add.w	r7, sl, r9
 800890e:	42bb      	cmp	r3, r7
 8008910:	b085      	sub	sp, #20
 8008912:	bfb8      	it	lt
 8008914:	3101      	addlt	r1, #1
 8008916:	f7ff fed7 	bl	80086c8 <_Balloc>
 800891a:	b930      	cbnz	r0, 800892a <__multiply+0x42>
 800891c:	4602      	mov	r2, r0
 800891e:	f240 115d 	movw	r1, #349	; 0x15d
 8008922:	4b41      	ldr	r3, [pc, #260]	; (8008a28 <__multiply+0x140>)
 8008924:	4841      	ldr	r0, [pc, #260]	; (8008a2c <__multiply+0x144>)
 8008926:	f000 fe29 	bl	800957c <__assert_func>
 800892a:	f100 0614 	add.w	r6, r0, #20
 800892e:	4633      	mov	r3, r6
 8008930:	2200      	movs	r2, #0
 8008932:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008936:	4543      	cmp	r3, r8
 8008938:	d31e      	bcc.n	8008978 <__multiply+0x90>
 800893a:	f105 0c14 	add.w	ip, r5, #20
 800893e:	f104 0314 	add.w	r3, r4, #20
 8008942:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008946:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800894a:	9202      	str	r2, [sp, #8]
 800894c:	ebac 0205 	sub.w	r2, ip, r5
 8008950:	3a15      	subs	r2, #21
 8008952:	f022 0203 	bic.w	r2, r2, #3
 8008956:	3204      	adds	r2, #4
 8008958:	f105 0115 	add.w	r1, r5, #21
 800895c:	458c      	cmp	ip, r1
 800895e:	bf38      	it	cc
 8008960:	2204      	movcc	r2, #4
 8008962:	9201      	str	r2, [sp, #4]
 8008964:	9a02      	ldr	r2, [sp, #8]
 8008966:	9303      	str	r3, [sp, #12]
 8008968:	429a      	cmp	r2, r3
 800896a:	d808      	bhi.n	800897e <__multiply+0x96>
 800896c:	2f00      	cmp	r7, #0
 800896e:	dc55      	bgt.n	8008a1c <__multiply+0x134>
 8008970:	6107      	str	r7, [r0, #16]
 8008972:	b005      	add	sp, #20
 8008974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008978:	f843 2b04 	str.w	r2, [r3], #4
 800897c:	e7db      	b.n	8008936 <__multiply+0x4e>
 800897e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008982:	f1ba 0f00 	cmp.w	sl, #0
 8008986:	d020      	beq.n	80089ca <__multiply+0xe2>
 8008988:	46b1      	mov	r9, r6
 800898a:	2200      	movs	r2, #0
 800898c:	f105 0e14 	add.w	lr, r5, #20
 8008990:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008994:	f8d9 b000 	ldr.w	fp, [r9]
 8008998:	b2a1      	uxth	r1, r4
 800899a:	fa1f fb8b 	uxth.w	fp, fp
 800899e:	fb0a b101 	mla	r1, sl, r1, fp
 80089a2:	4411      	add	r1, r2
 80089a4:	f8d9 2000 	ldr.w	r2, [r9]
 80089a8:	0c24      	lsrs	r4, r4, #16
 80089aa:	0c12      	lsrs	r2, r2, #16
 80089ac:	fb0a 2404 	mla	r4, sl, r4, r2
 80089b0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80089b4:	b289      	uxth	r1, r1
 80089b6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80089ba:	45f4      	cmp	ip, lr
 80089bc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80089c0:	f849 1b04 	str.w	r1, [r9], #4
 80089c4:	d8e4      	bhi.n	8008990 <__multiply+0xa8>
 80089c6:	9901      	ldr	r1, [sp, #4]
 80089c8:	5072      	str	r2, [r6, r1]
 80089ca:	9a03      	ldr	r2, [sp, #12]
 80089cc:	3304      	adds	r3, #4
 80089ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089d2:	f1b9 0f00 	cmp.w	r9, #0
 80089d6:	d01f      	beq.n	8008a18 <__multiply+0x130>
 80089d8:	46b6      	mov	lr, r6
 80089da:	f04f 0a00 	mov.w	sl, #0
 80089de:	6834      	ldr	r4, [r6, #0]
 80089e0:	f105 0114 	add.w	r1, r5, #20
 80089e4:	880a      	ldrh	r2, [r1, #0]
 80089e6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80089ea:	b2a4      	uxth	r4, r4
 80089ec:	fb09 b202 	mla	r2, r9, r2, fp
 80089f0:	4492      	add	sl, r2
 80089f2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80089f6:	f84e 4b04 	str.w	r4, [lr], #4
 80089fa:	f851 4b04 	ldr.w	r4, [r1], #4
 80089fe:	f8be 2000 	ldrh.w	r2, [lr]
 8008a02:	0c24      	lsrs	r4, r4, #16
 8008a04:	fb09 2404 	mla	r4, r9, r4, r2
 8008a08:	458c      	cmp	ip, r1
 8008a0a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008a0e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008a12:	d8e7      	bhi.n	80089e4 <__multiply+0xfc>
 8008a14:	9a01      	ldr	r2, [sp, #4]
 8008a16:	50b4      	str	r4, [r6, r2]
 8008a18:	3604      	adds	r6, #4
 8008a1a:	e7a3      	b.n	8008964 <__multiply+0x7c>
 8008a1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1a5      	bne.n	8008970 <__multiply+0x88>
 8008a24:	3f01      	subs	r7, #1
 8008a26:	e7a1      	b.n	800896c <__multiply+0x84>
 8008a28:	0800a4bb 	.word	0x0800a4bb
 8008a2c:	0800a52c 	.word	0x0800a52c

08008a30 <__pow5mult>:
 8008a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a34:	4615      	mov	r5, r2
 8008a36:	f012 0203 	ands.w	r2, r2, #3
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	460f      	mov	r7, r1
 8008a3e:	d007      	beq.n	8008a50 <__pow5mult+0x20>
 8008a40:	4c25      	ldr	r4, [pc, #148]	; (8008ad8 <__pow5mult+0xa8>)
 8008a42:	3a01      	subs	r2, #1
 8008a44:	2300      	movs	r3, #0
 8008a46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a4a:	f7ff fe9f 	bl	800878c <__multadd>
 8008a4e:	4607      	mov	r7, r0
 8008a50:	10ad      	asrs	r5, r5, #2
 8008a52:	d03d      	beq.n	8008ad0 <__pow5mult+0xa0>
 8008a54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a56:	b97c      	cbnz	r4, 8008a78 <__pow5mult+0x48>
 8008a58:	2010      	movs	r0, #16
 8008a5a:	f7fe f925 	bl	8006ca8 <malloc>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	6270      	str	r0, [r6, #36]	; 0x24
 8008a62:	b928      	cbnz	r0, 8008a70 <__pow5mult+0x40>
 8008a64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a68:	4b1c      	ldr	r3, [pc, #112]	; (8008adc <__pow5mult+0xac>)
 8008a6a:	481d      	ldr	r0, [pc, #116]	; (8008ae0 <__pow5mult+0xb0>)
 8008a6c:	f000 fd86 	bl	800957c <__assert_func>
 8008a70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a74:	6004      	str	r4, [r0, #0]
 8008a76:	60c4      	str	r4, [r0, #12]
 8008a78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a80:	b94c      	cbnz	r4, 8008a96 <__pow5mult+0x66>
 8008a82:	f240 2171 	movw	r1, #625	; 0x271
 8008a86:	4630      	mov	r0, r6
 8008a88:	f7ff ff18 	bl	80088bc <__i2b>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	4604      	mov	r4, r0
 8008a90:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a94:	6003      	str	r3, [r0, #0]
 8008a96:	f04f 0900 	mov.w	r9, #0
 8008a9a:	07eb      	lsls	r3, r5, #31
 8008a9c:	d50a      	bpl.n	8008ab4 <__pow5mult+0x84>
 8008a9e:	4639      	mov	r1, r7
 8008aa0:	4622      	mov	r2, r4
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f7ff ff20 	bl	80088e8 <__multiply>
 8008aa8:	4680      	mov	r8, r0
 8008aaa:	4639      	mov	r1, r7
 8008aac:	4630      	mov	r0, r6
 8008aae:	f7ff fe4b 	bl	8008748 <_Bfree>
 8008ab2:	4647      	mov	r7, r8
 8008ab4:	106d      	asrs	r5, r5, #1
 8008ab6:	d00b      	beq.n	8008ad0 <__pow5mult+0xa0>
 8008ab8:	6820      	ldr	r0, [r4, #0]
 8008aba:	b938      	cbnz	r0, 8008acc <__pow5mult+0x9c>
 8008abc:	4622      	mov	r2, r4
 8008abe:	4621      	mov	r1, r4
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	f7ff ff11 	bl	80088e8 <__multiply>
 8008ac6:	6020      	str	r0, [r4, #0]
 8008ac8:	f8c0 9000 	str.w	r9, [r0]
 8008acc:	4604      	mov	r4, r0
 8008ace:	e7e4      	b.n	8008a9a <__pow5mult+0x6a>
 8008ad0:	4638      	mov	r0, r7
 8008ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ad6:	bf00      	nop
 8008ad8:	0800a680 	.word	0x0800a680
 8008adc:	0800a445 	.word	0x0800a445
 8008ae0:	0800a52c 	.word	0x0800a52c

08008ae4 <__lshift>:
 8008ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae8:	460c      	mov	r4, r1
 8008aea:	4607      	mov	r7, r0
 8008aec:	4691      	mov	r9, r2
 8008aee:	6923      	ldr	r3, [r4, #16]
 8008af0:	6849      	ldr	r1, [r1, #4]
 8008af2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008af6:	68a3      	ldr	r3, [r4, #8]
 8008af8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008afc:	f108 0601 	add.w	r6, r8, #1
 8008b00:	42b3      	cmp	r3, r6
 8008b02:	db0b      	blt.n	8008b1c <__lshift+0x38>
 8008b04:	4638      	mov	r0, r7
 8008b06:	f7ff fddf 	bl	80086c8 <_Balloc>
 8008b0a:	4605      	mov	r5, r0
 8008b0c:	b948      	cbnz	r0, 8008b22 <__lshift+0x3e>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b14:	4b27      	ldr	r3, [pc, #156]	; (8008bb4 <__lshift+0xd0>)
 8008b16:	4828      	ldr	r0, [pc, #160]	; (8008bb8 <__lshift+0xd4>)
 8008b18:	f000 fd30 	bl	800957c <__assert_func>
 8008b1c:	3101      	adds	r1, #1
 8008b1e:	005b      	lsls	r3, r3, #1
 8008b20:	e7ee      	b.n	8008b00 <__lshift+0x1c>
 8008b22:	2300      	movs	r3, #0
 8008b24:	f100 0114 	add.w	r1, r0, #20
 8008b28:	f100 0210 	add.w	r2, r0, #16
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	4553      	cmp	r3, sl
 8008b30:	db33      	blt.n	8008b9a <__lshift+0xb6>
 8008b32:	6920      	ldr	r0, [r4, #16]
 8008b34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b38:	f104 0314 	add.w	r3, r4, #20
 8008b3c:	f019 091f 	ands.w	r9, r9, #31
 8008b40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b48:	d02b      	beq.n	8008ba2 <__lshift+0xbe>
 8008b4a:	468a      	mov	sl, r1
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f1c9 0e20 	rsb	lr, r9, #32
 8008b52:	6818      	ldr	r0, [r3, #0]
 8008b54:	fa00 f009 	lsl.w	r0, r0, r9
 8008b58:	4302      	orrs	r2, r0
 8008b5a:	f84a 2b04 	str.w	r2, [sl], #4
 8008b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b62:	459c      	cmp	ip, r3
 8008b64:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b68:	d8f3      	bhi.n	8008b52 <__lshift+0x6e>
 8008b6a:	ebac 0304 	sub.w	r3, ip, r4
 8008b6e:	3b15      	subs	r3, #21
 8008b70:	f023 0303 	bic.w	r3, r3, #3
 8008b74:	3304      	adds	r3, #4
 8008b76:	f104 0015 	add.w	r0, r4, #21
 8008b7a:	4584      	cmp	ip, r0
 8008b7c:	bf38      	it	cc
 8008b7e:	2304      	movcc	r3, #4
 8008b80:	50ca      	str	r2, [r1, r3]
 8008b82:	b10a      	cbz	r2, 8008b88 <__lshift+0xa4>
 8008b84:	f108 0602 	add.w	r6, r8, #2
 8008b88:	3e01      	subs	r6, #1
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	612e      	str	r6, [r5, #16]
 8008b90:	f7ff fdda 	bl	8008748 <_Bfree>
 8008b94:	4628      	mov	r0, r5
 8008b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	e7c5      	b.n	8008b2e <__lshift+0x4a>
 8008ba2:	3904      	subs	r1, #4
 8008ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ba8:	459c      	cmp	ip, r3
 8008baa:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bae:	d8f9      	bhi.n	8008ba4 <__lshift+0xc0>
 8008bb0:	e7ea      	b.n	8008b88 <__lshift+0xa4>
 8008bb2:	bf00      	nop
 8008bb4:	0800a4bb 	.word	0x0800a4bb
 8008bb8:	0800a52c 	.word	0x0800a52c

08008bbc <__mcmp>:
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	690a      	ldr	r2, [r1, #16]
 8008bc0:	6900      	ldr	r0, [r0, #16]
 8008bc2:	b530      	push	{r4, r5, lr}
 8008bc4:	1a80      	subs	r0, r0, r2
 8008bc6:	d10d      	bne.n	8008be4 <__mcmp+0x28>
 8008bc8:	3314      	adds	r3, #20
 8008bca:	3114      	adds	r1, #20
 8008bcc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008bd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008bd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008bd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008bdc:	4295      	cmp	r5, r2
 8008bde:	d002      	beq.n	8008be6 <__mcmp+0x2a>
 8008be0:	d304      	bcc.n	8008bec <__mcmp+0x30>
 8008be2:	2001      	movs	r0, #1
 8008be4:	bd30      	pop	{r4, r5, pc}
 8008be6:	42a3      	cmp	r3, r4
 8008be8:	d3f4      	bcc.n	8008bd4 <__mcmp+0x18>
 8008bea:	e7fb      	b.n	8008be4 <__mcmp+0x28>
 8008bec:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf0:	e7f8      	b.n	8008be4 <__mcmp+0x28>
	...

08008bf4 <__mdiff>:
 8008bf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf8:	460c      	mov	r4, r1
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	4620      	mov	r0, r4
 8008c00:	4692      	mov	sl, r2
 8008c02:	f7ff ffdb 	bl	8008bbc <__mcmp>
 8008c06:	1e05      	subs	r5, r0, #0
 8008c08:	d111      	bne.n	8008c2e <__mdiff+0x3a>
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f7ff fd5b 	bl	80086c8 <_Balloc>
 8008c12:	4602      	mov	r2, r0
 8008c14:	b928      	cbnz	r0, 8008c22 <__mdiff+0x2e>
 8008c16:	f240 2132 	movw	r1, #562	; 0x232
 8008c1a:	4b3c      	ldr	r3, [pc, #240]	; (8008d0c <__mdiff+0x118>)
 8008c1c:	483c      	ldr	r0, [pc, #240]	; (8008d10 <__mdiff+0x11c>)
 8008c1e:	f000 fcad 	bl	800957c <__assert_func>
 8008c22:	2301      	movs	r3, #1
 8008c24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c28:	4610      	mov	r0, r2
 8008c2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2e:	bfa4      	itt	ge
 8008c30:	4653      	movge	r3, sl
 8008c32:	46a2      	movge	sl, r4
 8008c34:	4630      	mov	r0, r6
 8008c36:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008c3a:	bfa6      	itte	ge
 8008c3c:	461c      	movge	r4, r3
 8008c3e:	2500      	movge	r5, #0
 8008c40:	2501      	movlt	r5, #1
 8008c42:	f7ff fd41 	bl	80086c8 <_Balloc>
 8008c46:	4602      	mov	r2, r0
 8008c48:	b918      	cbnz	r0, 8008c52 <__mdiff+0x5e>
 8008c4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c4e:	4b2f      	ldr	r3, [pc, #188]	; (8008d0c <__mdiff+0x118>)
 8008c50:	e7e4      	b.n	8008c1c <__mdiff+0x28>
 8008c52:	f100 0814 	add.w	r8, r0, #20
 8008c56:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008c5a:	60c5      	str	r5, [r0, #12]
 8008c5c:	f04f 0c00 	mov.w	ip, #0
 8008c60:	f10a 0514 	add.w	r5, sl, #20
 8008c64:	f10a 0010 	add.w	r0, sl, #16
 8008c68:	46c2      	mov	sl, r8
 8008c6a:	6926      	ldr	r6, [r4, #16]
 8008c6c:	f104 0914 	add.w	r9, r4, #20
 8008c70:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008c74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c78:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008c7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c80:	fa1f f18b 	uxth.w	r1, fp
 8008c84:	4461      	add	r1, ip
 8008c86:	fa1f fc83 	uxth.w	ip, r3
 8008c8a:	0c1b      	lsrs	r3, r3, #16
 8008c8c:	eba1 010c 	sub.w	r1, r1, ip
 8008c90:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c94:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008c98:	b289      	uxth	r1, r1
 8008c9a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008c9e:	454e      	cmp	r6, r9
 8008ca0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008ca4:	f84a 3b04 	str.w	r3, [sl], #4
 8008ca8:	d8e6      	bhi.n	8008c78 <__mdiff+0x84>
 8008caa:	1b33      	subs	r3, r6, r4
 8008cac:	3b15      	subs	r3, #21
 8008cae:	f023 0303 	bic.w	r3, r3, #3
 8008cb2:	3415      	adds	r4, #21
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	42a6      	cmp	r6, r4
 8008cb8:	bf38      	it	cc
 8008cba:	2304      	movcc	r3, #4
 8008cbc:	441d      	add	r5, r3
 8008cbe:	4443      	add	r3, r8
 8008cc0:	461e      	mov	r6, r3
 8008cc2:	462c      	mov	r4, r5
 8008cc4:	4574      	cmp	r4, lr
 8008cc6:	d30e      	bcc.n	8008ce6 <__mdiff+0xf2>
 8008cc8:	f10e 0103 	add.w	r1, lr, #3
 8008ccc:	1b49      	subs	r1, r1, r5
 8008cce:	f021 0103 	bic.w	r1, r1, #3
 8008cd2:	3d03      	subs	r5, #3
 8008cd4:	45ae      	cmp	lr, r5
 8008cd6:	bf38      	it	cc
 8008cd8:	2100      	movcc	r1, #0
 8008cda:	4419      	add	r1, r3
 8008cdc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008ce0:	b18b      	cbz	r3, 8008d06 <__mdiff+0x112>
 8008ce2:	6117      	str	r7, [r2, #16]
 8008ce4:	e7a0      	b.n	8008c28 <__mdiff+0x34>
 8008ce6:	f854 8b04 	ldr.w	r8, [r4], #4
 8008cea:	fa1f f188 	uxth.w	r1, r8
 8008cee:	4461      	add	r1, ip
 8008cf0:	1408      	asrs	r0, r1, #16
 8008cf2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008cf6:	b289      	uxth	r1, r1
 8008cf8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008cfc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d00:	f846 1b04 	str.w	r1, [r6], #4
 8008d04:	e7de      	b.n	8008cc4 <__mdiff+0xd0>
 8008d06:	3f01      	subs	r7, #1
 8008d08:	e7e8      	b.n	8008cdc <__mdiff+0xe8>
 8008d0a:	bf00      	nop
 8008d0c:	0800a4bb 	.word	0x0800a4bb
 8008d10:	0800a52c 	.word	0x0800a52c

08008d14 <__d2b>:
 8008d14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008d18:	2101      	movs	r1, #1
 8008d1a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008d1e:	4690      	mov	r8, r2
 8008d20:	461d      	mov	r5, r3
 8008d22:	f7ff fcd1 	bl	80086c8 <_Balloc>
 8008d26:	4604      	mov	r4, r0
 8008d28:	b930      	cbnz	r0, 8008d38 <__d2b+0x24>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	f240 310a 	movw	r1, #778	; 0x30a
 8008d30:	4b24      	ldr	r3, [pc, #144]	; (8008dc4 <__d2b+0xb0>)
 8008d32:	4825      	ldr	r0, [pc, #148]	; (8008dc8 <__d2b+0xb4>)
 8008d34:	f000 fc22 	bl	800957c <__assert_func>
 8008d38:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008d3c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008d40:	bb2d      	cbnz	r5, 8008d8e <__d2b+0x7a>
 8008d42:	9301      	str	r3, [sp, #4]
 8008d44:	f1b8 0300 	subs.w	r3, r8, #0
 8008d48:	d026      	beq.n	8008d98 <__d2b+0x84>
 8008d4a:	4668      	mov	r0, sp
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	f7ff fd87 	bl	8008860 <__lo0bits>
 8008d52:	9900      	ldr	r1, [sp, #0]
 8008d54:	b1f0      	cbz	r0, 8008d94 <__d2b+0x80>
 8008d56:	9a01      	ldr	r2, [sp, #4]
 8008d58:	f1c0 0320 	rsb	r3, r0, #32
 8008d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d60:	430b      	orrs	r3, r1
 8008d62:	40c2      	lsrs	r2, r0
 8008d64:	6163      	str	r3, [r4, #20]
 8008d66:	9201      	str	r2, [sp, #4]
 8008d68:	9b01      	ldr	r3, [sp, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	bf14      	ite	ne
 8008d6e:	2102      	movne	r1, #2
 8008d70:	2101      	moveq	r1, #1
 8008d72:	61a3      	str	r3, [r4, #24]
 8008d74:	6121      	str	r1, [r4, #16]
 8008d76:	b1c5      	cbz	r5, 8008daa <__d2b+0x96>
 8008d78:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d7c:	4405      	add	r5, r0
 8008d7e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d82:	603d      	str	r5, [r7, #0]
 8008d84:	6030      	str	r0, [r6, #0]
 8008d86:	4620      	mov	r0, r4
 8008d88:	b002      	add	sp, #8
 8008d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d92:	e7d6      	b.n	8008d42 <__d2b+0x2e>
 8008d94:	6161      	str	r1, [r4, #20]
 8008d96:	e7e7      	b.n	8008d68 <__d2b+0x54>
 8008d98:	a801      	add	r0, sp, #4
 8008d9a:	f7ff fd61 	bl	8008860 <__lo0bits>
 8008d9e:	2101      	movs	r1, #1
 8008da0:	9b01      	ldr	r3, [sp, #4]
 8008da2:	6121      	str	r1, [r4, #16]
 8008da4:	6163      	str	r3, [r4, #20]
 8008da6:	3020      	adds	r0, #32
 8008da8:	e7e5      	b.n	8008d76 <__d2b+0x62>
 8008daa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008dae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008db2:	6038      	str	r0, [r7, #0]
 8008db4:	6918      	ldr	r0, [r3, #16]
 8008db6:	f7ff fd33 	bl	8008820 <__hi0bits>
 8008dba:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008dbe:	6031      	str	r1, [r6, #0]
 8008dc0:	e7e1      	b.n	8008d86 <__d2b+0x72>
 8008dc2:	bf00      	nop
 8008dc4:	0800a4bb 	.word	0x0800a4bb
 8008dc8:	0800a52c 	.word	0x0800a52c

08008dcc <_calloc_r>:
 8008dcc:	b538      	push	{r3, r4, r5, lr}
 8008dce:	fb02 f501 	mul.w	r5, r2, r1
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	f7fd ffc4 	bl	8006d60 <_malloc_r>
 8008dd8:	4604      	mov	r4, r0
 8008dda:	b118      	cbz	r0, 8008de4 <_calloc_r+0x18>
 8008ddc:	462a      	mov	r2, r5
 8008dde:	2100      	movs	r1, #0
 8008de0:	f7fd ff6a 	bl	8006cb8 <memset>
 8008de4:	4620      	mov	r0, r4
 8008de6:	bd38      	pop	{r3, r4, r5, pc}

08008de8 <__ssputs_r>:
 8008de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dec:	688e      	ldr	r6, [r1, #8]
 8008dee:	4682      	mov	sl, r0
 8008df0:	429e      	cmp	r6, r3
 8008df2:	460c      	mov	r4, r1
 8008df4:	4690      	mov	r8, r2
 8008df6:	461f      	mov	r7, r3
 8008df8:	d838      	bhi.n	8008e6c <__ssputs_r+0x84>
 8008dfa:	898a      	ldrh	r2, [r1, #12]
 8008dfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e00:	d032      	beq.n	8008e68 <__ssputs_r+0x80>
 8008e02:	6825      	ldr	r5, [r4, #0]
 8008e04:	6909      	ldr	r1, [r1, #16]
 8008e06:	3301      	adds	r3, #1
 8008e08:	eba5 0901 	sub.w	r9, r5, r1
 8008e0c:	6965      	ldr	r5, [r4, #20]
 8008e0e:	444b      	add	r3, r9
 8008e10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e18:	106d      	asrs	r5, r5, #1
 8008e1a:	429d      	cmp	r5, r3
 8008e1c:	bf38      	it	cc
 8008e1e:	461d      	movcc	r5, r3
 8008e20:	0553      	lsls	r3, r2, #21
 8008e22:	d531      	bpl.n	8008e88 <__ssputs_r+0xa0>
 8008e24:	4629      	mov	r1, r5
 8008e26:	f7fd ff9b 	bl	8006d60 <_malloc_r>
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	b950      	cbnz	r0, 8008e44 <__ssputs_r+0x5c>
 8008e2e:	230c      	movs	r3, #12
 8008e30:	f04f 30ff 	mov.w	r0, #4294967295
 8008e34:	f8ca 3000 	str.w	r3, [sl]
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e3e:	81a3      	strh	r3, [r4, #12]
 8008e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e44:	464a      	mov	r2, r9
 8008e46:	6921      	ldr	r1, [r4, #16]
 8008e48:	f7ff fc23 	bl	8008692 <memcpy>
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e56:	81a3      	strh	r3, [r4, #12]
 8008e58:	6126      	str	r6, [r4, #16]
 8008e5a:	444e      	add	r6, r9
 8008e5c:	6026      	str	r6, [r4, #0]
 8008e5e:	463e      	mov	r6, r7
 8008e60:	6165      	str	r5, [r4, #20]
 8008e62:	eba5 0509 	sub.w	r5, r5, r9
 8008e66:	60a5      	str	r5, [r4, #8]
 8008e68:	42be      	cmp	r6, r7
 8008e6a:	d900      	bls.n	8008e6e <__ssputs_r+0x86>
 8008e6c:	463e      	mov	r6, r7
 8008e6e:	4632      	mov	r2, r6
 8008e70:	4641      	mov	r1, r8
 8008e72:	6820      	ldr	r0, [r4, #0]
 8008e74:	f000 fd0c 	bl	8009890 <memmove>
 8008e78:	68a3      	ldr	r3, [r4, #8]
 8008e7a:	6822      	ldr	r2, [r4, #0]
 8008e7c:	1b9b      	subs	r3, r3, r6
 8008e7e:	4432      	add	r2, r6
 8008e80:	2000      	movs	r0, #0
 8008e82:	60a3      	str	r3, [r4, #8]
 8008e84:	6022      	str	r2, [r4, #0]
 8008e86:	e7db      	b.n	8008e40 <__ssputs_r+0x58>
 8008e88:	462a      	mov	r2, r5
 8008e8a:	f000 fd1b 	bl	80098c4 <_realloc_r>
 8008e8e:	4606      	mov	r6, r0
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d1e1      	bne.n	8008e58 <__ssputs_r+0x70>
 8008e94:	4650      	mov	r0, sl
 8008e96:	6921      	ldr	r1, [r4, #16]
 8008e98:	f7fd ff16 	bl	8006cc8 <_free_r>
 8008e9c:	e7c7      	b.n	8008e2e <__ssputs_r+0x46>
	...

08008ea0 <_svfiprintf_r>:
 8008ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea4:	4698      	mov	r8, r3
 8008ea6:	898b      	ldrh	r3, [r1, #12]
 8008ea8:	4607      	mov	r7, r0
 8008eaa:	061b      	lsls	r3, r3, #24
 8008eac:	460d      	mov	r5, r1
 8008eae:	4614      	mov	r4, r2
 8008eb0:	b09d      	sub	sp, #116	; 0x74
 8008eb2:	d50e      	bpl.n	8008ed2 <_svfiprintf_r+0x32>
 8008eb4:	690b      	ldr	r3, [r1, #16]
 8008eb6:	b963      	cbnz	r3, 8008ed2 <_svfiprintf_r+0x32>
 8008eb8:	2140      	movs	r1, #64	; 0x40
 8008eba:	f7fd ff51 	bl	8006d60 <_malloc_r>
 8008ebe:	6028      	str	r0, [r5, #0]
 8008ec0:	6128      	str	r0, [r5, #16]
 8008ec2:	b920      	cbnz	r0, 8008ece <_svfiprintf_r+0x2e>
 8008ec4:	230c      	movs	r3, #12
 8008ec6:	603b      	str	r3, [r7, #0]
 8008ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ecc:	e0d1      	b.n	8009072 <_svfiprintf_r+0x1d2>
 8008ece:	2340      	movs	r3, #64	; 0x40
 8008ed0:	616b      	str	r3, [r5, #20]
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed6:	2320      	movs	r3, #32
 8008ed8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008edc:	2330      	movs	r3, #48	; 0x30
 8008ede:	f04f 0901 	mov.w	r9, #1
 8008ee2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ee6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800908c <_svfiprintf_r+0x1ec>
 8008eea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008eee:	4623      	mov	r3, r4
 8008ef0:	469a      	mov	sl, r3
 8008ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ef6:	b10a      	cbz	r2, 8008efc <_svfiprintf_r+0x5c>
 8008ef8:	2a25      	cmp	r2, #37	; 0x25
 8008efa:	d1f9      	bne.n	8008ef0 <_svfiprintf_r+0x50>
 8008efc:	ebba 0b04 	subs.w	fp, sl, r4
 8008f00:	d00b      	beq.n	8008f1a <_svfiprintf_r+0x7a>
 8008f02:	465b      	mov	r3, fp
 8008f04:	4622      	mov	r2, r4
 8008f06:	4629      	mov	r1, r5
 8008f08:	4638      	mov	r0, r7
 8008f0a:	f7ff ff6d 	bl	8008de8 <__ssputs_r>
 8008f0e:	3001      	adds	r0, #1
 8008f10:	f000 80aa 	beq.w	8009068 <_svfiprintf_r+0x1c8>
 8008f14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f16:	445a      	add	r2, fp
 8008f18:	9209      	str	r2, [sp, #36]	; 0x24
 8008f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 80a2 	beq.w	8009068 <_svfiprintf_r+0x1c8>
 8008f24:	2300      	movs	r3, #0
 8008f26:	f04f 32ff 	mov.w	r2, #4294967295
 8008f2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f2e:	f10a 0a01 	add.w	sl, sl, #1
 8008f32:	9304      	str	r3, [sp, #16]
 8008f34:	9307      	str	r3, [sp, #28]
 8008f36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f3a:	931a      	str	r3, [sp, #104]	; 0x68
 8008f3c:	4654      	mov	r4, sl
 8008f3e:	2205      	movs	r2, #5
 8008f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f44:	4851      	ldr	r0, [pc, #324]	; (800908c <_svfiprintf_r+0x1ec>)
 8008f46:	f7ff fb96 	bl	8008676 <memchr>
 8008f4a:	9a04      	ldr	r2, [sp, #16]
 8008f4c:	b9d8      	cbnz	r0, 8008f86 <_svfiprintf_r+0xe6>
 8008f4e:	06d0      	lsls	r0, r2, #27
 8008f50:	bf44      	itt	mi
 8008f52:	2320      	movmi	r3, #32
 8008f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f58:	0711      	lsls	r1, r2, #28
 8008f5a:	bf44      	itt	mi
 8008f5c:	232b      	movmi	r3, #43	; 0x2b
 8008f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f62:	f89a 3000 	ldrb.w	r3, [sl]
 8008f66:	2b2a      	cmp	r3, #42	; 0x2a
 8008f68:	d015      	beq.n	8008f96 <_svfiprintf_r+0xf6>
 8008f6a:	4654      	mov	r4, sl
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	f04f 0c0a 	mov.w	ip, #10
 8008f72:	9a07      	ldr	r2, [sp, #28]
 8008f74:	4621      	mov	r1, r4
 8008f76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f7a:	3b30      	subs	r3, #48	; 0x30
 8008f7c:	2b09      	cmp	r3, #9
 8008f7e:	d94e      	bls.n	800901e <_svfiprintf_r+0x17e>
 8008f80:	b1b0      	cbz	r0, 8008fb0 <_svfiprintf_r+0x110>
 8008f82:	9207      	str	r2, [sp, #28]
 8008f84:	e014      	b.n	8008fb0 <_svfiprintf_r+0x110>
 8008f86:	eba0 0308 	sub.w	r3, r0, r8
 8008f8a:	fa09 f303 	lsl.w	r3, r9, r3
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	46a2      	mov	sl, r4
 8008f92:	9304      	str	r3, [sp, #16]
 8008f94:	e7d2      	b.n	8008f3c <_svfiprintf_r+0x9c>
 8008f96:	9b03      	ldr	r3, [sp, #12]
 8008f98:	1d19      	adds	r1, r3, #4
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	9103      	str	r1, [sp, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	bfbb      	ittet	lt
 8008fa2:	425b      	neglt	r3, r3
 8008fa4:	f042 0202 	orrlt.w	r2, r2, #2
 8008fa8:	9307      	strge	r3, [sp, #28]
 8008faa:	9307      	strlt	r3, [sp, #28]
 8008fac:	bfb8      	it	lt
 8008fae:	9204      	strlt	r2, [sp, #16]
 8008fb0:	7823      	ldrb	r3, [r4, #0]
 8008fb2:	2b2e      	cmp	r3, #46	; 0x2e
 8008fb4:	d10c      	bne.n	8008fd0 <_svfiprintf_r+0x130>
 8008fb6:	7863      	ldrb	r3, [r4, #1]
 8008fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8008fba:	d135      	bne.n	8009028 <_svfiprintf_r+0x188>
 8008fbc:	9b03      	ldr	r3, [sp, #12]
 8008fbe:	3402      	adds	r4, #2
 8008fc0:	1d1a      	adds	r2, r3, #4
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	9203      	str	r2, [sp, #12]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	bfb8      	it	lt
 8008fca:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fce:	9305      	str	r3, [sp, #20]
 8008fd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800909c <_svfiprintf_r+0x1fc>
 8008fd4:	2203      	movs	r2, #3
 8008fd6:	4650      	mov	r0, sl
 8008fd8:	7821      	ldrb	r1, [r4, #0]
 8008fda:	f7ff fb4c 	bl	8008676 <memchr>
 8008fde:	b140      	cbz	r0, 8008ff2 <_svfiprintf_r+0x152>
 8008fe0:	2340      	movs	r3, #64	; 0x40
 8008fe2:	eba0 000a 	sub.w	r0, r0, sl
 8008fe6:	fa03 f000 	lsl.w	r0, r3, r0
 8008fea:	9b04      	ldr	r3, [sp, #16]
 8008fec:	3401      	adds	r4, #1
 8008fee:	4303      	orrs	r3, r0
 8008ff0:	9304      	str	r3, [sp, #16]
 8008ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff6:	2206      	movs	r2, #6
 8008ff8:	4825      	ldr	r0, [pc, #148]	; (8009090 <_svfiprintf_r+0x1f0>)
 8008ffa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ffe:	f7ff fb3a 	bl	8008676 <memchr>
 8009002:	2800      	cmp	r0, #0
 8009004:	d038      	beq.n	8009078 <_svfiprintf_r+0x1d8>
 8009006:	4b23      	ldr	r3, [pc, #140]	; (8009094 <_svfiprintf_r+0x1f4>)
 8009008:	bb1b      	cbnz	r3, 8009052 <_svfiprintf_r+0x1b2>
 800900a:	9b03      	ldr	r3, [sp, #12]
 800900c:	3307      	adds	r3, #7
 800900e:	f023 0307 	bic.w	r3, r3, #7
 8009012:	3308      	adds	r3, #8
 8009014:	9303      	str	r3, [sp, #12]
 8009016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009018:	4433      	add	r3, r6
 800901a:	9309      	str	r3, [sp, #36]	; 0x24
 800901c:	e767      	b.n	8008eee <_svfiprintf_r+0x4e>
 800901e:	460c      	mov	r4, r1
 8009020:	2001      	movs	r0, #1
 8009022:	fb0c 3202 	mla	r2, ip, r2, r3
 8009026:	e7a5      	b.n	8008f74 <_svfiprintf_r+0xd4>
 8009028:	2300      	movs	r3, #0
 800902a:	f04f 0c0a 	mov.w	ip, #10
 800902e:	4619      	mov	r1, r3
 8009030:	3401      	adds	r4, #1
 8009032:	9305      	str	r3, [sp, #20]
 8009034:	4620      	mov	r0, r4
 8009036:	f810 2b01 	ldrb.w	r2, [r0], #1
 800903a:	3a30      	subs	r2, #48	; 0x30
 800903c:	2a09      	cmp	r2, #9
 800903e:	d903      	bls.n	8009048 <_svfiprintf_r+0x1a8>
 8009040:	2b00      	cmp	r3, #0
 8009042:	d0c5      	beq.n	8008fd0 <_svfiprintf_r+0x130>
 8009044:	9105      	str	r1, [sp, #20]
 8009046:	e7c3      	b.n	8008fd0 <_svfiprintf_r+0x130>
 8009048:	4604      	mov	r4, r0
 800904a:	2301      	movs	r3, #1
 800904c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009050:	e7f0      	b.n	8009034 <_svfiprintf_r+0x194>
 8009052:	ab03      	add	r3, sp, #12
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	462a      	mov	r2, r5
 8009058:	4638      	mov	r0, r7
 800905a:	4b0f      	ldr	r3, [pc, #60]	; (8009098 <_svfiprintf_r+0x1f8>)
 800905c:	a904      	add	r1, sp, #16
 800905e:	f7fd ff77 	bl	8006f50 <_printf_float>
 8009062:	1c42      	adds	r2, r0, #1
 8009064:	4606      	mov	r6, r0
 8009066:	d1d6      	bne.n	8009016 <_svfiprintf_r+0x176>
 8009068:	89ab      	ldrh	r3, [r5, #12]
 800906a:	065b      	lsls	r3, r3, #25
 800906c:	f53f af2c 	bmi.w	8008ec8 <_svfiprintf_r+0x28>
 8009070:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009072:	b01d      	add	sp, #116	; 0x74
 8009074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009078:	ab03      	add	r3, sp, #12
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	462a      	mov	r2, r5
 800907e:	4638      	mov	r0, r7
 8009080:	4b05      	ldr	r3, [pc, #20]	; (8009098 <_svfiprintf_r+0x1f8>)
 8009082:	a904      	add	r1, sp, #16
 8009084:	f7fe fa00 	bl	8007488 <_printf_i>
 8009088:	e7eb      	b.n	8009062 <_svfiprintf_r+0x1c2>
 800908a:	bf00      	nop
 800908c:	0800a68c 	.word	0x0800a68c
 8009090:	0800a696 	.word	0x0800a696
 8009094:	08006f51 	.word	0x08006f51
 8009098:	08008de9 	.word	0x08008de9
 800909c:	0800a692 	.word	0x0800a692

080090a0 <__sfputc_r>:
 80090a0:	6893      	ldr	r3, [r2, #8]
 80090a2:	b410      	push	{r4}
 80090a4:	3b01      	subs	r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	6093      	str	r3, [r2, #8]
 80090aa:	da07      	bge.n	80090bc <__sfputc_r+0x1c>
 80090ac:	6994      	ldr	r4, [r2, #24]
 80090ae:	42a3      	cmp	r3, r4
 80090b0:	db01      	blt.n	80090b6 <__sfputc_r+0x16>
 80090b2:	290a      	cmp	r1, #10
 80090b4:	d102      	bne.n	80090bc <__sfputc_r+0x1c>
 80090b6:	bc10      	pop	{r4}
 80090b8:	f000 b98e 	b.w	80093d8 <__swbuf_r>
 80090bc:	6813      	ldr	r3, [r2, #0]
 80090be:	1c58      	adds	r0, r3, #1
 80090c0:	6010      	str	r0, [r2, #0]
 80090c2:	7019      	strb	r1, [r3, #0]
 80090c4:	4608      	mov	r0, r1
 80090c6:	bc10      	pop	{r4}
 80090c8:	4770      	bx	lr

080090ca <__sfputs_r>:
 80090ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090cc:	4606      	mov	r6, r0
 80090ce:	460f      	mov	r7, r1
 80090d0:	4614      	mov	r4, r2
 80090d2:	18d5      	adds	r5, r2, r3
 80090d4:	42ac      	cmp	r4, r5
 80090d6:	d101      	bne.n	80090dc <__sfputs_r+0x12>
 80090d8:	2000      	movs	r0, #0
 80090da:	e007      	b.n	80090ec <__sfputs_r+0x22>
 80090dc:	463a      	mov	r2, r7
 80090de:	4630      	mov	r0, r6
 80090e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e4:	f7ff ffdc 	bl	80090a0 <__sfputc_r>
 80090e8:	1c43      	adds	r3, r0, #1
 80090ea:	d1f3      	bne.n	80090d4 <__sfputs_r+0xa>
 80090ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090f0 <_vfiprintf_r>:
 80090f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f4:	460d      	mov	r5, r1
 80090f6:	4614      	mov	r4, r2
 80090f8:	4698      	mov	r8, r3
 80090fa:	4606      	mov	r6, r0
 80090fc:	b09d      	sub	sp, #116	; 0x74
 80090fe:	b118      	cbz	r0, 8009108 <_vfiprintf_r+0x18>
 8009100:	6983      	ldr	r3, [r0, #24]
 8009102:	b90b      	cbnz	r3, 8009108 <_vfiprintf_r+0x18>
 8009104:	f7ff fa12 	bl	800852c <__sinit>
 8009108:	4b89      	ldr	r3, [pc, #548]	; (8009330 <_vfiprintf_r+0x240>)
 800910a:	429d      	cmp	r5, r3
 800910c:	d11b      	bne.n	8009146 <_vfiprintf_r+0x56>
 800910e:	6875      	ldr	r5, [r6, #4]
 8009110:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009112:	07d9      	lsls	r1, r3, #31
 8009114:	d405      	bmi.n	8009122 <_vfiprintf_r+0x32>
 8009116:	89ab      	ldrh	r3, [r5, #12]
 8009118:	059a      	lsls	r2, r3, #22
 800911a:	d402      	bmi.n	8009122 <_vfiprintf_r+0x32>
 800911c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800911e:	f7ff faa8 	bl	8008672 <__retarget_lock_acquire_recursive>
 8009122:	89ab      	ldrh	r3, [r5, #12]
 8009124:	071b      	lsls	r3, r3, #28
 8009126:	d501      	bpl.n	800912c <_vfiprintf_r+0x3c>
 8009128:	692b      	ldr	r3, [r5, #16]
 800912a:	b9eb      	cbnz	r3, 8009168 <_vfiprintf_r+0x78>
 800912c:	4629      	mov	r1, r5
 800912e:	4630      	mov	r0, r6
 8009130:	f000 f9b6 	bl	80094a0 <__swsetup_r>
 8009134:	b1c0      	cbz	r0, 8009168 <_vfiprintf_r+0x78>
 8009136:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009138:	07dc      	lsls	r4, r3, #31
 800913a:	d50e      	bpl.n	800915a <_vfiprintf_r+0x6a>
 800913c:	f04f 30ff 	mov.w	r0, #4294967295
 8009140:	b01d      	add	sp, #116	; 0x74
 8009142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009146:	4b7b      	ldr	r3, [pc, #492]	; (8009334 <_vfiprintf_r+0x244>)
 8009148:	429d      	cmp	r5, r3
 800914a:	d101      	bne.n	8009150 <_vfiprintf_r+0x60>
 800914c:	68b5      	ldr	r5, [r6, #8]
 800914e:	e7df      	b.n	8009110 <_vfiprintf_r+0x20>
 8009150:	4b79      	ldr	r3, [pc, #484]	; (8009338 <_vfiprintf_r+0x248>)
 8009152:	429d      	cmp	r5, r3
 8009154:	bf08      	it	eq
 8009156:	68f5      	ldreq	r5, [r6, #12]
 8009158:	e7da      	b.n	8009110 <_vfiprintf_r+0x20>
 800915a:	89ab      	ldrh	r3, [r5, #12]
 800915c:	0598      	lsls	r0, r3, #22
 800915e:	d4ed      	bmi.n	800913c <_vfiprintf_r+0x4c>
 8009160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009162:	f7ff fa87 	bl	8008674 <__retarget_lock_release_recursive>
 8009166:	e7e9      	b.n	800913c <_vfiprintf_r+0x4c>
 8009168:	2300      	movs	r3, #0
 800916a:	9309      	str	r3, [sp, #36]	; 0x24
 800916c:	2320      	movs	r3, #32
 800916e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009172:	2330      	movs	r3, #48	; 0x30
 8009174:	f04f 0901 	mov.w	r9, #1
 8009178:	f8cd 800c 	str.w	r8, [sp, #12]
 800917c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800933c <_vfiprintf_r+0x24c>
 8009180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009184:	4623      	mov	r3, r4
 8009186:	469a      	mov	sl, r3
 8009188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800918c:	b10a      	cbz	r2, 8009192 <_vfiprintf_r+0xa2>
 800918e:	2a25      	cmp	r2, #37	; 0x25
 8009190:	d1f9      	bne.n	8009186 <_vfiprintf_r+0x96>
 8009192:	ebba 0b04 	subs.w	fp, sl, r4
 8009196:	d00b      	beq.n	80091b0 <_vfiprintf_r+0xc0>
 8009198:	465b      	mov	r3, fp
 800919a:	4622      	mov	r2, r4
 800919c:	4629      	mov	r1, r5
 800919e:	4630      	mov	r0, r6
 80091a0:	f7ff ff93 	bl	80090ca <__sfputs_r>
 80091a4:	3001      	adds	r0, #1
 80091a6:	f000 80aa 	beq.w	80092fe <_vfiprintf_r+0x20e>
 80091aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091ac:	445a      	add	r2, fp
 80091ae:	9209      	str	r2, [sp, #36]	; 0x24
 80091b0:	f89a 3000 	ldrb.w	r3, [sl]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 80a2 	beq.w	80092fe <_vfiprintf_r+0x20e>
 80091ba:	2300      	movs	r3, #0
 80091bc:	f04f 32ff 	mov.w	r2, #4294967295
 80091c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091c4:	f10a 0a01 	add.w	sl, sl, #1
 80091c8:	9304      	str	r3, [sp, #16]
 80091ca:	9307      	str	r3, [sp, #28]
 80091cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091d0:	931a      	str	r3, [sp, #104]	; 0x68
 80091d2:	4654      	mov	r4, sl
 80091d4:	2205      	movs	r2, #5
 80091d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091da:	4858      	ldr	r0, [pc, #352]	; (800933c <_vfiprintf_r+0x24c>)
 80091dc:	f7ff fa4b 	bl	8008676 <memchr>
 80091e0:	9a04      	ldr	r2, [sp, #16]
 80091e2:	b9d8      	cbnz	r0, 800921c <_vfiprintf_r+0x12c>
 80091e4:	06d1      	lsls	r1, r2, #27
 80091e6:	bf44      	itt	mi
 80091e8:	2320      	movmi	r3, #32
 80091ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091ee:	0713      	lsls	r3, r2, #28
 80091f0:	bf44      	itt	mi
 80091f2:	232b      	movmi	r3, #43	; 0x2b
 80091f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091f8:	f89a 3000 	ldrb.w	r3, [sl]
 80091fc:	2b2a      	cmp	r3, #42	; 0x2a
 80091fe:	d015      	beq.n	800922c <_vfiprintf_r+0x13c>
 8009200:	4654      	mov	r4, sl
 8009202:	2000      	movs	r0, #0
 8009204:	f04f 0c0a 	mov.w	ip, #10
 8009208:	9a07      	ldr	r2, [sp, #28]
 800920a:	4621      	mov	r1, r4
 800920c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009210:	3b30      	subs	r3, #48	; 0x30
 8009212:	2b09      	cmp	r3, #9
 8009214:	d94e      	bls.n	80092b4 <_vfiprintf_r+0x1c4>
 8009216:	b1b0      	cbz	r0, 8009246 <_vfiprintf_r+0x156>
 8009218:	9207      	str	r2, [sp, #28]
 800921a:	e014      	b.n	8009246 <_vfiprintf_r+0x156>
 800921c:	eba0 0308 	sub.w	r3, r0, r8
 8009220:	fa09 f303 	lsl.w	r3, r9, r3
 8009224:	4313      	orrs	r3, r2
 8009226:	46a2      	mov	sl, r4
 8009228:	9304      	str	r3, [sp, #16]
 800922a:	e7d2      	b.n	80091d2 <_vfiprintf_r+0xe2>
 800922c:	9b03      	ldr	r3, [sp, #12]
 800922e:	1d19      	adds	r1, r3, #4
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	9103      	str	r1, [sp, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	bfbb      	ittet	lt
 8009238:	425b      	neglt	r3, r3
 800923a:	f042 0202 	orrlt.w	r2, r2, #2
 800923e:	9307      	strge	r3, [sp, #28]
 8009240:	9307      	strlt	r3, [sp, #28]
 8009242:	bfb8      	it	lt
 8009244:	9204      	strlt	r2, [sp, #16]
 8009246:	7823      	ldrb	r3, [r4, #0]
 8009248:	2b2e      	cmp	r3, #46	; 0x2e
 800924a:	d10c      	bne.n	8009266 <_vfiprintf_r+0x176>
 800924c:	7863      	ldrb	r3, [r4, #1]
 800924e:	2b2a      	cmp	r3, #42	; 0x2a
 8009250:	d135      	bne.n	80092be <_vfiprintf_r+0x1ce>
 8009252:	9b03      	ldr	r3, [sp, #12]
 8009254:	3402      	adds	r4, #2
 8009256:	1d1a      	adds	r2, r3, #4
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	9203      	str	r2, [sp, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	bfb8      	it	lt
 8009260:	f04f 33ff 	movlt.w	r3, #4294967295
 8009264:	9305      	str	r3, [sp, #20]
 8009266:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800934c <_vfiprintf_r+0x25c>
 800926a:	2203      	movs	r2, #3
 800926c:	4650      	mov	r0, sl
 800926e:	7821      	ldrb	r1, [r4, #0]
 8009270:	f7ff fa01 	bl	8008676 <memchr>
 8009274:	b140      	cbz	r0, 8009288 <_vfiprintf_r+0x198>
 8009276:	2340      	movs	r3, #64	; 0x40
 8009278:	eba0 000a 	sub.w	r0, r0, sl
 800927c:	fa03 f000 	lsl.w	r0, r3, r0
 8009280:	9b04      	ldr	r3, [sp, #16]
 8009282:	3401      	adds	r4, #1
 8009284:	4303      	orrs	r3, r0
 8009286:	9304      	str	r3, [sp, #16]
 8009288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800928c:	2206      	movs	r2, #6
 800928e:	482c      	ldr	r0, [pc, #176]	; (8009340 <_vfiprintf_r+0x250>)
 8009290:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009294:	f7ff f9ef 	bl	8008676 <memchr>
 8009298:	2800      	cmp	r0, #0
 800929a:	d03f      	beq.n	800931c <_vfiprintf_r+0x22c>
 800929c:	4b29      	ldr	r3, [pc, #164]	; (8009344 <_vfiprintf_r+0x254>)
 800929e:	bb1b      	cbnz	r3, 80092e8 <_vfiprintf_r+0x1f8>
 80092a0:	9b03      	ldr	r3, [sp, #12]
 80092a2:	3307      	adds	r3, #7
 80092a4:	f023 0307 	bic.w	r3, r3, #7
 80092a8:	3308      	adds	r3, #8
 80092aa:	9303      	str	r3, [sp, #12]
 80092ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ae:	443b      	add	r3, r7
 80092b0:	9309      	str	r3, [sp, #36]	; 0x24
 80092b2:	e767      	b.n	8009184 <_vfiprintf_r+0x94>
 80092b4:	460c      	mov	r4, r1
 80092b6:	2001      	movs	r0, #1
 80092b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80092bc:	e7a5      	b.n	800920a <_vfiprintf_r+0x11a>
 80092be:	2300      	movs	r3, #0
 80092c0:	f04f 0c0a 	mov.w	ip, #10
 80092c4:	4619      	mov	r1, r3
 80092c6:	3401      	adds	r4, #1
 80092c8:	9305      	str	r3, [sp, #20]
 80092ca:	4620      	mov	r0, r4
 80092cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092d0:	3a30      	subs	r2, #48	; 0x30
 80092d2:	2a09      	cmp	r2, #9
 80092d4:	d903      	bls.n	80092de <_vfiprintf_r+0x1ee>
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d0c5      	beq.n	8009266 <_vfiprintf_r+0x176>
 80092da:	9105      	str	r1, [sp, #20]
 80092dc:	e7c3      	b.n	8009266 <_vfiprintf_r+0x176>
 80092de:	4604      	mov	r4, r0
 80092e0:	2301      	movs	r3, #1
 80092e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80092e6:	e7f0      	b.n	80092ca <_vfiprintf_r+0x1da>
 80092e8:	ab03      	add	r3, sp, #12
 80092ea:	9300      	str	r3, [sp, #0]
 80092ec:	462a      	mov	r2, r5
 80092ee:	4630      	mov	r0, r6
 80092f0:	4b15      	ldr	r3, [pc, #84]	; (8009348 <_vfiprintf_r+0x258>)
 80092f2:	a904      	add	r1, sp, #16
 80092f4:	f7fd fe2c 	bl	8006f50 <_printf_float>
 80092f8:	4607      	mov	r7, r0
 80092fa:	1c78      	adds	r0, r7, #1
 80092fc:	d1d6      	bne.n	80092ac <_vfiprintf_r+0x1bc>
 80092fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009300:	07d9      	lsls	r1, r3, #31
 8009302:	d405      	bmi.n	8009310 <_vfiprintf_r+0x220>
 8009304:	89ab      	ldrh	r3, [r5, #12]
 8009306:	059a      	lsls	r2, r3, #22
 8009308:	d402      	bmi.n	8009310 <_vfiprintf_r+0x220>
 800930a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800930c:	f7ff f9b2 	bl	8008674 <__retarget_lock_release_recursive>
 8009310:	89ab      	ldrh	r3, [r5, #12]
 8009312:	065b      	lsls	r3, r3, #25
 8009314:	f53f af12 	bmi.w	800913c <_vfiprintf_r+0x4c>
 8009318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800931a:	e711      	b.n	8009140 <_vfiprintf_r+0x50>
 800931c:	ab03      	add	r3, sp, #12
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	462a      	mov	r2, r5
 8009322:	4630      	mov	r0, r6
 8009324:	4b08      	ldr	r3, [pc, #32]	; (8009348 <_vfiprintf_r+0x258>)
 8009326:	a904      	add	r1, sp, #16
 8009328:	f7fe f8ae 	bl	8007488 <_printf_i>
 800932c:	e7e4      	b.n	80092f8 <_vfiprintf_r+0x208>
 800932e:	bf00      	nop
 8009330:	0800a4ec 	.word	0x0800a4ec
 8009334:	0800a50c 	.word	0x0800a50c
 8009338:	0800a4cc 	.word	0x0800a4cc
 800933c:	0800a68c 	.word	0x0800a68c
 8009340:	0800a696 	.word	0x0800a696
 8009344:	08006f51 	.word	0x08006f51
 8009348:	080090cb 	.word	0x080090cb
 800934c:	0800a692 	.word	0x0800a692

08009350 <__sread>:
 8009350:	b510      	push	{r4, lr}
 8009352:	460c      	mov	r4, r1
 8009354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009358:	f000 fada 	bl	8009910 <_read_r>
 800935c:	2800      	cmp	r0, #0
 800935e:	bfab      	itete	ge
 8009360:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009362:	89a3      	ldrhlt	r3, [r4, #12]
 8009364:	181b      	addge	r3, r3, r0
 8009366:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800936a:	bfac      	ite	ge
 800936c:	6563      	strge	r3, [r4, #84]	; 0x54
 800936e:	81a3      	strhlt	r3, [r4, #12]
 8009370:	bd10      	pop	{r4, pc}

08009372 <__swrite>:
 8009372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009376:	461f      	mov	r7, r3
 8009378:	898b      	ldrh	r3, [r1, #12]
 800937a:	4605      	mov	r5, r0
 800937c:	05db      	lsls	r3, r3, #23
 800937e:	460c      	mov	r4, r1
 8009380:	4616      	mov	r6, r2
 8009382:	d505      	bpl.n	8009390 <__swrite+0x1e>
 8009384:	2302      	movs	r3, #2
 8009386:	2200      	movs	r2, #0
 8009388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938c:	f000 f9f8 	bl	8009780 <_lseek_r>
 8009390:	89a3      	ldrh	r3, [r4, #12]
 8009392:	4632      	mov	r2, r6
 8009394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009398:	81a3      	strh	r3, [r4, #12]
 800939a:	4628      	mov	r0, r5
 800939c:	463b      	mov	r3, r7
 800939e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093a6:	f000 b869 	b.w	800947c <_write_r>

080093aa <__sseek>:
 80093aa:	b510      	push	{r4, lr}
 80093ac:	460c      	mov	r4, r1
 80093ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b2:	f000 f9e5 	bl	8009780 <_lseek_r>
 80093b6:	1c43      	adds	r3, r0, #1
 80093b8:	89a3      	ldrh	r3, [r4, #12]
 80093ba:	bf15      	itete	ne
 80093bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80093be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093c6:	81a3      	strheq	r3, [r4, #12]
 80093c8:	bf18      	it	ne
 80093ca:	81a3      	strhne	r3, [r4, #12]
 80093cc:	bd10      	pop	{r4, pc}

080093ce <__sclose>:
 80093ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093d2:	f000 b8f1 	b.w	80095b8 <_close_r>
	...

080093d8 <__swbuf_r>:
 80093d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093da:	460e      	mov	r6, r1
 80093dc:	4614      	mov	r4, r2
 80093de:	4605      	mov	r5, r0
 80093e0:	b118      	cbz	r0, 80093ea <__swbuf_r+0x12>
 80093e2:	6983      	ldr	r3, [r0, #24]
 80093e4:	b90b      	cbnz	r3, 80093ea <__swbuf_r+0x12>
 80093e6:	f7ff f8a1 	bl	800852c <__sinit>
 80093ea:	4b21      	ldr	r3, [pc, #132]	; (8009470 <__swbuf_r+0x98>)
 80093ec:	429c      	cmp	r4, r3
 80093ee:	d12b      	bne.n	8009448 <__swbuf_r+0x70>
 80093f0:	686c      	ldr	r4, [r5, #4]
 80093f2:	69a3      	ldr	r3, [r4, #24]
 80093f4:	60a3      	str	r3, [r4, #8]
 80093f6:	89a3      	ldrh	r3, [r4, #12]
 80093f8:	071a      	lsls	r2, r3, #28
 80093fa:	d52f      	bpl.n	800945c <__swbuf_r+0x84>
 80093fc:	6923      	ldr	r3, [r4, #16]
 80093fe:	b36b      	cbz	r3, 800945c <__swbuf_r+0x84>
 8009400:	6923      	ldr	r3, [r4, #16]
 8009402:	6820      	ldr	r0, [r4, #0]
 8009404:	b2f6      	uxtb	r6, r6
 8009406:	1ac0      	subs	r0, r0, r3
 8009408:	6963      	ldr	r3, [r4, #20]
 800940a:	4637      	mov	r7, r6
 800940c:	4283      	cmp	r3, r0
 800940e:	dc04      	bgt.n	800941a <__swbuf_r+0x42>
 8009410:	4621      	mov	r1, r4
 8009412:	4628      	mov	r0, r5
 8009414:	f000 f966 	bl	80096e4 <_fflush_r>
 8009418:	bb30      	cbnz	r0, 8009468 <__swbuf_r+0x90>
 800941a:	68a3      	ldr	r3, [r4, #8]
 800941c:	3001      	adds	r0, #1
 800941e:	3b01      	subs	r3, #1
 8009420:	60a3      	str	r3, [r4, #8]
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	1c5a      	adds	r2, r3, #1
 8009426:	6022      	str	r2, [r4, #0]
 8009428:	701e      	strb	r6, [r3, #0]
 800942a:	6963      	ldr	r3, [r4, #20]
 800942c:	4283      	cmp	r3, r0
 800942e:	d004      	beq.n	800943a <__swbuf_r+0x62>
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	07db      	lsls	r3, r3, #31
 8009434:	d506      	bpl.n	8009444 <__swbuf_r+0x6c>
 8009436:	2e0a      	cmp	r6, #10
 8009438:	d104      	bne.n	8009444 <__swbuf_r+0x6c>
 800943a:	4621      	mov	r1, r4
 800943c:	4628      	mov	r0, r5
 800943e:	f000 f951 	bl	80096e4 <_fflush_r>
 8009442:	b988      	cbnz	r0, 8009468 <__swbuf_r+0x90>
 8009444:	4638      	mov	r0, r7
 8009446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009448:	4b0a      	ldr	r3, [pc, #40]	; (8009474 <__swbuf_r+0x9c>)
 800944a:	429c      	cmp	r4, r3
 800944c:	d101      	bne.n	8009452 <__swbuf_r+0x7a>
 800944e:	68ac      	ldr	r4, [r5, #8]
 8009450:	e7cf      	b.n	80093f2 <__swbuf_r+0x1a>
 8009452:	4b09      	ldr	r3, [pc, #36]	; (8009478 <__swbuf_r+0xa0>)
 8009454:	429c      	cmp	r4, r3
 8009456:	bf08      	it	eq
 8009458:	68ec      	ldreq	r4, [r5, #12]
 800945a:	e7ca      	b.n	80093f2 <__swbuf_r+0x1a>
 800945c:	4621      	mov	r1, r4
 800945e:	4628      	mov	r0, r5
 8009460:	f000 f81e 	bl	80094a0 <__swsetup_r>
 8009464:	2800      	cmp	r0, #0
 8009466:	d0cb      	beq.n	8009400 <__swbuf_r+0x28>
 8009468:	f04f 37ff 	mov.w	r7, #4294967295
 800946c:	e7ea      	b.n	8009444 <__swbuf_r+0x6c>
 800946e:	bf00      	nop
 8009470:	0800a4ec 	.word	0x0800a4ec
 8009474:	0800a50c 	.word	0x0800a50c
 8009478:	0800a4cc 	.word	0x0800a4cc

0800947c <_write_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	4604      	mov	r4, r0
 8009480:	4608      	mov	r0, r1
 8009482:	4611      	mov	r1, r2
 8009484:	2200      	movs	r2, #0
 8009486:	4d05      	ldr	r5, [pc, #20]	; (800949c <_write_r+0x20>)
 8009488:	602a      	str	r2, [r5, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	f7f8 fa4a 	bl	8001924 <_write>
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	d102      	bne.n	800949a <_write_r+0x1e>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	b103      	cbz	r3, 800949a <_write_r+0x1e>
 8009498:	6023      	str	r3, [r4, #0]
 800949a:	bd38      	pop	{r3, r4, r5, pc}
 800949c:	20004638 	.word	0x20004638

080094a0 <__swsetup_r>:
 80094a0:	4b32      	ldr	r3, [pc, #200]	; (800956c <__swsetup_r+0xcc>)
 80094a2:	b570      	push	{r4, r5, r6, lr}
 80094a4:	681d      	ldr	r5, [r3, #0]
 80094a6:	4606      	mov	r6, r0
 80094a8:	460c      	mov	r4, r1
 80094aa:	b125      	cbz	r5, 80094b6 <__swsetup_r+0x16>
 80094ac:	69ab      	ldr	r3, [r5, #24]
 80094ae:	b913      	cbnz	r3, 80094b6 <__swsetup_r+0x16>
 80094b0:	4628      	mov	r0, r5
 80094b2:	f7ff f83b 	bl	800852c <__sinit>
 80094b6:	4b2e      	ldr	r3, [pc, #184]	; (8009570 <__swsetup_r+0xd0>)
 80094b8:	429c      	cmp	r4, r3
 80094ba:	d10f      	bne.n	80094dc <__swsetup_r+0x3c>
 80094bc:	686c      	ldr	r4, [r5, #4]
 80094be:	89a3      	ldrh	r3, [r4, #12]
 80094c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094c4:	0719      	lsls	r1, r3, #28
 80094c6:	d42c      	bmi.n	8009522 <__swsetup_r+0x82>
 80094c8:	06dd      	lsls	r5, r3, #27
 80094ca:	d411      	bmi.n	80094f0 <__swsetup_r+0x50>
 80094cc:	2309      	movs	r3, #9
 80094ce:	6033      	str	r3, [r6, #0]
 80094d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094d4:	f04f 30ff 	mov.w	r0, #4294967295
 80094d8:	81a3      	strh	r3, [r4, #12]
 80094da:	e03e      	b.n	800955a <__swsetup_r+0xba>
 80094dc:	4b25      	ldr	r3, [pc, #148]	; (8009574 <__swsetup_r+0xd4>)
 80094de:	429c      	cmp	r4, r3
 80094e0:	d101      	bne.n	80094e6 <__swsetup_r+0x46>
 80094e2:	68ac      	ldr	r4, [r5, #8]
 80094e4:	e7eb      	b.n	80094be <__swsetup_r+0x1e>
 80094e6:	4b24      	ldr	r3, [pc, #144]	; (8009578 <__swsetup_r+0xd8>)
 80094e8:	429c      	cmp	r4, r3
 80094ea:	bf08      	it	eq
 80094ec:	68ec      	ldreq	r4, [r5, #12]
 80094ee:	e7e6      	b.n	80094be <__swsetup_r+0x1e>
 80094f0:	0758      	lsls	r0, r3, #29
 80094f2:	d512      	bpl.n	800951a <__swsetup_r+0x7a>
 80094f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094f6:	b141      	cbz	r1, 800950a <__swsetup_r+0x6a>
 80094f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094fc:	4299      	cmp	r1, r3
 80094fe:	d002      	beq.n	8009506 <__swsetup_r+0x66>
 8009500:	4630      	mov	r0, r6
 8009502:	f7fd fbe1 	bl	8006cc8 <_free_r>
 8009506:	2300      	movs	r3, #0
 8009508:	6363      	str	r3, [r4, #52]	; 0x34
 800950a:	89a3      	ldrh	r3, [r4, #12]
 800950c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009510:	81a3      	strh	r3, [r4, #12]
 8009512:	2300      	movs	r3, #0
 8009514:	6063      	str	r3, [r4, #4]
 8009516:	6923      	ldr	r3, [r4, #16]
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	89a3      	ldrh	r3, [r4, #12]
 800951c:	f043 0308 	orr.w	r3, r3, #8
 8009520:	81a3      	strh	r3, [r4, #12]
 8009522:	6923      	ldr	r3, [r4, #16]
 8009524:	b94b      	cbnz	r3, 800953a <__swsetup_r+0x9a>
 8009526:	89a3      	ldrh	r3, [r4, #12]
 8009528:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800952c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009530:	d003      	beq.n	800953a <__swsetup_r+0x9a>
 8009532:	4621      	mov	r1, r4
 8009534:	4630      	mov	r0, r6
 8009536:	f000 f959 	bl	80097ec <__smakebuf_r>
 800953a:	89a0      	ldrh	r0, [r4, #12]
 800953c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009540:	f010 0301 	ands.w	r3, r0, #1
 8009544:	d00a      	beq.n	800955c <__swsetup_r+0xbc>
 8009546:	2300      	movs	r3, #0
 8009548:	60a3      	str	r3, [r4, #8]
 800954a:	6963      	ldr	r3, [r4, #20]
 800954c:	425b      	negs	r3, r3
 800954e:	61a3      	str	r3, [r4, #24]
 8009550:	6923      	ldr	r3, [r4, #16]
 8009552:	b943      	cbnz	r3, 8009566 <__swsetup_r+0xc6>
 8009554:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009558:	d1ba      	bne.n	80094d0 <__swsetup_r+0x30>
 800955a:	bd70      	pop	{r4, r5, r6, pc}
 800955c:	0781      	lsls	r1, r0, #30
 800955e:	bf58      	it	pl
 8009560:	6963      	ldrpl	r3, [r4, #20]
 8009562:	60a3      	str	r3, [r4, #8]
 8009564:	e7f4      	b.n	8009550 <__swsetup_r+0xb0>
 8009566:	2000      	movs	r0, #0
 8009568:	e7f7      	b.n	800955a <__swsetup_r+0xba>
 800956a:	bf00      	nop
 800956c:	20000034 	.word	0x20000034
 8009570:	0800a4ec 	.word	0x0800a4ec
 8009574:	0800a50c 	.word	0x0800a50c
 8009578:	0800a4cc 	.word	0x0800a4cc

0800957c <__assert_func>:
 800957c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800957e:	4614      	mov	r4, r2
 8009580:	461a      	mov	r2, r3
 8009582:	4b09      	ldr	r3, [pc, #36]	; (80095a8 <__assert_func+0x2c>)
 8009584:	4605      	mov	r5, r0
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68d8      	ldr	r0, [r3, #12]
 800958a:	b14c      	cbz	r4, 80095a0 <__assert_func+0x24>
 800958c:	4b07      	ldr	r3, [pc, #28]	; (80095ac <__assert_func+0x30>)
 800958e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009592:	9100      	str	r1, [sp, #0]
 8009594:	462b      	mov	r3, r5
 8009596:	4906      	ldr	r1, [pc, #24]	; (80095b0 <__assert_func+0x34>)
 8009598:	f000 f8e0 	bl	800975c <fiprintf>
 800959c:	f000 f9d7 	bl	800994e <abort>
 80095a0:	4b04      	ldr	r3, [pc, #16]	; (80095b4 <__assert_func+0x38>)
 80095a2:	461c      	mov	r4, r3
 80095a4:	e7f3      	b.n	800958e <__assert_func+0x12>
 80095a6:	bf00      	nop
 80095a8:	20000034 	.word	0x20000034
 80095ac:	0800a69d 	.word	0x0800a69d
 80095b0:	0800a6aa 	.word	0x0800a6aa
 80095b4:	0800a6d8 	.word	0x0800a6d8

080095b8 <_close_r>:
 80095b8:	b538      	push	{r3, r4, r5, lr}
 80095ba:	2300      	movs	r3, #0
 80095bc:	4d05      	ldr	r5, [pc, #20]	; (80095d4 <_close_r+0x1c>)
 80095be:	4604      	mov	r4, r0
 80095c0:	4608      	mov	r0, r1
 80095c2:	602b      	str	r3, [r5, #0]
 80095c4:	f7f9 fd8c 	bl	80030e0 <_close>
 80095c8:	1c43      	adds	r3, r0, #1
 80095ca:	d102      	bne.n	80095d2 <_close_r+0x1a>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	b103      	cbz	r3, 80095d2 <_close_r+0x1a>
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	bd38      	pop	{r3, r4, r5, pc}
 80095d4:	20004638 	.word	0x20004638

080095d8 <__sflush_r>:
 80095d8:	898a      	ldrh	r2, [r1, #12]
 80095da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095de:	4605      	mov	r5, r0
 80095e0:	0710      	lsls	r0, r2, #28
 80095e2:	460c      	mov	r4, r1
 80095e4:	d458      	bmi.n	8009698 <__sflush_r+0xc0>
 80095e6:	684b      	ldr	r3, [r1, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	dc05      	bgt.n	80095f8 <__sflush_r+0x20>
 80095ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	dc02      	bgt.n	80095f8 <__sflush_r+0x20>
 80095f2:	2000      	movs	r0, #0
 80095f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095fa:	2e00      	cmp	r6, #0
 80095fc:	d0f9      	beq.n	80095f2 <__sflush_r+0x1a>
 80095fe:	2300      	movs	r3, #0
 8009600:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009604:	682f      	ldr	r7, [r5, #0]
 8009606:	602b      	str	r3, [r5, #0]
 8009608:	d032      	beq.n	8009670 <__sflush_r+0x98>
 800960a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800960c:	89a3      	ldrh	r3, [r4, #12]
 800960e:	075a      	lsls	r2, r3, #29
 8009610:	d505      	bpl.n	800961e <__sflush_r+0x46>
 8009612:	6863      	ldr	r3, [r4, #4]
 8009614:	1ac0      	subs	r0, r0, r3
 8009616:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009618:	b10b      	cbz	r3, 800961e <__sflush_r+0x46>
 800961a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800961c:	1ac0      	subs	r0, r0, r3
 800961e:	2300      	movs	r3, #0
 8009620:	4602      	mov	r2, r0
 8009622:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009624:	4628      	mov	r0, r5
 8009626:	6a21      	ldr	r1, [r4, #32]
 8009628:	47b0      	blx	r6
 800962a:	1c43      	adds	r3, r0, #1
 800962c:	89a3      	ldrh	r3, [r4, #12]
 800962e:	d106      	bne.n	800963e <__sflush_r+0x66>
 8009630:	6829      	ldr	r1, [r5, #0]
 8009632:	291d      	cmp	r1, #29
 8009634:	d82c      	bhi.n	8009690 <__sflush_r+0xb8>
 8009636:	4a2a      	ldr	r2, [pc, #168]	; (80096e0 <__sflush_r+0x108>)
 8009638:	40ca      	lsrs	r2, r1
 800963a:	07d6      	lsls	r6, r2, #31
 800963c:	d528      	bpl.n	8009690 <__sflush_r+0xb8>
 800963e:	2200      	movs	r2, #0
 8009640:	6062      	str	r2, [r4, #4]
 8009642:	6922      	ldr	r2, [r4, #16]
 8009644:	04d9      	lsls	r1, r3, #19
 8009646:	6022      	str	r2, [r4, #0]
 8009648:	d504      	bpl.n	8009654 <__sflush_r+0x7c>
 800964a:	1c42      	adds	r2, r0, #1
 800964c:	d101      	bne.n	8009652 <__sflush_r+0x7a>
 800964e:	682b      	ldr	r3, [r5, #0]
 8009650:	b903      	cbnz	r3, 8009654 <__sflush_r+0x7c>
 8009652:	6560      	str	r0, [r4, #84]	; 0x54
 8009654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009656:	602f      	str	r7, [r5, #0]
 8009658:	2900      	cmp	r1, #0
 800965a:	d0ca      	beq.n	80095f2 <__sflush_r+0x1a>
 800965c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009660:	4299      	cmp	r1, r3
 8009662:	d002      	beq.n	800966a <__sflush_r+0x92>
 8009664:	4628      	mov	r0, r5
 8009666:	f7fd fb2f 	bl	8006cc8 <_free_r>
 800966a:	2000      	movs	r0, #0
 800966c:	6360      	str	r0, [r4, #52]	; 0x34
 800966e:	e7c1      	b.n	80095f4 <__sflush_r+0x1c>
 8009670:	6a21      	ldr	r1, [r4, #32]
 8009672:	2301      	movs	r3, #1
 8009674:	4628      	mov	r0, r5
 8009676:	47b0      	blx	r6
 8009678:	1c41      	adds	r1, r0, #1
 800967a:	d1c7      	bne.n	800960c <__sflush_r+0x34>
 800967c:	682b      	ldr	r3, [r5, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d0c4      	beq.n	800960c <__sflush_r+0x34>
 8009682:	2b1d      	cmp	r3, #29
 8009684:	d001      	beq.n	800968a <__sflush_r+0xb2>
 8009686:	2b16      	cmp	r3, #22
 8009688:	d101      	bne.n	800968e <__sflush_r+0xb6>
 800968a:	602f      	str	r7, [r5, #0]
 800968c:	e7b1      	b.n	80095f2 <__sflush_r+0x1a>
 800968e:	89a3      	ldrh	r3, [r4, #12]
 8009690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009694:	81a3      	strh	r3, [r4, #12]
 8009696:	e7ad      	b.n	80095f4 <__sflush_r+0x1c>
 8009698:	690f      	ldr	r7, [r1, #16]
 800969a:	2f00      	cmp	r7, #0
 800969c:	d0a9      	beq.n	80095f2 <__sflush_r+0x1a>
 800969e:	0793      	lsls	r3, r2, #30
 80096a0:	bf18      	it	ne
 80096a2:	2300      	movne	r3, #0
 80096a4:	680e      	ldr	r6, [r1, #0]
 80096a6:	bf08      	it	eq
 80096a8:	694b      	ldreq	r3, [r1, #20]
 80096aa:	eba6 0807 	sub.w	r8, r6, r7
 80096ae:	600f      	str	r7, [r1, #0]
 80096b0:	608b      	str	r3, [r1, #8]
 80096b2:	f1b8 0f00 	cmp.w	r8, #0
 80096b6:	dd9c      	ble.n	80095f2 <__sflush_r+0x1a>
 80096b8:	4643      	mov	r3, r8
 80096ba:	463a      	mov	r2, r7
 80096bc:	4628      	mov	r0, r5
 80096be:	6a21      	ldr	r1, [r4, #32]
 80096c0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096c2:	47b0      	blx	r6
 80096c4:	2800      	cmp	r0, #0
 80096c6:	dc06      	bgt.n	80096d6 <__sflush_r+0xfe>
 80096c8:	89a3      	ldrh	r3, [r4, #12]
 80096ca:	f04f 30ff 	mov.w	r0, #4294967295
 80096ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096d2:	81a3      	strh	r3, [r4, #12]
 80096d4:	e78e      	b.n	80095f4 <__sflush_r+0x1c>
 80096d6:	4407      	add	r7, r0
 80096d8:	eba8 0800 	sub.w	r8, r8, r0
 80096dc:	e7e9      	b.n	80096b2 <__sflush_r+0xda>
 80096de:	bf00      	nop
 80096e0:	20400001 	.word	0x20400001

080096e4 <_fflush_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	690b      	ldr	r3, [r1, #16]
 80096e8:	4605      	mov	r5, r0
 80096ea:	460c      	mov	r4, r1
 80096ec:	b913      	cbnz	r3, 80096f4 <_fflush_r+0x10>
 80096ee:	2500      	movs	r5, #0
 80096f0:	4628      	mov	r0, r5
 80096f2:	bd38      	pop	{r3, r4, r5, pc}
 80096f4:	b118      	cbz	r0, 80096fe <_fflush_r+0x1a>
 80096f6:	6983      	ldr	r3, [r0, #24]
 80096f8:	b90b      	cbnz	r3, 80096fe <_fflush_r+0x1a>
 80096fa:	f7fe ff17 	bl	800852c <__sinit>
 80096fe:	4b14      	ldr	r3, [pc, #80]	; (8009750 <_fflush_r+0x6c>)
 8009700:	429c      	cmp	r4, r3
 8009702:	d11b      	bne.n	800973c <_fflush_r+0x58>
 8009704:	686c      	ldr	r4, [r5, #4]
 8009706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d0ef      	beq.n	80096ee <_fflush_r+0xa>
 800970e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009710:	07d0      	lsls	r0, r2, #31
 8009712:	d404      	bmi.n	800971e <_fflush_r+0x3a>
 8009714:	0599      	lsls	r1, r3, #22
 8009716:	d402      	bmi.n	800971e <_fflush_r+0x3a>
 8009718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800971a:	f7fe ffaa 	bl	8008672 <__retarget_lock_acquire_recursive>
 800971e:	4628      	mov	r0, r5
 8009720:	4621      	mov	r1, r4
 8009722:	f7ff ff59 	bl	80095d8 <__sflush_r>
 8009726:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009728:	4605      	mov	r5, r0
 800972a:	07da      	lsls	r2, r3, #31
 800972c:	d4e0      	bmi.n	80096f0 <_fflush_r+0xc>
 800972e:	89a3      	ldrh	r3, [r4, #12]
 8009730:	059b      	lsls	r3, r3, #22
 8009732:	d4dd      	bmi.n	80096f0 <_fflush_r+0xc>
 8009734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009736:	f7fe ff9d 	bl	8008674 <__retarget_lock_release_recursive>
 800973a:	e7d9      	b.n	80096f0 <_fflush_r+0xc>
 800973c:	4b05      	ldr	r3, [pc, #20]	; (8009754 <_fflush_r+0x70>)
 800973e:	429c      	cmp	r4, r3
 8009740:	d101      	bne.n	8009746 <_fflush_r+0x62>
 8009742:	68ac      	ldr	r4, [r5, #8]
 8009744:	e7df      	b.n	8009706 <_fflush_r+0x22>
 8009746:	4b04      	ldr	r3, [pc, #16]	; (8009758 <_fflush_r+0x74>)
 8009748:	429c      	cmp	r4, r3
 800974a:	bf08      	it	eq
 800974c:	68ec      	ldreq	r4, [r5, #12]
 800974e:	e7da      	b.n	8009706 <_fflush_r+0x22>
 8009750:	0800a4ec 	.word	0x0800a4ec
 8009754:	0800a50c 	.word	0x0800a50c
 8009758:	0800a4cc 	.word	0x0800a4cc

0800975c <fiprintf>:
 800975c:	b40e      	push	{r1, r2, r3}
 800975e:	b503      	push	{r0, r1, lr}
 8009760:	4601      	mov	r1, r0
 8009762:	ab03      	add	r3, sp, #12
 8009764:	4805      	ldr	r0, [pc, #20]	; (800977c <fiprintf+0x20>)
 8009766:	f853 2b04 	ldr.w	r2, [r3], #4
 800976a:	6800      	ldr	r0, [r0, #0]
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	f7ff fcbf 	bl	80090f0 <_vfiprintf_r>
 8009772:	b002      	add	sp, #8
 8009774:	f85d eb04 	ldr.w	lr, [sp], #4
 8009778:	b003      	add	sp, #12
 800977a:	4770      	bx	lr
 800977c:	20000034 	.word	0x20000034

08009780 <_lseek_r>:
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	4604      	mov	r4, r0
 8009784:	4608      	mov	r0, r1
 8009786:	4611      	mov	r1, r2
 8009788:	2200      	movs	r2, #0
 800978a:	4d05      	ldr	r5, [pc, #20]	; (80097a0 <_lseek_r+0x20>)
 800978c:	602a      	str	r2, [r5, #0]
 800978e:	461a      	mov	r2, r3
 8009790:	f7f9 fcca 	bl	8003128 <_lseek>
 8009794:	1c43      	adds	r3, r0, #1
 8009796:	d102      	bne.n	800979e <_lseek_r+0x1e>
 8009798:	682b      	ldr	r3, [r5, #0]
 800979a:	b103      	cbz	r3, 800979e <_lseek_r+0x1e>
 800979c:	6023      	str	r3, [r4, #0]
 800979e:	bd38      	pop	{r3, r4, r5, pc}
 80097a0:	20004638 	.word	0x20004638

080097a4 <__swhatbuf_r>:
 80097a4:	b570      	push	{r4, r5, r6, lr}
 80097a6:	460e      	mov	r6, r1
 80097a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ac:	4614      	mov	r4, r2
 80097ae:	2900      	cmp	r1, #0
 80097b0:	461d      	mov	r5, r3
 80097b2:	b096      	sub	sp, #88	; 0x58
 80097b4:	da07      	bge.n	80097c6 <__swhatbuf_r+0x22>
 80097b6:	2300      	movs	r3, #0
 80097b8:	602b      	str	r3, [r5, #0]
 80097ba:	89b3      	ldrh	r3, [r6, #12]
 80097bc:	061a      	lsls	r2, r3, #24
 80097be:	d410      	bmi.n	80097e2 <__swhatbuf_r+0x3e>
 80097c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097c4:	e00e      	b.n	80097e4 <__swhatbuf_r+0x40>
 80097c6:	466a      	mov	r2, sp
 80097c8:	f000 f8c8 	bl	800995c <_fstat_r>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	dbf2      	blt.n	80097b6 <__swhatbuf_r+0x12>
 80097d0:	9a01      	ldr	r2, [sp, #4]
 80097d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80097da:	425a      	negs	r2, r3
 80097dc:	415a      	adcs	r2, r3
 80097de:	602a      	str	r2, [r5, #0]
 80097e0:	e7ee      	b.n	80097c0 <__swhatbuf_r+0x1c>
 80097e2:	2340      	movs	r3, #64	; 0x40
 80097e4:	2000      	movs	r0, #0
 80097e6:	6023      	str	r3, [r4, #0]
 80097e8:	b016      	add	sp, #88	; 0x58
 80097ea:	bd70      	pop	{r4, r5, r6, pc}

080097ec <__smakebuf_r>:
 80097ec:	898b      	ldrh	r3, [r1, #12]
 80097ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097f0:	079d      	lsls	r5, r3, #30
 80097f2:	4606      	mov	r6, r0
 80097f4:	460c      	mov	r4, r1
 80097f6:	d507      	bpl.n	8009808 <__smakebuf_r+0x1c>
 80097f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097fc:	6023      	str	r3, [r4, #0]
 80097fe:	6123      	str	r3, [r4, #16]
 8009800:	2301      	movs	r3, #1
 8009802:	6163      	str	r3, [r4, #20]
 8009804:	b002      	add	sp, #8
 8009806:	bd70      	pop	{r4, r5, r6, pc}
 8009808:	466a      	mov	r2, sp
 800980a:	ab01      	add	r3, sp, #4
 800980c:	f7ff ffca 	bl	80097a4 <__swhatbuf_r>
 8009810:	9900      	ldr	r1, [sp, #0]
 8009812:	4605      	mov	r5, r0
 8009814:	4630      	mov	r0, r6
 8009816:	f7fd faa3 	bl	8006d60 <_malloc_r>
 800981a:	b948      	cbnz	r0, 8009830 <__smakebuf_r+0x44>
 800981c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009820:	059a      	lsls	r2, r3, #22
 8009822:	d4ef      	bmi.n	8009804 <__smakebuf_r+0x18>
 8009824:	f023 0303 	bic.w	r3, r3, #3
 8009828:	f043 0302 	orr.w	r3, r3, #2
 800982c:	81a3      	strh	r3, [r4, #12]
 800982e:	e7e3      	b.n	80097f8 <__smakebuf_r+0xc>
 8009830:	4b0d      	ldr	r3, [pc, #52]	; (8009868 <__smakebuf_r+0x7c>)
 8009832:	62b3      	str	r3, [r6, #40]	; 0x28
 8009834:	89a3      	ldrh	r3, [r4, #12]
 8009836:	6020      	str	r0, [r4, #0]
 8009838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800983c:	81a3      	strh	r3, [r4, #12]
 800983e:	9b00      	ldr	r3, [sp, #0]
 8009840:	6120      	str	r0, [r4, #16]
 8009842:	6163      	str	r3, [r4, #20]
 8009844:	9b01      	ldr	r3, [sp, #4]
 8009846:	b15b      	cbz	r3, 8009860 <__smakebuf_r+0x74>
 8009848:	4630      	mov	r0, r6
 800984a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800984e:	f000 f897 	bl	8009980 <_isatty_r>
 8009852:	b128      	cbz	r0, 8009860 <__smakebuf_r+0x74>
 8009854:	89a3      	ldrh	r3, [r4, #12]
 8009856:	f023 0303 	bic.w	r3, r3, #3
 800985a:	f043 0301 	orr.w	r3, r3, #1
 800985e:	81a3      	strh	r3, [r4, #12]
 8009860:	89a0      	ldrh	r0, [r4, #12]
 8009862:	4305      	orrs	r5, r0
 8009864:	81a5      	strh	r5, [r4, #12]
 8009866:	e7cd      	b.n	8009804 <__smakebuf_r+0x18>
 8009868:	080084c5 	.word	0x080084c5

0800986c <__ascii_mbtowc>:
 800986c:	b082      	sub	sp, #8
 800986e:	b901      	cbnz	r1, 8009872 <__ascii_mbtowc+0x6>
 8009870:	a901      	add	r1, sp, #4
 8009872:	b142      	cbz	r2, 8009886 <__ascii_mbtowc+0x1a>
 8009874:	b14b      	cbz	r3, 800988a <__ascii_mbtowc+0x1e>
 8009876:	7813      	ldrb	r3, [r2, #0]
 8009878:	600b      	str	r3, [r1, #0]
 800987a:	7812      	ldrb	r2, [r2, #0]
 800987c:	1e10      	subs	r0, r2, #0
 800987e:	bf18      	it	ne
 8009880:	2001      	movne	r0, #1
 8009882:	b002      	add	sp, #8
 8009884:	4770      	bx	lr
 8009886:	4610      	mov	r0, r2
 8009888:	e7fb      	b.n	8009882 <__ascii_mbtowc+0x16>
 800988a:	f06f 0001 	mvn.w	r0, #1
 800988e:	e7f8      	b.n	8009882 <__ascii_mbtowc+0x16>

08009890 <memmove>:
 8009890:	4288      	cmp	r0, r1
 8009892:	b510      	push	{r4, lr}
 8009894:	eb01 0402 	add.w	r4, r1, r2
 8009898:	d902      	bls.n	80098a0 <memmove+0x10>
 800989a:	4284      	cmp	r4, r0
 800989c:	4623      	mov	r3, r4
 800989e:	d807      	bhi.n	80098b0 <memmove+0x20>
 80098a0:	1e43      	subs	r3, r0, #1
 80098a2:	42a1      	cmp	r1, r4
 80098a4:	d008      	beq.n	80098b8 <memmove+0x28>
 80098a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098ae:	e7f8      	b.n	80098a2 <memmove+0x12>
 80098b0:	4601      	mov	r1, r0
 80098b2:	4402      	add	r2, r0
 80098b4:	428a      	cmp	r2, r1
 80098b6:	d100      	bne.n	80098ba <memmove+0x2a>
 80098b8:	bd10      	pop	{r4, pc}
 80098ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098c2:	e7f7      	b.n	80098b4 <memmove+0x24>

080098c4 <_realloc_r>:
 80098c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c6:	4607      	mov	r7, r0
 80098c8:	4614      	mov	r4, r2
 80098ca:	460e      	mov	r6, r1
 80098cc:	b921      	cbnz	r1, 80098d8 <_realloc_r+0x14>
 80098ce:	4611      	mov	r1, r2
 80098d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80098d4:	f7fd ba44 	b.w	8006d60 <_malloc_r>
 80098d8:	b922      	cbnz	r2, 80098e4 <_realloc_r+0x20>
 80098da:	f7fd f9f5 	bl	8006cc8 <_free_r>
 80098de:	4625      	mov	r5, r4
 80098e0:	4628      	mov	r0, r5
 80098e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098e4:	f000 f85c 	bl	80099a0 <_malloc_usable_size_r>
 80098e8:	42a0      	cmp	r0, r4
 80098ea:	d20f      	bcs.n	800990c <_realloc_r+0x48>
 80098ec:	4621      	mov	r1, r4
 80098ee:	4638      	mov	r0, r7
 80098f0:	f7fd fa36 	bl	8006d60 <_malloc_r>
 80098f4:	4605      	mov	r5, r0
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d0f2      	beq.n	80098e0 <_realloc_r+0x1c>
 80098fa:	4631      	mov	r1, r6
 80098fc:	4622      	mov	r2, r4
 80098fe:	f7fe fec8 	bl	8008692 <memcpy>
 8009902:	4631      	mov	r1, r6
 8009904:	4638      	mov	r0, r7
 8009906:	f7fd f9df 	bl	8006cc8 <_free_r>
 800990a:	e7e9      	b.n	80098e0 <_realloc_r+0x1c>
 800990c:	4635      	mov	r5, r6
 800990e:	e7e7      	b.n	80098e0 <_realloc_r+0x1c>

08009910 <_read_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	4604      	mov	r4, r0
 8009914:	4608      	mov	r0, r1
 8009916:	4611      	mov	r1, r2
 8009918:	2200      	movs	r2, #0
 800991a:	4d05      	ldr	r5, [pc, #20]	; (8009930 <_read_r+0x20>)
 800991c:	602a      	str	r2, [r5, #0]
 800991e:	461a      	mov	r2, r3
 8009920:	f7f9 fbc1 	bl	80030a6 <_read>
 8009924:	1c43      	adds	r3, r0, #1
 8009926:	d102      	bne.n	800992e <_read_r+0x1e>
 8009928:	682b      	ldr	r3, [r5, #0]
 800992a:	b103      	cbz	r3, 800992e <_read_r+0x1e>
 800992c:	6023      	str	r3, [r4, #0]
 800992e:	bd38      	pop	{r3, r4, r5, pc}
 8009930:	20004638 	.word	0x20004638

08009934 <__ascii_wctomb>:
 8009934:	4603      	mov	r3, r0
 8009936:	4608      	mov	r0, r1
 8009938:	b141      	cbz	r1, 800994c <__ascii_wctomb+0x18>
 800993a:	2aff      	cmp	r2, #255	; 0xff
 800993c:	d904      	bls.n	8009948 <__ascii_wctomb+0x14>
 800993e:	228a      	movs	r2, #138	; 0x8a
 8009940:	f04f 30ff 	mov.w	r0, #4294967295
 8009944:	601a      	str	r2, [r3, #0]
 8009946:	4770      	bx	lr
 8009948:	2001      	movs	r0, #1
 800994a:	700a      	strb	r2, [r1, #0]
 800994c:	4770      	bx	lr

0800994e <abort>:
 800994e:	2006      	movs	r0, #6
 8009950:	b508      	push	{r3, lr}
 8009952:	f000 f855 	bl	8009a00 <raise>
 8009956:	2001      	movs	r0, #1
 8009958:	f7f9 fb9b 	bl	8003092 <_exit>

0800995c <_fstat_r>:
 800995c:	b538      	push	{r3, r4, r5, lr}
 800995e:	2300      	movs	r3, #0
 8009960:	4d06      	ldr	r5, [pc, #24]	; (800997c <_fstat_r+0x20>)
 8009962:	4604      	mov	r4, r0
 8009964:	4608      	mov	r0, r1
 8009966:	4611      	mov	r1, r2
 8009968:	602b      	str	r3, [r5, #0]
 800996a:	f7f9 fbc4 	bl	80030f6 <_fstat>
 800996e:	1c43      	adds	r3, r0, #1
 8009970:	d102      	bne.n	8009978 <_fstat_r+0x1c>
 8009972:	682b      	ldr	r3, [r5, #0]
 8009974:	b103      	cbz	r3, 8009978 <_fstat_r+0x1c>
 8009976:	6023      	str	r3, [r4, #0]
 8009978:	bd38      	pop	{r3, r4, r5, pc}
 800997a:	bf00      	nop
 800997c:	20004638 	.word	0x20004638

08009980 <_isatty_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	2300      	movs	r3, #0
 8009984:	4d05      	ldr	r5, [pc, #20]	; (800999c <_isatty_r+0x1c>)
 8009986:	4604      	mov	r4, r0
 8009988:	4608      	mov	r0, r1
 800998a:	602b      	str	r3, [r5, #0]
 800998c:	f7f9 fbc2 	bl	8003114 <_isatty>
 8009990:	1c43      	adds	r3, r0, #1
 8009992:	d102      	bne.n	800999a <_isatty_r+0x1a>
 8009994:	682b      	ldr	r3, [r5, #0]
 8009996:	b103      	cbz	r3, 800999a <_isatty_r+0x1a>
 8009998:	6023      	str	r3, [r4, #0]
 800999a:	bd38      	pop	{r3, r4, r5, pc}
 800999c:	20004638 	.word	0x20004638

080099a0 <_malloc_usable_size_r>:
 80099a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099a4:	1f18      	subs	r0, r3, #4
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	bfbc      	itt	lt
 80099aa:	580b      	ldrlt	r3, [r1, r0]
 80099ac:	18c0      	addlt	r0, r0, r3
 80099ae:	4770      	bx	lr

080099b0 <_raise_r>:
 80099b0:	291f      	cmp	r1, #31
 80099b2:	b538      	push	{r3, r4, r5, lr}
 80099b4:	4604      	mov	r4, r0
 80099b6:	460d      	mov	r5, r1
 80099b8:	d904      	bls.n	80099c4 <_raise_r+0x14>
 80099ba:	2316      	movs	r3, #22
 80099bc:	6003      	str	r3, [r0, #0]
 80099be:	f04f 30ff 	mov.w	r0, #4294967295
 80099c2:	bd38      	pop	{r3, r4, r5, pc}
 80099c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80099c6:	b112      	cbz	r2, 80099ce <_raise_r+0x1e>
 80099c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099cc:	b94b      	cbnz	r3, 80099e2 <_raise_r+0x32>
 80099ce:	4620      	mov	r0, r4
 80099d0:	f000 f830 	bl	8009a34 <_getpid_r>
 80099d4:	462a      	mov	r2, r5
 80099d6:	4601      	mov	r1, r0
 80099d8:	4620      	mov	r0, r4
 80099da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099de:	f000 b817 	b.w	8009a10 <_kill_r>
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d00a      	beq.n	80099fc <_raise_r+0x4c>
 80099e6:	1c59      	adds	r1, r3, #1
 80099e8:	d103      	bne.n	80099f2 <_raise_r+0x42>
 80099ea:	2316      	movs	r3, #22
 80099ec:	6003      	str	r3, [r0, #0]
 80099ee:	2001      	movs	r0, #1
 80099f0:	e7e7      	b.n	80099c2 <_raise_r+0x12>
 80099f2:	2400      	movs	r4, #0
 80099f4:	4628      	mov	r0, r5
 80099f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80099fa:	4798      	blx	r3
 80099fc:	2000      	movs	r0, #0
 80099fe:	e7e0      	b.n	80099c2 <_raise_r+0x12>

08009a00 <raise>:
 8009a00:	4b02      	ldr	r3, [pc, #8]	; (8009a0c <raise+0xc>)
 8009a02:	4601      	mov	r1, r0
 8009a04:	6818      	ldr	r0, [r3, #0]
 8009a06:	f7ff bfd3 	b.w	80099b0 <_raise_r>
 8009a0a:	bf00      	nop
 8009a0c:	20000034 	.word	0x20000034

08009a10 <_kill_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	2300      	movs	r3, #0
 8009a14:	4d06      	ldr	r5, [pc, #24]	; (8009a30 <_kill_r+0x20>)
 8009a16:	4604      	mov	r4, r0
 8009a18:	4608      	mov	r0, r1
 8009a1a:	4611      	mov	r1, r2
 8009a1c:	602b      	str	r3, [r5, #0]
 8009a1e:	f7f9 fb28 	bl	8003072 <_kill>
 8009a22:	1c43      	adds	r3, r0, #1
 8009a24:	d102      	bne.n	8009a2c <_kill_r+0x1c>
 8009a26:	682b      	ldr	r3, [r5, #0]
 8009a28:	b103      	cbz	r3, 8009a2c <_kill_r+0x1c>
 8009a2a:	6023      	str	r3, [r4, #0]
 8009a2c:	bd38      	pop	{r3, r4, r5, pc}
 8009a2e:	bf00      	nop
 8009a30:	20004638 	.word	0x20004638

08009a34 <_getpid_r>:
 8009a34:	f7f9 bb16 	b.w	8003064 <_getpid>

08009a38 <_init>:
 8009a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3a:	bf00      	nop
 8009a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a3e:	bc08      	pop	{r3}
 8009a40:	469e      	mov	lr, r3
 8009a42:	4770      	bx	lr

08009a44 <_fini>:
 8009a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a46:	bf00      	nop
 8009a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a4a:	bc08      	pop	{r3}
 8009a4c:	469e      	mov	lr, r3
 8009a4e:	4770      	bx	lr
