
power_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a80  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003c64  08003c64  00013c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc8  08003cc8  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08003cc8  08003cc8  00013cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cd0  08003cd0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cd0  08003cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cd4  08003cd4  00013cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  20000020  08003cf8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  08003cf8  000205d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e7f  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b2e  00000000  00000000  00036ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  000399f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  0003aa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002127f  00000000  00000000  0003b9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014552  00000000  00000000  0005cc77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbdc1  00000000  00000000  000711c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012cf8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004524  00000000  00000000  0012cfe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000020 	.word	0x20000020
 8000200:	00000000 	.word	0x00000000
 8000204:	08003c4c 	.word	0x08003c4c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000024 	.word	0x20000024
 8000220:	08003c4c 	.word	0x08003c4c

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b96e 	b.w	8000518 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	468e      	mov	lr, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	f040 8083 	bne.w	800036c <__udivmoddi4+0x118>
 8000266:	428a      	cmp	r2, r1
 8000268:	4617      	mov	r7, r2
 800026a:	d947      	bls.n	80002fc <__udivmoddi4+0xa8>
 800026c:	fab2 f382 	clz	r3, r2
 8000270:	b14b      	cbz	r3, 8000286 <__udivmoddi4+0x32>
 8000272:	f1c3 0120 	rsb	r1, r3, #32
 8000276:	fa05 fe03 	lsl.w	lr, r5, r3
 800027a:	fa20 f101 	lsr.w	r1, r0, r1
 800027e:	409f      	lsls	r7, r3
 8000280:	ea41 0e0e 	orr.w	lr, r1, lr
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800028a:	fbbe fcf8 	udiv	ip, lr, r8
 800028e:	fa1f f987 	uxth.w	r9, r7
 8000292:	fb08 e21c 	mls	r2, r8, ip, lr
 8000296:	fb0c f009 	mul.w	r0, ip, r9
 800029a:	0c21      	lsrs	r1, r4, #16
 800029c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	18ba      	adds	r2, r7, r2
 80002a6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80002aa:	f080 8118 	bcs.w	80004de <__udivmoddi4+0x28a>
 80002ae:	4290      	cmp	r0, r2
 80002b0:	f240 8115 	bls.w	80004de <__udivmoddi4+0x28a>
 80002b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80002b8:	443a      	add	r2, r7
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	fbb2 f0f8 	udiv	r0, r2, r8
 80002c0:	fb08 2210 	mls	r2, r8, r0, r2
 80002c4:	fb00 f109 	mul.w	r1, r0, r9
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	42a1      	cmp	r1, r4
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0x92>
 80002d2:	193c      	adds	r4, r7, r4
 80002d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d8:	f080 8103 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002dc:	42a1      	cmp	r1, r4
 80002de:	f240 8100 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002e2:	3802      	subs	r0, #2
 80002e4:	443c      	add	r4, r7
 80002e6:	1a64      	subs	r4, r4, r1
 80002e8:	2100      	movs	r1, #0
 80002ea:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa4>
 80002f0:	2200      	movs	r2, #0
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	e9c6 4200 	strd	r4, r2, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xac>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f382 	clz	r3, r2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d14f      	bne.n	80003a8 <__udivmoddi4+0x154>
 8000308:	1a8d      	subs	r5, r1, r2
 800030a:	2101      	movs	r1, #1
 800030c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000310:	fa1f f882 	uxth.w	r8, r2
 8000314:	fbb5 fcfe 	udiv	ip, r5, lr
 8000318:	fb0e 551c 	mls	r5, lr, ip, r5
 800031c:	fb08 f00c 	mul.w	r0, r8, ip
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000326:	42a8      	cmp	r0, r5
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0xe6>
 800032a:	197d      	adds	r5, r7, r5
 800032c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0xe4>
 8000332:	42a8      	cmp	r0, r5
 8000334:	f200 80e9 	bhi.w	800050a <__udivmoddi4+0x2b6>
 8000338:	4694      	mov	ip, r2
 800033a:	1a2d      	subs	r5, r5, r0
 800033c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000340:	fb0e 5510 	mls	r5, lr, r0, r5
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	b2a4      	uxth	r4, r4
 800034a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034e:	45a0      	cmp	r8, r4
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x10e>
 8000352:	193c      	adds	r4, r7, r4
 8000354:	f100 32ff 	add.w	r2, r0, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x10c>
 800035a:	45a0      	cmp	r8, r4
 800035c:	f200 80d9 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000360:	4610      	mov	r0, r2
 8000362:	eba4 0408 	sub.w	r4, r4, r8
 8000366:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036a:	e7c0      	b.n	80002ee <__udivmoddi4+0x9a>
 800036c:	428b      	cmp	r3, r1
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x12e>
 8000370:	2e00      	cmp	r6, #0
 8000372:	f000 80b1 	beq.w	80004d8 <__udivmoddi4+0x284>
 8000376:	2100      	movs	r1, #0
 8000378:	e9c6 0500 	strd	r0, r5, [r6]
 800037c:	4608      	mov	r0, r1
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f183 	clz	r1, r3
 8000386:	2900      	cmp	r1, #0
 8000388:	d14b      	bne.n	8000422 <__udivmoddi4+0x1ce>
 800038a:	42ab      	cmp	r3, r5
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0x140>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80b9 	bhi.w	8000506 <__udivmoddi4+0x2b2>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb65 0303 	sbc.w	r3, r5, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d0aa      	beq.n	80002f8 <__udivmoddi4+0xa4>
 80003a2:	e9c6 4e00 	strd	r4, lr, [r6]
 80003a6:	e7a7      	b.n	80002f8 <__udivmoddi4+0xa4>
 80003a8:	409f      	lsls	r7, r3
 80003aa:	f1c3 0220 	rsb	r2, r3, #32
 80003ae:	40d1      	lsrs	r1, r2
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	fa24 f202 	lsr.w	r2, r4, r2
 80003c4:	409d      	lsls	r5, r3
 80003c6:	fb00 fc08 	mul.w	ip, r0, r8
 80003ca:	432a      	orrs	r2, r5
 80003cc:	0c15      	lsrs	r5, r2, #16
 80003ce:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80003d2:	45ac      	cmp	ip, r5
 80003d4:	fa04 f403 	lsl.w	r4, r4, r3
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x19a>
 80003da:	197d      	adds	r5, r7, r5
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	f080 808f 	bcs.w	8000502 <__udivmoddi4+0x2ae>
 80003e4:	45ac      	cmp	ip, r5
 80003e6:	f240 808c 	bls.w	8000502 <__udivmoddi4+0x2ae>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	eba5 050c 	sub.w	r5, r5, ip
 80003f2:	fbb5 f1fe 	udiv	r1, r5, lr
 80003f6:	fb0e 5c11 	mls	ip, lr, r1, r5
 80003fa:	fb01 f908 	mul.w	r9, r1, r8
 80003fe:	b295      	uxth	r5, r2
 8000400:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000404:	45a9      	cmp	r9, r5
 8000406:	d907      	bls.n	8000418 <__udivmoddi4+0x1c4>
 8000408:	197d      	adds	r5, r7, r5
 800040a:	f101 32ff 	add.w	r2, r1, #4294967295
 800040e:	d274      	bcs.n	80004fa <__udivmoddi4+0x2a6>
 8000410:	45a9      	cmp	r9, r5
 8000412:	d972      	bls.n	80004fa <__udivmoddi4+0x2a6>
 8000414:	3902      	subs	r1, #2
 8000416:	443d      	add	r5, r7
 8000418:	eba5 0509 	sub.w	r5, r5, r9
 800041c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000420:	e778      	b.n	8000314 <__udivmoddi4+0xc0>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	408b      	lsls	r3, r1
 8000428:	fa22 fc07 	lsr.w	ip, r2, r7
 800042c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000430:	fa25 f407 	lsr.w	r4, r5, r7
 8000434:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000438:	fbb4 f9fe 	udiv	r9, r4, lr
 800043c:	fa1f f88c 	uxth.w	r8, ip
 8000440:	fb0e 4419 	mls	r4, lr, r9, r4
 8000444:	fa20 f307 	lsr.w	r3, r0, r7
 8000448:	fb09 fa08 	mul.w	sl, r9, r8
 800044c:	408d      	lsls	r5, r1
 800044e:	431d      	orrs	r5, r3
 8000450:	0c2b      	lsrs	r3, r5, #16
 8000452:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000456:	45a2      	cmp	sl, r4
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 f301 	lsl.w	r3, r0, r1
 8000460:	d909      	bls.n	8000476 <__udivmoddi4+0x222>
 8000462:	eb1c 0404 	adds.w	r4, ip, r4
 8000466:	f109 30ff 	add.w	r0, r9, #4294967295
 800046a:	d248      	bcs.n	80004fe <__udivmoddi4+0x2aa>
 800046c:	45a2      	cmp	sl, r4
 800046e:	d946      	bls.n	80004fe <__udivmoddi4+0x2aa>
 8000470:	f1a9 0902 	sub.w	r9, r9, #2
 8000474:	4464      	add	r4, ip
 8000476:	eba4 040a 	sub.w	r4, r4, sl
 800047a:	fbb4 f0fe 	udiv	r0, r4, lr
 800047e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000482:	fb00 fa08 	mul.w	sl, r0, r8
 8000486:	b2ad      	uxth	r5, r5
 8000488:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800048c:	45a2      	cmp	sl, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x24e>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d22d      	bcs.n	80004f6 <__udivmoddi4+0x2a2>
 800049a:	45a2      	cmp	sl, r4
 800049c:	d92b      	bls.n	80004f6 <__udivmoddi4+0x2a2>
 800049e:	3802      	subs	r0, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	eba4 040a 	sub.w	r4, r4, sl
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d319      	bcc.n	80004ea <__udivmoddi4+0x296>
 80004b6:	d016      	beq.n	80004e6 <__udivmoddi4+0x292>
 80004b8:	b15e      	cbz	r6, 80004d2 <__udivmoddi4+0x27e>
 80004ba:	ebb3 020e 	subs.w	r2, r3, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ca:	431f      	orrs	r7, r3
 80004cc:	40cc      	lsrs	r4, r1
 80004ce:	e9c6 7400 	strd	r7, r4, [r6]
 80004d2:	2100      	movs	r1, #0
 80004d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e70c      	b.n	80002f8 <__udivmoddi4+0xa4>
 80004de:	468c      	mov	ip, r1
 80004e0:	e6eb      	b.n	80002ba <__udivmoddi4+0x66>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6ff      	b.n	80002e6 <__udivmoddi4+0x92>
 80004e6:	4543      	cmp	r3, r8
 80004e8:	d2e6      	bcs.n	80004b8 <__udivmoddi4+0x264>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb69 050c 	sbc.w	r5, r9, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7e0      	b.n	80004b8 <__udivmoddi4+0x264>
 80004f6:	4628      	mov	r0, r5
 80004f8:	e7d3      	b.n	80004a2 <__udivmoddi4+0x24e>
 80004fa:	4611      	mov	r1, r2
 80004fc:	e78c      	b.n	8000418 <__udivmoddi4+0x1c4>
 80004fe:	4681      	mov	r9, r0
 8000500:	e7b9      	b.n	8000476 <__udivmoddi4+0x222>
 8000502:	4608      	mov	r0, r1
 8000504:	e773      	b.n	80003ee <__udivmoddi4+0x19a>
 8000506:	4608      	mov	r0, r1
 8000508:	e749      	b.n	800039e <__udivmoddi4+0x14a>
 800050a:	f1ac 0c02 	sub.w	ip, ip, #2
 800050e:	443d      	add	r5, r7
 8000510:	e713      	b.n	800033a <__udivmoddi4+0xe6>
 8000512:	3802      	subs	r0, #2
 8000514:	443c      	add	r4, r7
 8000516:	e724      	b.n	8000362 <__udivmoddi4+0x10e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 fded 	bl	8001100 <HAL_Init>

  /* USER CODE BEGIN Init */
  time.led_fast_blink = false;
 8000526:	4b25      	ldr	r3, [pc, #148]	; (80005bc <main+0xa0>)
 8000528:	2200      	movs	r2, #0
 800052a:	719a      	strb	r2, [r3, #6]
  time.flag_10ms_tick = false;
 800052c:	4b23      	ldr	r3, [pc, #140]	; (80005bc <main+0xa0>)
 800052e:	2200      	movs	r2, #0
 8000530:	70da      	strb	r2, [r3, #3]
  time.flag_100ms_tick = false;
 8000532:	4b22      	ldr	r3, [pc, #136]	; (80005bc <main+0xa0>)
 8000534:	2200      	movs	r2, #0
 8000536:	711a      	strb	r2, [r3, #4]
  time.flag_500ms_tick = false;
 8000538:	4b20      	ldr	r3, [pc, #128]	; (80005bc <main+0xa0>)
 800053a:	2200      	movs	r2, #0
 800053c:	715a      	strb	r2, [r3, #5]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f845 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f000 f9db 	bl	80008fc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000546:	f000 f8a5 	bl	8000694 <MX_ADC1_Init>
  MX_I2C2_Init();
 800054a:	f000 f8e1 	bl	8000710 <MX_I2C2_Init>
  MX_FATFS_Init();
 800054e:	f003 fa95 	bl	8003a7c <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000552:	f000 f9a9 	bl	80008a8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000556:	f000 f909 	bl	800076c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  print_string("Chip Reset.",LF);
 800055a:	2101      	movs	r1, #1
 800055c:	4818      	ldr	r0, [pc, #96]	; (80005c0 <main+0xa4>)
 800055e:	f000 fd71 	bl	8001044 <print_string>
  // display_oled_drawBitmap((oled.screen_width - BITMAP_WIDTH) / 2, (oled.screen_height - BITMAP_HEIGHT) / 2,
  //             oled.splash_screen_data, oled.splash_screen_width, oled.splash_screen_height, 1);


  display_oled_drawBitmap(
    (oled.screen_width  - LOGO_WIDTH ) / 2,
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <main+0xa8>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	3b10      	subs	r3, #16
 8000568:	0fda      	lsrs	r2, r3, #31
 800056a:	4413      	add	r3, r2
 800056c:	105b      	asrs	r3, r3, #1
  display_oled_drawBitmap(
 800056e:	b218      	sxth	r0, r3
    (oled.screen_height - LOGO_HEIGHT) / 2,
 8000570:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <main+0xa8>)
 8000572:	785b      	ldrb	r3, [r3, #1]
 8000574:	3b10      	subs	r3, #16
 8000576:	0fda      	lsrs	r2, r3, #31
 8000578:	4413      	add	r3, r2
 800057a:	105b      	asrs	r3, r3, #1
  display_oled_drawBitmap(
 800057c:	b219      	sxth	r1, r3
 800057e:	2301      	movs	r3, #1
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2310      	movs	r3, #16
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2310      	movs	r3, #16
 8000588:	4a0f      	ldr	r2, [pc, #60]	; (80005c8 <main+0xac>)
 800058a:	f000 fa86 	bl	8000a9a <display_oled_drawBitmap>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    
    if(time.flag_10ms_tick) {
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <main+0xa0>)
 8000590:	78db      	ldrb	r3, [r3, #3]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d002      	beq.n	800059c <main+0x80>
      time.flag_10ms_tick = false;
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <main+0xa0>)
 8000598:	2200      	movs	r2, #0
 800059a:	70da      	strb	r2, [r3, #3]
      // capture_accel_data();  // TODO remove this line?
    }

    if(time.flag_100ms_tick) {
 800059c:	4b07      	ldr	r3, [pc, #28]	; (80005bc <main+0xa0>)
 800059e:	791b      	ldrb	r3, [r3, #4]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d002      	beq.n	80005aa <main+0x8e>
      time.flag_100ms_tick = false;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <main+0xa0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	711a      	strb	r2, [r3, #4]
    }

    if(time.flag_500ms_tick) {
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <main+0xa0>)
 80005ac:	795b      	ldrb	r3, [r3, #5]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0ed      	beq.n	800058e <main+0x72>
      time.flag_500ms_tick = false;
 80005b2:	4b02      	ldr	r3, [pc, #8]	; (80005bc <main+0xa0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	715a      	strb	r2, [r3, #5]
    if(time.flag_10ms_tick) {
 80005b8:	e7e9      	b.n	800058e <main+0x72>
 80005ba:	bf00      	nop
 80005bc:	20000160 	.word	0x20000160
 80005c0:	08003c64 	.word	0x08003c64
 80005c4:	20000048 	.word	0x20000048
 80005c8:	08003c90 	.word	0x08003c90

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b09c      	sub	sp, #112	; 0x70
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005d6:	2238      	movs	r2, #56	; 0x38
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 fb2e 	bl	8003c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2220      	movs	r2, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fb20 	bl	8003c3c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000604:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060a:	2301      	movs	r3, #1
 800060c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800060e:	2300      	movs	r3, #0
 8000610:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800061c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000620:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000622:	2300      	movs	r3, #0
 8000624:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800062a:	4618      	mov	r0, r3
 800062c:	f001 fbe4 	bl	8001df8 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000636:	f000 fa2b 	bl	8000a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000654:	2102      	movs	r1, #2
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fee4 	bl	8002424 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000662:	f000 fa15 	bl	8000a90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000666:	2302      	movs	r3, #2
 8000668:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800066a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800066e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f002 f8cc 	bl	8002810 <HAL_RCCEx_PeriphCLKConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800067e:	f000 fa07 	bl	8000a90 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000682:	4b03      	ldr	r3, [pc, #12]	; (8000690 <SystemClock_Config+0xc4>)
 8000684:	2201      	movs	r2, #1
 8000686:	601a      	str	r2, [r3, #0]
}
 8000688:	bf00      	nop
 800068a:	3770      	adds	r7, #112	; 0x70
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	42420070 	.word	0x42420070

08000694 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_ADC1_Init+0x74>)
 80006a6:	4a19      	ldr	r2, [pc, #100]	; (800070c <MX_ADC1_Init+0x78>)
 80006a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_ADC1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_ADC1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_ADC1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_ADC1_Init+0x74>)
 80006be:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80006c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c4:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_ADC1_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_ADC1_Init+0x74>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d0:	480d      	ldr	r0, [pc, #52]	; (8000708 <MX_ADC1_Init+0x74>)
 80006d2:	f000 fd77 	bl	80011c4 <HAL_ADC_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80006dc:	f000 f9d8 	bl	8000a90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006e0:	230a      	movs	r3, #10
 80006e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_ADC1_Init+0x74>)
 80006f2:	f000 fe3f 	bl	8001374 <HAL_ADC_ConfigChannel>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80006fc:	f000 f9c8 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000a4 	.word	0x200000a4
 800070c:	40012400 	.word	0x40012400

08000710 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_I2C2_Init+0x50>)
 8000716:	4a13      	ldr	r2, [pc, #76]	; (8000764 <MX_I2C2_Init+0x54>)
 8000718:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_I2C2_Init+0x50>)
 800071c:	4a12      	ldr	r2, [pc, #72]	; (8000768 <MX_I2C2_Init+0x58>)
 800071e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_I2C2_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_I2C2_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_I2C2_Init+0x50>)
 800072e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000732:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_I2C2_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_I2C2_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_I2C2_Init+0x50>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_I2C2_Init+0x50>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_I2C2_Init+0x50>)
 800074e:	f001 fa0f 	bl	8001b70 <HAL_I2C_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000758:	f000 f99a 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000050 	.word	0x20000050
 8000764:	40005800 	.word	0x40005800
 8000768:	000186a0 	.word	0x000186a0

0800076c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b096      	sub	sp, #88	; 0x58
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000772:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000780:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
 800079a:	615a      	str	r2, [r3, #20]
 800079c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2220      	movs	r2, #32
 80007a2:	2100      	movs	r1, #0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f003 fa49 	bl	8003c3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007aa:	4b3d      	ldr	r3, [pc, #244]	; (80008a0 <MX_TIM1_Init+0x134>)
 80007ac:	4a3d      	ldr	r2, [pc, #244]	; (80008a4 <MX_TIM1_Init+0x138>)
 80007ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 80007b0:	4b3b      	ldr	r3, [pc, #236]	; (80008a0 <MX_TIM1_Init+0x134>)
 80007b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b8:	4b39      	ldr	r3, [pc, #228]	; (80008a0 <MX_TIM1_Init+0x134>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 720;
 80007be:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <MX_TIM1_Init+0x134>)
 80007c0:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80007c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c6:	4b36      	ldr	r3, [pc, #216]	; (80008a0 <MX_TIM1_Init+0x134>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007cc:	4b34      	ldr	r3, [pc, #208]	; (80008a0 <MX_TIM1_Init+0x134>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d2:	4b33      	ldr	r3, [pc, #204]	; (80008a0 <MX_TIM1_Init+0x134>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d8:	4831      	ldr	r0, [pc, #196]	; (80008a0 <MX_TIM1_Init+0x134>)
 80007da:	f002 f94b 	bl	8002a74 <HAL_TIM_Base_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007e4:	f000 f954 	bl	8000a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007f2:	4619      	mov	r1, r3
 80007f4:	482a      	ldr	r0, [pc, #168]	; (80008a0 <MX_TIM1_Init+0x134>)
 80007f6:	f002 fb45 	bl	8002e84 <HAL_TIM_ConfigClockSource>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000800:	f000 f946 	bl	8000a90 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000804:	4826      	ldr	r0, [pc, #152]	; (80008a0 <MX_TIM1_Init+0x134>)
 8000806:	f002 f984 	bl	8002b12 <HAL_TIM_OC_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000810:	f000 f93e 	bl	8000a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800081c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000820:	4619      	mov	r1, r3
 8000822:	481f      	ldr	r0, [pc, #124]	; (80008a0 <MX_TIM1_Init+0x134>)
 8000824:	f002 feaa 	bl	800357c <HAL_TIMEx_MasterConfigSynchronization>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800082e:	f000 f92f 	bl	8000a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083a:	2300      	movs	r3, #0
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800083e:	2300      	movs	r3, #0
 8000840:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	2200      	movs	r2, #0
 8000854:	4619      	mov	r1, r3
 8000856:	4812      	ldr	r0, [pc, #72]	; (80008a0 <MX_TIM1_Init+0x134>)
 8000858:	f002 fabc 	bl	8002dd4 <HAL_TIM_OC_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000862:	f000 f915 	bl	8000a90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800087a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_TIM1_Init+0x134>)
 800088a:	f002 fedd 	bl	8003648 <HAL_TIMEx_ConfigBreakDeadTime>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000894:	f000 f8fc 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3758      	adds	r7, #88	; 0x58
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000118 	.word	0x20000118
 80008a4:	40012c00 	.word	0x40012c00

080008a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <MX_USART1_UART_Init+0x50>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008e0:	f002 ff15 	bl	800370e <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ea:	f000 f8d1 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000d4 	.word	0x200000d4
 80008f8:	40013800 	.word	0x40013800

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 0318 	add.w	r3, r7, #24
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000910:	4b59      	ldr	r3, [pc, #356]	; (8000a78 <MX_GPIO_Init+0x17c>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a58      	ldr	r2, [pc, #352]	; (8000a78 <MX_GPIO_Init+0x17c>)
 8000916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b56      	ldr	r3, [pc, #344]	; (8000a78 <MX_GPIO_Init+0x17c>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000928:	4b53      	ldr	r3, [pc, #332]	; (8000a78 <MX_GPIO_Init+0x17c>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a52      	ldr	r2, [pc, #328]	; (8000a78 <MX_GPIO_Init+0x17c>)
 800092e:	f043 0308 	orr.w	r3, r3, #8
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b50      	ldr	r3, [pc, #320]	; (8000a78 <MX_GPIO_Init+0x17c>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f003 0308 	and.w	r3, r3, #8
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000940:	4b4d      	ldr	r3, [pc, #308]	; (8000a78 <MX_GPIO_Init+0x17c>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a4c      	ldr	r2, [pc, #304]	; (8000a78 <MX_GPIO_Init+0x17c>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b4a      	ldr	r3, [pc, #296]	; (8000a78 <MX_GPIO_Init+0x17c>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0304 	and.w	r3, r3, #4
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000958:	4b47      	ldr	r3, [pc, #284]	; (8000a78 <MX_GPIO_Init+0x17c>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a46      	ldr	r2, [pc, #280]	; (8000a78 <MX_GPIO_Init+0x17c>)
 800095e:	f043 0310 	orr.w	r3, r3, #16
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b44      	ldr	r3, [pc, #272]	; (8000a78 <MX_GPIO_Init+0x17c>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0310 	and.w	r3, r3, #16
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000970:	4b41      	ldr	r3, [pc, #260]	; (8000a78 <MX_GPIO_Init+0x17c>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a40      	ldr	r2, [pc, #256]	; (8000a78 <MX_GPIO_Init+0x17c>)
 8000976:	f043 0320 	orr.w	r3, r3, #32
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b3e      	ldr	r3, [pc, #248]	; (8000a78 <MX_GPIO_Init+0x17c>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0320 	and.w	r3, r3, #32
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_DUT_PWR_Pin|HLTH_LED_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2106      	movs	r1, #6
 800098c:	483b      	ldr	r0, [pc, #236]	; (8000a7c <MX_GPIO_Init+0x180>)
 800098e:	f001 f8bd 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SWO_GPIO_Port, SWO_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000998:	4839      	ldr	r0, [pc, #228]	; (8000a80 <MX_GPIO_Init+0x184>)
 800099a:	f001 f8b7 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EN_DUT_PWR_Pin */
  GPIO_InitStruct.Pin = EN_DUT_PWR_Pin;
 800099e:	2304      	movs	r3, #4
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2302      	movs	r3, #2
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EN_DUT_PWR_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 0318 	add.w	r3, r7, #24
 80009b2:	4619      	mov	r1, r3
 80009b4:	4831      	ldr	r0, [pc, #196]	; (8000a7c <MX_GPIO_Init+0x180>)
 80009b6:	f000 ff25 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWO_Pin */
  GPIO_InitStruct.Pin = SWO_Pin;
 80009ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2302      	movs	r3, #2
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SWO_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 0318 	add.w	r3, r7, #24
 80009d0:	4619      	mov	r1, r3
 80009d2:	482b      	ldr	r0, [pc, #172]	; (8000a80 <MX_GPIO_Init+0x184>)
 80009d4:	f000 ff16 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : HLTH_LED_Pin */
  GPIO_InitStruct.Pin = HLTH_LED_Pin;
 80009d8:	2302      	movs	r3, #2
 80009da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009dc:	2311      	movs	r3, #17
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2302      	movs	r3, #2
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HLTH_LED_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 0318 	add.w	r3, r7, #24
 80009ec:	4619      	mov	r1, r3
 80009ee:	4823      	ldr	r0, [pc, #140]	; (8000a7c <MX_GPIO_Init+0x180>)
 80009f0:	f000 ff08 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1_ACTIVE_Pin */
  GPIO_InitStruct.Pin = PB1_ACTIVE_Pin;
 80009f4:	2301      	movs	r3, #1
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PB1_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 0318 	add.w	r3, r7, #24
 8000a04:	4619      	mov	r1, r3
 8000a06:	481d      	ldr	r0, [pc, #116]	; (8000a7c <MX_GPIO_Init+0x180>)
 8000a08:	f000 fefc 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_SPI1_CSn_Pin ADC_SPI1_CLK_Pin ADC_SPI1_MISO_Pin ADC_SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = ADC_SPI1_CSn_Pin|ADC_SPI1_CLK_Pin|ADC_SPI1_MISO_Pin|ADC_SPI1_MOSI_Pin;
 8000a0c:	23f0      	movs	r3, #240	; 0xf0
 8000a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0318 	add.w	r3, r7, #24
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4819      	ldr	r0, [pc, #100]	; (8000a84 <MX_GPIO_Init+0x188>)
 8000a20:	f000 fef0 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SPI2_MOSI_Pin SD_SPI2_MISO_Pin SD_SPI2_CLK_Pin SD_SPI2_CSn_Pin */
  GPIO_InitStruct.Pin = SD_SPI2_MOSI_Pin|SD_SPI2_MISO_Pin|SD_SPI2_CLK_Pin|SD_SPI2_CSn_Pin;
 8000a24:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 0318 	add.w	r3, r7, #24
 8000a36:	4619      	mov	r1, r3
 8000a38:	4811      	ldr	r0, [pc, #68]	; (8000a80 <MX_GPIO_Init+0x184>)
 8000a3a:	f000 fee3 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : REV_2_Pin REV_1_Pin REV_0_Pin */
  GPIO_InitStruct.Pin = REV_2_Pin|REV_1_Pin|REV_0_Pin;
 8000a3e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4c:	f107 0318 	add.w	r3, r7, #24
 8000a50:	4619      	mov	r1, r3
 8000a52:	480d      	ldr	r0, [pc, #52]	; (8000a88 <MX_GPIO_Init+0x18c>)
 8000a54:	f000 fed6 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_ALRTn_Pin */
  GPIO_InitStruct.Pin = ADC_ALRTn_Pin;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_GPIO_Init+0x190>)
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADC_ALRTn_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4806      	ldr	r0, [pc, #24]	; (8000a84 <MX_GPIO_Init+0x188>)
 8000a6c:	f000 feca 	bl	8001804 <HAL_GPIO_Init>

}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	; 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40011800 	.word	0x40011800
 8000a80:	40010c00 	.word	0x40010c00
 8000a84:	40010800 	.word	0x40010800
 8000a88:	40011400 	.word	0x40011400
 8000a8c:	10210000 	.word	0x10210000

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>

08000a9a <display_oled_drawBitmap>:
void clearDisplay(void) {
    memset(oled.screen_buffer, 0, oled.screen_width * ((oled.screen_height + 7) / 8));
}

void display_oled_drawBitmap(int16_t x, int16_t y, const uint8_t bitmap[],
                              int16_t w, int16_t h, uint16_t color) {
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60ba      	str	r2, [r7, #8]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	81fb      	strh	r3, [r7, #14]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	81bb      	strh	r3, [r7, #12]
 8000aac:	4613      	mov	r3, r2
 8000aae:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab4:	3307      	adds	r3, #7
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da00      	bge.n	8000abc <display_oled_drawBitmap+0x22>
 8000aba:	3307      	adds	r3, #7
 8000abc:	10db      	asrs	r3, r3, #3
 8000abe:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	75fb      	strb	r3, [r7, #23]

    for (int16_t j = 0; j < h; j++, y++) {
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	82bb      	strh	r3, [r7, #20]
 8000ac8:	e046      	b.n	8000b58 <display_oled_drawBitmap+0xbe>
        for (int16_t i = 0; i < w; i++) {
 8000aca:	2300      	movs	r3, #0
 8000acc:	827b      	strh	r3, [r7, #18]
 8000ace:	e031      	b.n	8000b34 <display_oled_drawBitmap+0x9a>
            if (i & 7)
 8000ad0:	8a7b      	ldrh	r3, [r7, #18]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <display_oled_drawBitmap+0x48>
                byte <<= 1;
 8000ada:	7dfb      	ldrb	r3, [r7, #23]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	75fb      	strb	r3, [r7, #23]
 8000ae0:	e012      	b.n	8000b08 <display_oled_drawBitmap+0x6e>
            else
                byte = bitmap[j * byteWidth + i / 8];
 8000ae2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ae6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000aea:	fb02 f203 	mul.w	r2, r2, r3
 8000aee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	da00      	bge.n	8000af8 <display_oled_drawBitmap+0x5e>
 8000af6:	3307      	adds	r3, #7
 8000af8:	10db      	asrs	r3, r3, #3
 8000afa:	b21b      	sxth	r3, r3
 8000afc:	4413      	add	r3, r2
 8000afe:	461a      	mov	r2, r3
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	4413      	add	r3, r2
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	75fb      	strb	r3, [r7, #23]
            if (byte & 0x80)
 8000b08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	da0b      	bge.n	8000b28 <display_oled_drawBitmap+0x8e>
                drawPixel(x + i, y, color);
 8000b10:	89fa      	ldrh	r2, [r7, #14]
 8000b12:	8a7b      	ldrh	r3, [r7, #18]
 8000b14:	4413      	add	r3, r2
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	b21b      	sxth	r3, r3
 8000b1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f824 	bl	8000b70 <drawPixel>
        for (int16_t i = 0; i < w; i++) {
 8000b28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	3301      	adds	r3, #1
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	827b      	strh	r3, [r7, #18]
 8000b34:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	dbc7      	blt.n	8000ad0 <display_oled_drawBitmap+0x36>
    for (int16_t j = 0; j < h; j++, y++) {
 8000b40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	3301      	adds	r3, #1
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	82bb      	strh	r3, [r7, #20]
 8000b4c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	3301      	adds	r3, #1
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	81bb      	strh	r3, [r7, #12]
 8000b58:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000b5c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbb2      	blt.n	8000aca <display_oled_drawBitmap+0x30>
        }
    }
}
 8000b64:	bf00      	nop
 8000b66:	bf00      	nop
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <drawPixel>:


bool drawPixel(int16_t x, int16_t y, uint8_t color) {
 8000b70:	b490      	push	{r4, r7}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	80fb      	strh	r3, [r7, #6]
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	80bb      	strh	r3, [r7, #4]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	70fb      	strb	r3, [r7, #3]
    
    if ((x >= 0) && (x < oled.screen_width) && (y >= 0) && (y < oled.screen_height)) {
 8000b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f2c0 80b1 	blt.w	8000cee <drawPixel+0x17e>
 8000b8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b90:	4a5a      	ldr	r2, [pc, #360]	; (8000cfc <drawPixel+0x18c>)
 8000b92:	7812      	ldrb	r2, [r2, #0]
 8000b94:	4293      	cmp	r3, r2
 8000b96:	f280 80aa 	bge.w	8000cee <drawPixel+0x17e>
 8000b9a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f2c0 80a5 	blt.w	8000cee <drawPixel+0x17e>
 8000ba4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ba8:	4a54      	ldr	r2, [pc, #336]	; (8000cfc <drawPixel+0x18c>)
 8000baa:	7852      	ldrb	r2, [r2, #1]
 8000bac:	4293      	cmp	r3, r2
 8000bae:	f280 809e 	bge.w	8000cee <drawPixel+0x17e>
            // case 1:
            // ssd1306_swap(x, y);
            // x = oled.screen_width - x - 1;
            // break;
            // case 2:
        x = oled.screen_width - x - 1;
 8000bb2:	4b52      	ldr	r3, [pc, #328]	; (8000cfc <drawPixel+0x18c>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	80fb      	strh	r3, [r7, #6]
        y = oled.screen_height - y - 1;
 8000bc4:	4b4d      	ldr	r3, [pc, #308]	; (8000cfc <drawPixel+0x18c>)
 8000bc6:	785b      	ldrb	r3, [r3, #1]
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	88bb      	ldrh	r3, [r7, #4]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	80bb      	strh	r3, [r7, #4]
            // case 3:
            // ssd1306_swap(x, y);
            // y = oled.screen_height - y - 1;
            // break;
        
        switch (color) {
 8000bd6:	78fb      	ldrb	r3, [r7, #3]
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d05c      	beq.n	8000c96 <drawPixel+0x126>
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	f300 8084 	bgt.w	8000cea <drawPixel+0x17a>
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d02b      	beq.n	8000c3e <drawPixel+0xce>
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d17f      	bne.n	8000cea <drawPixel+0x17a>
            case SSD1306_WHITE:
                oled.screen_buffer[x + (y / 8) * oled.screen_width] |= (1 << (y & 7));
 8000bea:	4b44      	ldr	r3, [pc, #272]	; (8000cfc <drawPixel+0x18c>)
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000bf2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	da00      	bge.n	8000bfc <drawPixel+0x8c>
 8000bfa:	3307      	adds	r3, #7
 8000bfc:	10db      	asrs	r3, r3, #3
 8000bfe:	b218      	sxth	r0, r3
 8000c00:	4604      	mov	r4, r0
 8000c02:	4b3e      	ldr	r3, [pc, #248]	; (8000cfc <drawPixel+0x18c>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	fb03 f304 	mul.w	r3, r3, r4
 8000c0a:	440b      	add	r3, r1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b25a      	sxtb	r2, r3
 8000c12:	88bb      	ldrh	r3, [r7, #4]
 8000c14:	f003 0307 	and.w	r3, r3, #7
 8000c18:	2101      	movs	r1, #1
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	b25b      	sxtb	r3, r3
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b25c      	sxtb	r4, r3
 8000c24:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <drawPixel+0x18c>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000c2c:	4a33      	ldr	r2, [pc, #204]	; (8000cfc <drawPixel+0x18c>)
 8000c2e:	7812      	ldrb	r2, [r2, #0]
 8000c30:	fb02 f200 	mul.w	r2, r2, r0
 8000c34:	440a      	add	r2, r1
 8000c36:	4413      	add	r3, r2
 8000c38:	b2e2      	uxtb	r2, r4
 8000c3a:	701a      	strb	r2, [r3, #0]
            break;
 8000c3c:	e055      	b.n	8000cea <drawPixel+0x17a>
            
            case SSD1306_BLACK:
                oled.screen_buffer[x + (y / 8) * oled.screen_width] &= ~(1 << (y & 7));
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <drawPixel+0x18c>)
 8000c40:	685a      	ldr	r2, [r3, #4]
 8000c42:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000c46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	da00      	bge.n	8000c50 <drawPixel+0xe0>
 8000c4e:	3307      	adds	r3, #7
 8000c50:	10db      	asrs	r3, r3, #3
 8000c52:	b218      	sxth	r0, r3
 8000c54:	4604      	mov	r4, r0
 8000c56:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <drawPixel+0x18c>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	fb03 f304 	mul.w	r3, r3, r4
 8000c5e:	440b      	add	r3, r1
 8000c60:	4413      	add	r3, r2
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b25a      	sxtb	r2, r3
 8000c66:	88bb      	ldrh	r3, [r7, #4]
 8000c68:	f003 0307 	and.w	r3, r3, #7
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	b25b      	sxtb	r3, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	4013      	ands	r3, r2
 8000c7a:	b25c      	sxtb	r4, r3
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <drawPixel+0x18c>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000c84:	4a1d      	ldr	r2, [pc, #116]	; (8000cfc <drawPixel+0x18c>)
 8000c86:	7812      	ldrb	r2, [r2, #0]
 8000c88:	fb02 f200 	mul.w	r2, r2, r0
 8000c8c:	440a      	add	r2, r1
 8000c8e:	4413      	add	r3, r2
 8000c90:	b2e2      	uxtb	r2, r4
 8000c92:	701a      	strb	r2, [r3, #0]
            break;
 8000c94:	e029      	b.n	8000cea <drawPixel+0x17a>
            
            case SSD1306_INVERSE:
                oled.screen_buffer[x + (y / 8) * oled.screen_width] ^= (1 << (y & 7));
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <drawPixel+0x18c>)
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000c9e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	da00      	bge.n	8000ca8 <drawPixel+0x138>
 8000ca6:	3307      	adds	r3, #7
 8000ca8:	10db      	asrs	r3, r3, #3
 8000caa:	b218      	sxth	r0, r3
 8000cac:	4604      	mov	r4, r0
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <drawPixel+0x18c>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	fb03 f304 	mul.w	r3, r3, r4
 8000cb6:	440b      	add	r3, r1
 8000cb8:	4413      	add	r3, r2
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	b25a      	sxtb	r2, r3
 8000cbe:	88bb      	ldrh	r3, [r7, #4]
 8000cc0:	f003 0307 	and.w	r3, r3, #7
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	b25b      	sxtb	r3, r3
 8000ccc:	4053      	eors	r3, r2
 8000cce:	b25c      	sxtb	r4, r3
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <drawPixel+0x18c>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000cd8:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <drawPixel+0x18c>)
 8000cda:	7812      	ldrb	r2, [r2, #0]
 8000cdc:	fb02 f200 	mul.w	r2, r2, r0
 8000ce0:	440a      	add	r2, r1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b2e2      	uxtb	r2, r4
 8000ce6:	701a      	strb	r2, [r3, #0]
            break;
 8000ce8:	bf00      	nop
        }
        return true;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <drawPixel+0x180>
    }
    else {
        return false;
 8000cee:	2300      	movs	r3, #0
    }
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc90      	pop	{r4, r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000048 	.word	0x20000048

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_MspInit+0x5c>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	4a14      	ldr	r2, [pc, #80]	; (8000d5c <HAL_MspInit+0x5c>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6193      	str	r3, [r2, #24]
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_MspInit+0x5c>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_MspInit+0x5c>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_MspInit+0x5c>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d28:	61d3      	str	r3, [r2, #28]
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_MspInit+0x5c>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_MspInit+0x60>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_MspInit+0x60>)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010000 	.word	0x40010000

08000d64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <HAL_ADC_MspInit+0x6c>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d121      	bne.n	8000dc8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <HAL_ADC_MspInit+0x70>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <HAL_ADC_MspInit+0x70>)
 8000d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_ADC_MspInit+0x70>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_ADC_MspInit+0x70>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <HAL_ADC_MspInit+0x70>)
 8000da2:	f043 0310 	orr.w	r3, r3, #16
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_ADC_MspInit+0x70>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0310 	and.w	r3, r3, #16
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IN_FD_V_Pin;
 8000db4:	2301      	movs	r3, #1
 8000db6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db8:	2303      	movs	r3, #3
 8000dba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(IN_FD_V_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <HAL_ADC_MspInit+0x74>)
 8000dc4:	f000 fd1e 	bl	8001804 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dc8:	bf00      	nop
 8000dca:	3720      	adds	r7, #32
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40012400 	.word	0x40012400
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40011000 	.word	0x40011000

08000ddc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a16      	ldr	r2, [pc, #88]	; (8000e50 <HAL_I2C_MspInit+0x74>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d124      	bne.n	8000e46 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <HAL_I2C_MspInit+0x78>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <HAL_I2C_MspInit+0x78>)
 8000e02:	f043 0308 	orr.w	r3, r3, #8
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_I2C_MspInit+0x78>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = DISP_I2C2_SCL_Pin|DISP_I2C2_SDA_Pin;
 8000e14:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1a:	2312      	movs	r3, #18
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4619      	mov	r1, r3
 8000e28:	480b      	ldr	r0, [pc, #44]	; (8000e58 <HAL_I2C_MspInit+0x7c>)
 8000e2a:	f000 fceb 	bl	8001804 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <HAL_I2C_MspInit+0x78>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <HAL_I2C_MspInit+0x78>)
 8000e34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e38:	61d3      	str	r3, [r2, #28]
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_I2C_MspInit+0x78>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e46:	bf00      	nop
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40005800 	.word	0x40005800
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010c00 	.word	0x40010c00

08000e5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <HAL_TIM_Base_MspInit+0x44>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d113      	bne.n	8000e96 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <HAL_TIM_Base_MspInit+0x48>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	4a0c      	ldr	r2, [pc, #48]	; (8000ea4 <HAL_TIM_Base_MspInit+0x48>)
 8000e74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e78:	6193      	str	r3, [r2, #24]
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_TIM_Base_MspInit+0x48>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	201b      	movs	r0, #27
 8000e8c:	f000 fc83 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000e90:	201b      	movs	r0, #27
 8000e92:	f000 fc9c 	bl	80017ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40012c00 	.word	0x40012c00
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0310 	add.w	r3, r7, #16
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <HAL_UART_MspInit+0x8c>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d131      	bne.n	8000f2c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_UART_MspInit+0x90>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a1a      	ldr	r2, [pc, #104]	; (8000f38 <HAL_UART_MspInit+0x90>)
 8000ece:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed2:	6193      	str	r3, [r2, #24]
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_UART_MspInit+0x90>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_UART_MspInit+0x90>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <HAL_UART_MspInit+0x90>)
 8000ee6:	f043 0304 	orr.w	r3, r3, #4
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_UART_MspInit+0x90>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CONSOLE_TX_Pin;
 8000ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000efc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CONSOLE_TX_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 0310 	add.w	r3, r7, #16
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	480b      	ldr	r0, [pc, #44]	; (8000f3c <HAL_UART_MspInit+0x94>)
 8000f0e:	f000 fc79 	bl	8001804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CONSOLE_RXD_Pin;
 8000f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(CONSOLE_RXD_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	4619      	mov	r1, r3
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <HAL_UART_MspInit+0x94>)
 8000f28:	f000 fc6c 	bl	8001804 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40013800 	.word	0x40013800
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010800 	.word	0x40010800

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <NMI_Handler+0x4>

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <MemManage_Handler+0x4>

08000f52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr

08000f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr

08000f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f86:	f000 f901 	bl	800118c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	time.flag_10ms_tick = true;
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <TIM1_CC_IRQHandler+0x9c>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	70da      	strb	r2, [r3, #3]

		if(time.ticks10ms == 9) {
 8000f9a:	4b24      	ldr	r3, [pc, #144]	; (800102c <TIM1_CC_IRQHandler+0x9c>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b09      	cmp	r3, #9
 8000fa0:	d138      	bne.n	8001014 <TIM1_CC_IRQHandler+0x84>
		  time.ticks10ms = 0;
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <TIM1_CC_IRQHandler+0x9c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
		  time.flag_100ms_tick = true;
 8000fa8:	4b20      	ldr	r3, [pc, #128]	; (800102c <TIM1_CC_IRQHandler+0x9c>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	711a      	strb	r2, [r3, #4]
			if(time.led_fast_blink)
 8000fae:	4b1f      	ldr	r3, [pc, #124]	; (800102c <TIM1_CC_IRQHandler+0x9c>)
 8000fb0:	799b      	ldrb	r3, [r3, #6]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <TIM1_CC_IRQHandler+0x2e>
				HAL_GPIO_TogglePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin);                     // Toggle the LED if not locked and fast blink is enabled
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	481d      	ldr	r0, [pc, #116]	; (8001030 <TIM1_CC_IRQHandler+0xa0>)
 8000fba:	f000 fdbf 	bl	8001b3c <HAL_GPIO_TogglePin>
			if(time.ticks100ms == 4) {
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <TIM1_CC_IRQHandler+0x9c>)
 8000fc0:	785b      	ldrb	r3, [r3, #1]
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	d11f      	bne.n	8001006 <TIM1_CC_IRQHandler+0x76>
				time.ticks100ms = 0;
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <TIM1_CC_IRQHandler+0x9c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	705a      	strb	r2, [r3, #1]
				time.flag_500ms_tick = true;
 8000fcc:	4b17      	ldr	r3, [pc, #92]	; (800102c <TIM1_CC_IRQHandler+0x9c>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	715a      	strb	r2, [r3, #5]
				if(!time.led_fast_blink)
 8000fd2:	4b16      	ldr	r3, [pc, #88]	; (800102c <TIM1_CC_IRQHandler+0x9c>)
 8000fd4:	799b      	ldrb	r3, [r3, #6]
 8000fd6:	f083 0301 	eor.w	r3, r3, #1
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <TIM1_CC_IRQHandler+0x58>
					HAL_GPIO_TogglePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin);
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4813      	ldr	r0, [pc, #76]	; (8001030 <TIM1_CC_IRQHandler+0xa0>)
 8000fe4:	f000 fdaa 	bl	8001b3c <HAL_GPIO_TogglePin>
				if(time.ticks500ms == 119)										// One minute worth of half seconds
 8000fe8:	4b10      	ldr	r3, [pc, #64]	; (800102c <TIM1_CC_IRQHandler+0x9c>)
 8000fea:	789b      	ldrb	r3, [r3, #2]
 8000fec:	2b77      	cmp	r3, #119	; 0x77
 8000fee:	d103      	bne.n	8000ff8 <TIM1_CC_IRQHandler+0x68>
					time.ticks500ms = 0;
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <TIM1_CC_IRQHandler+0x9c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	709a      	strb	r2, [r3, #2]
 8000ff6:	e013      	b.n	8001020 <TIM1_CC_IRQHandler+0x90>
				else
					time.ticks500ms += 1;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <TIM1_CC_IRQHandler+0x9c>)
 8000ffa:	789b      	ldrb	r3, [r3, #2]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <TIM1_CC_IRQHandler+0x9c>)
 8001002:	709a      	strb	r2, [r3, #2]
 8001004:	e00c      	b.n	8001020 <TIM1_CC_IRQHandler+0x90>
			}
			else {
				 time.ticks100ms += 1;
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <TIM1_CC_IRQHandler+0x9c>)
 8001008:	785b      	ldrb	r3, [r3, #1]
 800100a:	3301      	adds	r3, #1
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <TIM1_CC_IRQHandler+0x9c>)
 8001010:	705a      	strb	r2, [r3, #1]
 8001012:	e005      	b.n	8001020 <TIM1_CC_IRQHandler+0x90>
			}
		}
		else {
			time.ticks10ms += 1;
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <TIM1_CC_IRQHandler+0x9c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	b2da      	uxtb	r2, r3
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <TIM1_CC_IRQHandler+0x9c>)
 800101e:	701a      	strb	r2, [r3, #0]
		}

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <TIM1_CC_IRQHandler+0xa4>)
 8001022:	f001 fdce 	bl	8002bc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000160 	.word	0x20000160
 8001030:	40011800 	.word	0x40011800
 8001034:	20000118 	.word	0x20000118

08001038 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <print_string>:
    else if(action == CR) {
        HAL_UART_Transmit(&huart1, (uint8_t *) '\r', (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}

void print_string(const char * s, uint8_t action) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	70fb      	strb	r3, [r7, #3]

    while(*s != '\0') {
 8001050:	e009      	b.n	8001066 <print_string+0x22>
        HAL_UART_Transmit(&huart1, (uint8_t *) s, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	2201      	movs	r2, #1
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	4815      	ldr	r0, [pc, #84]	; (80010b0 <print_string+0x6c>)
 800105c:	f002 fba4 	bl	80037a8 <HAL_UART_Transmit>
        s++;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3301      	adds	r3, #1
 8001064:	607b      	str	r3, [r7, #4]
    while(*s != '\0') {
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f1      	bne.n	8001052 <print_string+0xe>
    }

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d10e      	bne.n	8001092 <print_string+0x4e>
        HAL_UART_Transmit(&huart1,(uint8_t *) '\r', (uint16_t) 0x01, HAL_MAX_DELAY);
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
 8001078:	2201      	movs	r2, #1
 800107a:	210d      	movs	r1, #13
 800107c:	480c      	ldr	r0, [pc, #48]	; (80010b0 <print_string+0x6c>)
 800107e:	f002 fb93 	bl	80037a8 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t *) '\n', (uint16_t) 0x01, HAL_MAX_DELAY);
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	2201      	movs	r2, #1
 8001088:	210a      	movs	r1, #10
 800108a:	4809      	ldr	r0, [pc, #36]	; (80010b0 <print_string+0x6c>)
 800108c:	f002 fb8c 	bl	80037a8 <HAL_UART_Transmit>
    }
    else if(action == CR) {
        HAL_UART_Transmit(&huart1, (uint8_t *) '\r', (uint16_t) 0x01, HAL_MAX_DELAY);
    }

}
 8001090:	e009      	b.n	80010a6 <print_string+0x62>
    else if(action == CR) {
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d106      	bne.n	80010a6 <print_string+0x62>
        HAL_UART_Transmit(&huart1, (uint8_t *) '\r', (uint16_t) 0x01, HAL_MAX_DELAY);
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	2201      	movs	r2, #1
 800109e:	210d      	movs	r1, #13
 80010a0:	4803      	ldr	r0, [pc, #12]	; (80010b0 <print_string+0x6c>)
 80010a2:	f002 fb81 	bl	80037a8 <HAL_UART_Transmit>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200000d4 	.word	0x200000d4

080010b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b4:	480c      	ldr	r0, [pc, #48]	; (80010e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010b6:	490d      	ldr	r1, [pc, #52]	; (80010ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b8:	4a0d      	ldr	r2, [pc, #52]	; (80010f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010cc:	4c0a      	ldr	r4, [pc, #40]	; (80010f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010da:	f7ff ffad 	bl	8001038 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80010de:	f002 fd89 	bl	8003bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010e2:	f7ff fa1b 	bl	800051c <main>
  bx lr
 80010e6:	4770      	bx	lr
  ldr r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ec:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80010f0:	08003cd8 	.word	0x08003cd8
  ldr r2, =_sbss
 80010f4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80010f8:	200005d0 	.word	0x200005d0

080010fc <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC1_2_IRQHandler>
	...

08001100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_Init+0x28>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_Init+0x28>)
 800110a:	f043 0310 	orr.w	r3, r3, #16
 800110e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001110:	2003      	movs	r0, #3
 8001112:	f000 fb35 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001116:	2000      	movs	r0, #0
 8001118:	f000 f808 	bl	800112c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800111c:	f7ff fdf0 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40022000 	.word	0x40022000

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_InitTick+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x58>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 fb4d 	bl	80017ea <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 fb15 	bl	8001796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <HAL_InitTick+0x5c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000000 	.word	0x20000000
 8001184:	20000008 	.word	0x20000008
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <HAL_IncTick+0x1c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_IncTick+0x20>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a03      	ldr	r2, [pc, #12]	; (80011ac <HAL_IncTick+0x20>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	20000008 	.word	0x20000008
 80011ac:	20000168 	.word	0x20000168

080011b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b02      	ldr	r3, [pc, #8]	; (80011c0 <HAL_GetTick+0x10>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	20000168 	.word	0x20000168

080011c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e0be      	b.n	8001364 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d109      	bne.n	8001208 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fdae 	bl	8000d64 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 f9ab 	bl	8001564 <ADC_ConversionStop_Disable>
 800120e:	4603      	mov	r3, r0
 8001210:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	2b00      	cmp	r3, #0
 800121c:	f040 8099 	bne.w	8001352 <HAL_ADC_Init+0x18e>
 8001220:	7dfb      	ldrb	r3, [r7, #23]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f040 8095 	bne.w	8001352 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001230:	f023 0302 	bic.w	r3, r3, #2
 8001234:	f043 0202 	orr.w	r2, r3, #2
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001244:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	7b1b      	ldrb	r3, [r3, #12]
 800124a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800124c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	4313      	orrs	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800125c:	d003      	beq.n	8001266 <HAL_ADC_Init+0xa2>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d102      	bne.n	800126c <HAL_ADC_Init+0xa8>
 8001266:	f44f 7380 	mov.w	r3, #256	; 0x100
 800126a:	e000      	b.n	800126e <HAL_ADC_Init+0xaa>
 800126c:	2300      	movs	r3, #0
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7d1b      	ldrb	r3, [r3, #20]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d119      	bne.n	80012b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7b1b      	ldrb	r3, [r3, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d109      	bne.n	8001298 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	3b01      	subs	r3, #1
 800128a:	035a      	lsls	r2, r3, #13
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	e00b      	b.n	80012b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129c:	f043 0220 	orr.w	r2, r3, #32
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	4b28      	ldr	r3, [pc, #160]	; (800136c <HAL_ADC_Init+0x1a8>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6812      	ldr	r2, [r2, #0]
 80012d2:	68b9      	ldr	r1, [r7, #8]
 80012d4:	430b      	orrs	r3, r1
 80012d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012e0:	d003      	beq.n	80012ea <HAL_ADC_Init+0x126>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d104      	bne.n	80012f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	051b      	lsls	r3, r3, #20
 80012f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	430a      	orrs	r2, r1
 8001306:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <HAL_ADC_Init+0x1ac>)
 8001310:	4013      	ands	r3, r2
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	429a      	cmp	r2, r3
 8001316:	d10b      	bne.n	8001330 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001322:	f023 0303 	bic.w	r3, r3, #3
 8001326:	f043 0201 	orr.w	r2, r3, #1
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800132e:	e018      	b.n	8001362 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001334:	f023 0312 	bic.w	r3, r3, #18
 8001338:	f043 0210 	orr.w	r2, r3, #16
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	f043 0201 	orr.w	r2, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001350:	e007      	b.n	8001362 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001356:	f043 0210 	orr.w	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001362:	7dfb      	ldrb	r3, [r7, #23]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	ffe1f7fd 	.word	0xffe1f7fd
 8001370:	ff1f0efe 	.word	0xff1f0efe

08001374 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x20>
 8001390:	2302      	movs	r3, #2
 8001392:	e0dc      	b.n	800154e <HAL_ADC_ConfigChannel+0x1da>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b06      	cmp	r3, #6
 80013a2:	d81c      	bhi.n	80013de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	3b05      	subs	r3, #5
 80013b6:	221f      	movs	r2, #31
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	4019      	ands	r1, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	6818      	ldr	r0, [r3, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	3b05      	subs	r3, #5
 80013d0:	fa00 f203 	lsl.w	r2, r0, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	635a      	str	r2, [r3, #52]	; 0x34
 80013dc:	e03c      	b.n	8001458 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b0c      	cmp	r3, #12
 80013e4:	d81c      	bhi.n	8001420 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	3b23      	subs	r3, #35	; 0x23
 80013f8:	221f      	movs	r2, #31
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	4019      	ands	r1, r3
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	3b23      	subs	r3, #35	; 0x23
 8001412:	fa00 f203 	lsl.w	r2, r0, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	631a      	str	r2, [r3, #48]	; 0x30
 800141e:	e01b      	b.n	8001458 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	3b41      	subs	r3, #65	; 0x41
 8001432:	221f      	movs	r2, #31
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	4019      	ands	r1, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	3b41      	subs	r3, #65	; 0x41
 800144c:	fa00 f203 	lsl.w	r2, r0, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b09      	cmp	r3, #9
 800145e:	d91c      	bls.n	800149a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68d9      	ldr	r1, [r3, #12]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4613      	mov	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	3b1e      	subs	r3, #30
 8001472:	2207      	movs	r2, #7
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	4019      	ands	r1, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	6898      	ldr	r0, [r3, #8]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	3b1e      	subs	r3, #30
 800148c:	fa00 f203 	lsl.w	r2, r0, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	e019      	b.n	80014ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6919      	ldr	r1, [r3, #16]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	2207      	movs	r2, #7
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	4019      	ands	r1, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	6898      	ldr	r0, [r3, #8]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	fa00 f203 	lsl.w	r2, r0, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d003      	beq.n	80014de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014da:	2b11      	cmp	r3, #17
 80014dc:	d132      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <HAL_ADC_ConfigChannel+0x1e4>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d125      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d126      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001504:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b10      	cmp	r3, #16
 800150c:	d11a      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <HAL_ADC_ConfigChannel+0x1e8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a13      	ldr	r2, [pc, #76]	; (8001560 <HAL_ADC_ConfigChannel+0x1ec>)
 8001514:	fba2 2303 	umull	r2, r3, r2, r3
 8001518:	0c9a      	lsrs	r2, r3, #18
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001524:	e002      	b.n	800152c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	3b01      	subs	r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f9      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x1b2>
 8001532:	e007      	b.n	8001544 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	f043 0220 	orr.w	r2, r3, #32
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	40012400 	.word	0x40012400
 800155c:	20000000 	.word	0x20000000
 8001560:	431bde83 	.word	0x431bde83

08001564 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b01      	cmp	r3, #1
 800157c:	d12e      	bne.n	80015dc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0201 	bic.w	r2, r2, #1
 800158c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800158e:	f7ff fe0f 	bl	80011b0 <HAL_GetTick>
 8001592:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001594:	e01b      	b.n	80015ce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001596:	f7ff fe0b 	bl	80011b0 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d914      	bls.n	80015ce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d10d      	bne.n	80015ce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b6:	f043 0210 	orr.w	r2, r3, #16
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	f043 0201 	orr.w	r2, r3, #1
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e007      	b.n	80015de <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d0dc      	beq.n	8001596 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <__NVIC_GetPriorityGrouping+0x18>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 0307 	and.w	r3, r3, #7
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	2b00      	cmp	r3, #0
 800165c:	db0b      	blt.n	8001676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f003 021f 	and.w	r2, r3, #31
 8001664:	4906      	ldr	r1, [pc, #24]	; (8001680 <__NVIC_EnableIRQ+0x34>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	2001      	movs	r0, #1
 800166e:	fa00 f202 	lsl.w	r2, r0, r2
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	; (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	; (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800174c:	d301      	bcc.n	8001752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174e:	2301      	movs	r3, #1
 8001750:	e00f      	b.n	8001772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <SysTick_Config+0x40>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175a:	210f      	movs	r1, #15
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f7ff ff90 	bl	8001684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <SysTick_Config+0x40>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <SysTick_Config+0x40>)
 800176c:	2207      	movs	r2, #7
 800176e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	e000e010 	.word	0xe000e010

08001780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff2d 	bl	80015e8 <__NVIC_SetPriorityGrouping>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a8:	f7ff ff42 	bl	8001630 <__NVIC_GetPriorityGrouping>
 80017ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	6978      	ldr	r0, [r7, #20]
 80017b4:	f7ff ff90 	bl	80016d8 <NVIC_EncodePriority>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff5f 	bl	8001684 <__NVIC_SetPriority>
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff35 	bl	800164c <__NVIC_EnableIRQ>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffa2 	bl	800173c <SysTick_Config>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b480      	push	{r7}
 8001806:	b08b      	sub	sp, #44	; 0x2c
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001816:	e169      	b.n	8001aec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001818:	2201      	movs	r2, #1
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	429a      	cmp	r2, r3
 8001832:	f040 8158 	bne.w	8001ae6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4a9a      	ldr	r2, [pc, #616]	; (8001aa4 <HAL_GPIO_Init+0x2a0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d05e      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001840:	4a98      	ldr	r2, [pc, #608]	; (8001aa4 <HAL_GPIO_Init+0x2a0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d875      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 8001846:	4a98      	ldr	r2, [pc, #608]	; (8001aa8 <HAL_GPIO_Init+0x2a4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d058      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 800184c:	4a96      	ldr	r2, [pc, #600]	; (8001aa8 <HAL_GPIO_Init+0x2a4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d86f      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 8001852:	4a96      	ldr	r2, [pc, #600]	; (8001aac <HAL_GPIO_Init+0x2a8>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d052      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001858:	4a94      	ldr	r2, [pc, #592]	; (8001aac <HAL_GPIO_Init+0x2a8>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d869      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 800185e:	4a94      	ldr	r2, [pc, #592]	; (8001ab0 <HAL_GPIO_Init+0x2ac>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d04c      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001864:	4a92      	ldr	r2, [pc, #584]	; (8001ab0 <HAL_GPIO_Init+0x2ac>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d863      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 800186a:	4a92      	ldr	r2, [pc, #584]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d046      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001870:	4a90      	ldr	r2, [pc, #576]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d85d      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 8001876:	2b12      	cmp	r3, #18
 8001878:	d82a      	bhi.n	80018d0 <HAL_GPIO_Init+0xcc>
 800187a:	2b12      	cmp	r3, #18
 800187c:	d859      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 800187e:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <HAL_GPIO_Init+0x80>)
 8001880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001884:	080018ff 	.word	0x080018ff
 8001888:	080018d9 	.word	0x080018d9
 800188c:	080018eb 	.word	0x080018eb
 8001890:	0800192d 	.word	0x0800192d
 8001894:	08001933 	.word	0x08001933
 8001898:	08001933 	.word	0x08001933
 800189c:	08001933 	.word	0x08001933
 80018a0:	08001933 	.word	0x08001933
 80018a4:	08001933 	.word	0x08001933
 80018a8:	08001933 	.word	0x08001933
 80018ac:	08001933 	.word	0x08001933
 80018b0:	08001933 	.word	0x08001933
 80018b4:	08001933 	.word	0x08001933
 80018b8:	08001933 	.word	0x08001933
 80018bc:	08001933 	.word	0x08001933
 80018c0:	08001933 	.word	0x08001933
 80018c4:	08001933 	.word	0x08001933
 80018c8:	080018e1 	.word	0x080018e1
 80018cc:	080018f5 	.word	0x080018f5
 80018d0:	4a79      	ldr	r2, [pc, #484]	; (8001ab8 <HAL_GPIO_Init+0x2b4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d013      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018d6:	e02c      	b.n	8001932 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	623b      	str	r3, [r7, #32]
          break;
 80018de:	e029      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	3304      	adds	r3, #4
 80018e6:	623b      	str	r3, [r7, #32]
          break;
 80018e8:	e024      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	3308      	adds	r3, #8
 80018f0:	623b      	str	r3, [r7, #32]
          break;
 80018f2:	e01f      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	330c      	adds	r3, #12
 80018fa:	623b      	str	r3, [r7, #32]
          break;
 80018fc:	e01a      	b.n	8001934 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001906:	2304      	movs	r3, #4
 8001908:	623b      	str	r3, [r7, #32]
          break;
 800190a:	e013      	b.n	8001934 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d105      	bne.n	8001920 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001914:	2308      	movs	r3, #8
 8001916:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	611a      	str	r2, [r3, #16]
          break;
 800191e:	e009      	b.n	8001934 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001920:	2308      	movs	r3, #8
 8001922:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	615a      	str	r2, [r3, #20]
          break;
 800192a:	e003      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e000      	b.n	8001934 <HAL_GPIO_Init+0x130>
          break;
 8001932:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2bff      	cmp	r3, #255	; 0xff
 8001938:	d801      	bhi.n	800193e <HAL_GPIO_Init+0x13a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	e001      	b.n	8001942 <HAL_GPIO_Init+0x13e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3304      	adds	r3, #4
 8001942:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2bff      	cmp	r3, #255	; 0xff
 8001948:	d802      	bhi.n	8001950 <HAL_GPIO_Init+0x14c>
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	e002      	b.n	8001956 <HAL_GPIO_Init+0x152>
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	3b08      	subs	r3, #8
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	210f      	movs	r1, #15
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	401a      	ands	r2, r3
 8001968:	6a39      	ldr	r1, [r7, #32]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	431a      	orrs	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80b1 	beq.w	8001ae6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001984:	4b4d      	ldr	r3, [pc, #308]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a4c      	ldr	r2, [pc, #304]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b4a      	ldr	r3, [pc, #296]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800199c:	4a48      	ldr	r2, [pc, #288]	; (8001ac0 <HAL_GPIO_Init+0x2bc>)
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	3302      	adds	r3, #2
 80019a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	220f      	movs	r2, #15
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	4013      	ands	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a40      	ldr	r2, [pc, #256]	; (8001ac4 <HAL_GPIO_Init+0x2c0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d013      	beq.n	80019f0 <HAL_GPIO_Init+0x1ec>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a3f      	ldr	r2, [pc, #252]	; (8001ac8 <HAL_GPIO_Init+0x2c4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d00d      	beq.n	80019ec <HAL_GPIO_Init+0x1e8>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a3e      	ldr	r2, [pc, #248]	; (8001acc <HAL_GPIO_Init+0x2c8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d007      	beq.n	80019e8 <HAL_GPIO_Init+0x1e4>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a3d      	ldr	r2, [pc, #244]	; (8001ad0 <HAL_GPIO_Init+0x2cc>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d101      	bne.n	80019e4 <HAL_GPIO_Init+0x1e0>
 80019e0:	2303      	movs	r3, #3
 80019e2:	e006      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019e4:	2304      	movs	r3, #4
 80019e6:	e004      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e002      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019f0:	2300      	movs	r3, #0
 80019f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f4:	f002 0203 	and.w	r2, r2, #3
 80019f8:	0092      	lsls	r2, r2, #2
 80019fa:	4093      	lsls	r3, r2
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a02:	492f      	ldr	r1, [pc, #188]	; (8001ac0 <HAL_GPIO_Init+0x2bc>)
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	089b      	lsrs	r3, r3, #2
 8001a08:	3302      	adds	r3, #2
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	492c      	ldr	r1, [pc, #176]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	4928      	ldr	r1, [pc, #160]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	4922      	ldr	r1, [pc, #136]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	491e      	ldr	r1, [pc, #120]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	4918      	ldr	r1, [pc, #96]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	4914      	ldr	r1, [pc, #80]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d021      	beq.n	8001ad8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	490e      	ldr	r1, [pc, #56]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60cb      	str	r3, [r1, #12]
 8001aa0:	e021      	b.n	8001ae6 <HAL_GPIO_Init+0x2e2>
 8001aa2:	bf00      	nop
 8001aa4:	10320000 	.word	0x10320000
 8001aa8:	10310000 	.word	0x10310000
 8001aac:	10220000 	.word	0x10220000
 8001ab0:	10210000 	.word	0x10210000
 8001ab4:	10120000 	.word	0x10120000
 8001ab8:	10110000 	.word	0x10110000
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	40010800 	.word	0x40010800
 8001ac8:	40010c00 	.word	0x40010c00
 8001acc:	40011000 	.word	0x40011000
 8001ad0:	40011400 	.word	0x40011400
 8001ad4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	4909      	ldr	r1, [pc, #36]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	3301      	adds	r3, #1
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	fa22 f303 	lsr.w	r3, r2, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f47f ae8e 	bne.w	8001818 <HAL_GPIO_Init+0x14>
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	372c      	adds	r7, #44	; 0x2c
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	40010400 	.word	0x40010400

08001b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b1c:	787b      	ldrb	r3, [r7, #1]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b28:	e003      	b.n	8001b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b2a:	887b      	ldrh	r3, [r7, #2]
 8001b2c:	041a      	lsls	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	611a      	str	r2, [r3, #16]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b4e:	887a      	ldrh	r2, [r7, #2]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4013      	ands	r3, r2
 8001b54:	041a      	lsls	r2, r3, #16
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	43d9      	mvns	r1, r3
 8001b5a:	887b      	ldrh	r3, [r7, #2]
 8001b5c:	400b      	ands	r3, r1
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	611a      	str	r2, [r3, #16]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
	...

08001b70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e12b      	b.n	8001dda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d106      	bne.n	8001b9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff f920 	bl	8000ddc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2224      	movs	r2, #36	; 0x24
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0201 	bic.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bd4:	f000 fdd6 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8001bd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4a81      	ldr	r2, [pc, #516]	; (8001de4 <HAL_I2C_Init+0x274>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d807      	bhi.n	8001bf4 <HAL_I2C_Init+0x84>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4a80      	ldr	r2, [pc, #512]	; (8001de8 <HAL_I2C_Init+0x278>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	bf94      	ite	ls
 8001bec:	2301      	movls	r3, #1
 8001bee:	2300      	movhi	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	e006      	b.n	8001c02 <HAL_I2C_Init+0x92>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4a7d      	ldr	r2, [pc, #500]	; (8001dec <HAL_I2C_Init+0x27c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	bf94      	ite	ls
 8001bfc:	2301      	movls	r3, #1
 8001bfe:	2300      	movhi	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e0e7      	b.n	8001dda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4a78      	ldr	r2, [pc, #480]	; (8001df0 <HAL_I2C_Init+0x280>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	0c9b      	lsrs	r3, r3, #18
 8001c14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4a6a      	ldr	r2, [pc, #424]	; (8001de4 <HAL_I2C_Init+0x274>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d802      	bhi.n	8001c44 <HAL_I2C_Init+0xd4>
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3301      	adds	r3, #1
 8001c42:	e009      	b.n	8001c58 <HAL_I2C_Init+0xe8>
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	4a69      	ldr	r2, [pc, #420]	; (8001df4 <HAL_I2C_Init+0x284>)
 8001c50:	fba2 2303 	umull	r2, r3, r2, r3
 8001c54:	099b      	lsrs	r3, r3, #6
 8001c56:	3301      	adds	r3, #1
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	495c      	ldr	r1, [pc, #368]	; (8001de4 <HAL_I2C_Init+0x274>)
 8001c74:	428b      	cmp	r3, r1
 8001c76:	d819      	bhi.n	8001cac <HAL_I2C_Init+0x13c>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	1e59      	subs	r1, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c86:	1c59      	adds	r1, r3, #1
 8001c88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c8c:	400b      	ands	r3, r1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00a      	beq.n	8001ca8 <HAL_I2C_Init+0x138>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1e59      	subs	r1, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca6:	e051      	b.n	8001d4c <HAL_I2C_Init+0x1dc>
 8001ca8:	2304      	movs	r3, #4
 8001caa:	e04f      	b.n	8001d4c <HAL_I2C_Init+0x1dc>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d111      	bne.n	8001cd8 <HAL_I2C_Init+0x168>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	1e58      	subs	r0, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6859      	ldr	r1, [r3, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	440b      	add	r3, r1
 8001cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf0c      	ite	eq
 8001cd0:	2301      	moveq	r3, #1
 8001cd2:	2300      	movne	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	e012      	b.n	8001cfe <HAL_I2C_Init+0x18e>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1e58      	subs	r0, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	0099      	lsls	r1, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf0c      	ite	eq
 8001cf8:	2301      	moveq	r3, #1
 8001cfa:	2300      	movne	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_I2C_Init+0x196>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e022      	b.n	8001d4c <HAL_I2C_Init+0x1dc>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10e      	bne.n	8001d2c <HAL_I2C_Init+0x1bc>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1e58      	subs	r0, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6859      	ldr	r1, [r3, #4]
 8001d16:	460b      	mov	r3, r1
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	440b      	add	r3, r1
 8001d1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d20:	3301      	adds	r3, #1
 8001d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d2a:	e00f      	b.n	8001d4c <HAL_I2C_Init+0x1dc>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1e58      	subs	r0, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6859      	ldr	r1, [r3, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	0099      	lsls	r1, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d42:	3301      	adds	r3, #1
 8001d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	6809      	ldr	r1, [r1, #0]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69da      	ldr	r2, [r3, #28]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6911      	ldr	r1, [r2, #16]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68d2      	ldr	r2, [r2, #12]
 8001d86:	4311      	orrs	r1, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695a      	ldr	r2, [r3, #20]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	000186a0 	.word	0x000186a0
 8001de8:	001e847f 	.word	0x001e847f
 8001dec:	003d08ff 	.word	0x003d08ff
 8001df0:	431bde83 	.word	0x431bde83
 8001df4:	10624dd3 	.word	0x10624dd3

08001df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e304      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8087 	beq.w	8001f26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e18:	4b92      	ldr	r3, [pc, #584]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d00c      	beq.n	8001e3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e24:	4b8f      	ldr	r3, [pc, #572]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d112      	bne.n	8001e56 <HAL_RCC_OscConfig+0x5e>
 8001e30:	4b8c      	ldr	r3, [pc, #560]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3c:	d10b      	bne.n	8001e56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3e:	4b89      	ldr	r3, [pc, #548]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d06c      	beq.n	8001f24 <HAL_RCC_OscConfig+0x12c>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d168      	bne.n	8001f24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e2de      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x76>
 8001e60:	4b80      	ldr	r3, [pc, #512]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a7f      	ldr	r2, [pc, #508]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	e02e      	b.n	8001ecc <HAL_RCC_OscConfig+0xd4>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x98>
 8001e76:	4b7b      	ldr	r3, [pc, #492]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a7a      	ldr	r2, [pc, #488]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b78      	ldr	r3, [pc, #480]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a77      	ldr	r2, [pc, #476]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e01d      	b.n	8001ecc <HAL_RCC_OscConfig+0xd4>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xbc>
 8001e9a:	4b72      	ldr	r3, [pc, #456]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a71      	ldr	r2, [pc, #452]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b6f      	ldr	r3, [pc, #444]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a6e      	ldr	r2, [pc, #440]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e00b      	b.n	8001ecc <HAL_RCC_OscConfig+0xd4>
 8001eb4:	4b6b      	ldr	r3, [pc, #428]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a6a      	ldr	r2, [pc, #424]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b68      	ldr	r3, [pc, #416]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a67      	ldr	r2, [pc, #412]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff f96c 	bl	80011b0 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7ff f968 	bl	80011b0 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	; 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e292      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	4b5d      	ldr	r3, [pc, #372]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0xe4>
 8001efa:	e014      	b.n	8001f26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff f958 	bl	80011b0 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff f954 	bl	80011b0 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e27e      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f16:	4b53      	ldr	r3, [pc, #332]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x10c>
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d063      	beq.n	8001ffa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f32:	4b4c      	ldr	r3, [pc, #304]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f3e:	4b49      	ldr	r3, [pc, #292]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d11c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x18c>
 8001f4a:	4b46      	ldr	r3, [pc, #280]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d116      	bne.n	8001f84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	4b43      	ldr	r3, [pc, #268]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_RCC_OscConfig+0x176>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e252      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	4b3d      	ldr	r3, [pc, #244]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4939      	ldr	r1, [pc, #228]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f82:	e03a      	b.n	8001ffa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f8c:	4b36      	ldr	r3, [pc, #216]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7ff f90d 	bl	80011b0 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9a:	f7ff f909 	bl	80011b0 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e233      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fac:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4927      	ldr	r1, [pc, #156]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
 8001fcc:	e015      	b.n	8001ffa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fce:	4b26      	ldr	r3, [pc, #152]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff f8ec 	bl	80011b0 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fdc:	f7ff f8e8 	bl	80011b0 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e212      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d03a      	beq.n	800207c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d019      	beq.n	8002042 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002014:	f7ff f8cc 	bl	80011b0 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201c:	f7ff f8c8 	bl	80011b0 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e1f2      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202e:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800203a:	2001      	movs	r0, #1
 800203c:	f000 fbca 	bl	80027d4 <RCC_Delay>
 8002040:	e01c      	b.n	800207c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002048:	f7ff f8b2 	bl	80011b0 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204e:	e00f      	b.n	8002070 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002050:	f7ff f8ae 	bl	80011b0 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d908      	bls.n	8002070 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e1d8      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	42420000 	.word	0x42420000
 800206c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002070:	4b9b      	ldr	r3, [pc, #620]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1e9      	bne.n	8002050 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80a6 	beq.w	80021d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208e:	4b94      	ldr	r3, [pc, #592]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10d      	bne.n	80020b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	4b91      	ldr	r3, [pc, #580]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a90      	ldr	r2, [pc, #576]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	61d3      	str	r3, [r2, #28]
 80020a6:	4b8e      	ldr	r3, [pc, #568]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b2:	2301      	movs	r3, #1
 80020b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b6:	4b8b      	ldr	r3, [pc, #556]	; (80022e4 <HAL_RCC_OscConfig+0x4ec>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d118      	bne.n	80020f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c2:	4b88      	ldr	r3, [pc, #544]	; (80022e4 <HAL_RCC_OscConfig+0x4ec>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a87      	ldr	r2, [pc, #540]	; (80022e4 <HAL_RCC_OscConfig+0x4ec>)
 80020c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ce:	f7ff f86f 	bl	80011b0 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d6:	f7ff f86b 	bl	80011b0 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b64      	cmp	r3, #100	; 0x64
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e195      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e8:	4b7e      	ldr	r3, [pc, #504]	; (80022e4 <HAL_RCC_OscConfig+0x4ec>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x312>
 80020fc:	4b78      	ldr	r3, [pc, #480]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4a77      	ldr	r2, [pc, #476]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6213      	str	r3, [r2, #32]
 8002108:	e02d      	b.n	8002166 <HAL_RCC_OscConfig+0x36e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x334>
 8002112:	4b73      	ldr	r3, [pc, #460]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a72      	ldr	r2, [pc, #456]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	6213      	str	r3, [r2, #32]
 800211e:	4b70      	ldr	r3, [pc, #448]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a6f      	ldr	r2, [pc, #444]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002124:	f023 0304 	bic.w	r3, r3, #4
 8002128:	6213      	str	r3, [r2, #32]
 800212a:	e01c      	b.n	8002166 <HAL_RCC_OscConfig+0x36e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	2b05      	cmp	r3, #5
 8002132:	d10c      	bne.n	800214e <HAL_RCC_OscConfig+0x356>
 8002134:	4b6a      	ldr	r3, [pc, #424]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4a69      	ldr	r2, [pc, #420]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	6213      	str	r3, [r2, #32]
 8002140:	4b67      	ldr	r3, [pc, #412]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4a66      	ldr	r2, [pc, #408]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6213      	str	r3, [r2, #32]
 800214c:	e00b      	b.n	8002166 <HAL_RCC_OscConfig+0x36e>
 800214e:	4b64      	ldr	r3, [pc, #400]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4a63      	ldr	r2, [pc, #396]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002154:	f023 0301 	bic.w	r3, r3, #1
 8002158:	6213      	str	r3, [r2, #32]
 800215a:	4b61      	ldr	r3, [pc, #388]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	4a60      	ldr	r2, [pc, #384]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002160:	f023 0304 	bic.w	r3, r3, #4
 8002164:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d015      	beq.n	800219a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216e:	f7ff f81f 	bl	80011b0 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002174:	e00a      	b.n	800218c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7ff f81b 	bl	80011b0 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	; 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e143      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218c:	4b54      	ldr	r3, [pc, #336]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0ee      	beq.n	8002176 <HAL_RCC_OscConfig+0x37e>
 8002198:	e014      	b.n	80021c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219a:	f7ff f809 	bl	80011b0 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7ff f805 	bl	80011b0 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e12d      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b8:	4b49      	ldr	r3, [pc, #292]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1ee      	bne.n	80021a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d105      	bne.n	80021d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ca:	4b45      	ldr	r3, [pc, #276]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	4a44      	ldr	r2, [pc, #272]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 80021d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 808c 	beq.w	80022f8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80021e0:	4b3f      	ldr	r3, [pc, #252]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ec:	d10e      	bne.n	800220c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80021ee:	4b3c      	ldr	r3, [pc, #240]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d108      	bne.n	800220c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80021fa:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002206:	d101      	bne.n	800220c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e103      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	2b02      	cmp	r3, #2
 8002212:	d14e      	bne.n	80022b2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002214:	4b32      	ldr	r3, [pc, #200]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d009      	beq.n	8002234 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002220:	4b2f      	ldr	r3, [pc, #188]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0ef      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002234:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <HAL_RCC_OscConfig+0x4f0>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7fe ffb9 	bl	80011b0 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002242:	f7fe ffb5 	bl	80011b0 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b64      	cmp	r3, #100	; 0x64
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e0df      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002254:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f0      	bne.n	8002242 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002260:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226c:	491c      	ldr	r1, [pc, #112]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 800226e:	4313      	orrs	r3, r2
 8002270:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002272:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4918      	ldr	r1, [pc, #96]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002280:	4313      	orrs	r3, r2
 8002282:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002284:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_RCC_OscConfig+0x4f0>)
 8002286:	2201      	movs	r2, #1
 8002288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228a:	f7fe ff91 	bl	80011b0 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002292:	f7fe ff8d 	bl	80011b0 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b64      	cmp	r3, #100	; 0x64
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e0b7      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x49a>
 80022b0:	e022      	b.n	80022f8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 80022b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 80022b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80022be:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <HAL_RCC_OscConfig+0x4f0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7fe ff74 	bl	80011b0 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80022ca:	e00f      	b.n	80022ec <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80022cc:	f7fe ff70 	bl	80011b0 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d908      	bls.n	80022ec <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e09a      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40007000 	.word	0x40007000
 80022e8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80022ec:	4b4b      	ldr	r3, [pc, #300]	; (800241c <HAL_RCC_OscConfig+0x624>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1e9      	bne.n	80022cc <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 8088 	beq.w	8002412 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002302:	4b46      	ldr	r3, [pc, #280]	; (800241c <HAL_RCC_OscConfig+0x624>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b08      	cmp	r3, #8
 800230c:	d068      	beq.n	80023e0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d14d      	bne.n	80023b2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002316:	4b42      	ldr	r3, [pc, #264]	; (8002420 <HAL_RCC_OscConfig+0x628>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7fe ff48 	bl	80011b0 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002324:	f7fe ff44 	bl	80011b0 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e06e      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002336:	4b39      	ldr	r3, [pc, #228]	; (800241c <HAL_RCC_OscConfig+0x624>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234a:	d10f      	bne.n	800236c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800234c:	4b33      	ldr	r3, [pc, #204]	; (800241c <HAL_RCC_OscConfig+0x624>)
 800234e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4931      	ldr	r1, [pc, #196]	; (800241c <HAL_RCC_OscConfig+0x624>)
 8002356:	4313      	orrs	r3, r2
 8002358:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800235a:	4b30      	ldr	r3, [pc, #192]	; (800241c <HAL_RCC_OscConfig+0x624>)
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	f023 020f 	bic.w	r2, r3, #15
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	492d      	ldr	r1, [pc, #180]	; (800241c <HAL_RCC_OscConfig+0x624>)
 8002368:	4313      	orrs	r3, r2
 800236a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <HAL_RCC_OscConfig+0x624>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	430b      	orrs	r3, r1
 800237e:	4927      	ldr	r1, [pc, #156]	; (800241c <HAL_RCC_OscConfig+0x624>)
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002384:	4b26      	ldr	r3, [pc, #152]	; (8002420 <HAL_RCC_OscConfig+0x628>)
 8002386:	2201      	movs	r2, #1
 8002388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238a:	f7fe ff11 	bl	80011b0 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002392:	f7fe ff0d 	bl	80011b0 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e037      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a4:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HAL_RCC_OscConfig+0x624>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x59a>
 80023b0:	e02f      	b.n	8002412 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b2:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_RCC_OscConfig+0x628>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe fefa 	bl	80011b0 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe fef6 	bl	80011b0 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e020      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d2:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_RCC_OscConfig+0x624>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x5c8>
 80023de:	e018      	b.n	8002412 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e013      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_OscConfig+0x624>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d106      	bne.n	800240e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	42420060 	.word	0x42420060

08002424 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0d0      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002438:	4b6a      	ldr	r3, [pc, #424]	; (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d910      	bls.n	8002468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b67      	ldr	r3, [pc, #412]	; (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 0207 	bic.w	r2, r3, #7
 800244e:	4965      	ldr	r1, [pc, #404]	; (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b63      	ldr	r3, [pc, #396]	; (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0b8      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d020      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002480:	4b59      	ldr	r3, [pc, #356]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800248a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002498:	4b53      	ldr	r3, [pc, #332]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	4a52      	ldr	r2, [pc, #328]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a4:	4b50      	ldr	r3, [pc, #320]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	494d      	ldr	r1, [pc, #308]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d040      	beq.n	8002544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d115      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e07f      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e2:	4b41      	ldr	r3, [pc, #260]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e073      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f2:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e06b      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002502:	4b39      	ldr	r3, [pc, #228]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f023 0203 	bic.w	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4936      	ldr	r1, [pc, #216]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002514:	f7fe fe4c 	bl	80011b0 <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	e00a      	b.n	8002532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251c:	f7fe fe48 	bl	80011b0 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	; 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e053      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 020c 	and.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	429a      	cmp	r2, r3
 8002542:	d1eb      	bne.n	800251c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002544:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d210      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 0207 	bic.w	r2, r3, #7
 800255a:	4922      	ldr	r1, [pc, #136]	; (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e032      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4916      	ldr	r1, [pc, #88]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	490e      	ldr	r1, [pc, #56]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025b2:	f000 f821 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80025b6:	4602      	mov	r2, r0
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	490a      	ldr	r1, [pc, #40]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80025c4:	5ccb      	ldrb	r3, [r1, r3]
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <HAL_RCC_ClockConfig+0x1cc>)
 80025cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_RCC_ClockConfig+0x1d0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fdaa 	bl	800112c <HAL_InitTick>

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40022000 	.word	0x40022000
 80025e8:	40021000 	.word	0x40021000
 80025ec:	08003cb0 	.word	0x08003cb0
 80025f0:	20000000 	.word	0x20000000
 80025f4:	20000004 	.word	0x20000004

080025f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025fa:	b091      	sub	sp, #68	; 0x44
 80025fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80025fe:	4b56      	ldr	r3, [pc, #344]	; (8002758 <HAL_RCC_GetSysClockFreq+0x160>)
 8002600:	f107 0414 	add.w	r4, r7, #20
 8002604:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002606:	c407      	stmia	r4!, {r0, r1, r2}
 8002608:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800260a:	4b54      	ldr	r3, [pc, #336]	; (800275c <HAL_RCC_GetSysClockFreq+0x164>)
 800260c:	1d3c      	adds	r4, r7, #4
 800260e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
 8002618:	2300      	movs	r3, #0
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
 800261c:	2300      	movs	r3, #0
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002620:	2300      	movs	r3, #0
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
 800262c:	2300      	movs	r3, #0
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002630:	4b4b      	ldr	r3, [pc, #300]	; (8002760 <HAL_RCC_GetSysClockFreq+0x168>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b04      	cmp	r3, #4
 800263e:	d002      	beq.n	8002646 <HAL_RCC_GetSysClockFreq+0x4e>
 8002640:	2b08      	cmp	r3, #8
 8002642:	d003      	beq.n	800264c <HAL_RCC_GetSysClockFreq+0x54>
 8002644:	e080      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002646:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002648:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800264a:	e080      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800264c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264e:	0c9b      	lsrs	r3, r3, #18
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002658:	4413      	add	r3, r2
 800265a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d066      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800266a:	4b3d      	ldr	r3, [pc, #244]	; (8002760 <HAL_RCC_GetSysClockFreq+0x168>)
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002676:	4413      	add	r3, r2
 8002678:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800267c:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800267e:	4b38      	ldr	r3, [pc, #224]	; (8002760 <HAL_RCC_GetSysClockFreq+0x168>)
 8002680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d044      	beq.n	8002714 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800268a:	4b35      	ldr	r3, [pc, #212]	; (8002760 <HAL_RCC_GetSysClockFreq+0x168>)
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	3301      	adds	r3, #1
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002698:	4b31      	ldr	r3, [pc, #196]	; (8002760 <HAL_RCC_GetSysClockFreq+0x168>)
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	3302      	adds	r3, #2
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	4618      	mov	r0, r3
 80026aa:	f04f 0100 	mov.w	r1, #0
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	461a      	mov	r2, r3
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	fb02 f501 	mul.w	r5, r2, r1
 80026ba:	fb00 f403 	mul.w	r4, r0, r3
 80026be:	442c      	add	r4, r5
 80026c0:	fba0 2302 	umull	r2, r3, r0, r2
 80026c4:	18e1      	adds	r1, r4, r3
 80026c6:	460b      	mov	r3, r1
 80026c8:	4926      	ldr	r1, [pc, #152]	; (8002764 <HAL_RCC_GetSysClockFreq+0x16c>)
 80026ca:	fb01 f003 	mul.w	r0, r1, r3
 80026ce:	2100      	movs	r1, #0
 80026d0:	fb01 f102 	mul.w	r1, r1, r2
 80026d4:	4401      	add	r1, r0
 80026d6:	4823      	ldr	r0, [pc, #140]	; (8002764 <HAL_RCC_GetSysClockFreq+0x16c>)
 80026d8:	fba2 4500 	umull	r4, r5, r2, r0
 80026dc:	194b      	adds	r3, r1, r5
 80026de:	461d      	mov	r5, r3
 80026e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e2:	4618      	mov	r0, r3
 80026e4:	f04f 0100 	mov.w	r1, #0
 80026e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ea:	461a      	mov	r2, r3
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	fb02 fc01 	mul.w	ip, r2, r1
 80026f4:	fb00 f603 	mul.w	r6, r0, r3
 80026f8:	4466      	add	r6, ip
 80026fa:	fba0 2302 	umull	r2, r3, r0, r2
 80026fe:	18f1      	adds	r1, r6, r3
 8002700:	460b      	mov	r3, r1
 8002702:	4620      	mov	r0, r4
 8002704:	4629      	mov	r1, r5
 8002706:	f7fd fd8d 	bl	8000224 <__aeabi_uldivmod>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4613      	mov	r3, r2
 8002710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002712:	e007      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002716:	4a13      	ldr	r2, [pc, #76]	; (8002764 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002718:	fb02 f203 	mul.w	r2, r2, r3
 800271c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002722:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002724:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002728:	461a      	mov	r2, r3
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	4293      	cmp	r3, r2
 800272e:	d108      	bne.n	8002742 <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8002730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002736:	e004      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273a:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <HAL_RCC_GetSysClockFreq+0x170>)
 800273c:	fb02 f303 	mul.w	r3, r2, r3
 8002740:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8002742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002744:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002746:	e002      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_RCC_GetSysClockFreq+0x174>)
 800274a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800274c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002750:	4618      	mov	r0, r3
 8002752:	3744      	adds	r7, #68	; 0x44
 8002754:	46bd      	mov	sp, r7
 8002756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002758:	08003c70 	.word	0x08003c70
 800275c:	08003c80 	.word	0x08003c80
 8002760:	40021000 	.word	0x40021000
 8002764:	00b71b00 	.word	0x00b71b00
 8002768:	003d0900 	.word	0x003d0900
 800276c:	007a1200 	.word	0x007a1200

08002770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002774:	4b02      	ldr	r3, [pc, #8]	; (8002780 <HAL_RCC_GetHCLKFreq+0x10>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	20000000 	.word	0x20000000

08002784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002788:	f7ff fff2 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 800278c:	4602      	mov	r2, r0
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	4903      	ldr	r1, [pc, #12]	; (80027a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800279a:	5ccb      	ldrb	r3, [r1, r3]
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	08003cc0 	.word	0x08003cc0

080027ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027b0:	f7ff ffde 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	0adb      	lsrs	r3, r3, #11
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	4903      	ldr	r1, [pc, #12]	; (80027d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027c2:	5ccb      	ldrb	r3, [r1, r3]
 80027c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000
 80027d0:	08003cc0 	.word	0x08003cc0

080027d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027dc:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <RCC_Delay+0x34>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0a      	ldr	r2, [pc, #40]	; (800280c <RCC_Delay+0x38>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	0a5b      	lsrs	r3, r3, #9
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	fb02 f303 	mul.w	r3, r2, r3
 80027ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027f0:	bf00      	nop
  }
  while (Delay --);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1e5a      	subs	r2, r3, #1
 80027f6:	60fa      	str	r2, [r7, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f9      	bne.n	80027f0 <RCC_Delay+0x1c>
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	20000000 	.word	0x20000000
 800280c:	10624dd3 	.word	0x10624dd3

08002810 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	2300      	movs	r3, #0
 800281e:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d07d      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8002830:	2300      	movs	r3, #0
 8002832:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002834:	4b8b      	ldr	r3, [pc, #556]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10d      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002840:	4b88      	ldr	r3, [pc, #544]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	4a87      	ldr	r2, [pc, #540]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284a:	61d3      	str	r3, [r2, #28]
 800284c:	4b85      	ldr	r3, [pc, #532]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002858:	2301      	movs	r3, #1
 800285a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285c:	4b82      	ldr	r3, [pc, #520]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d118      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002868:	4b7f      	ldr	r3, [pc, #508]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a7e      	ldr	r2, [pc, #504]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800286e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002872:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002874:	f7fe fc9c 	bl	80011b0 <HAL_GetTick>
 8002878:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287a:	e008      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287c:	f7fe fc98 	bl	80011b0 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e0e5      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	4b76      	ldr	r3, [pc, #472]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800289a:	4b72      	ldr	r3, [pc, #456]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a2:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d02e      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d027      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028b8:	4b6a      	ldr	r3, [pc, #424]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028c2:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028c8:	4b68      	ldr	r3, [pc, #416]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028ce:	4a65      	ldr	r2, [pc, #404]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d014      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fe fc67 	bl	80011b0 <HAL_GetTick>
 80028e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e4:	e00a      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e6:	f7fe fc63 	bl	80011b0 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d901      	bls.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e0ae      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fc:	4b59      	ldr	r3, [pc, #356]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0ee      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002908:	4b56      	ldr	r3, [pc, #344]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4953      	ldr	r1, [pc, #332]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002916:	4313      	orrs	r3, r2
 8002918:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800291a:	7efb      	ldrb	r3, [r7, #27]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d105      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002920:	4b50      	ldr	r3, [pc, #320]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	4a4f      	ldr	r2, [pc, #316]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002938:	4b4a      	ldr	r3, [pc, #296]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4947      	ldr	r1, [pc, #284]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d008      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002956:	4b43      	ldr	r3, [pc, #268]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	4940      	ldr	r1, [pc, #256]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002964:	4313      	orrs	r3, r2
 8002966:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8002974:	4b3b      	ldr	r3, [pc, #236]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	4938      	ldr	r1, [pc, #224]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002982:	4313      	orrs	r3, r2
 8002984:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8002986:	4b37      	ldr	r3, [pc, #220]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d105      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8002992:	4b34      	ldr	r3, [pc, #208]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800299e:	2301      	movs	r3, #1
 80029a0:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d148      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80029a8:	4b2e      	ldr	r3, [pc, #184]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d138      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80029b4:	4b2b      	ldr	r3, [pc, #172]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d009      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80029c0:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e042      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80029d4:	4b23      	ldr	r3, [pc, #140]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	4920      	ldr	r1, [pc, #128]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80029e6:	4b1f      	ldr	r3, [pc, #124]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	491c      	ldr	r1, [pc, #112]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80029f8:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7fe fbd7 	bl	80011b0 <HAL_GetTick>
 8002a02:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a06:	f7fe fbd3 	bl	80011b0 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b64      	cmp	r3, #100	; 0x64
 8002a12:	d901      	bls.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e020      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002a24:	e009      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8002a26:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d001      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00f      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a46:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	4904      	ldr	r1, [pc, #16]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40007000 	.word	0x40007000
 8002a6c:	42420440 	.word	0x42420440
 8002a70:	42420070 	.word	0x42420070

08002a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e041      	b.n	8002b0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe f9de 	bl	8000e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3304      	adds	r3, #4
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	f000 fad8 	bl	8003068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e041      	b.n	8002ba8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d106      	bne.n	8002b3e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f839 	bl	8002bb0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2202      	movs	r2, #2
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4610      	mov	r0, r2
 8002b52:	f000 fa89 	bl	8003068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d122      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d11b      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f06f 0202 	mvn.w	r2, #2
 8002bee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 fa13 	bl	8003030 <HAL_TIM_IC_CaptureCallback>
 8002c0a:	e005      	b.n	8002c18 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fa06 	bl	800301e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fa15 	bl	8003042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d122      	bne.n	8002c72 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d11b      	bne.n	8002c72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f06f 0204 	mvn.w	r2, #4
 8002c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f9e9 	bl	8003030 <HAL_TIM_IC_CaptureCallback>
 8002c5e:	e005      	b.n	8002c6c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f9dc 	bl	800301e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f9eb 	bl	8003042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d122      	bne.n	8002cc6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d11b      	bne.n	8002cc6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f06f 0208 	mvn.w	r2, #8
 8002c96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2204      	movs	r2, #4
 8002c9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f9bf 	bl	8003030 <HAL_TIM_IC_CaptureCallback>
 8002cb2:	e005      	b.n	8002cc0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f9b2 	bl	800301e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f9c1 	bl	8003042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f003 0310 	and.w	r3, r3, #16
 8002cd0:	2b10      	cmp	r3, #16
 8002cd2:	d122      	bne.n	8002d1a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2b10      	cmp	r3, #16
 8002ce0:	d11b      	bne.n	8002d1a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f06f 0210 	mvn.w	r2, #16
 8002cea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2208      	movs	r2, #8
 8002cf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f995 	bl	8003030 <HAL_TIM_IC_CaptureCallback>
 8002d06:	e005      	b.n	8002d14 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f988 	bl	800301e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f997 	bl	8003042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d10e      	bne.n	8002d46 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d107      	bne.n	8002d46 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f06f 0201 	mvn.w	r2, #1
 8002d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f963 	bl	800300c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d50:	2b80      	cmp	r3, #128	; 0x80
 8002d52:	d10e      	bne.n	8002d72 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5e:	2b80      	cmp	r3, #128	; 0x80
 8002d60:	d107      	bne.n	8002d72 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fcc5 	bl	80036fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	2b40      	cmp	r3, #64	; 0x40
 8002d7e:	d10e      	bne.n	8002d9e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8a:	2b40      	cmp	r3, #64	; 0x40
 8002d8c:	d107      	bne.n	8002d9e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f95b 	bl	8003054 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d10e      	bne.n	8002dca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d107      	bne.n	8002dca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f06f 0220 	mvn.w	r2, #32
 8002dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fc90 	bl	80036ea <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_TIM_OC_ConfigChannel+0x1a>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e046      	b.n	8002e7c <HAL_TIM_OC_ConfigChannel+0xa8>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b0c      	cmp	r3, #12
 8002dfa:	d839      	bhi.n	8002e70 <HAL_TIM_OC_ConfigChannel+0x9c>
 8002dfc:	a201      	add	r2, pc, #4	; (adr r2, 8002e04 <HAL_TIM_OC_ConfigChannel+0x30>)
 8002dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e02:	bf00      	nop
 8002e04:	08002e39 	.word	0x08002e39
 8002e08:	08002e71 	.word	0x08002e71
 8002e0c:	08002e71 	.word	0x08002e71
 8002e10:	08002e71 	.word	0x08002e71
 8002e14:	08002e47 	.word	0x08002e47
 8002e18:	08002e71 	.word	0x08002e71
 8002e1c:	08002e71 	.word	0x08002e71
 8002e20:	08002e71 	.word	0x08002e71
 8002e24:	08002e55 	.word	0x08002e55
 8002e28:	08002e71 	.word	0x08002e71
 8002e2c:	08002e71 	.word	0x08002e71
 8002e30:	08002e71 	.word	0x08002e71
 8002e34:	08002e63 	.word	0x08002e63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 f97e 	bl	8003140 <TIM_OC1_SetConfig>
      break;
 8002e44:	e015      	b.n	8002e72 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 f9dd 	bl	800320c <TIM_OC2_SetConfig>
      break;
 8002e52:	e00e      	b.n	8002e72 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fa40 	bl	80032e0 <TIM_OC3_SetConfig>
      break;
 8002e60:	e007      	b.n	8002e72 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 faa3 	bl	80033b4 <TIM_OC4_SetConfig>
      break;
 8002e6e:	e000      	b.n	8002e72 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8002e70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_TIM_ConfigClockSource+0x18>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e0b3      	b.n	8003004 <HAL_TIM_ConfigClockSource+0x180>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ec2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed4:	d03e      	beq.n	8002f54 <HAL_TIM_ConfigClockSource+0xd0>
 8002ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eda:	f200 8087 	bhi.w	8002fec <HAL_TIM_ConfigClockSource+0x168>
 8002ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee2:	f000 8085 	beq.w	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eea:	d87f      	bhi.n	8002fec <HAL_TIM_ConfigClockSource+0x168>
 8002eec:	2b70      	cmp	r3, #112	; 0x70
 8002eee:	d01a      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0xa2>
 8002ef0:	2b70      	cmp	r3, #112	; 0x70
 8002ef2:	d87b      	bhi.n	8002fec <HAL_TIM_ConfigClockSource+0x168>
 8002ef4:	2b60      	cmp	r3, #96	; 0x60
 8002ef6:	d050      	beq.n	8002f9a <HAL_TIM_ConfigClockSource+0x116>
 8002ef8:	2b60      	cmp	r3, #96	; 0x60
 8002efa:	d877      	bhi.n	8002fec <HAL_TIM_ConfigClockSource+0x168>
 8002efc:	2b50      	cmp	r3, #80	; 0x50
 8002efe:	d03c      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0xf6>
 8002f00:	2b50      	cmp	r3, #80	; 0x50
 8002f02:	d873      	bhi.n	8002fec <HAL_TIM_ConfigClockSource+0x168>
 8002f04:	2b40      	cmp	r3, #64	; 0x40
 8002f06:	d058      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x136>
 8002f08:	2b40      	cmp	r3, #64	; 0x40
 8002f0a:	d86f      	bhi.n	8002fec <HAL_TIM_ConfigClockSource+0x168>
 8002f0c:	2b30      	cmp	r3, #48	; 0x30
 8002f0e:	d064      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0x156>
 8002f10:	2b30      	cmp	r3, #48	; 0x30
 8002f12:	d86b      	bhi.n	8002fec <HAL_TIM_ConfigClockSource+0x168>
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d060      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0x156>
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	d867      	bhi.n	8002fec <HAL_TIM_ConfigClockSource+0x168>
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d05c      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0x156>
 8002f20:	2b10      	cmp	r3, #16
 8002f22:	d05a      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f24:	e062      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6899      	ldr	r1, [r3, #8]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f000 fb02 	bl	800353e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f48:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	609a      	str	r2, [r3, #8]
      break;
 8002f52:	e04e      	b.n	8002ff2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	6899      	ldr	r1, [r3, #8]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f000 faeb 	bl	800353e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f76:	609a      	str	r2, [r3, #8]
      break;
 8002f78:	e03b      	b.n	8002ff2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6859      	ldr	r1, [r3, #4]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	461a      	mov	r2, r3
 8002f88:	f000 fa62 	bl	8003450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2150      	movs	r1, #80	; 0x50
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fab9 	bl	800350a <TIM_ITRx_SetConfig>
      break;
 8002f98:	e02b      	b.n	8002ff2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f000 fa80 	bl	80034ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2160      	movs	r1, #96	; 0x60
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 faa9 	bl	800350a <TIM_ITRx_SetConfig>
      break;
 8002fb8:	e01b      	b.n	8002ff2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6859      	ldr	r1, [r3, #4]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f000 fa42 	bl	8003450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2140      	movs	r1, #64	; 0x40
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fa99 	bl	800350a <TIM_ITRx_SetConfig>
      break;
 8002fd8:	e00b      	b.n	8002ff2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	f000 fa90 	bl	800350a <TIM_ITRx_SetConfig>
        break;
 8002fea:	e002      	b.n	8002ff2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fec:	bf00      	nop
 8002fee:	e000      	b.n	8002ff2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ff0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr

0800301e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr

08003042 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr
	...

08003068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a2d      	ldr	r2, [pc, #180]	; (8003130 <TIM_Base_SetConfig+0xc8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00f      	beq.n	80030a0 <TIM_Base_SetConfig+0x38>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003086:	d00b      	beq.n	80030a0 <TIM_Base_SetConfig+0x38>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a2a      	ldr	r2, [pc, #168]	; (8003134 <TIM_Base_SetConfig+0xcc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d007      	beq.n	80030a0 <TIM_Base_SetConfig+0x38>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a29      	ldr	r2, [pc, #164]	; (8003138 <TIM_Base_SetConfig+0xd0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d003      	beq.n	80030a0 <TIM_Base_SetConfig+0x38>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a28      	ldr	r2, [pc, #160]	; (800313c <TIM_Base_SetConfig+0xd4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d108      	bne.n	80030b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a1e      	ldr	r2, [pc, #120]	; (8003130 <TIM_Base_SetConfig+0xc8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00f      	beq.n	80030da <TIM_Base_SetConfig+0x72>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c0:	d00b      	beq.n	80030da <TIM_Base_SetConfig+0x72>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a1b      	ldr	r2, [pc, #108]	; (8003134 <TIM_Base_SetConfig+0xcc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d007      	beq.n	80030da <TIM_Base_SetConfig+0x72>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a1a      	ldr	r2, [pc, #104]	; (8003138 <TIM_Base_SetConfig+0xd0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d003      	beq.n	80030da <TIM_Base_SetConfig+0x72>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a19      	ldr	r2, [pc, #100]	; (800313c <TIM_Base_SetConfig+0xd4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d108      	bne.n	80030ec <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a07      	ldr	r2, [pc, #28]	; (8003130 <TIM_Base_SetConfig+0xc8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d103      	bne.n	8003120 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	615a      	str	r2, [r3, #20]
}
 8003126:	bf00      	nop
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr
 8003130:	40012c00 	.word	0x40012c00
 8003134:	40000400 	.word	0x40000400
 8003138:	40000800 	.word	0x40000800
 800313c:	40000c00 	.word	0x40000c00

08003140 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f023 0201 	bic.w	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0303 	bic.w	r3, r3, #3
 8003176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f023 0302 	bic.w	r3, r3, #2
 8003188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a1c      	ldr	r2, [pc, #112]	; (8003208 <TIM_OC1_SetConfig+0xc8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d10c      	bne.n	80031b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f023 0308 	bic.w	r3, r3, #8
 80031a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f023 0304 	bic.w	r3, r3, #4
 80031b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a13      	ldr	r2, [pc, #76]	; (8003208 <TIM_OC1_SetConfig+0xc8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d111      	bne.n	80031e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	621a      	str	r2, [r3, #32]
}
 80031fc:	bf00      	nop
 80031fe:	371c      	adds	r7, #28
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40012c00 	.word	0x40012c00

0800320c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f023 0210 	bic.w	r2, r3, #16
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800323a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4313      	orrs	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f023 0320 	bic.w	r3, r3, #32
 8003256:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <TIM_OC2_SetConfig+0xd0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d10d      	bne.n	8003288 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003286:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a14      	ldr	r2, [pc, #80]	; (80032dc <TIM_OC2_SetConfig+0xd0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d113      	bne.n	80032b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003296:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800329e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	621a      	str	r2, [r3, #32]
}
 80032d2:	bf00      	nop
 80032d4:	371c      	adds	r7, #28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr
 80032dc:	40012c00 	.word	0x40012c00

080032e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0303 	bic.w	r3, r3, #3
 8003316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a1d      	ldr	r2, [pc, #116]	; (80033b0 <TIM_OC3_SetConfig+0xd0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d10d      	bne.n	800335a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003344:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	021b      	lsls	r3, r3, #8
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a14      	ldr	r2, [pc, #80]	; (80033b0 <TIM_OC3_SetConfig+0xd0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d113      	bne.n	800338a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	621a      	str	r2, [r3, #32]
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40012c00 	.word	0x40012c00

080033b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	031b      	lsls	r3, r3, #12
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a0f      	ldr	r2, [pc, #60]	; (800344c <TIM_OC4_SetConfig+0x98>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d109      	bne.n	8003428 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800341a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	019b      	lsls	r3, r3, #6
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	621a      	str	r2, [r3, #32]
}
 8003442:	bf00      	nop
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr
 800344c:	40012c00 	.word	0x40012c00

08003450 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	f023 0201 	bic.w	r2, r3, #1
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800347a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f023 030a 	bic.w	r3, r3, #10
 800348c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	621a      	str	r2, [r3, #32]
}
 80034a2:	bf00      	nop
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f023 0210 	bic.w	r2, r3, #16
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	031b      	lsls	r3, r3, #12
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	621a      	str	r2, [r3, #32]
}
 8003500:	bf00      	nop
 8003502:	371c      	adds	r7, #28
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr

0800350a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800350a:	b480      	push	{r7}
 800350c:	b085      	sub	sp, #20
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	f043 0307 	orr.w	r3, r3, #7
 800352c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	609a      	str	r2, [r3, #8]
}
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr

0800353e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800353e:	b480      	push	{r7}
 8003540:	b087      	sub	sp, #28
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003558:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	021a      	lsls	r2, r3, #8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	431a      	orrs	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4313      	orrs	r3, r2
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	609a      	str	r2, [r3, #8]
}
 8003572:	bf00      	nop
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003590:	2302      	movs	r3, #2
 8003592:	e04b      	b.n	800362c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a19      	ldr	r2, [pc, #100]	; (8003638 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d013      	beq.n	8003600 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e0:	d00e      	beq.n	8003600 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a15      	ldr	r2, [pc, #84]	; (800363c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d009      	beq.n	8003600 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a13      	ldr	r2, [pc, #76]	; (8003640 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d004      	beq.n	8003600 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a12      	ldr	r2, [pc, #72]	; (8003644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d10c      	bne.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003606:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	4313      	orrs	r3, r2
 8003610:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40012c00 	.word	0x40012c00
 800363c:	40000400 	.word	0x40000400
 8003640:	40000800 	.word	0x40000800
 8003644:	40000c00 	.word	0x40000c00

08003648 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003660:	2302      	movs	r3, #2
 8003662:	e03d      	b.n	80036e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr

080036ea <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr

080036fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr

0800370e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e03f      	b.n	80037a0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d106      	bne.n	800373a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7fd fbb7 	bl	8000ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2224      	movs	r2, #36	; 0x24
 800373e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003750:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f904 	bl	8003960 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003766:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003776:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003786:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08a      	sub	sp, #40	; 0x28
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d17c      	bne.n	80038c2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <HAL_UART_Transmit+0x2c>
 80037ce:	88fb      	ldrh	r3, [r7, #6]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e075      	b.n	80038c4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d101      	bne.n	80037e6 <HAL_UART_Transmit+0x3e>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e06e      	b.n	80038c4 <HAL_UART_Transmit+0x11c>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2221      	movs	r2, #33	; 0x21
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037fc:	f7fd fcd8 	bl	80011b0 <HAL_GetTick>
 8003800:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	88fa      	ldrh	r2, [r7, #6]
 8003806:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	88fa      	ldrh	r2, [r7, #6]
 800380c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003816:	d108      	bne.n	800382a <HAL_UART_Transmit+0x82>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	e003      	b.n	8003832 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800382e:	2300      	movs	r3, #0
 8003830:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800383a:	e02a      	b.n	8003892 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2200      	movs	r2, #0
 8003844:	2180      	movs	r1, #128	; 0x80
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f840 	bl	80038cc <UART_WaitOnFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e036      	b.n	80038c4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10b      	bne.n	8003874 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800386a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	3302      	adds	r3, #2
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	e007      	b.n	8003884 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3301      	adds	r3, #1
 8003882:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1cf      	bne.n	800383c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2200      	movs	r2, #0
 80038a4:	2140      	movs	r1, #64	; 0x40
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f810 	bl	80038cc <UART_WaitOnFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e006      	b.n	80038c4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	e000      	b.n	80038c4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038c2:	2302      	movs	r3, #2
  }
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3720      	adds	r7, #32
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038dc:	e02c      	b.n	8003938 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d028      	beq.n	8003938 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <UART_WaitOnFlagUntilTimeout+0x30>
 80038ec:	f7fd fc60 	bl	80011b0 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d21d      	bcs.n	8003938 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800390a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0201 	bic.w	r2, r2, #1
 800391a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e00f      	b.n	8003958 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4013      	ands	r3, r2
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	429a      	cmp	r2, r3
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	429a      	cmp	r2, r3
 8003954:	d0c3      	beq.n	80038de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800399a:	f023 030c 	bic.w	r3, r3, #12
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	430b      	orrs	r3, r1
 80039a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699a      	ldr	r2, [r3, #24]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a2c      	ldr	r2, [pc, #176]	; (8003a74 <UART_SetConfig+0x114>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d103      	bne.n	80039d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039c8:	f7fe fef0 	bl	80027ac <HAL_RCC_GetPCLK2Freq>
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	e002      	b.n	80039d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039d0:	f7fe fed8 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 80039d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	009a      	lsls	r2, r3, #2
 80039e0:	441a      	add	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	4a22      	ldr	r2, [pc, #136]	; (8003a78 <UART_SetConfig+0x118>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	0119      	lsls	r1, r3, #4
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	009a      	lsls	r2, r3, #2
 8003a00:	441a      	add	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a0c:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <UART_SetConfig+0x118>)
 8003a0e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	2064      	movs	r0, #100	; 0x64
 8003a16:	fb00 f303 	mul.w	r3, r0, r3
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	3332      	adds	r3, #50	; 0x32
 8003a20:	4a15      	ldr	r2, [pc, #84]	; (8003a78 <UART_SetConfig+0x118>)
 8003a22:	fba2 2303 	umull	r2, r3, r2, r3
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a2c:	4419      	add	r1, r3
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	009a      	lsls	r2, r3, #2
 8003a38:	441a      	add	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a44:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <UART_SetConfig+0x118>)
 8003a46:	fba3 0302 	umull	r0, r3, r3, r2
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	2064      	movs	r0, #100	; 0x64
 8003a4e:	fb00 f303 	mul.w	r3, r0, r3
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	3332      	adds	r3, #50	; 0x32
 8003a58:	4a07      	ldr	r2, [pc, #28]	; (8003a78 <UART_SetConfig+0x118>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	f003 020f 	and.w	r2, r3, #15
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	440a      	add	r2, r1
 8003a6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40013800 	.word	0x40013800
 8003a78:	51eb851f 	.word	0x51eb851f

08003a7c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003a80:	4904      	ldr	r1, [pc, #16]	; (8003a94 <MX_FATFS_Init+0x18>)
 8003a82:	4805      	ldr	r0, [pc, #20]	; (8003a98 <MX_FATFS_Init+0x1c>)
 8003a84:	f000 f8a6 	bl	8003bd4 <FATFS_LinkDriver>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	4b03      	ldr	r3, [pc, #12]	; (8003a9c <MX_FATFS_Init+0x20>)
 8003a8e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003a90:	bf00      	nop
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	2000016c 	.word	0x2000016c
 8003a98:	2000000c 	.word	0x2000000c
 8003a9c:	20000170 	.word	0x20000170

08003aa0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <USER_initialize+0x20>)
 8003aac:	2201      	movs	r2, #1
 8003aae:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003ab0:	4b03      	ldr	r3, [pc, #12]	; (8003ac0 <USER_initialize+0x20>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr
 8003ac0:	20000009 	.word	0x20000009

08003ac4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8003ace:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <USER_status+0x20>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003ad4:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <USER_status+0x20>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr
 8003ae4:	20000009 	.word	0x20000009

08003ae8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	4603      	mov	r3, r0
 8003af6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8003af8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	603b      	str	r3, [r7, #0]
 8003b10:	4603      	mov	r3, r0
 8003b12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8003b14:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr

08003b20 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	603a      	str	r2, [r7, #0]
 8003b2a:	71fb      	strb	r3, [r7, #7]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
    return res;
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr

08003b40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8003b56:	4b1e      	ldr	r3, [pc, #120]	; (8003bd0 <FATFS_LinkDriverEx+0x90>)
 8003b58:	7a5b      	ldrb	r3, [r3, #9]
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d831      	bhi.n	8003bc4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003b60:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <FATFS_LinkDriverEx+0x90>)
 8003b62:	7a5b      	ldrb	r3, [r3, #9]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <FATFS_LinkDriverEx+0x90>)
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8003b6e:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <FATFS_LinkDriverEx+0x90>)
 8003b70:	7a5b      	ldrb	r3, [r3, #9]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	4a16      	ldr	r2, [pc, #88]	; (8003bd0 <FATFS_LinkDriverEx+0x90>)
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8003b7e:	4b14      	ldr	r3, [pc, #80]	; (8003bd0 <FATFS_LinkDriverEx+0x90>)
 8003b80:	7a5b      	ldrb	r3, [r3, #9]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <FATFS_LinkDriverEx+0x90>)
 8003b88:	4413      	add	r3, r2
 8003b8a:	79fa      	ldrb	r2, [r7, #7]
 8003b8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8003b8e:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <FATFS_LinkDriverEx+0x90>)
 8003b90:	7a5b      	ldrb	r3, [r3, #9]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	b2d1      	uxtb	r1, r2
 8003b98:	4a0d      	ldr	r2, [pc, #52]	; (8003bd0 <FATFS_LinkDriverEx+0x90>)
 8003b9a:	7251      	strb	r1, [r2, #9]
 8003b9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8003b9e:	7dbb      	ldrb	r3, [r7, #22]
 8003ba0:	3330      	adds	r3, #48	; 0x30
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	3301      	adds	r3, #1
 8003bac:	223a      	movs	r2, #58	; 0x3a
 8003bae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	222f      	movs	r2, #47	; 0x2f
 8003bb6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	3303      	adds	r3, #3
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	371c      	adds	r7, #28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr
 8003bd0:	2000003c 	.word	0x2000003c

08003bd4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8003bde:	2200      	movs	r2, #0
 8003be0:	6839      	ldr	r1, [r7, #0]
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff ffac 	bl	8003b40 <FATFS_LinkDriverEx>
 8003be8:	4603      	mov	r3, r0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <__libc_init_array>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	2600      	movs	r6, #0
 8003bf8:	4d0c      	ldr	r5, [pc, #48]	; (8003c2c <__libc_init_array+0x38>)
 8003bfa:	4c0d      	ldr	r4, [pc, #52]	; (8003c30 <__libc_init_array+0x3c>)
 8003bfc:	1b64      	subs	r4, r4, r5
 8003bfe:	10a4      	asrs	r4, r4, #2
 8003c00:	42a6      	cmp	r6, r4
 8003c02:	d109      	bne.n	8003c18 <__libc_init_array+0x24>
 8003c04:	f000 f822 	bl	8003c4c <_init>
 8003c08:	2600      	movs	r6, #0
 8003c0a:	4d0a      	ldr	r5, [pc, #40]	; (8003c34 <__libc_init_array+0x40>)
 8003c0c:	4c0a      	ldr	r4, [pc, #40]	; (8003c38 <__libc_init_array+0x44>)
 8003c0e:	1b64      	subs	r4, r4, r5
 8003c10:	10a4      	asrs	r4, r4, #2
 8003c12:	42a6      	cmp	r6, r4
 8003c14:	d105      	bne.n	8003c22 <__libc_init_array+0x2e>
 8003c16:	bd70      	pop	{r4, r5, r6, pc}
 8003c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c1c:	4798      	blx	r3
 8003c1e:	3601      	adds	r6, #1
 8003c20:	e7ee      	b.n	8003c00 <__libc_init_array+0xc>
 8003c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c26:	4798      	blx	r3
 8003c28:	3601      	adds	r6, #1
 8003c2a:	e7f2      	b.n	8003c12 <__libc_init_array+0x1e>
 8003c2c:	08003cd0 	.word	0x08003cd0
 8003c30:	08003cd0 	.word	0x08003cd0
 8003c34:	08003cd0 	.word	0x08003cd0
 8003c38:	08003cd4 	.word	0x08003cd4

08003c3c <memset>:
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	4402      	add	r2, r0
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d100      	bne.n	8003c46 <memset+0xa>
 8003c44:	4770      	bx	lr
 8003c46:	f803 1b01 	strb.w	r1, [r3], #1
 8003c4a:	e7f9      	b.n	8003c40 <memset+0x4>

08003c4c <_init>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	bf00      	nop
 8003c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c52:	bc08      	pop	{r3}
 8003c54:	469e      	mov	lr, r3
 8003c56:	4770      	bx	lr

08003c58 <_fini>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	bf00      	nop
 8003c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5e:	bc08      	pop	{r3}
 8003c60:	469e      	mov	lr, r3
 8003c62:	4770      	bx	lr
