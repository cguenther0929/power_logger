
power_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f0  080044a4  080044a4  000144a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c94  08004c94  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08004c94  08004c94  00014c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c9c  08004c9c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c9c  08004c9c  00014c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ca0  08004ca0  00014ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08004ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  20000030  08004cd4  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  08004cd4  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c33  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d36  00000000  00000000  00037c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  0003a9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021524  00000000  00000000  0003ba78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014b99  00000000  00000000  0005cf9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000bc765  00000000  00000000  00071b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0012e29a  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000fb8  00000000  00000000  0012e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045ec  00000000  00000000  0012f2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000030 	.word	0x20000030
 8000200:	00000000 	.word	0x00000000
 8000204:	0800448c 	.word	0x0800448c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000034 	.word	0x20000034
 8000220:	0800448c 	.word	0x0800448c

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b96e 	b.w	8000518 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	468e      	mov	lr, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	f040 8083 	bne.w	800036c <__udivmoddi4+0x118>
 8000266:	428a      	cmp	r2, r1
 8000268:	4617      	mov	r7, r2
 800026a:	d947      	bls.n	80002fc <__udivmoddi4+0xa8>
 800026c:	fab2 f382 	clz	r3, r2
 8000270:	b14b      	cbz	r3, 8000286 <__udivmoddi4+0x32>
 8000272:	f1c3 0120 	rsb	r1, r3, #32
 8000276:	fa05 fe03 	lsl.w	lr, r5, r3
 800027a:	fa20 f101 	lsr.w	r1, r0, r1
 800027e:	409f      	lsls	r7, r3
 8000280:	ea41 0e0e 	orr.w	lr, r1, lr
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800028a:	fbbe fcf8 	udiv	ip, lr, r8
 800028e:	fa1f f987 	uxth.w	r9, r7
 8000292:	fb08 e21c 	mls	r2, r8, ip, lr
 8000296:	fb0c f009 	mul.w	r0, ip, r9
 800029a:	0c21      	lsrs	r1, r4, #16
 800029c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	18ba      	adds	r2, r7, r2
 80002a6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80002aa:	f080 8118 	bcs.w	80004de <__udivmoddi4+0x28a>
 80002ae:	4290      	cmp	r0, r2
 80002b0:	f240 8115 	bls.w	80004de <__udivmoddi4+0x28a>
 80002b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80002b8:	443a      	add	r2, r7
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	fbb2 f0f8 	udiv	r0, r2, r8
 80002c0:	fb08 2210 	mls	r2, r8, r0, r2
 80002c4:	fb00 f109 	mul.w	r1, r0, r9
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	42a1      	cmp	r1, r4
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0x92>
 80002d2:	193c      	adds	r4, r7, r4
 80002d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d8:	f080 8103 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002dc:	42a1      	cmp	r1, r4
 80002de:	f240 8100 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002e2:	3802      	subs	r0, #2
 80002e4:	443c      	add	r4, r7
 80002e6:	1a64      	subs	r4, r4, r1
 80002e8:	2100      	movs	r1, #0
 80002ea:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa4>
 80002f0:	2200      	movs	r2, #0
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	e9c6 4200 	strd	r4, r2, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xac>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f382 	clz	r3, r2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d14f      	bne.n	80003a8 <__udivmoddi4+0x154>
 8000308:	1a8d      	subs	r5, r1, r2
 800030a:	2101      	movs	r1, #1
 800030c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000310:	fa1f f882 	uxth.w	r8, r2
 8000314:	fbb5 fcfe 	udiv	ip, r5, lr
 8000318:	fb0e 551c 	mls	r5, lr, ip, r5
 800031c:	fb08 f00c 	mul.w	r0, r8, ip
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000326:	42a8      	cmp	r0, r5
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0xe6>
 800032a:	197d      	adds	r5, r7, r5
 800032c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0xe4>
 8000332:	42a8      	cmp	r0, r5
 8000334:	f200 80e9 	bhi.w	800050a <__udivmoddi4+0x2b6>
 8000338:	4694      	mov	ip, r2
 800033a:	1a2d      	subs	r5, r5, r0
 800033c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000340:	fb0e 5510 	mls	r5, lr, r0, r5
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	b2a4      	uxth	r4, r4
 800034a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034e:	45a0      	cmp	r8, r4
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x10e>
 8000352:	193c      	adds	r4, r7, r4
 8000354:	f100 32ff 	add.w	r2, r0, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x10c>
 800035a:	45a0      	cmp	r8, r4
 800035c:	f200 80d9 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000360:	4610      	mov	r0, r2
 8000362:	eba4 0408 	sub.w	r4, r4, r8
 8000366:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036a:	e7c0      	b.n	80002ee <__udivmoddi4+0x9a>
 800036c:	428b      	cmp	r3, r1
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x12e>
 8000370:	2e00      	cmp	r6, #0
 8000372:	f000 80b1 	beq.w	80004d8 <__udivmoddi4+0x284>
 8000376:	2100      	movs	r1, #0
 8000378:	e9c6 0500 	strd	r0, r5, [r6]
 800037c:	4608      	mov	r0, r1
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f183 	clz	r1, r3
 8000386:	2900      	cmp	r1, #0
 8000388:	d14b      	bne.n	8000422 <__udivmoddi4+0x1ce>
 800038a:	42ab      	cmp	r3, r5
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0x140>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80b9 	bhi.w	8000506 <__udivmoddi4+0x2b2>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb65 0303 	sbc.w	r3, r5, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d0aa      	beq.n	80002f8 <__udivmoddi4+0xa4>
 80003a2:	e9c6 4e00 	strd	r4, lr, [r6]
 80003a6:	e7a7      	b.n	80002f8 <__udivmoddi4+0xa4>
 80003a8:	409f      	lsls	r7, r3
 80003aa:	f1c3 0220 	rsb	r2, r3, #32
 80003ae:	40d1      	lsrs	r1, r2
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	fa24 f202 	lsr.w	r2, r4, r2
 80003c4:	409d      	lsls	r5, r3
 80003c6:	fb00 fc08 	mul.w	ip, r0, r8
 80003ca:	432a      	orrs	r2, r5
 80003cc:	0c15      	lsrs	r5, r2, #16
 80003ce:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80003d2:	45ac      	cmp	ip, r5
 80003d4:	fa04 f403 	lsl.w	r4, r4, r3
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x19a>
 80003da:	197d      	adds	r5, r7, r5
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	f080 808f 	bcs.w	8000502 <__udivmoddi4+0x2ae>
 80003e4:	45ac      	cmp	ip, r5
 80003e6:	f240 808c 	bls.w	8000502 <__udivmoddi4+0x2ae>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	eba5 050c 	sub.w	r5, r5, ip
 80003f2:	fbb5 f1fe 	udiv	r1, r5, lr
 80003f6:	fb0e 5c11 	mls	ip, lr, r1, r5
 80003fa:	fb01 f908 	mul.w	r9, r1, r8
 80003fe:	b295      	uxth	r5, r2
 8000400:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000404:	45a9      	cmp	r9, r5
 8000406:	d907      	bls.n	8000418 <__udivmoddi4+0x1c4>
 8000408:	197d      	adds	r5, r7, r5
 800040a:	f101 32ff 	add.w	r2, r1, #4294967295
 800040e:	d274      	bcs.n	80004fa <__udivmoddi4+0x2a6>
 8000410:	45a9      	cmp	r9, r5
 8000412:	d972      	bls.n	80004fa <__udivmoddi4+0x2a6>
 8000414:	3902      	subs	r1, #2
 8000416:	443d      	add	r5, r7
 8000418:	eba5 0509 	sub.w	r5, r5, r9
 800041c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000420:	e778      	b.n	8000314 <__udivmoddi4+0xc0>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	408b      	lsls	r3, r1
 8000428:	fa22 fc07 	lsr.w	ip, r2, r7
 800042c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000430:	fa25 f407 	lsr.w	r4, r5, r7
 8000434:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000438:	fbb4 f9fe 	udiv	r9, r4, lr
 800043c:	fa1f f88c 	uxth.w	r8, ip
 8000440:	fb0e 4419 	mls	r4, lr, r9, r4
 8000444:	fa20 f307 	lsr.w	r3, r0, r7
 8000448:	fb09 fa08 	mul.w	sl, r9, r8
 800044c:	408d      	lsls	r5, r1
 800044e:	431d      	orrs	r5, r3
 8000450:	0c2b      	lsrs	r3, r5, #16
 8000452:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000456:	45a2      	cmp	sl, r4
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 f301 	lsl.w	r3, r0, r1
 8000460:	d909      	bls.n	8000476 <__udivmoddi4+0x222>
 8000462:	eb1c 0404 	adds.w	r4, ip, r4
 8000466:	f109 30ff 	add.w	r0, r9, #4294967295
 800046a:	d248      	bcs.n	80004fe <__udivmoddi4+0x2aa>
 800046c:	45a2      	cmp	sl, r4
 800046e:	d946      	bls.n	80004fe <__udivmoddi4+0x2aa>
 8000470:	f1a9 0902 	sub.w	r9, r9, #2
 8000474:	4464      	add	r4, ip
 8000476:	eba4 040a 	sub.w	r4, r4, sl
 800047a:	fbb4 f0fe 	udiv	r0, r4, lr
 800047e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000482:	fb00 fa08 	mul.w	sl, r0, r8
 8000486:	b2ad      	uxth	r5, r5
 8000488:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800048c:	45a2      	cmp	sl, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x24e>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d22d      	bcs.n	80004f6 <__udivmoddi4+0x2a2>
 800049a:	45a2      	cmp	sl, r4
 800049c:	d92b      	bls.n	80004f6 <__udivmoddi4+0x2a2>
 800049e:	3802      	subs	r0, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	eba4 040a 	sub.w	r4, r4, sl
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d319      	bcc.n	80004ea <__udivmoddi4+0x296>
 80004b6:	d016      	beq.n	80004e6 <__udivmoddi4+0x292>
 80004b8:	b15e      	cbz	r6, 80004d2 <__udivmoddi4+0x27e>
 80004ba:	ebb3 020e 	subs.w	r2, r3, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ca:	431f      	orrs	r7, r3
 80004cc:	40cc      	lsrs	r4, r1
 80004ce:	e9c6 7400 	strd	r7, r4, [r6]
 80004d2:	2100      	movs	r1, #0
 80004d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e70c      	b.n	80002f8 <__udivmoddi4+0xa4>
 80004de:	468c      	mov	ip, r1
 80004e0:	e6eb      	b.n	80002ba <__udivmoddi4+0x66>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6ff      	b.n	80002e6 <__udivmoddi4+0x92>
 80004e6:	4543      	cmp	r3, r8
 80004e8:	d2e6      	bcs.n	80004b8 <__udivmoddi4+0x264>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb69 050c 	sbc.w	r5, r9, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7e0      	b.n	80004b8 <__udivmoddi4+0x264>
 80004f6:	4628      	mov	r0, r5
 80004f8:	e7d3      	b.n	80004a2 <__udivmoddi4+0x24e>
 80004fa:	4611      	mov	r1, r2
 80004fc:	e78c      	b.n	8000418 <__udivmoddi4+0x1c4>
 80004fe:	4681      	mov	r9, r0
 8000500:	e7b9      	b.n	8000476 <__udivmoddi4+0x222>
 8000502:	4608      	mov	r0, r1
 8000504:	e773      	b.n	80003ee <__udivmoddi4+0x19a>
 8000506:	4608      	mov	r0, r1
 8000508:	e749      	b.n	800039e <__udivmoddi4+0x14a>
 800050a:	f1ac 0c02 	sub.w	ip, ip, #2
 800050e:	443d      	add	r5, r7
 8000510:	e713      	b.n	800033a <__udivmoddi4+0xe6>
 8000512:	3802      	subs	r0, #2
 8000514:	443c      	add	r4, r7
 8000516:	e724      	b.n	8000362 <__udivmoddi4+0x10e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 ff07 	bl	8001334 <HAL_Init>

  /* USER CODE BEGIN Init */

  setFont(&FreeSans9pt7b);
 8000526:	4829      	ldr	r0, [pc, #164]	; (80005cc <main+0xb0>)
 8000528:	f000 fcf0 	bl	8000f0c <setFont>
  display_oled_init(SSD1306_SWITCHCAPVCC, SCREEN_WIDTH, SCREEN_HEIGHT);
 800052c:	2240      	movs	r2, #64	; 0x40
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	2002      	movs	r0, #2
 8000532:	f000 fabd 	bl	8000ab0 <display_oled_init>

  time.led_fast_blink = false;
 8000536:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <main+0xb4>)
 8000538:	2200      	movs	r2, #0
 800053a:	719a      	strb	r2, [r3, #6]
  time.flag_10ms_tick = false;
 800053c:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <main+0xb4>)
 800053e:	2200      	movs	r2, #0
 8000540:	70da      	strb	r2, [r3, #3]
  time.flag_100ms_tick = false;
 8000542:	4b23      	ldr	r3, [pc, #140]	; (80005d0 <main+0xb4>)
 8000544:	2200      	movs	r2, #0
 8000546:	711a      	strb	r2, [r3, #4]
  time.flag_500ms_tick = false;
 8000548:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <main+0xb4>)
 800054a:	2200      	movs	r2, #0
 800054c:	715a      	strb	r2, [r3, #5]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f847 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f9dd 	bl	8000910 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000556:	f000 f8a7 	bl	80006a8 <MX_ADC1_Init>
  MX_I2C2_Init();
 800055a:	f000 f8e3 	bl	8000724 <MX_I2C2_Init>
  MX_FATFS_Init();
 800055e:	f003 fead 	bl	80042bc <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000562:	f000 f9ab 	bl	80008bc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000566:	f000 f90b 	bl	8000780 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  print_string("Chip Reset.",LF);
 800056a:	2101      	movs	r1, #1
 800056c:	4819      	ldr	r0, [pc, #100]	; (80005d4 <main+0xb8>)
 800056e:	f000 fe83 	bl	8001278 <print_string>
  // display_oled_drawBitmap((oled.screen_width - BITMAP_WIDTH) / 2, (oled.screen_height - BITMAP_HEIGHT) / 2,
  //             oled.splash_screen_data, oled.splash_screen_width, oled.splash_screen_height, 1);


  display_oled_drawBitmap(
    (oled.screen_width  - LOGO_WIDTH ) / 2,
 8000572:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <main+0xbc>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	3b10      	subs	r3, #16
 8000578:	0fda      	lsrs	r2, r3, #31
 800057a:	4413      	add	r3, r2
 800057c:	105b      	asrs	r3, r3, #1
  display_oled_drawBitmap(
 800057e:	b218      	sxth	r0, r3
    (oled.screen_height - LOGO_HEIGHT) / 2,
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <main+0xbc>)
 8000582:	785b      	ldrb	r3, [r3, #1]
 8000584:	3b10      	subs	r3, #16
 8000586:	0fda      	lsrs	r2, r3, #31
 8000588:	4413      	add	r3, r2
 800058a:	105b      	asrs	r3, r3, #1
  display_oled_drawBitmap(
 800058c:	b219      	sxth	r1, r3
 800058e:	2301      	movs	r3, #1
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	2310      	movs	r3, #16
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2310      	movs	r3, #16
 8000598:	4a10      	ldr	r2, [pc, #64]	; (80005dc <main+0xc0>)
 800059a:	f000 fb2f 	bl	8000bfc <display_oled_drawBitmap>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    
    if(time.flag_10ms_tick) {
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <main+0xb4>)
 80005a0:	78db      	ldrb	r3, [r3, #3]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d002      	beq.n	80005ac <main+0x90>
      time.flag_10ms_tick = false;
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <main+0xb4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	70da      	strb	r2, [r3, #3]
      // capture_accel_data();  // TODO remove this line?
    }

    if(time.flag_100ms_tick) {
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <main+0xb4>)
 80005ae:	791b      	ldrb	r3, [r3, #4]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d002      	beq.n	80005ba <main+0x9e>
      time.flag_100ms_tick = false;
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <main+0xb4>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	711a      	strb	r2, [r3, #4]
    }

    if(time.flag_500ms_tick) {
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <main+0xb4>)
 80005bc:	795b      	ldrb	r3, [r3, #5]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0ed      	beq.n	800059e <main+0x82>
      time.flag_500ms_tick = false;
 80005c2:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <main+0xb4>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	715a      	strb	r2, [r3, #5]
    if(time.flag_10ms_tick) {
 80005c8:	e7e9      	b.n	800059e <main+0x82>
 80005ca:	bf00      	nop
 80005cc:	20000000 	.word	0x20000000
 80005d0:	20000174 	.word	0x20000174
 80005d4:	080044a4 	.word	0x080044a4
 80005d8:	20000058 	.word	0x20000058
 80005dc:	08004c48 	.word	0x08004c48

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b09c      	sub	sp, #112	; 0x70
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ea:	2238      	movs	r2, #56	; 0x38
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 ff44 	bl	800447c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2220      	movs	r2, #32
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f003 ff36 	bl	800447c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000618:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061e:	2301      	movs	r3, #1
 8000620:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000622:	2300      	movs	r3, #0
 8000624:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000630:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000634:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000636:	2300      	movs	r3, #0
 8000638:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fffa 	bl	8002638 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800064a:	f000 fa2b 	bl	8000aa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2302      	movs	r3, #2
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800065e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000668:	2102      	movs	r1, #2
 800066a:	4618      	mov	r0, r3
 800066c:	f002 fafa 	bl	8002c64 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000676:	f000 fa15 	bl	8000aa4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800067a:	2302      	movs	r3, #2
 800067c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800067e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000682:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	4618      	mov	r0, r3
 8000688:	f002 fce2 	bl	8003050 <HAL_RCCEx_PeriphCLKConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000692:	f000 fa07 	bl	8000aa4 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000696:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <SystemClock_Config+0xc4>)
 8000698:	2201      	movs	r2, #1
 800069a:	601a      	str	r2, [r3, #0]
}
 800069c:	bf00      	nop
 800069e:	3770      	adds	r7, #112	; 0x70
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	42420070 	.word	0x42420070

080006a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_ADC1_Init+0x74>)
 80006ba:	4a19      	ldr	r2, [pc, #100]	; (8000720 <MX_ADC1_Init+0x78>)
 80006bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_ADC1_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_ADC1_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_ADC1_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_ADC1_Init+0x74>)
 80006d2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80006d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d8:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_ADC1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_ADC1_Init+0x74>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_ADC1_Init+0x74>)
 80006e6:	f000 fe87 	bl	80013f8 <HAL_ADC_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80006f0:	f000 f9d8 	bl	8000aa4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006f4:	230a      	movs	r3, #10
 80006f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_ADC1_Init+0x74>)
 8000706:	f000 ff4f 	bl	80015a8 <HAL_ADC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000710:	f000 f9c8 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000b8 	.word	0x200000b8
 8000720:	40012400 	.word	0x40012400

08000724 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_I2C2_Init+0x50>)
 800072a:	4a13      	ldr	r2, [pc, #76]	; (8000778 <MX_I2C2_Init+0x54>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_I2C2_Init+0x50>)
 8000730:	4a12      	ldr	r2, [pc, #72]	; (800077c <MX_I2C2_Init+0x58>)
 8000732:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_I2C2_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_I2C2_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_I2C2_Init+0x50>)
 8000742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000746:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_I2C2_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_I2C2_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_I2C2_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_I2C2_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_I2C2_Init+0x50>)
 8000762:	f001 fb1f 	bl	8001da4 <HAL_I2C_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800076c:	f000 f99a 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000064 	.word	0x20000064
 8000778:	40005800 	.word	0x40005800
 800077c:	000186a0 	.word	0x000186a0

08000780 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b096      	sub	sp, #88	; 0x58
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000786:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000794:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
 80007ae:	615a      	str	r2, [r3, #20]
 80007b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2220      	movs	r2, #32
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fe5f 	bl	800447c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007be:	4b3d      	ldr	r3, [pc, #244]	; (80008b4 <MX_TIM1_Init+0x134>)
 80007c0:	4a3d      	ldr	r2, [pc, #244]	; (80008b8 <MX_TIM1_Init+0x138>)
 80007c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 80007c4:	4b3b      	ldr	r3, [pc, #236]	; (80008b4 <MX_TIM1_Init+0x134>)
 80007c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007cc:	4b39      	ldr	r3, [pc, #228]	; (80008b4 <MX_TIM1_Init+0x134>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 720;
 80007d2:	4b38      	ldr	r3, [pc, #224]	; (80008b4 <MX_TIM1_Init+0x134>)
 80007d4:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80007d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007da:	4b36      	ldr	r3, [pc, #216]	; (80008b4 <MX_TIM1_Init+0x134>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e0:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <MX_TIM1_Init+0x134>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e6:	4b33      	ldr	r3, [pc, #204]	; (80008b4 <MX_TIM1_Init+0x134>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007ec:	4831      	ldr	r0, [pc, #196]	; (80008b4 <MX_TIM1_Init+0x134>)
 80007ee:	f002 fd61 	bl	80032b4 <HAL_TIM_Base_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007f8:	f000 f954 	bl	8000aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000800:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000802:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000806:	4619      	mov	r1, r3
 8000808:	482a      	ldr	r0, [pc, #168]	; (80008b4 <MX_TIM1_Init+0x134>)
 800080a:	f002 ff5b 	bl	80036c4 <HAL_TIM_ConfigClockSource>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000814:	f000 f946 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <MX_TIM1_Init+0x134>)
 800081a:	f002 fd9a 	bl	8003352 <HAL_TIM_OC_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000824:	f000 f93e 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000830:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000834:	4619      	mov	r1, r3
 8000836:	481f      	ldr	r0, [pc, #124]	; (80008b4 <MX_TIM1_Init+0x134>)
 8000838:	f003 fac0 	bl	8003dbc <HAL_TIMEx_MasterConfigSynchronization>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000842:	f000 f92f 	bl	8000aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084e:	2300      	movs	r3, #0
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000852:	2300      	movs	r3, #0
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800085a:	2300      	movs	r3, #0
 800085c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000866:	2200      	movs	r2, #0
 8000868:	4619      	mov	r1, r3
 800086a:	4812      	ldr	r0, [pc, #72]	; (80008b4 <MX_TIM1_Init+0x134>)
 800086c:	f002 fed2 	bl	8003614 <HAL_TIM_OC_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000876:	f000 f915 	bl	8000aa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800088e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000892:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_TIM1_Init+0x134>)
 800089e:	f003 faf3 	bl	8003e88 <HAL_TIMEx_ConfigBreakDeadTime>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80008a8:	f000 f8fc 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3758      	adds	r7, #88	; 0x58
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2000012c 	.word	0x2000012c
 80008b8:	40012c00 	.word	0x40012c00

080008bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <MX_USART1_UART_Init+0x50>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008f4:	f003 fb2b 	bl	8003f4e <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008fe:	f000 f8d1 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200000e8 	.word	0x200000e8
 800090c:	40013800 	.word	0x40013800

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000924:	4b59      	ldr	r3, [pc, #356]	; (8000a8c <MX_GPIO_Init+0x17c>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a58      	ldr	r2, [pc, #352]	; (8000a8c <MX_GPIO_Init+0x17c>)
 800092a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b56      	ldr	r3, [pc, #344]	; (8000a8c <MX_GPIO_Init+0x17c>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093c:	4b53      	ldr	r3, [pc, #332]	; (8000a8c <MX_GPIO_Init+0x17c>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a52      	ldr	r2, [pc, #328]	; (8000a8c <MX_GPIO_Init+0x17c>)
 8000942:	f043 0308 	orr.w	r3, r3, #8
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b50      	ldr	r3, [pc, #320]	; (8000a8c <MX_GPIO_Init+0x17c>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0308 	and.w	r3, r3, #8
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b4d      	ldr	r3, [pc, #308]	; (8000a8c <MX_GPIO_Init+0x17c>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a4c      	ldr	r2, [pc, #304]	; (8000a8c <MX_GPIO_Init+0x17c>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b4a      	ldr	r3, [pc, #296]	; (8000a8c <MX_GPIO_Init+0x17c>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096c:	4b47      	ldr	r3, [pc, #284]	; (8000a8c <MX_GPIO_Init+0x17c>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a46      	ldr	r2, [pc, #280]	; (8000a8c <MX_GPIO_Init+0x17c>)
 8000972:	f043 0310 	orr.w	r3, r3, #16
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b44      	ldr	r3, [pc, #272]	; (8000a8c <MX_GPIO_Init+0x17c>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0310 	and.w	r3, r3, #16
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000984:	4b41      	ldr	r3, [pc, #260]	; (8000a8c <MX_GPIO_Init+0x17c>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a40      	ldr	r2, [pc, #256]	; (8000a8c <MX_GPIO_Init+0x17c>)
 800098a:	f043 0320 	orr.w	r3, r3, #32
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b3e      	ldr	r3, [pc, #248]	; (8000a8c <MX_GPIO_Init+0x17c>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0320 	and.w	r3, r3, #32
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_DUT_PWR_Pin|HLTH_LED_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2106      	movs	r1, #6
 80009a0:	483b      	ldr	r0, [pc, #236]	; (8000a90 <MX_GPIO_Init+0x180>)
 80009a2:	f001 f9cd 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SWO_GPIO_Port, SWO_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ac:	4839      	ldr	r0, [pc, #228]	; (8000a94 <MX_GPIO_Init+0x184>)
 80009ae:	f001 f9c7 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EN_DUT_PWR_Pin */
  GPIO_InitStruct.Pin = EN_DUT_PWR_Pin;
 80009b2:	2304      	movs	r3, #4
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2302      	movs	r3, #2
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EN_DUT_PWR_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 0318 	add.w	r3, r7, #24
 80009c6:	4619      	mov	r1, r3
 80009c8:	4831      	ldr	r0, [pc, #196]	; (8000a90 <MX_GPIO_Init+0x180>)
 80009ca:	f001 f835 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWO_Pin */
  GPIO_InitStruct.Pin = SWO_Pin;
 80009ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2302      	movs	r3, #2
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SWO_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0318 	add.w	r3, r7, #24
 80009e4:	4619      	mov	r1, r3
 80009e6:	482b      	ldr	r0, [pc, #172]	; (8000a94 <MX_GPIO_Init+0x184>)
 80009e8:	f001 f826 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : HLTH_LED_Pin */
  GPIO_InitStruct.Pin = HLTH_LED_Pin;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009f0:	2311      	movs	r3, #17
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2302      	movs	r3, #2
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HLTH_LED_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 0318 	add.w	r3, r7, #24
 8000a00:	4619      	mov	r1, r3
 8000a02:	4823      	ldr	r0, [pc, #140]	; (8000a90 <MX_GPIO_Init+0x180>)
 8000a04:	f001 f818 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1_ACTIVE_Pin */
  GPIO_InitStruct.Pin = PB1_ACTIVE_Pin;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PB1_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0318 	add.w	r3, r7, #24
 8000a18:	4619      	mov	r1, r3
 8000a1a:	481d      	ldr	r0, [pc, #116]	; (8000a90 <MX_GPIO_Init+0x180>)
 8000a1c:	f001 f80c 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_SPI1_CSn_Pin ADC_SPI1_CLK_Pin ADC_SPI1_MISO_Pin ADC_SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = ADC_SPI1_CSn_Pin|ADC_SPI1_CLK_Pin|ADC_SPI1_MISO_Pin|ADC_SPI1_MOSI_Pin;
 8000a20:	23f0      	movs	r3, #240	; 0xf0
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 0318 	add.w	r3, r7, #24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4819      	ldr	r0, [pc, #100]	; (8000a98 <MX_GPIO_Init+0x188>)
 8000a34:	f001 f800 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SPI2_MOSI_Pin SD_SPI2_MISO_Pin SD_SPI2_CLK_Pin SD_SPI2_CSn_Pin */
  GPIO_InitStruct.Pin = SD_SPI2_MOSI_Pin|SD_SPI2_MISO_Pin|SD_SPI2_CLK_Pin|SD_SPI2_CSn_Pin;
 8000a38:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f107 0318 	add.w	r3, r7, #24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4811      	ldr	r0, [pc, #68]	; (8000a94 <MX_GPIO_Init+0x184>)
 8000a4e:	f000 fff3 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : REV_2_Pin REV_1_Pin REV_0_Pin */
  GPIO_InitStruct.Pin = REV_2_Pin|REV_1_Pin|REV_0_Pin;
 8000a52:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a60:	f107 0318 	add.w	r3, r7, #24
 8000a64:	4619      	mov	r1, r3
 8000a66:	480d      	ldr	r0, [pc, #52]	; (8000a9c <MX_GPIO_Init+0x18c>)
 8000a68:	f000 ffe6 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_ALRTn_Pin */
  GPIO_InitStruct.Pin = ADC_ALRTn_Pin;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_GPIO_Init+0x190>)
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADC_ALRTn_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0318 	add.w	r3, r7, #24
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <MX_GPIO_Init+0x188>)
 8000a80:	f000 ffda 	bl	8001a38 <HAL_GPIO_Init>

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40011800 	.word	0x40011800
 8000a94:	40010c00 	.word	0x40010c00
 8000a98:	40010800 	.word	0x40010800
 8000a9c:	40011400 	.word	0x40011400
 8000aa0:	10210000 	.word	0x10210000

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <display_oled_init>:
        a = b;                                                                     \
        b = t;                                                                     \
    }
#endif

void display_oled_init ( uint8_t voltage_state, uint8_t w, uint8_t h ) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
 8000aba:	460b      	mov	r3, r1
 8000abc:	71bb      	strb	r3, [r7, #6]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	717b      	strb	r3, [r7, #5]

    oled.screen_width = w;
 8000ac2:	4a3d      	ldr	r2, [pc, #244]	; (8000bb8 <display_oled_init+0x108>)
 8000ac4:	79bb      	ldrb	r3, [r7, #6]
 8000ac6:	7013      	strb	r3, [r2, #0]
    oled.screen_height = h;
 8000ac8:	4a3b      	ldr	r2, [pc, #236]	; (8000bb8 <display_oled_init+0x108>)
 8000aca:	797b      	ldrb	r3, [r7, #5]
 8000acc:	7053      	strb	r3, [r2, #1]
    // oled.oledfont = FreeSans9pt7b;
    
    /**
     * Call function to clear the display
     */
    oled_clear();       //TODO need to define this function
 8000ace:	f000 f87d 	bl	8000bcc <oled_clear>
     */
    static const uint8_t init1[] = {SSD1306_DISPLAYOFF,         // 0xAE
                                            SSD1306_SETDISPLAYCLOCKDIV, // 0xD5
                                            0x80, // the suggested ratio 0x80
                                            SSD1306_SETMULTIPLEX}; // 0xA8
    ssd1306_commandList(init1, sizeof(init1));
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	4839      	ldr	r0, [pc, #228]	; (8000bbc <display_oled_init+0x10c>)
 8000ad6:	f000 f9c3 	bl	8000e60 <ssd1306_commandList>
    ssd1306_command1(oled.screen_height - 1);
 8000ada:	4b37      	ldr	r3, [pc, #220]	; (8000bb8 <display_oled_init+0x108>)
 8000adc:	785b      	ldrb	r3, [r3, #1]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f9ec 	bl	8000ec0 <ssd1306_command1>

    static const uint8_t init2[] = {SSD1306_SETDISPLAYOFFSET, // 0xD3
                                            0x0,                      // no offset
                                            SSD1306_SETSTARTLINE | 0x0, // line #0
                                            SSD1306_CHARGEPUMP};        // 0x8D
    ssd1306_commandList(init2, sizeof(init2));
 8000ae8:	2104      	movs	r1, #4
 8000aea:	4835      	ldr	r0, [pc, #212]	; (8000bc0 <display_oled_init+0x110>)
 8000aec:	f000 f9b8 	bl	8000e60 <ssd1306_commandList>

    ssd1306_command1((voltage_state == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d101      	bne.n	8000afa <display_oled_init+0x4a>
 8000af6:	2310      	movs	r3, #16
 8000af8:	e000      	b.n	8000afc <display_oled_init+0x4c>
 8000afa:	2314      	movs	r3, #20
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f9df 	bl	8000ec0 <ssd1306_command1>

    static const uint8_t init3[] = {SSD1306_MEMORYMODE, // 0x20
                                            0x00, // 0x0 act like ks0108
                                            SSD1306_SEGREMAP | 0x1,
                                            SSD1306_COMSCANDEC};
    ssd1306_commandList(init3, sizeof(init3));
 8000b02:	2104      	movs	r1, #4
 8000b04:	482f      	ldr	r0, [pc, #188]	; (8000bc4 <display_oled_init+0x114>)
 8000b06:	f000 f9ab 	bl	8000e60 <ssd1306_commandList>

    uint8_t comPins = 0x02;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	73fb      	strb	r3, [r7, #15]
    uint8_t contrast = 0x8F;
 8000b0e:	238f      	movs	r3, #143	; 0x8f
 8000b10:	73bb      	strb	r3, [r7, #14]

    if ((oled.screen_width == 128) && (oled.screen_height == 32)) {
 8000b12:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <display_oled_init+0x108>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b80      	cmp	r3, #128	; 0x80
 8000b18:	d108      	bne.n	8000b2c <display_oled_init+0x7c>
 8000b1a:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <display_oled_init+0x108>)
 8000b1c:	785b      	ldrb	r3, [r3, #1]
 8000b1e:	2b20      	cmp	r3, #32
 8000b20:	d104      	bne.n	8000b2c <display_oled_init+0x7c>
        comPins = 0x02;
 8000b22:	2302      	movs	r3, #2
 8000b24:	73fb      	strb	r3, [r7, #15]
        contrast = 0x8F;
 8000b26:	238f      	movs	r3, #143	; 0x8f
 8000b28:	73bb      	strb	r3, [r7, #14]
 8000b2a:	e022      	b.n	8000b72 <display_oled_init+0xc2>
    } else if ((oled.screen_width == 128) && (oled.screen_height == 64)) {
 8000b2c:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <display_oled_init+0x108>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b80      	cmp	r3, #128	; 0x80
 8000b32:	d10d      	bne.n	8000b50 <display_oled_init+0xa0>
 8000b34:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <display_oled_init+0x108>)
 8000b36:	785b      	ldrb	r3, [r3, #1]
 8000b38:	2b40      	cmp	r3, #64	; 0x40
 8000b3a:	d109      	bne.n	8000b50 <display_oled_init+0xa0>
        comPins = 0x12;
 8000b3c:	2312      	movs	r3, #18
 8000b3e:	73fb      	strb	r3, [r7, #15]
        contrast = (voltage_state == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d101      	bne.n	8000b4a <display_oled_init+0x9a>
 8000b46:	239f      	movs	r3, #159	; 0x9f
 8000b48:	e000      	b.n	8000b4c <display_oled_init+0x9c>
 8000b4a:	23cf      	movs	r3, #207	; 0xcf
 8000b4c:	73bb      	strb	r3, [r7, #14]
 8000b4e:	e010      	b.n	8000b72 <display_oled_init+0xc2>
    } else if ((oled.screen_width == 96) && (oled.screen_height == 16)) {
 8000b50:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <display_oled_init+0x108>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b60      	cmp	r3, #96	; 0x60
 8000b56:	d10c      	bne.n	8000b72 <display_oled_init+0xc2>
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <display_oled_init+0x108>)
 8000b5a:	785b      	ldrb	r3, [r3, #1]
 8000b5c:	2b10      	cmp	r3, #16
 8000b5e:	d108      	bne.n	8000b72 <display_oled_init+0xc2>
        comPins = 0x2; // ada x12
 8000b60:	2302      	movs	r3, #2
 8000b62:	73fb      	strb	r3, [r7, #15]
        contrast = (voltage_state == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d101      	bne.n	8000b6e <display_oled_init+0xbe>
 8000b6a:	2310      	movs	r3, #16
 8000b6c:	e000      	b.n	8000b70 <display_oled_init+0xc0>
 8000b6e:	23af      	movs	r3, #175	; 0xaf
 8000b70:	73bb      	strb	r3, [r7, #14]
    } else {
        // Other screen varieties -- TBD
    }

    ssd1306_command1(SSD1306_SETCOMPINS);
 8000b72:	20da      	movs	r0, #218	; 0xda
 8000b74:	f000 f9a4 	bl	8000ec0 <ssd1306_command1>
    ssd1306_command1(comPins);
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f9a0 	bl	8000ec0 <ssd1306_command1>
    ssd1306_command1(SSD1306_SETCONTRAST);
 8000b80:	2081      	movs	r0, #129	; 0x81
 8000b82:	f000 f99d 	bl	8000ec0 <ssd1306_command1>
    ssd1306_command1(contrast);
 8000b86:	7bbb      	ldrb	r3, [r7, #14]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f999 	bl	8000ec0 <ssd1306_command1>

    ssd1306_command1(SSD1306_SETPRECHARGE); // 0xD9
 8000b8e:	20d9      	movs	r0, #217	; 0xd9
 8000b90:	f000 f996 	bl	8000ec0 <ssd1306_command1>
    ssd1306_command1((voltage_state == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d101      	bne.n	8000b9e <display_oled_init+0xee>
 8000b9a:	2322      	movs	r3, #34	; 0x22
 8000b9c:	e000      	b.n	8000ba0 <display_oled_init+0xf0>
 8000b9e:	23f1      	movs	r3, #241	; 0xf1
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 f98d 	bl	8000ec0 <ssd1306_command1>
        0x40,
        SSD1306_DISPLAYALLON_RESUME, // 0xA4
        SSD1306_NORMALDISPLAY,       // 0xA6
        SSD1306_DEACTIVATE_SCROLL,
        SSD1306_DISPLAYON}; // Main screen turn on
    ssd1306_commandList(init5, sizeof(init5));
 8000ba6:	2106      	movs	r1, #6
 8000ba8:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <display_oled_init+0x118>)
 8000baa:	f000 f959 	bl	8000e60 <ssd1306_commandList>
    
}
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000058 	.word	0x20000058
 8000bbc:	08004c68 	.word	0x08004c68
 8000bc0:	08004c6c 	.word	0x08004c6c
 8000bc4:	08004c70 	.word	0x08004c70
 8000bc8:	08004c74 	.word	0x08004c74

08000bcc <oled_clear>:

void oled_clear(void) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
    memset(oled.screen_buffer, 0, oled.screen_width * ((oled.screen_height + 7) / 8));
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <oled_clear+0x2c>)
 8000bd2:	6858      	ldr	r0, [r3, #4]
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <oled_clear+0x2c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <oled_clear+0x2c>)
 8000bdc:	785b      	ldrb	r3, [r3, #1]
 8000bde:	3307      	adds	r3, #7
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	da00      	bge.n	8000be6 <oled_clear+0x1a>
 8000be4:	3307      	adds	r3, #7
 8000be6:	10db      	asrs	r3, r3, #3
 8000be8:	fb03 f302 	mul.w	r3, r3, r2
 8000bec:	461a      	mov	r2, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	f003 fc44 	bl	800447c <memset>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000058 	.word	0x20000058

08000bfc <display_oled_drawBitmap>:

void display_oled_drawBitmap(int16_t x, int16_t y, const uint8_t bitmap[],
                              int16_t w, int16_t h, uint16_t color) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60ba      	str	r2, [r7, #8]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4603      	mov	r3, r0
 8000c08:	81fb      	strh	r3, [r7, #14]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	81bb      	strh	r3, [r7, #12]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c16:	3307      	adds	r3, #7
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	da00      	bge.n	8000c1e <display_oled_drawBitmap+0x22>
 8000c1c:	3307      	adds	r3, #7
 8000c1e:	10db      	asrs	r3, r3, #3
 8000c20:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	75fb      	strb	r3, [r7, #23]

    for (int16_t j = 0; j < h; j++, y++) {
 8000c26:	2300      	movs	r3, #0
 8000c28:	82bb      	strh	r3, [r7, #20]
 8000c2a:	e046      	b.n	8000cba <display_oled_drawBitmap+0xbe>
        for (int16_t i = 0; i < w; i++) {
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	827b      	strh	r3, [r7, #18]
 8000c30:	e031      	b.n	8000c96 <display_oled_drawBitmap+0x9a>
            if (i & 7)
 8000c32:	8a7b      	ldrh	r3, [r7, #18]
 8000c34:	f003 0307 	and.w	r3, r3, #7
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d003      	beq.n	8000c44 <display_oled_drawBitmap+0x48>
                byte <<= 1;
 8000c3c:	7dfb      	ldrb	r3, [r7, #23]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	75fb      	strb	r3, [r7, #23]
 8000c42:	e012      	b.n	8000c6a <display_oled_drawBitmap+0x6e>
            else
                byte = bitmap[j * byteWidth + i / 8];
 8000c44:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000c48:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000c4c:	fb02 f203 	mul.w	r2, r2, r3
 8000c50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	da00      	bge.n	8000c5a <display_oled_drawBitmap+0x5e>
 8000c58:	3307      	adds	r3, #7
 8000c5a:	10db      	asrs	r3, r3, #3
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	4413      	add	r3, r2
 8000c60:	461a      	mov	r2, r3
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	4413      	add	r3, r2
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	75fb      	strb	r3, [r7, #23]
            if (byte & 0x80)
 8000c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	da0b      	bge.n	8000c8a <display_oled_drawBitmap+0x8e>
                drawPixel(x + i, y, color);
 8000c72:	89fa      	ldrh	r2, [r7, #14]
 8000c74:	8a7b      	ldrh	r3, [r7, #18]
 8000c76:	4413      	add	r3, r2
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 f823 	bl	8000cd0 <drawPixel>
        for (int16_t i = 0; i < w; i++) {
 8000c8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	3301      	adds	r3, #1
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	827b      	strh	r3, [r7, #18]
 8000c96:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	dbc7      	blt.n	8000c32 <display_oled_drawBitmap+0x36>
    for (int16_t j = 0; j < h; j++, y++) {
 8000ca2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	3301      	adds	r3, #1
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	82bb      	strh	r3, [r7, #20]
 8000cae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	81bb      	strh	r3, [r7, #12]
 8000cba:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000cbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	dbb2      	blt.n	8000c2c <display_oled_drawBitmap+0x30>
        }
    }
}
 8000cc6:	bf00      	nop
 8000cc8:	bf00      	nop
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <drawPixel>:


bool drawPixel(int16_t x, int16_t y, uint8_t color) {
 8000cd0:	b490      	push	{r4, r7}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	80bb      	strh	r3, [r7, #4]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	70fb      	strb	r3, [r7, #3]
    
    if ((x >= 0) && (x < oled.screen_width) && (y >= 0) && (y < oled.screen_height)) {
 8000ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f2c0 80b1 	blt.w	8000e4e <drawPixel+0x17e>
 8000cec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf0:	4a5a      	ldr	r2, [pc, #360]	; (8000e5c <drawPixel+0x18c>)
 8000cf2:	7812      	ldrb	r2, [r2, #0]
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	f280 80aa 	bge.w	8000e4e <drawPixel+0x17e>
 8000cfa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f2c0 80a5 	blt.w	8000e4e <drawPixel+0x17e>
 8000d04:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d08:	4a54      	ldr	r2, [pc, #336]	; (8000e5c <drawPixel+0x18c>)
 8000d0a:	7852      	ldrb	r2, [r2, #1]
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	f280 809e 	bge.w	8000e4e <drawPixel+0x17e>
            // case 1:
            // ssd1306_swap(x, y);
            // x = oled.screen_width - x - 1;
            // break;
            // case 2:
        x = oled.screen_width - x - 1;
 8000d12:	4b52      	ldr	r3, [pc, #328]	; (8000e5c <drawPixel+0x18c>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	88fb      	ldrh	r3, [r7, #6]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	80fb      	strh	r3, [r7, #6]
        y = oled.screen_height - y - 1;
 8000d24:	4b4d      	ldr	r3, [pc, #308]	; (8000e5c <drawPixel+0x18c>)
 8000d26:	785b      	ldrb	r3, [r3, #1]
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	88bb      	ldrh	r3, [r7, #4]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	3b01      	subs	r3, #1
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	80bb      	strh	r3, [r7, #4]
            // case 3:
            // ssd1306_swap(x, y);
            // y = oled.screen_height - y - 1;
            // break;
        
        switch (color) {
 8000d36:	78fb      	ldrb	r3, [r7, #3]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d05c      	beq.n	8000df6 <drawPixel+0x126>
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	f300 8084 	bgt.w	8000e4a <drawPixel+0x17a>
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d02b      	beq.n	8000d9e <drawPixel+0xce>
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d17f      	bne.n	8000e4a <drawPixel+0x17a>
            case SSD1306_WHITE:
                oled.screen_buffer[x + (y / 8) * oled.screen_width] |= (1 << (y & 7));
 8000d4a:	4b44      	ldr	r3, [pc, #272]	; (8000e5c <drawPixel+0x18c>)
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000d52:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	da00      	bge.n	8000d5c <drawPixel+0x8c>
 8000d5a:	3307      	adds	r3, #7
 8000d5c:	10db      	asrs	r3, r3, #3
 8000d5e:	b218      	sxth	r0, r3
 8000d60:	4604      	mov	r4, r0
 8000d62:	4b3e      	ldr	r3, [pc, #248]	; (8000e5c <drawPixel+0x18c>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	fb03 f304 	mul.w	r3, r3, r4
 8000d6a:	440b      	add	r3, r1
 8000d6c:	4413      	add	r3, r2
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b25a      	sxtb	r2, r3
 8000d72:	88bb      	ldrh	r3, [r7, #4]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	b25b      	sxtb	r3, r3
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b25c      	sxtb	r4, r3
 8000d84:	4b35      	ldr	r3, [pc, #212]	; (8000e5c <drawPixel+0x18c>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000d8c:	4a33      	ldr	r2, [pc, #204]	; (8000e5c <drawPixel+0x18c>)
 8000d8e:	7812      	ldrb	r2, [r2, #0]
 8000d90:	fb02 f200 	mul.w	r2, r2, r0
 8000d94:	440a      	add	r2, r1
 8000d96:	4413      	add	r3, r2
 8000d98:	b2e2      	uxtb	r2, r4
 8000d9a:	701a      	strb	r2, [r3, #0]
            break;
 8000d9c:	e055      	b.n	8000e4a <drawPixel+0x17a>
            
            case SSD1306_BLACK:
                oled.screen_buffer[x + (y / 8) * oled.screen_width] &= ~(1 << (y & 7));
 8000d9e:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <drawPixel+0x18c>)
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000da6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	da00      	bge.n	8000db0 <drawPixel+0xe0>
 8000dae:	3307      	adds	r3, #7
 8000db0:	10db      	asrs	r3, r3, #3
 8000db2:	b218      	sxth	r0, r3
 8000db4:	4604      	mov	r4, r0
 8000db6:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <drawPixel+0x18c>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	fb03 f304 	mul.w	r3, r3, r4
 8000dbe:	440b      	add	r3, r1
 8000dc0:	4413      	add	r3, r2
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b25a      	sxtb	r2, r3
 8000dc6:	88bb      	ldrh	r3, [r7, #4]
 8000dc8:	f003 0307 	and.w	r3, r3, #7
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	b25b      	sxtb	r3, r3
 8000dd8:	4013      	ands	r3, r2
 8000dda:	b25c      	sxtb	r4, r3
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <drawPixel+0x18c>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000de4:	4a1d      	ldr	r2, [pc, #116]	; (8000e5c <drawPixel+0x18c>)
 8000de6:	7812      	ldrb	r2, [r2, #0]
 8000de8:	fb02 f200 	mul.w	r2, r2, r0
 8000dec:	440a      	add	r2, r1
 8000dee:	4413      	add	r3, r2
 8000df0:	b2e2      	uxtb	r2, r4
 8000df2:	701a      	strb	r2, [r3, #0]
            break;
 8000df4:	e029      	b.n	8000e4a <drawPixel+0x17a>
            
            case SSD1306_INVERSE:
                oled.screen_buffer[x + (y / 8) * oled.screen_width] ^= (1 << (y & 7));
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <drawPixel+0x18c>)
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000dfe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	da00      	bge.n	8000e08 <drawPixel+0x138>
 8000e06:	3307      	adds	r3, #7
 8000e08:	10db      	asrs	r3, r3, #3
 8000e0a:	b218      	sxth	r0, r3
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <drawPixel+0x18c>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	fb03 f304 	mul.w	r3, r3, r4
 8000e16:	440b      	add	r3, r1
 8000e18:	4413      	add	r3, r2
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b25a      	sxtb	r2, r3
 8000e1e:	88bb      	ldrh	r3, [r7, #4]
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	2101      	movs	r1, #1
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	4053      	eors	r3, r2
 8000e2e:	b25c      	sxtb	r4, r3
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <drawPixel+0x18c>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000e38:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <drawPixel+0x18c>)
 8000e3a:	7812      	ldrb	r2, [r2, #0]
 8000e3c:	fb02 f200 	mul.w	r2, r2, r0
 8000e40:	440a      	add	r2, r1
 8000e42:	4413      	add	r3, r2
 8000e44:	b2e2      	uxtb	r2, r4
 8000e46:	701a      	strb	r2, [r3, #0]
            break;
 8000e48:	bf00      	nop
        }
        return true;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <drawPixel+0x180>
    }
    else {
        return false;
 8000e4e:	2300      	movs	r3, #0
    }
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc90      	pop	{r4, r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000058 	.word	0x20000058

08000e60 <ssd1306_commandList>:



void ssd1306_commandList(const uint8_t * command_pointer, uint8_t bytes_to_transmit) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af02      	add	r7, sp, #8
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	70fb      	strb	r3, [r7, #3]
    // }

    /**
     * Set Co and D/C bit to zero
     */
    if (HAL_I2C_Master_Transmit(&hi2c2, OLED_SCREEN_ADDRESS, (uint8_t *)0x00, 1, 10000) != HAL_OK){
 8000e6c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	2301      	movs	r3, #1
 8000e74:	2200      	movs	r2, #0
 8000e76:	213c      	movs	r1, #60	; 0x3c
 8000e78:	4810      	ldr	r0, [pc, #64]	; (8000ebc <ssd1306_commandList+0x5c>)
 8000e7a:	f001 f8d7 	bl	800202c <HAL_I2C_Master_Transmit>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d011      	beq.n	8000ea8 <ssd1306_commandList+0x48>
        asm("bkpt 255");
 8000e84:	beff      	bkpt	0x00ff
    }

    /**
     * Transmit the array of data
     */
    while(bytes_to_transmit--) {
 8000e86:	e00f      	b.n	8000ea8 <ssd1306_commandList+0x48>
        if (HAL_I2C_Master_Transmit(&hi2c2, OLED_SCREEN_ADDRESS, (uint8_t *) command_pointer, 1, 10000) != HAL_OK){
 8000e88:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	2301      	movs	r3, #1
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	213c      	movs	r1, #60	; 0x3c
 8000e94:	4809      	ldr	r0, [pc, #36]	; (8000ebc <ssd1306_commandList+0x5c>)
 8000e96:	f001 f8c9 	bl	800202c <HAL_I2C_Master_Transmit>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d000      	beq.n	8000ea2 <ssd1306_commandList+0x42>
            asm("bkpt 255");
 8000ea0:	beff      	bkpt	0x00ff
        }
        command_pointer++;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	607b      	str	r3, [r7, #4]
    while(bytes_to_transmit--) {
 8000ea8:	78fb      	ldrb	r3, [r7, #3]
 8000eaa:	1e5a      	subs	r2, r3, #1
 8000eac:	70fa      	strb	r2, [r7, #3]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d1ea      	bne.n	8000e88 <ssd1306_commandList+0x28>
    }
}
 8000eb2:	bf00      	nop
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000064 	.word	0x20000064

08000ec0 <ssd1306_command1>:


void ssd1306_command1(uint8_t command) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af02      	add	r7, sp, #8
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
    //   }
  
    /**
     * Set Co and D/C bit to zero
     */
    if (HAL_I2C_Master_Transmit(&hi2c2, OLED_SCREEN_ADDRESS, (uint8_t *) 0x00, 1, 10000) != HAL_OK){
 8000eca:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	213c      	movs	r1, #60	; 0x3c
 8000ed6:	480c      	ldr	r0, [pc, #48]	; (8000f08 <ssd1306_command1+0x48>)
 8000ed8:	f001 f8a8 	bl	800202c <HAL_I2C_Master_Transmit>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d000      	beq.n	8000ee4 <ssd1306_command1+0x24>
        asm("bkpt 255");        //TODO need to figure out what this does
 8000ee2:	beff      	bkpt	0x00ff
    }

    /**
     * Transmit the array of data
     */
    if (HAL_I2C_Master_Transmit(&hi2c2, OLED_SCREEN_ADDRESS, (uint8_t *) command, 1, 10000) != HAL_OK){
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	f242 7310 	movw	r3, #10000	; 0x2710
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2301      	movs	r3, #1
 8000ef0:	213c      	movs	r1, #60	; 0x3c
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <ssd1306_command1+0x48>)
 8000ef4:	f001 f89a 	bl	800202c <HAL_I2C_Master_Transmit>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d000      	beq.n	8000f00 <ssd1306_command1+0x40>
        asm("bkpt 255");        //TODO need to figure out what this does
 8000efe:	beff      	bkpt	0x00ff
    }

}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000064 	.word	0x20000064

08000f0c <setFont>:


}

//TODO clean up stale code in the following
void setFont(GFXfont *f) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
//       oled.cursor_y += 6;
//     }
//   } else if (font) { // NULL passed.  Current oledfont struct defined?
    // Switching from new to classic (5x7) font behavior.
    // Move cursor pos up 6 pixels so it's at top-left of char.
    oled.cursor_y -= 6;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <setFont+0x24>)
 8000f16:	789b      	ldrb	r3, [r3, #2]
 8000f18:	3b06      	subs	r3, #6
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <setFont+0x24>)
 8000f1e:	709a      	strb	r2, [r3, #2]
//   }
    oled.oledfont = f;
 8000f20:	4a03      	ldr	r2, [pc, #12]	; (8000f30 <setFont+0x24>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6093      	str	r3, [r2, #8]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	20000058 	.word	0x20000058

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_MspInit+0x5c>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <HAL_MspInit+0x5c>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6193      	str	r3, [r2, #24]
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_MspInit+0x5c>)
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_MspInit+0x5c>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <HAL_MspInit+0x5c>)
 8000f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_MspInit+0x5c>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_MspInit+0x60>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <HAL_MspInit+0x60>)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f86:	bf00      	nop
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40010000 	.word	0x40010000

08000f98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a14      	ldr	r2, [pc, #80]	; (8001004 <HAL_ADC_MspInit+0x6c>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d121      	bne.n	8000ffc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_ADC_MspInit+0x70>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a12      	ldr	r2, [pc, #72]	; (8001008 <HAL_ADC_MspInit+0x70>)
 8000fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <HAL_ADC_MspInit+0x70>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_ADC_MspInit+0x70>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a0c      	ldr	r2, [pc, #48]	; (8001008 <HAL_ADC_MspInit+0x70>)
 8000fd6:	f043 0310 	orr.w	r3, r3, #16
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_ADC_MspInit+0x70>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0310 	and.w	r3, r3, #16
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IN_FD_V_Pin;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fec:	2303      	movs	r3, #3
 8000fee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(IN_FD_V_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <HAL_ADC_MspInit+0x74>)
 8000ff8:	f000 fd1e 	bl	8001a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ffc:	bf00      	nop
 8000ffe:	3720      	adds	r7, #32
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40012400 	.word	0x40012400
 8001008:	40021000 	.word	0x40021000
 800100c:	40011000 	.word	0x40011000

08001010 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a16      	ldr	r2, [pc, #88]	; (8001084 <HAL_I2C_MspInit+0x74>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d124      	bne.n	800107a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_I2C_MspInit+0x78>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <HAL_I2C_MspInit+0x78>)
 8001036:	f043 0308 	orr.w	r3, r3, #8
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_I2C_MspInit+0x78>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = DISP_I2C2_SCL_Pin|DISP_I2C2_SDA_Pin;
 8001048:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800104c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104e:	2312      	movs	r3, #18
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	4619      	mov	r1, r3
 800105c:	480b      	ldr	r0, [pc, #44]	; (800108c <HAL_I2C_MspInit+0x7c>)
 800105e:	f000 fceb 	bl	8001a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <HAL_I2C_MspInit+0x78>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	4a08      	ldr	r2, [pc, #32]	; (8001088 <HAL_I2C_MspInit+0x78>)
 8001068:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800106c:	61d3      	str	r3, [r2, #28]
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_I2C_MspInit+0x78>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800107a:	bf00      	nop
 800107c:	3720      	adds	r7, #32
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40005800 	.word	0x40005800
 8001088:	40021000 	.word	0x40021000
 800108c:	40010c00 	.word	0x40010c00

08001090 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <HAL_TIM_Base_MspInit+0x44>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d113      	bne.n	80010ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <HAL_TIM_Base_MspInit+0x48>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <HAL_TIM_Base_MspInit+0x48>)
 80010a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010ac:	6193      	str	r3, [r2, #24]
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_TIM_Base_MspInit+0x48>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	201b      	movs	r0, #27
 80010c0:	f000 fc83 	bl	80019ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80010c4:	201b      	movs	r0, #27
 80010c6:	f000 fc9c 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40012c00 	.word	0x40012c00
 80010d8:	40021000 	.word	0x40021000

080010dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <HAL_UART_MspInit+0x8c>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d131      	bne.n	8001160 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <HAL_UART_MspInit+0x90>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a1a      	ldr	r2, [pc, #104]	; (800116c <HAL_UART_MspInit+0x90>)
 8001102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_UART_MspInit+0x90>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_UART_MspInit+0x90>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a14      	ldr	r2, [pc, #80]	; (800116c <HAL_UART_MspInit+0x90>)
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_UART_MspInit+0x90>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CONSOLE_TX_Pin;
 800112c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001130:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CONSOLE_TX_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	4619      	mov	r1, r3
 8001140:	480b      	ldr	r0, [pc, #44]	; (8001170 <HAL_UART_MspInit+0x94>)
 8001142:	f000 fc79 	bl	8001a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CONSOLE_RXD_Pin;
 8001146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800114a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(CONSOLE_RXD_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	4619      	mov	r1, r3
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <HAL_UART_MspInit+0x94>)
 800115c:	f000 fc6c 	bl	8001a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001160:	bf00      	nop
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40013800 	.word	0x40013800
 800116c:	40021000 	.word	0x40021000
 8001170:	40010800 	.word	0x40010800

08001174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <NMI_Handler+0x4>

0800117a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <HardFault_Handler+0x4>

08001180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <MemManage_Handler+0x4>

08001186 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <BusFault_Handler+0x4>

0800118c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <UsageFault_Handler+0x4>

08001192 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr

0800119e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr

080011aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr

080011b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ba:	f000 f901 	bl	80013c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	time.flag_10ms_tick = true;
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <TIM1_CC_IRQHandler+0x9c>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	70da      	strb	r2, [r3, #3]

		if(time.ticks10ms == 9) {
 80011ce:	4b24      	ldr	r3, [pc, #144]	; (8001260 <TIM1_CC_IRQHandler+0x9c>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b09      	cmp	r3, #9
 80011d4:	d138      	bne.n	8001248 <TIM1_CC_IRQHandler+0x84>
		  time.ticks10ms = 0;
 80011d6:	4b22      	ldr	r3, [pc, #136]	; (8001260 <TIM1_CC_IRQHandler+0x9c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
		  time.flag_100ms_tick = true;
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <TIM1_CC_IRQHandler+0x9c>)
 80011de:	2201      	movs	r2, #1
 80011e0:	711a      	strb	r2, [r3, #4]
			if(time.led_fast_blink)
 80011e2:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <TIM1_CC_IRQHandler+0x9c>)
 80011e4:	799b      	ldrb	r3, [r3, #6]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <TIM1_CC_IRQHandler+0x2e>
				HAL_GPIO_TogglePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin);                     // Toggle the LED if not locked and fast blink is enabled
 80011ea:	2102      	movs	r1, #2
 80011ec:	481d      	ldr	r0, [pc, #116]	; (8001264 <TIM1_CC_IRQHandler+0xa0>)
 80011ee:	f000 fdbf 	bl	8001d70 <HAL_GPIO_TogglePin>
			if(time.ticks100ms == 4) {
 80011f2:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <TIM1_CC_IRQHandler+0x9c>)
 80011f4:	785b      	ldrb	r3, [r3, #1]
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d11f      	bne.n	800123a <TIM1_CC_IRQHandler+0x76>
				time.ticks100ms = 0;
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <TIM1_CC_IRQHandler+0x9c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	705a      	strb	r2, [r3, #1]
				time.flag_500ms_tick = true;
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <TIM1_CC_IRQHandler+0x9c>)
 8001202:	2201      	movs	r2, #1
 8001204:	715a      	strb	r2, [r3, #5]
				if(!time.led_fast_blink)
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <TIM1_CC_IRQHandler+0x9c>)
 8001208:	799b      	ldrb	r3, [r3, #6]
 800120a:	f083 0301 	eor.w	r3, r3, #1
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <TIM1_CC_IRQHandler+0x58>
					HAL_GPIO_TogglePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin);
 8001214:	2102      	movs	r1, #2
 8001216:	4813      	ldr	r0, [pc, #76]	; (8001264 <TIM1_CC_IRQHandler+0xa0>)
 8001218:	f000 fdaa 	bl	8001d70 <HAL_GPIO_TogglePin>
				if(time.ticks500ms == 119)										// One minute worth of half seconds
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <TIM1_CC_IRQHandler+0x9c>)
 800121e:	789b      	ldrb	r3, [r3, #2]
 8001220:	2b77      	cmp	r3, #119	; 0x77
 8001222:	d103      	bne.n	800122c <TIM1_CC_IRQHandler+0x68>
					time.ticks500ms = 0;
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <TIM1_CC_IRQHandler+0x9c>)
 8001226:	2200      	movs	r2, #0
 8001228:	709a      	strb	r2, [r3, #2]
 800122a:	e013      	b.n	8001254 <TIM1_CC_IRQHandler+0x90>
				else
					time.ticks500ms += 1;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <TIM1_CC_IRQHandler+0x9c>)
 800122e:	789b      	ldrb	r3, [r3, #2]
 8001230:	3301      	adds	r3, #1
 8001232:	b2da      	uxtb	r2, r3
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <TIM1_CC_IRQHandler+0x9c>)
 8001236:	709a      	strb	r2, [r3, #2]
 8001238:	e00c      	b.n	8001254 <TIM1_CC_IRQHandler+0x90>
			}
			else {
				 time.ticks100ms += 1;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <TIM1_CC_IRQHandler+0x9c>)
 800123c:	785b      	ldrb	r3, [r3, #1]
 800123e:	3301      	adds	r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <TIM1_CC_IRQHandler+0x9c>)
 8001244:	705a      	strb	r2, [r3, #1]
 8001246:	e005      	b.n	8001254 <TIM1_CC_IRQHandler+0x90>
			}
		}
		else {
			time.ticks10ms += 1;
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <TIM1_CC_IRQHandler+0x9c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <TIM1_CC_IRQHandler+0x9c>)
 8001252:	701a      	strb	r2, [r3, #0]
		}

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001254:	4804      	ldr	r0, [pc, #16]	; (8001268 <TIM1_CC_IRQHandler+0xa4>)
 8001256:	f002 f8d4 	bl	8003402 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000174 	.word	0x20000174
 8001264:	40011800 	.word	0x40011800
 8001268:	2000012c 	.word	0x2000012c

0800126c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr

08001278 <print_string>:
    else if(action == CR) {
        HAL_UART_Transmit(&huart1, (uint8_t *) '\r', (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}

void print_string(const char * s, uint8_t action) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]

    while(*s != '\0') {
 8001284:	e009      	b.n	800129a <print_string+0x22>
        HAL_UART_Transmit(&huart1, (uint8_t *) s, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	2201      	movs	r2, #1
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	4815      	ldr	r0, [pc, #84]	; (80012e4 <print_string+0x6c>)
 8001290:	f002 feaa 	bl	8003fe8 <HAL_UART_Transmit>
        s++;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3301      	adds	r3, #1
 8001298:	607b      	str	r3, [r7, #4]
    while(*s != '\0') {
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f1      	bne.n	8001286 <print_string+0xe>
    }

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 80012a2:	78fb      	ldrb	r3, [r7, #3]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d10e      	bne.n	80012c6 <print_string+0x4e>
        HAL_UART_Transmit(&huart1,(uint8_t *) '\r', (uint16_t) 0x01, HAL_MAX_DELAY);
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ac:	2201      	movs	r2, #1
 80012ae:	210d      	movs	r1, #13
 80012b0:	480c      	ldr	r0, [pc, #48]	; (80012e4 <print_string+0x6c>)
 80012b2:	f002 fe99 	bl	8003fe8 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t *) '\n', (uint16_t) 0x01, HAL_MAX_DELAY);
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	2201      	movs	r2, #1
 80012bc:	210a      	movs	r1, #10
 80012be:	4809      	ldr	r0, [pc, #36]	; (80012e4 <print_string+0x6c>)
 80012c0:	f002 fe92 	bl	8003fe8 <HAL_UART_Transmit>
    }
    else if(action == CR) {
        HAL_UART_Transmit(&huart1, (uint8_t *) '\r', (uint16_t) 0x01, HAL_MAX_DELAY);
    }

}
 80012c4:	e009      	b.n	80012da <print_string+0x62>
    else if(action == CR) {
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d106      	bne.n	80012da <print_string+0x62>
        HAL_UART_Transmit(&huart1, (uint8_t *) '\r', (uint16_t) 0x01, HAL_MAX_DELAY);
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295
 80012d0:	2201      	movs	r2, #1
 80012d2:	210d      	movs	r1, #13
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <print_string+0x6c>)
 80012d6:	f002 fe87 	bl	8003fe8 <HAL_UART_Transmit>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200000e8 	.word	0x200000e8

080012e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ea:	490d      	ldr	r1, [pc, #52]	; (8001320 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f0:	e002      	b.n	80012f8 <LoopCopyDataInit>

080012f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f6:	3304      	adds	r3, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012fc:	d3f9      	bcc.n	80012f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001300:	4c0a      	ldr	r4, [pc, #40]	; (800132c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001304:	e001      	b.n	800130a <LoopFillZerobss>

08001306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001308:	3204      	adds	r2, #4

0800130a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800130c:	d3fb      	bcc.n	8001306 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800130e:	f7ff ffad 	bl	800126c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001312:	f003 f88f 	bl	8004434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001316:	f7ff f901 	bl	800051c <main>
  bx lr
 800131a:	4770      	bx	lr
  ldr r0, =_sdata
 800131c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001320:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001324:	08004ca4 	.word	0x08004ca4
  ldr r2, =_sbss
 8001328:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800132c:	200005e4 	.word	0x200005e4

08001330 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <ADC1_2_IRQHandler>
	...

08001334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_Init+0x28>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a07      	ldr	r2, [pc, #28]	; (800135c <HAL_Init+0x28>)
 800133e:	f043 0310 	orr.w	r3, r3, #16
 8001342:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001344:	2003      	movs	r0, #3
 8001346:	f000 fb35 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134a:	2000      	movs	r0, #0
 800134c:	f000 f808 	bl	8001360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001350:	f7ff fdf0 	bl	8000f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40022000 	.word	0x40022000

08001360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_InitTick+0x54>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_InitTick+0x58>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4619      	mov	r1, r3
 8001372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001376:	fbb3 f3f1 	udiv	r3, r3, r1
 800137a:	fbb2 f3f3 	udiv	r3, r2, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fb4d 	bl	8001a1e <HAL_SYSTICK_Config>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e00e      	b.n	80013ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b0f      	cmp	r3, #15
 8001392:	d80a      	bhi.n	80013aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001394:	2200      	movs	r2, #0
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f000 fb15 	bl	80019ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a0:	4a06      	ldr	r2, [pc, #24]	; (80013bc <HAL_InitTick+0x5c>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e000      	b.n	80013ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000010 	.word	0x20000010
 80013b8:	20000018 	.word	0x20000018
 80013bc:	20000014 	.word	0x20000014

080013c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_IncTick+0x1c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_IncTick+0x20>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	4a03      	ldr	r2, [pc, #12]	; (80013e0 <HAL_IncTick+0x20>)
 80013d2:	6013      	str	r3, [r2, #0]
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	20000018 	.word	0x20000018
 80013e0:	2000017c 	.word	0x2000017c

080013e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;
 80013e8:	4b02      	ldr	r3, [pc, #8]	; (80013f4 <HAL_GetTick+0x10>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	2000017c 	.word	0x2000017c

080013f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e0be      	b.n	8001598 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	2b00      	cmp	r3, #0
 8001426:	d109      	bne.n	800143c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fdae 	bl	8000f98 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f9ab 	bl	8001798 <ADC_ConversionStop_Disable>
 8001442:	4603      	mov	r3, r0
 8001444:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b00      	cmp	r3, #0
 8001450:	f040 8099 	bne.w	8001586 <HAL_ADC_Init+0x18e>
 8001454:	7dfb      	ldrb	r3, [r7, #23]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 8095 	bne.w	8001586 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001464:	f023 0302 	bic.w	r3, r3, #2
 8001468:	f043 0202 	orr.w	r2, r3, #2
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001478:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7b1b      	ldrb	r3, [r3, #12]
 800147e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001480:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	4313      	orrs	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001490:	d003      	beq.n	800149a <HAL_ADC_Init+0xa2>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d102      	bne.n	80014a0 <HAL_ADC_Init+0xa8>
 800149a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800149e:	e000      	b.n	80014a2 <HAL_ADC_Init+0xaa>
 80014a0:	2300      	movs	r3, #0
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7d1b      	ldrb	r3, [r3, #20]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d119      	bne.n	80014e4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7b1b      	ldrb	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d109      	bne.n	80014cc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	3b01      	subs	r3, #1
 80014be:	035a      	lsls	r2, r3, #13
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	e00b      	b.n	80014e4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	f043 0220 	orr.w	r2, r3, #32
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <HAL_ADC_Init+0x1a8>)
 8001500:	4013      	ands	r3, r2
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	68b9      	ldr	r1, [r7, #8]
 8001508:	430b      	orrs	r3, r1
 800150a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001514:	d003      	beq.n	800151e <HAL_ADC_Init+0x126>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d104      	bne.n	8001528 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	3b01      	subs	r3, #1
 8001524:	051b      	lsls	r3, r3, #20
 8001526:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	430a      	orrs	r2, r1
 800153a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_ADC_Init+0x1ac>)
 8001544:	4013      	ands	r3, r2
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	429a      	cmp	r2, r3
 800154a:	d10b      	bne.n	8001564 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001556:	f023 0303 	bic.w	r3, r3, #3
 800155a:	f043 0201 	orr.w	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001562:	e018      	b.n	8001596 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	f023 0312 	bic.w	r3, r3, #18
 800156c:	f043 0210 	orr.w	r2, r3, #16
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001584:	e007      	b.n	8001596 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	f043 0210 	orr.w	r2, r3, #16
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001596:	7dfb      	ldrb	r3, [r7, #23]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	ffe1f7fd 	.word	0xffe1f7fd
 80015a4:	ff1f0efe 	.word	0xff1f0efe

080015a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x20>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e0dc      	b.n	8001782 <HAL_ADC_ConfigChannel+0x1da>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b06      	cmp	r3, #6
 80015d6:	d81c      	bhi.n	8001612 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	3b05      	subs	r3, #5
 80015ea:	221f      	movs	r2, #31
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	4019      	ands	r1, r3
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	6818      	ldr	r0, [r3, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	3b05      	subs	r3, #5
 8001604:	fa00 f203 	lsl.w	r2, r0, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	635a      	str	r2, [r3, #52]	; 0x34
 8001610:	e03c      	b.n	800168c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b0c      	cmp	r3, #12
 8001618:	d81c      	bhi.n	8001654 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	3b23      	subs	r3, #35	; 0x23
 800162c:	221f      	movs	r2, #31
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	4019      	ands	r1, r3
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	6818      	ldr	r0, [r3, #0]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	3b23      	subs	r3, #35	; 0x23
 8001646:	fa00 f203 	lsl.w	r2, r0, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	631a      	str	r2, [r3, #48]	; 0x30
 8001652:	e01b      	b.n	800168c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	3b41      	subs	r3, #65	; 0x41
 8001666:	221f      	movs	r2, #31
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	4019      	ands	r1, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	3b41      	subs	r3, #65	; 0x41
 8001680:	fa00 f203 	lsl.w	r2, r0, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b09      	cmp	r3, #9
 8001692:	d91c      	bls.n	80016ce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68d9      	ldr	r1, [r3, #12]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4613      	mov	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	3b1e      	subs	r3, #30
 80016a6:	2207      	movs	r2, #7
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	4019      	ands	r1, r3
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	6898      	ldr	r0, [r3, #8]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	3b1e      	subs	r3, #30
 80016c0:	fa00 f203 	lsl.w	r2, r0, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	e019      	b.n	8001702 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6919      	ldr	r1, [r3, #16]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	2207      	movs	r2, #7
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	4019      	ands	r1, r3
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	6898      	ldr	r0, [r3, #8]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4613      	mov	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4413      	add	r3, r2
 80016f6:	fa00 f203 	lsl.w	r2, r0, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b10      	cmp	r3, #16
 8001708:	d003      	beq.n	8001712 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800170e:	2b11      	cmp	r3, #17
 8001710:	d132      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a1d      	ldr	r2, [pc, #116]	; (800178c <HAL_ADC_ConfigChannel+0x1e4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d125      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d126      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001738:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b10      	cmp	r3, #16
 8001740:	d11a      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <HAL_ADC_ConfigChannel+0x1e8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a13      	ldr	r2, [pc, #76]	; (8001794 <HAL_ADC_ConfigChannel+0x1ec>)
 8001748:	fba2 2303 	umull	r2, r3, r2, r3
 800174c:	0c9a      	lsrs	r2, r3, #18
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001758:	e002      	b.n	8001760 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	3b01      	subs	r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f9      	bne.n	800175a <HAL_ADC_ConfigChannel+0x1b2>
 8001766:	e007      	b.n	8001778 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	f043 0220 	orr.w	r2, r3, #32
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001780:	7bfb      	ldrb	r3, [r7, #15]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	40012400 	.word	0x40012400
 8001790:	20000010 	.word	0x20000010
 8001794:	431bde83 	.word	0x431bde83

08001798 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d12e      	bne.n	8001810 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0201 	bic.w	r2, r2, #1
 80017c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017c2:	f7ff fe0f 	bl	80013e4 <HAL_GetTick>
 80017c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017c8:	e01b      	b.n	8001802 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017ca:	f7ff fe0b 	bl	80013e4 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d914      	bls.n	8001802 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d10d      	bne.n	8001802 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	f043 0210 	orr.w	r2, r3, #16
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f6:	f043 0201 	orr.w	r2, r3, #1
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e007      	b.n	8001812 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b01      	cmp	r3, #1
 800180e:	d0dc      	beq.n	80017ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001838:	4013      	ands	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <__NVIC_GetPriorityGrouping+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0307 	and.w	r3, r3, #7
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db0b      	blt.n	80018aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	f003 021f 	and.w	r2, r3, #31
 8001898:	4906      	ldr	r1, [pc, #24]	; (80018b4 <__NVIC_EnableIRQ+0x34>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	2001      	movs	r0, #1
 80018a2:	fa00 f202 	lsl.w	r2, r0, r2
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	e000e100 	.word	0xe000e100

080018b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db0a      	blt.n	80018e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	490c      	ldr	r1, [pc, #48]	; (8001904 <__NVIC_SetPriority+0x4c>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	440b      	add	r3, r1
 80018dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e0:	e00a      	b.n	80018f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	; (8001908 <__NVIC_SetPriority+0x50>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3b04      	subs	r3, #4
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	440b      	add	r3, r1
 80018f6:	761a      	strb	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	bf28      	it	cs
 800192a:	2304      	movcs	r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3304      	adds	r3, #4
 8001932:	2b06      	cmp	r3, #6
 8001934:	d902      	bls.n	800193c <NVIC_EncodePriority+0x30>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b03      	subs	r3, #3
 800193a:	e000      	b.n	800193e <NVIC_EncodePriority+0x32>
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001954:	f04f 31ff 	mov.w	r1, #4294967295
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43d9      	mvns	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	4313      	orrs	r3, r2
         );
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	; 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001980:	d301      	bcc.n	8001986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2301      	movs	r3, #1
 8001984:	e00f      	b.n	80019a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <SysTick_Config+0x40>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198e:	210f      	movs	r1, #15
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f7ff ff90 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SysTick_Config+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SysTick_Config+0x40>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff2d 	bl	800181c <__NVIC_SetPriorityGrouping>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff42 	bl	8001864 <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff90 	bl	800190c <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5f 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff35 	bl	8001880 <__NVIC_EnableIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffa2 	bl	8001970 <SysTick_Config>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b08b      	sub	sp, #44	; 0x2c
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4a:	e169      	b.n	8001d20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	f040 8158 	bne.w	8001d1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4a9a      	ldr	r2, [pc, #616]	; (8001cd8 <HAL_GPIO_Init+0x2a0>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d05e      	beq.n	8001b32 <HAL_GPIO_Init+0xfa>
 8001a74:	4a98      	ldr	r2, [pc, #608]	; (8001cd8 <HAL_GPIO_Init+0x2a0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d875      	bhi.n	8001b66 <HAL_GPIO_Init+0x12e>
 8001a7a:	4a98      	ldr	r2, [pc, #608]	; (8001cdc <HAL_GPIO_Init+0x2a4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d058      	beq.n	8001b32 <HAL_GPIO_Init+0xfa>
 8001a80:	4a96      	ldr	r2, [pc, #600]	; (8001cdc <HAL_GPIO_Init+0x2a4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d86f      	bhi.n	8001b66 <HAL_GPIO_Init+0x12e>
 8001a86:	4a96      	ldr	r2, [pc, #600]	; (8001ce0 <HAL_GPIO_Init+0x2a8>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d052      	beq.n	8001b32 <HAL_GPIO_Init+0xfa>
 8001a8c:	4a94      	ldr	r2, [pc, #592]	; (8001ce0 <HAL_GPIO_Init+0x2a8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d869      	bhi.n	8001b66 <HAL_GPIO_Init+0x12e>
 8001a92:	4a94      	ldr	r2, [pc, #592]	; (8001ce4 <HAL_GPIO_Init+0x2ac>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d04c      	beq.n	8001b32 <HAL_GPIO_Init+0xfa>
 8001a98:	4a92      	ldr	r2, [pc, #584]	; (8001ce4 <HAL_GPIO_Init+0x2ac>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d863      	bhi.n	8001b66 <HAL_GPIO_Init+0x12e>
 8001a9e:	4a92      	ldr	r2, [pc, #584]	; (8001ce8 <HAL_GPIO_Init+0x2b0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d046      	beq.n	8001b32 <HAL_GPIO_Init+0xfa>
 8001aa4:	4a90      	ldr	r2, [pc, #576]	; (8001ce8 <HAL_GPIO_Init+0x2b0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d85d      	bhi.n	8001b66 <HAL_GPIO_Init+0x12e>
 8001aaa:	2b12      	cmp	r3, #18
 8001aac:	d82a      	bhi.n	8001b04 <HAL_GPIO_Init+0xcc>
 8001aae:	2b12      	cmp	r3, #18
 8001ab0:	d859      	bhi.n	8001b66 <HAL_GPIO_Init+0x12e>
 8001ab2:	a201      	add	r2, pc, #4	; (adr r2, 8001ab8 <HAL_GPIO_Init+0x80>)
 8001ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab8:	08001b33 	.word	0x08001b33
 8001abc:	08001b0d 	.word	0x08001b0d
 8001ac0:	08001b1f 	.word	0x08001b1f
 8001ac4:	08001b61 	.word	0x08001b61
 8001ac8:	08001b67 	.word	0x08001b67
 8001acc:	08001b67 	.word	0x08001b67
 8001ad0:	08001b67 	.word	0x08001b67
 8001ad4:	08001b67 	.word	0x08001b67
 8001ad8:	08001b67 	.word	0x08001b67
 8001adc:	08001b67 	.word	0x08001b67
 8001ae0:	08001b67 	.word	0x08001b67
 8001ae4:	08001b67 	.word	0x08001b67
 8001ae8:	08001b67 	.word	0x08001b67
 8001aec:	08001b67 	.word	0x08001b67
 8001af0:	08001b67 	.word	0x08001b67
 8001af4:	08001b67 	.word	0x08001b67
 8001af8:	08001b67 	.word	0x08001b67
 8001afc:	08001b15 	.word	0x08001b15
 8001b00:	08001b29 	.word	0x08001b29
 8001b04:	4a79      	ldr	r2, [pc, #484]	; (8001cec <HAL_GPIO_Init+0x2b4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d013      	beq.n	8001b32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b0a:	e02c      	b.n	8001b66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	623b      	str	r3, [r7, #32]
          break;
 8001b12:	e029      	b.n	8001b68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	623b      	str	r3, [r7, #32]
          break;
 8001b1c:	e024      	b.n	8001b68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	3308      	adds	r3, #8
 8001b24:	623b      	str	r3, [r7, #32]
          break;
 8001b26:	e01f      	b.n	8001b68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	330c      	adds	r3, #12
 8001b2e:	623b      	str	r3, [r7, #32]
          break;
 8001b30:	e01a      	b.n	8001b68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	623b      	str	r3, [r7, #32]
          break;
 8001b3e:	e013      	b.n	8001b68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d105      	bne.n	8001b54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b48:	2308      	movs	r3, #8
 8001b4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	611a      	str	r2, [r3, #16]
          break;
 8001b52:	e009      	b.n	8001b68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b54:	2308      	movs	r3, #8
 8001b56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	615a      	str	r2, [r3, #20]
          break;
 8001b5e:	e003      	b.n	8001b68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b60:	2300      	movs	r3, #0
 8001b62:	623b      	str	r3, [r7, #32]
          break;
 8001b64:	e000      	b.n	8001b68 <HAL_GPIO_Init+0x130>
          break;
 8001b66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2bff      	cmp	r3, #255	; 0xff
 8001b6c:	d801      	bhi.n	8001b72 <HAL_GPIO_Init+0x13a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	e001      	b.n	8001b76 <HAL_GPIO_Init+0x13e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3304      	adds	r3, #4
 8001b76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	2bff      	cmp	r3, #255	; 0xff
 8001b7c:	d802      	bhi.n	8001b84 <HAL_GPIO_Init+0x14c>
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	e002      	b.n	8001b8a <HAL_GPIO_Init+0x152>
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	3b08      	subs	r3, #8
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	210f      	movs	r1, #15
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	6a39      	ldr	r1, [r7, #32]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 80b1 	beq.w	8001d1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bb8:	4b4d      	ldr	r3, [pc, #308]	; (8001cf0 <HAL_GPIO_Init+0x2b8>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a4c      	ldr	r2, [pc, #304]	; (8001cf0 <HAL_GPIO_Init+0x2b8>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b4a      	ldr	r3, [pc, #296]	; (8001cf0 <HAL_GPIO_Init+0x2b8>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bd0:	4a48      	ldr	r2, [pc, #288]	; (8001cf4 <HAL_GPIO_Init+0x2bc>)
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a40      	ldr	r2, [pc, #256]	; (8001cf8 <HAL_GPIO_Init+0x2c0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d013      	beq.n	8001c24 <HAL_GPIO_Init+0x1ec>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a3f      	ldr	r2, [pc, #252]	; (8001cfc <HAL_GPIO_Init+0x2c4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d00d      	beq.n	8001c20 <HAL_GPIO_Init+0x1e8>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a3e      	ldr	r2, [pc, #248]	; (8001d00 <HAL_GPIO_Init+0x2c8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d007      	beq.n	8001c1c <HAL_GPIO_Init+0x1e4>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a3d      	ldr	r2, [pc, #244]	; (8001d04 <HAL_GPIO_Init+0x2cc>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d101      	bne.n	8001c18 <HAL_GPIO_Init+0x1e0>
 8001c14:	2303      	movs	r3, #3
 8001c16:	e006      	b.n	8001c26 <HAL_GPIO_Init+0x1ee>
 8001c18:	2304      	movs	r3, #4
 8001c1a:	e004      	b.n	8001c26 <HAL_GPIO_Init+0x1ee>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e002      	b.n	8001c26 <HAL_GPIO_Init+0x1ee>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_GPIO_Init+0x1ee>
 8001c24:	2300      	movs	r3, #0
 8001c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c28:	f002 0203 	and.w	r2, r2, #3
 8001c2c:	0092      	lsls	r2, r2, #2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c36:	492f      	ldr	r1, [pc, #188]	; (8001cf4 <HAL_GPIO_Init+0x2bc>)
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d006      	beq.n	8001c5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c50:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	492c      	ldr	r1, [pc, #176]	; (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
 8001c5c:	e006      	b.n	8001c6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	4928      	ldr	r1, [pc, #160]	; (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d006      	beq.n	8001c86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c78:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	4922      	ldr	r1, [pc, #136]	; (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
 8001c84:	e006      	b.n	8001c94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c86:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	491e      	ldr	r1, [pc, #120]	; (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d006      	beq.n	8001cae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	4918      	ldr	r1, [pc, #96]	; (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	608b      	str	r3, [r1, #8]
 8001cac:	e006      	b.n	8001cbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	4914      	ldr	r1, [pc, #80]	; (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d021      	beq.n	8001d0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	490e      	ldr	r1, [pc, #56]	; (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	60cb      	str	r3, [r1, #12]
 8001cd4:	e021      	b.n	8001d1a <HAL_GPIO_Init+0x2e2>
 8001cd6:	bf00      	nop
 8001cd8:	10320000 	.word	0x10320000
 8001cdc:	10310000 	.word	0x10310000
 8001ce0:	10220000 	.word	0x10220000
 8001ce4:	10210000 	.word	0x10210000
 8001ce8:	10120000 	.word	0x10120000
 8001cec:	10110000 	.word	0x10110000
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010000 	.word	0x40010000
 8001cf8:	40010800 	.word	0x40010800
 8001cfc:	40010c00 	.word	0x40010c00
 8001d00:	40011000 	.word	0x40011000
 8001d04:	40011400 	.word	0x40011400
 8001d08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	4909      	ldr	r1, [pc, #36]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f47f ae8e 	bne.w	8001a4c <HAL_GPIO_Init+0x14>
  }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	372c      	adds	r7, #44	; 0x2c
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	40010400 	.word	0x40010400

08001d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d50:	787b      	ldrb	r3, [r7, #1]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d5c:	e003      	b.n	8001d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	041a      	lsls	r2, r3, #16
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	611a      	str	r2, [r3, #16]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4013      	ands	r3, r2
 8001d88:	041a      	lsls	r2, r3, #16
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	43d9      	mvns	r1, r3
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	400b      	ands	r3, r1
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	611a      	str	r2, [r3, #16]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e12b      	b.n	800200e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d106      	bne.n	8001dd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff f920 	bl	8001010 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2224      	movs	r2, #36	; 0x24
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001df6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e08:	f001 f8dc 	bl	8002fc4 <HAL_RCC_GetPCLK1Freq>
 8001e0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4a81      	ldr	r2, [pc, #516]	; (8002018 <HAL_I2C_Init+0x274>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d807      	bhi.n	8001e28 <HAL_I2C_Init+0x84>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4a80      	ldr	r2, [pc, #512]	; (800201c <HAL_I2C_Init+0x278>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	bf94      	ite	ls
 8001e20:	2301      	movls	r3, #1
 8001e22:	2300      	movhi	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	e006      	b.n	8001e36 <HAL_I2C_Init+0x92>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a7d      	ldr	r2, [pc, #500]	; (8002020 <HAL_I2C_Init+0x27c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	bf94      	ite	ls
 8001e30:	2301      	movls	r3, #1
 8001e32:	2300      	movhi	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e0e7      	b.n	800200e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4a78      	ldr	r2, [pc, #480]	; (8002024 <HAL_I2C_Init+0x280>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	0c9b      	lsrs	r3, r3, #18
 8001e48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4a6a      	ldr	r2, [pc, #424]	; (8002018 <HAL_I2C_Init+0x274>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d802      	bhi.n	8001e78 <HAL_I2C_Init+0xd4>
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	3301      	adds	r3, #1
 8001e76:	e009      	b.n	8001e8c <HAL_I2C_Init+0xe8>
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	4a69      	ldr	r2, [pc, #420]	; (8002028 <HAL_I2C_Init+0x284>)
 8001e84:	fba2 2303 	umull	r2, r3, r2, r3
 8001e88:	099b      	lsrs	r3, r3, #6
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	430b      	orrs	r3, r1
 8001e92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	495c      	ldr	r1, [pc, #368]	; (8002018 <HAL_I2C_Init+0x274>)
 8001ea8:	428b      	cmp	r3, r1
 8001eaa:	d819      	bhi.n	8001ee0 <HAL_I2C_Init+0x13c>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1e59      	subs	r1, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eba:	1c59      	adds	r1, r3, #1
 8001ebc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <HAL_I2C_Init+0x138>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1e59      	subs	r1, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eda:	e051      	b.n	8001f80 <HAL_I2C_Init+0x1dc>
 8001edc:	2304      	movs	r3, #4
 8001ede:	e04f      	b.n	8001f80 <HAL_I2C_Init+0x1dc>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d111      	bne.n	8001f0c <HAL_I2C_Init+0x168>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1e58      	subs	r0, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	440b      	add	r3, r1
 8001ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	e012      	b.n	8001f32 <HAL_I2C_Init+0x18e>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1e58      	subs	r0, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6859      	ldr	r1, [r3, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	0099      	lsls	r1, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f22:	3301      	adds	r3, #1
 8001f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bf0c      	ite	eq
 8001f2c:	2301      	moveq	r3, #1
 8001f2e:	2300      	movne	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_I2C_Init+0x196>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e022      	b.n	8001f80 <HAL_I2C_Init+0x1dc>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10e      	bne.n	8001f60 <HAL_I2C_Init+0x1bc>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1e58      	subs	r0, r3, #1
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6859      	ldr	r1, [r3, #4]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	440b      	add	r3, r1
 8001f50:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f54:	3301      	adds	r3, #1
 8001f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f5e:	e00f      	b.n	8001f80 <HAL_I2C_Init+0x1dc>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1e58      	subs	r0, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	0099      	lsls	r1, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f76:	3301      	adds	r3, #1
 8001f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	6809      	ldr	r1, [r1, #0]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69da      	ldr	r2, [r3, #28]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6911      	ldr	r1, [r2, #16]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68d2      	ldr	r2, [r2, #12]
 8001fba:	4311      	orrs	r1, r2
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0201 	orr.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	000186a0 	.word	0x000186a0
 800201c:	001e847f 	.word	0x001e847f
 8002020:	003d08ff 	.word	0x003d08ff
 8002024:	431bde83 	.word	0x431bde83
 8002028:	10624dd3 	.word	0x10624dd3

0800202c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	461a      	mov	r2, r3
 8002038:	460b      	mov	r3, r1
 800203a:	817b      	strh	r3, [r7, #10]
 800203c:	4613      	mov	r3, r2
 800203e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002040:	f7ff f9d0 	bl	80013e4 <HAL_GetTick>
 8002044:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b20      	cmp	r3, #32
 8002050:	f040 80e0 	bne.w	8002214 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2319      	movs	r3, #25
 800205a:	2201      	movs	r2, #1
 800205c:	4970      	ldr	r1, [pc, #448]	; (8002220 <HAL_I2C_Master_Transmit+0x1f4>)
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 f964 	bl	800232c <I2C_WaitOnFlagUntilTimeout>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800206a:	2302      	movs	r3, #2
 800206c:	e0d3      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_I2C_Master_Transmit+0x50>
 8002078:	2302      	movs	r3, #2
 800207a:	e0cc      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b01      	cmp	r3, #1
 8002090:	d007      	beq.n	80020a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2221      	movs	r2, #33	; 0x21
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2210      	movs	r2, #16
 80020be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	893a      	ldrh	r2, [r7, #8]
 80020d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4a50      	ldr	r2, [pc, #320]	; (8002224 <HAL_I2C_Master_Transmit+0x1f8>)
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020e4:	8979      	ldrh	r1, [r7, #10]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	6a3a      	ldr	r2, [r7, #32]
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f89c 	bl	8002228 <I2C_MasterRequestWrite>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e08d      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002110:	e066      	b.n	80021e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	6a39      	ldr	r1, [r7, #32]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 f9de 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00d      	beq.n	800213e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b04      	cmp	r3, #4
 8002128:	d107      	bne.n	800213a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002138:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e06b      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	781a      	ldrb	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b04      	cmp	r3, #4
 800217a:	d11b      	bne.n	80021b4 <HAL_I2C_Master_Transmit+0x188>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	d017      	beq.n	80021b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	6a39      	ldr	r1, [r7, #32]
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f9ce 	bl	800255a <I2C_WaitOnBTFFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00d      	beq.n	80021e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d107      	bne.n	80021dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e01a      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d194      	bne.n	8002112 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	e000      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002214:	2302      	movs	r3, #2
  }
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	00100002 	.word	0x00100002
 8002224:	ffff0000 	.word	0xffff0000

08002228 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	460b      	mov	r3, r1
 8002236:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b08      	cmp	r3, #8
 8002242:	d006      	beq.n	8002252 <I2C_MasterRequestWrite+0x2a>
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d003      	beq.n	8002252 <I2C_MasterRequestWrite+0x2a>
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002250:	d108      	bne.n	8002264 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	e00b      	b.n	800227c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	2b12      	cmp	r3, #18
 800226a:	d107      	bne.n	800227c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800227a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 f84f 	bl	800232c <I2C_WaitOnFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00d      	beq.n	80022b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a2:	d103      	bne.n	80022ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e035      	b.n	800231c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022b8:	d108      	bne.n	80022cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022ba:	897b      	ldrh	r3, [r7, #10]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022c8:	611a      	str	r2, [r3, #16]
 80022ca:	e01b      	b.n	8002304 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022cc:	897b      	ldrh	r3, [r7, #10]
 80022ce:	11db      	asrs	r3, r3, #7
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f003 0306 	and.w	r3, r3, #6
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	f063 030f 	orn	r3, r3, #15
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	490e      	ldr	r1, [pc, #56]	; (8002324 <I2C_MasterRequestWrite+0xfc>)
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f875 	bl	80023da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e010      	b.n	800231c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022fa:	897b      	ldrh	r3, [r7, #10]
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	4907      	ldr	r1, [pc, #28]	; (8002328 <I2C_MasterRequestWrite+0x100>)
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f865 	bl	80023da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	00010008 	.word	0x00010008
 8002328:	00010002 	.word	0x00010002

0800232c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	4613      	mov	r3, r2
 800233a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800233c:	e025      	b.n	800238a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d021      	beq.n	800238a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002346:	f7ff f84d 	bl	80013e4 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d302      	bcc.n	800235c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d116      	bne.n	800238a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2220      	movs	r2, #32
 8002366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f043 0220 	orr.w	r2, r3, #32
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e023      	b.n	80023d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	0c1b      	lsrs	r3, r3, #16
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d10d      	bne.n	80023b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4013      	ands	r3, r2
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	bf0c      	ite	eq
 80023a6:	2301      	moveq	r3, #1
 80023a8:	2300      	movne	r3, #0
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	e00c      	b.n	80023ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4013      	ands	r3, r2
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	bf0c      	ite	eq
 80023c2:	2301      	moveq	r3, #1
 80023c4:	2300      	movne	r3, #0
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d0b6      	beq.n	800233e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023e8:	e051      	b.n	800248e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f8:	d123      	bne.n	8002442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002408:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002412:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2220      	movs	r2, #32
 800241e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f043 0204 	orr.w	r2, r3, #4
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e046      	b.n	80024d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d021      	beq.n	800248e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244a:	f7fe ffcb 	bl	80013e4 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d116      	bne.n	800248e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f043 0220 	orr.w	r2, r3, #32
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e020      	b.n	80024d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	0c1b      	lsrs	r3, r3, #16
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b01      	cmp	r3, #1
 8002496:	d10c      	bne.n	80024b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	43da      	mvns	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4013      	ands	r3, r2
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bf14      	ite	ne
 80024aa:	2301      	movne	r3, #1
 80024ac:	2300      	moveq	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	e00b      	b.n	80024ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	43da      	mvns	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	4013      	ands	r3, r2
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf14      	ite	ne
 80024c4:	2301      	movne	r3, #1
 80024c6:	2300      	moveq	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d18d      	bne.n	80023ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024e4:	e02d      	b.n	8002542 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f878 	bl	80025dc <I2C_IsAcknowledgeFailed>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e02d      	b.n	8002552 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d021      	beq.n	8002542 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fe:	f7fe ff71 	bl	80013e4 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	429a      	cmp	r2, r3
 800250c:	d302      	bcc.n	8002514 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d116      	bne.n	8002542 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2220      	movs	r2, #32
 800251e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f043 0220 	orr.w	r2, r3, #32
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e007      	b.n	8002552 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254c:	2b80      	cmp	r3, #128	; 0x80
 800254e:	d1ca      	bne.n	80024e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002566:	e02d      	b.n	80025c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f837 	bl	80025dc <I2C_IsAcknowledgeFailed>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e02d      	b.n	80025d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257e:	d021      	beq.n	80025c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002580:	f7fe ff30 	bl	80013e4 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	429a      	cmp	r2, r3
 800258e:	d302      	bcc.n	8002596 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d116      	bne.n	80025c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	f043 0220 	orr.w	r2, r3, #32
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e007      	b.n	80025d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d1ca      	bne.n	8002568 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f2:	d11b      	bne.n	800262c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	f043 0204 	orr.w	r2, r3, #4
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e304      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8087 	beq.w	8002766 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002658:	4b92      	ldr	r3, [pc, #584]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b04      	cmp	r3, #4
 8002662:	d00c      	beq.n	800267e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002664:	4b8f      	ldr	r3, [pc, #572]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b08      	cmp	r3, #8
 800266e:	d112      	bne.n	8002696 <HAL_RCC_OscConfig+0x5e>
 8002670:	4b8c      	ldr	r3, [pc, #560]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267c:	d10b      	bne.n	8002696 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267e:	4b89      	ldr	r3, [pc, #548]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d06c      	beq.n	8002764 <HAL_RCC_OscConfig+0x12c>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d168      	bne.n	8002764 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e2de      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x76>
 80026a0:	4b80      	ldr	r3, [pc, #512]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a7f      	ldr	r2, [pc, #508]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	e02e      	b.n	800270c <HAL_RCC_OscConfig+0xd4>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x98>
 80026b6:	4b7b      	ldr	r3, [pc, #492]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a7a      	ldr	r2, [pc, #488]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4b78      	ldr	r3, [pc, #480]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a77      	ldr	r2, [pc, #476]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e01d      	b.n	800270c <HAL_RCC_OscConfig+0xd4>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0xbc>
 80026da:	4b72      	ldr	r3, [pc, #456]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a71      	ldr	r2, [pc, #452]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b6f      	ldr	r3, [pc, #444]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a6e      	ldr	r2, [pc, #440]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e00b      	b.n	800270c <HAL_RCC_OscConfig+0xd4>
 80026f4:	4b6b      	ldr	r3, [pc, #428]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a6a      	ldr	r2, [pc, #424]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b68      	ldr	r3, [pc, #416]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a67      	ldr	r2, [pc, #412]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7fe fe66 	bl	80013e4 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800271c:	f7fe fe62 	bl	80013e4 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	; 0x64
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e292      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0xe4>
 800273a:	e014      	b.n	8002766 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fe fe52 	bl	80013e4 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002744:	f7fe fe4e 	bl	80013e4 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e27e      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	4b53      	ldr	r3, [pc, #332]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x10c>
 8002762:	e000      	b.n	8002766 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d063      	beq.n	800283a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002772:	4b4c      	ldr	r3, [pc, #304]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00b      	beq.n	8002796 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800277e:	4b49      	ldr	r3, [pc, #292]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b08      	cmp	r3, #8
 8002788:	d11c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x18c>
 800278a:	4b46      	ldr	r3, [pc, #280]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d116      	bne.n	80027c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002796:	4b43      	ldr	r3, [pc, #268]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <HAL_RCC_OscConfig+0x176>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d001      	beq.n	80027ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e252      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ae:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4939      	ldr	r1, [pc, #228]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c2:	e03a      	b.n	800283a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d020      	beq.n	800280e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027cc:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <HAL_RCC_OscConfig+0x270>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d2:	f7fe fe07 	bl	80013e4 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027da:	f7fe fe03 	bl	80013e4 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e233      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	4b2d      	ldr	r3, [pc, #180]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f8:	4b2a      	ldr	r3, [pc, #168]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4927      	ldr	r1, [pc, #156]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002808:	4313      	orrs	r3, r2
 800280a:	600b      	str	r3, [r1, #0]
 800280c:	e015      	b.n	800283a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <HAL_RCC_OscConfig+0x270>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe fde6 	bl	80013e4 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281c:	f7fe fde2 	bl	80013e4 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e212      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d03a      	beq.n	80028bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d019      	beq.n	8002882 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284e:	4b17      	ldr	r3, [pc, #92]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 8002850:	2201      	movs	r2, #1
 8002852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002854:	f7fe fdc6 	bl	80013e4 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285c:	f7fe fdc2 	bl	80013e4 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e1f2      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800287a:	2001      	movs	r0, #1
 800287c:	f000 fbca 	bl	8003014 <RCC_Delay>
 8002880:	e01c      	b.n	80028bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_RCC_OscConfig+0x274>)
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002888:	f7fe fdac 	bl	80013e4 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288e:	e00f      	b.n	80028b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002890:	f7fe fda8 	bl	80013e4 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d908      	bls.n	80028b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e1d8      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	42420000 	.word	0x42420000
 80028ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b0:	4b9b      	ldr	r3, [pc, #620]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e9      	bne.n	8002890 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80a6 	beq.w	8002a16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ca:	2300      	movs	r3, #0
 80028cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ce:	4b94      	ldr	r3, [pc, #592]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10d      	bne.n	80028f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028da:	4b91      	ldr	r3, [pc, #580]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	4a90      	ldr	r2, [pc, #576]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 80028e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e4:	61d3      	str	r3, [r2, #28]
 80028e6:	4b8e      	ldr	r3, [pc, #568]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f2:	2301      	movs	r3, #1
 80028f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f6:	4b8b      	ldr	r3, [pc, #556]	; (8002b24 <HAL_RCC_OscConfig+0x4ec>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d118      	bne.n	8002934 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002902:	4b88      	ldr	r3, [pc, #544]	; (8002b24 <HAL_RCC_OscConfig+0x4ec>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a87      	ldr	r2, [pc, #540]	; (8002b24 <HAL_RCC_OscConfig+0x4ec>)
 8002908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800290e:	f7fe fd69 	bl	80013e4 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002916:	f7fe fd65 	bl	80013e4 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b64      	cmp	r3, #100	; 0x64
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e195      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002928:	4b7e      	ldr	r3, [pc, #504]	; (8002b24 <HAL_RCC_OscConfig+0x4ec>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d106      	bne.n	800294a <HAL_RCC_OscConfig+0x312>
 800293c:	4b78      	ldr	r3, [pc, #480]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4a77      	ldr	r2, [pc, #476]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6213      	str	r3, [r2, #32]
 8002948:	e02d      	b.n	80029a6 <HAL_RCC_OscConfig+0x36e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0x334>
 8002952:	4b73      	ldr	r3, [pc, #460]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	4a72      	ldr	r2, [pc, #456]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002958:	f023 0301 	bic.w	r3, r3, #1
 800295c:	6213      	str	r3, [r2, #32]
 800295e:	4b70      	ldr	r3, [pc, #448]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4a6f      	ldr	r2, [pc, #444]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002964:	f023 0304 	bic.w	r3, r3, #4
 8002968:	6213      	str	r3, [r2, #32]
 800296a:	e01c      	b.n	80029a6 <HAL_RCC_OscConfig+0x36e>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	2b05      	cmp	r3, #5
 8002972:	d10c      	bne.n	800298e <HAL_RCC_OscConfig+0x356>
 8002974:	4b6a      	ldr	r3, [pc, #424]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	4a69      	ldr	r2, [pc, #420]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	6213      	str	r3, [r2, #32]
 8002980:	4b67      	ldr	r3, [pc, #412]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4a66      	ldr	r2, [pc, #408]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6213      	str	r3, [r2, #32]
 800298c:	e00b      	b.n	80029a6 <HAL_RCC_OscConfig+0x36e>
 800298e:	4b64      	ldr	r3, [pc, #400]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	4a63      	ldr	r2, [pc, #396]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	6213      	str	r3, [r2, #32]
 800299a:	4b61      	ldr	r3, [pc, #388]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	4a60      	ldr	r2, [pc, #384]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 80029a0:	f023 0304 	bic.w	r3, r3, #4
 80029a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d015      	beq.n	80029da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ae:	f7fe fd19 	bl	80013e4 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b4:	e00a      	b.n	80029cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b6:	f7fe fd15 	bl	80013e4 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e143      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029cc:	4b54      	ldr	r3, [pc, #336]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0ee      	beq.n	80029b6 <HAL_RCC_OscConfig+0x37e>
 80029d8:	e014      	b.n	8002a04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029da:	f7fe fd03 	bl	80013e4 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e2:	f7fe fcff 	bl	80013e4 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e12d      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f8:	4b49      	ldr	r3, [pc, #292]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1ee      	bne.n	80029e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a04:	7dfb      	ldrb	r3, [r7, #23]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d105      	bne.n	8002a16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0a:	4b45      	ldr	r3, [pc, #276]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	4a44      	ldr	r2, [pc, #272]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a14:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 808c 	beq.w	8002b38 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002a20:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2c:	d10e      	bne.n	8002a4c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002a2e:	4b3c      	ldr	r3, [pc, #240]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d108      	bne.n	8002a4c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002a3a:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e103      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d14e      	bne.n	8002af2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002a54:	4b32      	ldr	r3, [pc, #200]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d009      	beq.n	8002a74 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002a60:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0ef      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002a74:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <HAL_RCC_OscConfig+0x4f0>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7a:	f7fe fcb3 	bl	80013e4 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002a82:	f7fe fcaf 	bl	80013e4 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b64      	cmp	r3, #100	; 0x64
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e0df      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002a94:	4b22      	ldr	r3, [pc, #136]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f0      	bne.n	8002a82 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002aa0:	4b1f      	ldr	r3, [pc, #124]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aac:	491c      	ldr	r1, [pc, #112]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002ab2:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4918      	ldr	r1, [pc, #96]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002ac4:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <HAL_RCC_OscConfig+0x4f0>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aca:	f7fe fc8b 	bl	80013e4 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002ad2:	f7fe fc87 	bl	80013e4 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b64      	cmp	r3, #100	; 0x64
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e0b7      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x49a>
 8002af0:	e022      	b.n	8002b38 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <HAL_RCC_OscConfig+0x4e8>)
 8002af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002afe:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <HAL_RCC_OscConfig+0x4f0>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fe fc6e 	bl	80013e4 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002b0a:	e00f      	b.n	8002b2c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002b0c:	f7fe fc6a 	bl	80013e4 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d908      	bls.n	8002b2c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e09a      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40007000 	.word	0x40007000
 8002b28:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002b2c:	4b4b      	ldr	r3, [pc, #300]	; (8002c5c <HAL_RCC_OscConfig+0x624>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e9      	bne.n	8002b0c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 8088 	beq.w	8002c52 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b42:	4b46      	ldr	r3, [pc, #280]	; (8002c5c <HAL_RCC_OscConfig+0x624>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d068      	beq.n	8002c20 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d14d      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b56:	4b42      	ldr	r3, [pc, #264]	; (8002c60 <HAL_RCC_OscConfig+0x628>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fc42 	bl	80013e4 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fc3e 	bl	80013e4 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e06e      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b76:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <HAL_RCC_OscConfig+0x624>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b8a:	d10f      	bne.n	8002bac <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002b8c:	4b33      	ldr	r3, [pc, #204]	; (8002c5c <HAL_RCC_OscConfig+0x624>)
 8002b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4931      	ldr	r1, [pc, #196]	; (8002c5c <HAL_RCC_OscConfig+0x624>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b9a:	4b30      	ldr	r3, [pc, #192]	; (8002c5c <HAL_RCC_OscConfig+0x624>)
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	f023 020f 	bic.w	r2, r3, #15
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	492d      	ldr	r1, [pc, #180]	; (8002c5c <HAL_RCC_OscConfig+0x624>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bac:	4b2b      	ldr	r3, [pc, #172]	; (8002c5c <HAL_RCC_OscConfig+0x624>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	4927      	ldr	r1, [pc, #156]	; (8002c5c <HAL_RCC_OscConfig+0x624>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc4:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <HAL_RCC_OscConfig+0x628>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7fe fc0b 	bl	80013e4 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd2:	f7fe fc07 	bl	80013e4 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e037      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be4:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <HAL_RCC_OscConfig+0x624>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x59a>
 8002bf0:	e02f      	b.n	8002c52 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <HAL_RCC_OscConfig+0x628>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fbf4 	bl	80013e4 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe fbf0 	bl	80013e4 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e020      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c12:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <HAL_RCC_OscConfig+0x624>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x5c8>
 8002c1e:	e018      	b.n	8002c52 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e013      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_RCC_OscConfig+0x624>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d106      	bne.n	8002c4e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d001      	beq.n	8002c52 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	42420060 	.word	0x42420060

08002c64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0d0      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c78:	4b6a      	ldr	r3, [pc, #424]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d910      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 0207 	bic.w	r2, r3, #7
 8002c8e:	4965      	ldr	r1, [pc, #404]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b63      	ldr	r3, [pc, #396]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0b8      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d020      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc0:	4b59      	ldr	r3, [pc, #356]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4a58      	ldr	r2, [pc, #352]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd8:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4a52      	ldr	r2, [pc, #328]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ce2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce4:	4b50      	ldr	r3, [pc, #320]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	494d      	ldr	r1, [pc, #308]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d040      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0a:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d115      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e07f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d109      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e073      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d32:	4b3d      	ldr	r3, [pc, #244]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e06b      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d42:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f023 0203 	bic.w	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4936      	ldr	r1, [pc, #216]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d54:	f7fe fb46 	bl	80013e4 <HAL_GetTick>
 8002d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	e00a      	b.n	8002d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5c:	f7fe fb42 	bl	80013e4 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e053      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 020c 	and.w	r2, r3, #12
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d1eb      	bne.n	8002d5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d84:	4b27      	ldr	r3, [pc, #156]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d210      	bcs.n	8002db4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 0207 	bic.w	r2, r3, #7
 8002d9a:	4922      	ldr	r1, [pc, #136]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da2:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e032      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4916      	ldr	r1, [pc, #88]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d009      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	490e      	ldr	r1, [pc, #56]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002df2:	f000 f821 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 8002df6:	4602      	mov	r2, r0
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	490a      	ldr	r1, [pc, #40]	; (8002e2c <HAL_RCC_ClockConfig+0x1c8>)
 8002e04:	5ccb      	ldrb	r3, [r1, r3]
 8002e06:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0a:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <HAL_RCC_ClockConfig+0x1cc>)
 8002e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_RCC_ClockConfig+0x1d0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe faa4 	bl	8001360 <HAL_InitTick>

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40022000 	.word	0x40022000
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	08004c7c 	.word	0x08004c7c
 8002e30:	20000010 	.word	0x20000010
 8002e34:	20000014 	.word	0x20000014

08002e38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3a:	b091      	sub	sp, #68	; 0x44
 8002e3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8002e3e:	4b56      	ldr	r3, [pc, #344]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e40:	f107 0414 	add.w	r4, r7, #20
 8002e44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e46:	c407      	stmia	r4!, {r0, r1, r2}
 8002e48:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002e4a:	4b54      	ldr	r3, [pc, #336]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x164>)
 8002e4c:	1d3c      	adds	r4, r7, #4
 8002e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	637b      	str	r3, [r7, #52]	; 0x34
 8002e58:	2300      	movs	r3, #0
 8002e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e60:	2300      	movs	r3, #0
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e70:	4b4b      	ldr	r3, [pc, #300]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d002      	beq.n	8002e86 <HAL_RCC_GetSysClockFreq+0x4e>
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d003      	beq.n	8002e8c <HAL_RCC_GetSysClockFreq+0x54>
 8002e84:	e080      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e86:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002e88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e8a:	e080      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8e:	0c9b      	lsrs	r3, r3, #18
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002e98:	4413      	add	r3, r2
 8002e9a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d066      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002ebc:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002ebe:	4b38      	ldr	r3, [pc, #224]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d044      	beq.n	8002f54 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002eca:	4b35      	ldr	r3, [pc, #212]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002ed8:	4b31      	ldr	r3, [pc, #196]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	3302      	adds	r3, #2
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f04f 0100 	mov.w	r1, #0
 8002eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	fb02 f501 	mul.w	r5, r2, r1
 8002efa:	fb00 f403 	mul.w	r4, r0, r3
 8002efe:	442c      	add	r4, r5
 8002f00:	fba0 2302 	umull	r2, r3, r0, r2
 8002f04:	18e1      	adds	r1, r4, r3
 8002f06:	460b      	mov	r3, r1
 8002f08:	4926      	ldr	r1, [pc, #152]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002f0a:	fb01 f003 	mul.w	r0, r1, r3
 8002f0e:	2100      	movs	r1, #0
 8002f10:	fb01 f102 	mul.w	r1, r1, r2
 8002f14:	4401      	add	r1, r0
 8002f16:	4823      	ldr	r0, [pc, #140]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002f18:	fba2 4500 	umull	r4, r5, r2, r0
 8002f1c:	194b      	adds	r3, r1, r5
 8002f1e:	461d      	mov	r5, r3
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	4618      	mov	r0, r3
 8002f24:	f04f 0100 	mov.w	r1, #0
 8002f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	fb02 fc01 	mul.w	ip, r2, r1
 8002f34:	fb00 f603 	mul.w	r6, r0, r3
 8002f38:	4466      	add	r6, ip
 8002f3a:	fba0 2302 	umull	r2, r3, r0, r2
 8002f3e:	18f1      	adds	r1, r6, r3
 8002f40:	460b      	mov	r3, r1
 8002f42:	4620      	mov	r0, r4
 8002f44:	4629      	mov	r1, r5
 8002f46:	f7fd f96d 	bl	8000224 <__aeabi_uldivmod>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4613      	mov	r3, r2
 8002f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f52:	e007      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f56:	4a13      	ldr	r2, [pc, #76]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002f58:	fb02 f203 	mul.w	r2, r2, r3
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002f64:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d108      	bne.n	8002f82 <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8002f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f72:	085b      	lsrs	r3, r3, #1
 8002f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f76:	e004      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	4a0b      	ldr	r2, [pc, #44]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x170>)
 8002f7c:	fb02 f303 	mul.w	r3, r2, r3
 8002f80:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8002f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f86:	e002      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f88:	4b08      	ldr	r3, [pc, #32]	; (8002fac <HAL_RCC_GetSysClockFreq+0x174>)
 8002f8a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3744      	adds	r7, #68	; 0x44
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f98:	080044b0 	.word	0x080044b0
 8002f9c:	080044c0 	.word	0x080044c0
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	00b71b00 	.word	0x00b71b00
 8002fa8:	003d0900 	.word	0x003d0900
 8002fac:	007a1200 	.word	0x007a1200

08002fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb4:	4b02      	ldr	r3, [pc, #8]	; (8002fc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr
 8002fc0:	20000010 	.word	0x20000010

08002fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fc8:	f7ff fff2 	bl	8002fb0 <HAL_RCC_GetHCLKFreq>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	0a1b      	lsrs	r3, r3, #8
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	4903      	ldr	r1, [pc, #12]	; (8002fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fda:	5ccb      	ldrb	r3, [r1, r3]
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	08004c8c 	.word	0x08004c8c

08002fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ff0:	f7ff ffde 	bl	8002fb0 <HAL_RCC_GetHCLKFreq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	0adb      	lsrs	r3, r3, #11
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	4903      	ldr	r1, [pc, #12]	; (8003010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003002:	5ccb      	ldrb	r3, [r1, r3]
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003008:	4618      	mov	r0, r3
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000
 8003010:	08004c8c 	.word	0x08004c8c

08003014 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800301c:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <RCC_Delay+0x34>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a0a      	ldr	r2, [pc, #40]	; (800304c <RCC_Delay+0x38>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	0a5b      	lsrs	r3, r3, #9
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003030:	bf00      	nop
  }
  while (Delay --);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1e5a      	subs	r2, r3, #1
 8003036:	60fa      	str	r2, [r7, #12]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f9      	bne.n	8003030 <RCC_Delay+0x1c>
}
 800303c:	bf00      	nop
 800303e:	bf00      	nop
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr
 8003048:	20000010 	.word	0x20000010
 800304c:	10624dd3 	.word	0x10624dd3

08003050 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	2300      	movs	r3, #0
 800305e:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d07d      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8003070:	2300      	movs	r3, #0
 8003072:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003074:	4b8b      	ldr	r3, [pc, #556]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10d      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003080:	4b88      	ldr	r3, [pc, #544]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	4a87      	ldr	r2, [pc, #540]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308a:	61d3      	str	r3, [r2, #28]
 800308c:	4b85      	ldr	r3, [pc, #532]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003098:	2301      	movs	r3, #1
 800309a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309c:	4b82      	ldr	r3, [pc, #520]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d118      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030a8:	4b7f      	ldr	r3, [pc, #508]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a7e      	ldr	r2, [pc, #504]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b4:	f7fe f996 	bl	80013e4 <HAL_GetTick>
 80030b8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ba:	e008      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030bc:	f7fe f992 	bl	80013e4 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b64      	cmp	r3, #100	; 0x64
 80030c8:	d901      	bls.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e0e5      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ce:	4b76      	ldr	r3, [pc, #472]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030da:	4b72      	ldr	r3, [pc, #456]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e2:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d02e      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d027      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030f8:	4b6a      	ldr	r3, [pc, #424]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003100:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003102:	4b6a      	ldr	r3, [pc, #424]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003108:	4b68      	ldr	r3, [pc, #416]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800310e:	4a65      	ldr	r2, [pc, #404]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d014      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7fe f961 	bl	80013e4 <HAL_GetTick>
 8003122:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003124:	e00a      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003126:	f7fe f95d 	bl	80013e4 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f241 3288 	movw	r2, #5000	; 0x1388
 8003134:	4293      	cmp	r3, r2
 8003136:	d901      	bls.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e0ae      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313c:	4b59      	ldr	r3, [pc, #356]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0ee      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003148:	4b56      	ldr	r3, [pc, #344]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4953      	ldr	r1, [pc, #332]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003156:	4313      	orrs	r3, r2
 8003158:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800315a:	7efb      	ldrb	r3, [r7, #27]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d105      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003160:	4b50      	ldr	r3, [pc, #320]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	4a4f      	ldr	r2, [pc, #316]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800316a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003178:	4b4a      	ldr	r3, [pc, #296]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4947      	ldr	r1, [pc, #284]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003186:	4313      	orrs	r3, r2
 8003188:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003196:	4b43      	ldr	r3, [pc, #268]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	4940      	ldr	r1, [pc, #256]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80031b4:	4b3b      	ldr	r3, [pc, #236]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	4938      	ldr	r1, [pc, #224]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80031c6:	4b37      	ldr	r3, [pc, #220]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d105      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80031d2:	4b34      	ldr	r3, [pc, #208]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80031de:	2301      	movs	r3, #1
 80031e0:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d148      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80031e8:	4b2e      	ldr	r3, [pc, #184]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d138      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80031f4:	4b2b      	ldr	r3, [pc, #172]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d009      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8003200:	4b28      	ldr	r3, [pc, #160]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e042      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8003214:	4b23      	ldr	r3, [pc, #140]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	4920      	ldr	r1, [pc, #128]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003222:	4313      	orrs	r3, r2
 8003224:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8003226:	4b1f      	ldr	r3, [pc, #124]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	491c      	ldr	r1, [pc, #112]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003234:	4313      	orrs	r3, r2
 8003236:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8003238:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323a:	2201      	movs	r2, #1
 800323c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323e:	f7fe f8d1 	bl	80013e4 <HAL_GetTick>
 8003242:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003244:	e008      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003246:	f7fe f8cd 	bl	80013e4 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b64      	cmp	r3, #100	; 0x64
 8003252:	d901      	bls.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e020      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003258:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003264:	e009      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8003266:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	429a      	cmp	r2, r3
 8003274:	d001      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e00f      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003286:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	4904      	ldr	r1, [pc, #16]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003294:	4313      	orrs	r3, r2
 8003296:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3720      	adds	r7, #32
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40007000 	.word	0x40007000
 80032ac:	42420440 	.word	0x42420440
 80032b0:	42420070 	.word	0x42420070

080032b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e041      	b.n	800334a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fd fed8 	bl	8001090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3304      	adds	r3, #4
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f000 fad8 	bl	80038a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e041      	b.n	80033e8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d106      	bne.n	800337e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f839 	bl	80033f0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2202      	movs	r2, #2
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3304      	adds	r3, #4
 800338e:	4619      	mov	r1, r3
 8003390:	4610      	mov	r0, r2
 8003392:	f000 fa89 	bl	80038a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr

08003402 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b02      	cmp	r3, #2
 8003416:	d122      	bne.n	800345e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b02      	cmp	r3, #2
 8003424:	d11b      	bne.n	800345e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f06f 0202 	mvn.w	r2, #2
 800342e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fa13 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 800344a:	e005      	b.n	8003458 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fa06 	bl	800385e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fa15 	bl	8003882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b04      	cmp	r3, #4
 800346a:	d122      	bne.n	80034b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b04      	cmp	r3, #4
 8003478:	d11b      	bne.n	80034b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f06f 0204 	mvn.w	r2, #4
 8003482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f9e9 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 800349e:	e005      	b.n	80034ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f9dc 	bl	800385e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f9eb 	bl	8003882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d122      	bne.n	8003506 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d11b      	bne.n	8003506 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f06f 0208 	mvn.w	r2, #8
 80034d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2204      	movs	r2, #4
 80034dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f9bf 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 80034f2:	e005      	b.n	8003500 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f9b2 	bl	800385e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f9c1 	bl	8003882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b10      	cmp	r3, #16
 8003512:	d122      	bne.n	800355a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	2b10      	cmp	r3, #16
 8003520:	d11b      	bne.n	800355a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f06f 0210 	mvn.w	r2, #16
 800352a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2208      	movs	r2, #8
 8003530:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f995 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 8003546:	e005      	b.n	8003554 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f988 	bl	800385e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f997 	bl	8003882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d10e      	bne.n	8003586 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d107      	bne.n	8003586 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f06f 0201 	mvn.w	r2, #1
 800357e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f963 	bl	800384c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003590:	2b80      	cmp	r3, #128	; 0x80
 8003592:	d10e      	bne.n	80035b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359e:	2b80      	cmp	r3, #128	; 0x80
 80035a0:	d107      	bne.n	80035b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fcc5 	bl	8003f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035bc:	2b40      	cmp	r3, #64	; 0x40
 80035be:	d10e      	bne.n	80035de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ca:	2b40      	cmp	r3, #64	; 0x40
 80035cc:	d107      	bne.n	80035de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f95b 	bl	8003894 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	d10e      	bne.n	800360a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d107      	bne.n	800360a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f06f 0220 	mvn.w	r2, #32
 8003602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 fc90 	bl	8003f2a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_TIM_OC_ConfigChannel+0x1a>
 800362a:	2302      	movs	r3, #2
 800362c:	e046      	b.n	80036bc <HAL_TIM_OC_ConfigChannel+0xa8>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b0c      	cmp	r3, #12
 800363a:	d839      	bhi.n	80036b0 <HAL_TIM_OC_ConfigChannel+0x9c>
 800363c:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <HAL_TIM_OC_ConfigChannel+0x30>)
 800363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003642:	bf00      	nop
 8003644:	08003679 	.word	0x08003679
 8003648:	080036b1 	.word	0x080036b1
 800364c:	080036b1 	.word	0x080036b1
 8003650:	080036b1 	.word	0x080036b1
 8003654:	08003687 	.word	0x08003687
 8003658:	080036b1 	.word	0x080036b1
 800365c:	080036b1 	.word	0x080036b1
 8003660:	080036b1 	.word	0x080036b1
 8003664:	08003695 	.word	0x08003695
 8003668:	080036b1 	.word	0x080036b1
 800366c:	080036b1 	.word	0x080036b1
 8003670:	080036b1 	.word	0x080036b1
 8003674:	080036a3 	.word	0x080036a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	4618      	mov	r0, r3
 8003680:	f000 f97e 	bl	8003980 <TIM_OC1_SetConfig>
      break;
 8003684:	e015      	b.n	80036b2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	4618      	mov	r0, r3
 800368e:	f000 f9dd 	bl	8003a4c <TIM_OC2_SetConfig>
      break;
 8003692:	e00e      	b.n	80036b2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fa40 	bl	8003b20 <TIM_OC3_SetConfig>
      break;
 80036a0:	e007      	b.n	80036b2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 faa3 	bl	8003bf4 <TIM_OC4_SetConfig>
      break;
 80036ae:	e000      	b.n	80036b2 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80036b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_TIM_ConfigClockSource+0x18>
 80036d8:	2302      	movs	r3, #2
 80036da:	e0b3      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x180>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003702:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003714:	d03e      	beq.n	8003794 <HAL_TIM_ConfigClockSource+0xd0>
 8003716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371a:	f200 8087 	bhi.w	800382c <HAL_TIM_ConfigClockSource+0x168>
 800371e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003722:	f000 8085 	beq.w	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372a:	d87f      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x168>
 800372c:	2b70      	cmp	r3, #112	; 0x70
 800372e:	d01a      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0xa2>
 8003730:	2b70      	cmp	r3, #112	; 0x70
 8003732:	d87b      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x168>
 8003734:	2b60      	cmp	r3, #96	; 0x60
 8003736:	d050      	beq.n	80037da <HAL_TIM_ConfigClockSource+0x116>
 8003738:	2b60      	cmp	r3, #96	; 0x60
 800373a:	d877      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x168>
 800373c:	2b50      	cmp	r3, #80	; 0x50
 800373e:	d03c      	beq.n	80037ba <HAL_TIM_ConfigClockSource+0xf6>
 8003740:	2b50      	cmp	r3, #80	; 0x50
 8003742:	d873      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x168>
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	d058      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0x136>
 8003748:	2b40      	cmp	r3, #64	; 0x40
 800374a:	d86f      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x168>
 800374c:	2b30      	cmp	r3, #48	; 0x30
 800374e:	d064      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x156>
 8003750:	2b30      	cmp	r3, #48	; 0x30
 8003752:	d86b      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x168>
 8003754:	2b20      	cmp	r3, #32
 8003756:	d060      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x156>
 8003758:	2b20      	cmp	r3, #32
 800375a:	d867      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x168>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d05c      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x156>
 8003760:	2b10      	cmp	r3, #16
 8003762:	d05a      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003764:	e062      	b.n	800382c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	6899      	ldr	r1, [r3, #8]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f000 fb02 	bl	8003d7e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003788:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	609a      	str	r2, [r3, #8]
      break;
 8003792:	e04e      	b.n	8003832 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	6899      	ldr	r1, [r3, #8]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f000 faeb 	bl	8003d7e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b6:	609a      	str	r2, [r3, #8]
      break;
 80037b8:	e03b      	b.n	8003832 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6859      	ldr	r1, [r3, #4]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f000 fa62 	bl	8003c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2150      	movs	r1, #80	; 0x50
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fab9 	bl	8003d4a <TIM_ITRx_SetConfig>
      break;
 80037d8:	e02b      	b.n	8003832 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6859      	ldr	r1, [r3, #4]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	461a      	mov	r2, r3
 80037e8:	f000 fa80 	bl	8003cec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2160      	movs	r1, #96	; 0x60
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 faa9 	bl	8003d4a <TIM_ITRx_SetConfig>
      break;
 80037f8:	e01b      	b.n	8003832 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6859      	ldr	r1, [r3, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	461a      	mov	r2, r3
 8003808:	f000 fa42 	bl	8003c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2140      	movs	r1, #64	; 0x40
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fa99 	bl	8003d4a <TIM_ITRx_SetConfig>
      break;
 8003818:	e00b      	b.n	8003832 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4619      	mov	r1, r3
 8003824:	4610      	mov	r0, r2
 8003826:	f000 fa90 	bl	8003d4a <TIM_ITRx_SetConfig>
        break;
 800382a:	e002      	b.n	8003832 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800382c:	bf00      	nop
 800382e:	e000      	b.n	8003832 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003830:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr

0800385e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr

08003870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr

08003882 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr
	...

080038a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a2d      	ldr	r2, [pc, #180]	; (8003970 <TIM_Base_SetConfig+0xc8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00f      	beq.n	80038e0 <TIM_Base_SetConfig+0x38>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c6:	d00b      	beq.n	80038e0 <TIM_Base_SetConfig+0x38>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a2a      	ldr	r2, [pc, #168]	; (8003974 <TIM_Base_SetConfig+0xcc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d007      	beq.n	80038e0 <TIM_Base_SetConfig+0x38>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a29      	ldr	r2, [pc, #164]	; (8003978 <TIM_Base_SetConfig+0xd0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d003      	beq.n	80038e0 <TIM_Base_SetConfig+0x38>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a28      	ldr	r2, [pc, #160]	; (800397c <TIM_Base_SetConfig+0xd4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d108      	bne.n	80038f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <TIM_Base_SetConfig+0xc8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00f      	beq.n	800391a <TIM_Base_SetConfig+0x72>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003900:	d00b      	beq.n	800391a <TIM_Base_SetConfig+0x72>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1b      	ldr	r2, [pc, #108]	; (8003974 <TIM_Base_SetConfig+0xcc>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d007      	beq.n	800391a <TIM_Base_SetConfig+0x72>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a1a      	ldr	r2, [pc, #104]	; (8003978 <TIM_Base_SetConfig+0xd0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d003      	beq.n	800391a <TIM_Base_SetConfig+0x72>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a19      	ldr	r2, [pc, #100]	; (800397c <TIM_Base_SetConfig+0xd4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d108      	bne.n	800392c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a07      	ldr	r2, [pc, #28]	; (8003970 <TIM_Base_SetConfig+0xc8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d103      	bne.n	8003960 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	615a      	str	r2, [r3, #20]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr
 8003970:	40012c00 	.word	0x40012c00
 8003974:	40000400 	.word	0x40000400
 8003978:	40000800 	.word	0x40000800
 800397c:	40000c00 	.word	0x40000c00

08003980 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	f023 0201 	bic.w	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0303 	bic.w	r3, r3, #3
 80039b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f023 0302 	bic.w	r3, r3, #2
 80039c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a1c      	ldr	r2, [pc, #112]	; (8003a48 <TIM_OC1_SetConfig+0xc8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d10c      	bne.n	80039f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f023 0308 	bic.w	r3, r3, #8
 80039e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f023 0304 	bic.w	r3, r3, #4
 80039f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a13      	ldr	r2, [pc, #76]	; (8003a48 <TIM_OC1_SetConfig+0xc8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d111      	bne.n	8003a22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	621a      	str	r2, [r3, #32]
}
 8003a3c:	bf00      	nop
 8003a3e:	371c      	adds	r7, #28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40012c00 	.word	0x40012c00

08003a4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	f023 0210 	bic.w	r2, r3, #16
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	021b      	lsls	r3, r3, #8
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f023 0320 	bic.w	r3, r3, #32
 8003a96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a1d      	ldr	r2, [pc, #116]	; (8003b1c <TIM_OC2_SetConfig+0xd0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d10d      	bne.n	8003ac8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ac6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a14      	ldr	r2, [pc, #80]	; (8003b1c <TIM_OC2_SetConfig+0xd0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d113      	bne.n	8003af8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ad6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ade:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	621a      	str	r2, [r3, #32]
}
 8003b12:	bf00      	nop
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr
 8003b1c:	40012c00 	.word	0x40012c00

08003b20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0303 	bic.w	r3, r3, #3
 8003b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a1d      	ldr	r2, [pc, #116]	; (8003bf0 <TIM_OC3_SetConfig+0xd0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d10d      	bne.n	8003b9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a14      	ldr	r2, [pc, #80]	; (8003bf0 <TIM_OC3_SetConfig+0xd0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d113      	bne.n	8003bca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	621a      	str	r2, [r3, #32]
}
 8003be4:	bf00      	nop
 8003be6:	371c      	adds	r7, #28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40012c00 	.word	0x40012c00

08003bf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	021b      	lsls	r3, r3, #8
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	031b      	lsls	r3, r3, #12
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a0f      	ldr	r2, [pc, #60]	; (8003c8c <TIM_OC4_SetConfig+0x98>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d109      	bne.n	8003c68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	019b      	lsls	r3, r3, #6
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	621a      	str	r2, [r3, #32]
}
 8003c82:	bf00      	nop
 8003c84:	371c      	adds	r7, #28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr
 8003c8c:	40012c00 	.word	0x40012c00

08003c90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f023 0201 	bic.w	r2, r3, #1
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f023 030a 	bic.w	r3, r3, #10
 8003ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	621a      	str	r2, [r3, #32]
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f023 0210 	bic.w	r2, r3, #16
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	031b      	lsls	r3, r3, #12
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	621a      	str	r2, [r3, #32]
}
 8003d40:	bf00      	nop
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr

08003d4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b085      	sub	sp, #20
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f043 0307 	orr.w	r3, r3, #7
 8003d6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	609a      	str	r2, [r3, #8]
}
 8003d74:	bf00      	nop
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr

08003d7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b087      	sub	sp, #28
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
 8003d8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	021a      	lsls	r2, r3, #8
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	431a      	orrs	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	609a      	str	r2, [r3, #8]
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e04b      	b.n	8003e6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a19      	ldr	r2, [pc, #100]	; (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d013      	beq.n	8003e40 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e20:	d00e      	beq.n	8003e40 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a15      	ldr	r2, [pc, #84]	; (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d009      	beq.n	8003e40 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a13      	ldr	r2, [pc, #76]	; (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d004      	beq.n	8003e40 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a12      	ldr	r2, [pc, #72]	; (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d10c      	bne.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40012c00 	.word	0x40012c00
 8003e7c:	40000400 	.word	0x40000400
 8003e80:	40000800 	.word	0x40000800
 8003e84:	40000c00 	.word	0x40000c00

08003e88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e03d      	b.n	8003f20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr

08003f2a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e03f      	b.n	8003fe0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d106      	bne.n	8003f7a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7fd f8b1 	bl	80010dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2224      	movs	r2, #36	; 0x24
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f90:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f904 	bl	80041a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fa6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fb6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fc6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08a      	sub	sp, #40	; 0x28
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b20      	cmp	r3, #32
 8004006:	d17c      	bne.n	8004102 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_UART_Transmit+0x2c>
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e075      	b.n	8004104 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_UART_Transmit+0x3e>
 8004022:	2302      	movs	r3, #2
 8004024:	e06e      	b.n	8004104 <HAL_UART_Transmit+0x11c>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2221      	movs	r2, #33	; 0x21
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800403c:	f7fd f9d2 	bl	80013e4 <HAL_GetTick>
 8004040:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	88fa      	ldrh	r2, [r7, #6]
 8004046:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004056:	d108      	bne.n	800406a <HAL_UART_Transmit+0x82>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d104      	bne.n	800406a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004060:	2300      	movs	r3, #0
 8004062:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	61bb      	str	r3, [r7, #24]
 8004068:	e003      	b.n	8004072 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800406e:	2300      	movs	r3, #0
 8004070:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800407a:	e02a      	b.n	80040d2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	2200      	movs	r2, #0
 8004084:	2180      	movs	r1, #128	; 0x80
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 f840 	bl	800410c <UART_WaitOnFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e036      	b.n	8004104 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10b      	bne.n	80040b4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040aa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	3302      	adds	r3, #2
 80040b0:	61bb      	str	r3, [r7, #24]
 80040b2:	e007      	b.n	80040c4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	781a      	ldrb	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	3301      	adds	r3, #1
 80040c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1cf      	bne.n	800407c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2200      	movs	r2, #0
 80040e4:	2140      	movs	r1, #64	; 0x40
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f810 	bl	800410c <UART_WaitOnFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e006      	b.n	8004104 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	e000      	b.n	8004104 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004102:	2302      	movs	r3, #2
  }
}
 8004104:	4618      	mov	r0, r3
 8004106:	3720      	adds	r7, #32
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411c:	e02c      	b.n	8004178 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d028      	beq.n	8004178 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <UART_WaitOnFlagUntilTimeout+0x30>
 800412c:	f7fd f95a 	bl	80013e4 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	429a      	cmp	r2, r3
 800413a:	d21d      	bcs.n	8004178 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800414a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0201 	bic.w	r2, r2, #1
 800415a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e00f      	b.n	8004198 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	4013      	ands	r3, r2
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	429a      	cmp	r2, r3
 8004186:	bf0c      	ite	eq
 8004188:	2301      	moveq	r3, #1
 800418a:	2300      	movne	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	461a      	mov	r2, r3
 8004190:	79fb      	ldrb	r3, [r7, #7]
 8004192:	429a      	cmp	r2, r3
 8004194:	d0c3      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80041da:	f023 030c 	bic.w	r3, r3, #12
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	430b      	orrs	r3, r1
 80041e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a2c      	ldr	r2, [pc, #176]	; (80042b4 <UART_SetConfig+0x114>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d103      	bne.n	8004210 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004208:	f7fe fef0 	bl	8002fec <HAL_RCC_GetPCLK2Freq>
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	e002      	b.n	8004216 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004210:	f7fe fed8 	bl	8002fc4 <HAL_RCC_GetPCLK1Freq>
 8004214:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	009a      	lsls	r2, r3, #2
 8004220:	441a      	add	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	fbb2 f3f3 	udiv	r3, r2, r3
 800422c:	4a22      	ldr	r2, [pc, #136]	; (80042b8 <UART_SetConfig+0x118>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	0119      	lsls	r1, r3, #4
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	009a      	lsls	r2, r3, #2
 8004240:	441a      	add	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	fbb2 f2f3 	udiv	r2, r2, r3
 800424c:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <UART_SetConfig+0x118>)
 800424e:	fba3 0302 	umull	r0, r3, r3, r2
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	2064      	movs	r0, #100	; 0x64
 8004256:	fb00 f303 	mul.w	r3, r0, r3
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	3332      	adds	r3, #50	; 0x32
 8004260:	4a15      	ldr	r2, [pc, #84]	; (80042b8 <UART_SetConfig+0x118>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	095b      	lsrs	r3, r3, #5
 8004268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800426c:	4419      	add	r1, r3
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	009a      	lsls	r2, r3, #2
 8004278:	441a      	add	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	fbb2 f2f3 	udiv	r2, r2, r3
 8004284:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <UART_SetConfig+0x118>)
 8004286:	fba3 0302 	umull	r0, r3, r3, r2
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	2064      	movs	r0, #100	; 0x64
 800428e:	fb00 f303 	mul.w	r3, r0, r3
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	3332      	adds	r3, #50	; 0x32
 8004298:	4a07      	ldr	r2, [pc, #28]	; (80042b8 <UART_SetConfig+0x118>)
 800429a:	fba2 2303 	umull	r2, r3, r2, r3
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	f003 020f 	and.w	r2, r3, #15
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	440a      	add	r2, r1
 80042aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40013800 	.word	0x40013800
 80042b8:	51eb851f 	.word	0x51eb851f

080042bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80042c0:	4904      	ldr	r1, [pc, #16]	; (80042d4 <MX_FATFS_Init+0x18>)
 80042c2:	4805      	ldr	r0, [pc, #20]	; (80042d8 <MX_FATFS_Init+0x1c>)
 80042c4:	f000 f8a6 	bl	8004414 <FATFS_LinkDriver>
 80042c8:	4603      	mov	r3, r0
 80042ca:	461a      	mov	r2, r3
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <MX_FATFS_Init+0x20>)
 80042ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80042d0:	bf00      	nop
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	20000180 	.word	0x20000180
 80042d8:	2000001c 	.word	0x2000001c
 80042dc:	20000184 	.word	0x20000184

080042e0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <USER_initialize+0x20>)
 80042ec:	2201      	movs	r2, #1
 80042ee:	701a      	strb	r2, [r3, #0]
    return Stat;
 80042f0:	4b03      	ldr	r3, [pc, #12]	; (8004300 <USER_initialize+0x20>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr
 8004300:	20000019 	.word	0x20000019

08004304 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800430e:	4b05      	ldr	r3, [pc, #20]	; (8004324 <USER_status+0x20>)
 8004310:	2201      	movs	r2, #1
 8004312:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004314:	4b03      	ldr	r3, [pc, #12]	; (8004324 <USER_status+0x20>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800431a:	4618      	mov	r0, r3
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	20000019 	.word	0x20000019

08004328 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	607a      	str	r2, [r7, #4]
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	4603      	mov	r3, r0
 8004336:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004338:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800433a:	4618      	mov	r0, r3
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr

08004344 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	607a      	str	r2, [r7, #4]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	4603      	mov	r3, r0
 8004352:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004354:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr

08004360 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	603a      	str	r2, [r7, #0]
 800436a:	71fb      	strb	r3, [r7, #7]
 800436c:	460b      	mov	r3, r1
 800436e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	73fb      	strb	r3, [r7, #15]
    return res;
 8004374:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr

08004380 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	4613      	mov	r3, r2
 800438c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800438e:	2301      	movs	r3, #1
 8004390:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8004396:	4b1e      	ldr	r3, [pc, #120]	; (8004410 <FATFS_LinkDriverEx+0x90>)
 8004398:	7a5b      	ldrb	r3, [r3, #9]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b01      	cmp	r3, #1
 800439e:	d831      	bhi.n	8004404 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80043a0:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <FATFS_LinkDriverEx+0x90>)
 80043a2:	7a5b      	ldrb	r3, [r3, #9]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	461a      	mov	r2, r3
 80043a8:	4b19      	ldr	r3, [pc, #100]	; (8004410 <FATFS_LinkDriverEx+0x90>)
 80043aa:	2100      	movs	r1, #0
 80043ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80043ae:	4b18      	ldr	r3, [pc, #96]	; (8004410 <FATFS_LinkDriverEx+0x90>)
 80043b0:	7a5b      	ldrb	r3, [r3, #9]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	4a16      	ldr	r2, [pc, #88]	; (8004410 <FATFS_LinkDriverEx+0x90>)
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80043be:	4b14      	ldr	r3, [pc, #80]	; (8004410 <FATFS_LinkDriverEx+0x90>)
 80043c0:	7a5b      	ldrb	r3, [r3, #9]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <FATFS_LinkDriverEx+0x90>)
 80043c8:	4413      	add	r3, r2
 80043ca:	79fa      	ldrb	r2, [r7, #7]
 80043cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80043ce:	4b10      	ldr	r3, [pc, #64]	; (8004410 <FATFS_LinkDriverEx+0x90>)
 80043d0:	7a5b      	ldrb	r3, [r3, #9]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	b2d1      	uxtb	r1, r2
 80043d8:	4a0d      	ldr	r2, [pc, #52]	; (8004410 <FATFS_LinkDriverEx+0x90>)
 80043da:	7251      	strb	r1, [r2, #9]
 80043dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80043de:	7dbb      	ldrb	r3, [r7, #22]
 80043e0:	3330      	adds	r3, #48	; 0x30
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	3301      	adds	r3, #1
 80043ec:	223a      	movs	r2, #58	; 0x3a
 80043ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	3302      	adds	r3, #2
 80043f4:	222f      	movs	r2, #47	; 0x2f
 80043f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	3303      	adds	r3, #3
 80043fc:	2200      	movs	r2, #0
 80043fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8004404:	7dfb      	ldrb	r3, [r7, #23]
}
 8004406:	4618      	mov	r0, r3
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr
 8004410:	2000004c 	.word	0x2000004c

08004414 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800441e:	2200      	movs	r2, #0
 8004420:	6839      	ldr	r1, [r7, #0]
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7ff ffac 	bl	8004380 <FATFS_LinkDriverEx>
 8004428:	4603      	mov	r3, r0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <__libc_init_array>:
 8004434:	b570      	push	{r4, r5, r6, lr}
 8004436:	2600      	movs	r6, #0
 8004438:	4d0c      	ldr	r5, [pc, #48]	; (800446c <__libc_init_array+0x38>)
 800443a:	4c0d      	ldr	r4, [pc, #52]	; (8004470 <__libc_init_array+0x3c>)
 800443c:	1b64      	subs	r4, r4, r5
 800443e:	10a4      	asrs	r4, r4, #2
 8004440:	42a6      	cmp	r6, r4
 8004442:	d109      	bne.n	8004458 <__libc_init_array+0x24>
 8004444:	f000 f822 	bl	800448c <_init>
 8004448:	2600      	movs	r6, #0
 800444a:	4d0a      	ldr	r5, [pc, #40]	; (8004474 <__libc_init_array+0x40>)
 800444c:	4c0a      	ldr	r4, [pc, #40]	; (8004478 <__libc_init_array+0x44>)
 800444e:	1b64      	subs	r4, r4, r5
 8004450:	10a4      	asrs	r4, r4, #2
 8004452:	42a6      	cmp	r6, r4
 8004454:	d105      	bne.n	8004462 <__libc_init_array+0x2e>
 8004456:	bd70      	pop	{r4, r5, r6, pc}
 8004458:	f855 3b04 	ldr.w	r3, [r5], #4
 800445c:	4798      	blx	r3
 800445e:	3601      	adds	r6, #1
 8004460:	e7ee      	b.n	8004440 <__libc_init_array+0xc>
 8004462:	f855 3b04 	ldr.w	r3, [r5], #4
 8004466:	4798      	blx	r3
 8004468:	3601      	adds	r6, #1
 800446a:	e7f2      	b.n	8004452 <__libc_init_array+0x1e>
 800446c:	08004c9c 	.word	0x08004c9c
 8004470:	08004c9c 	.word	0x08004c9c
 8004474:	08004c9c 	.word	0x08004c9c
 8004478:	08004ca0 	.word	0x08004ca0

0800447c <memset>:
 800447c:	4603      	mov	r3, r0
 800447e:	4402      	add	r2, r0
 8004480:	4293      	cmp	r3, r2
 8004482:	d100      	bne.n	8004486 <memset+0xa>
 8004484:	4770      	bx	lr
 8004486:	f803 1b01 	strb.w	r1, [r3], #1
 800448a:	e7f9      	b.n	8004480 <memset+0x4>

0800448c <_init>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	bf00      	nop
 8004490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004492:	bc08      	pop	{r3}
 8004494:	469e      	mov	lr, r3
 8004496:	4770      	bx	lr

08004498 <_fini>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	bf00      	nop
 800449c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449e:	bc08      	pop	{r3}
 80044a0:	469e      	mov	lr, r3
 80044a2:	4770      	bx	lr
